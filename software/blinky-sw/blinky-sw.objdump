
blinky-sw.elf:     file format elf32-littlenios2
blinky-sw.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010230

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00006438 memsz 0x00006438 flags r-x
    LOAD off    0x00007458 vaddr 0x00016458 paddr 0x00017efc align 2**12
         filesz 0x00001aa4 memsz 0x00001aa4 flags rw-
    LOAD off    0x000099a0 vaddr 0x000199a0 paddr 0x000199a0 align 2**12
         filesz 0x00000000 memsz 0x00000230 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000061cc  00010230  00010230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000005c  000163fc  000163fc  000073fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aa4  00016458  00017efc  00007458  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000230  000199a0  000199a0  000099a0  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_ram   00000000  00019bd0  00019bd0  00008efc  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00008efc  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000aa8  00000000  00000000  00008f20  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00017d91  00000000  00000000  000099c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00006643  00000000  00000000  00021759  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006ed3  00000000  00000000  00027d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001a78  00000000  00000000  0002ec70  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002a81  00000000  00000000  000306e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004f14  00000000  00000000  00033169  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00038080  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000006e0  00000000  00000000  00038090  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0003b08a  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0003b08d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0003b090  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0003b091  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0003b092  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0003b09b  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0003b0a4  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000006  00000000  00000000  0003b0ad  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000003e  00000000  00000000  0003b0b3  2**0
                  CONTENTS, READONLY
 26 .jdi          00004428  00000000  00000000  0003b0f1  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0007d354  00000000  00000000  0003f519  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010230 l    d  .text	00000000 .text
000163fc l    d  .rodata	00000000 .rodata
00016458 l    d  .rwdata	00000000 .rwdata
000199a0 l    d  .bss	00000000 .bss
00019bd0 l    d  .onchip_ram	00000000 .onchip_ram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../blinky-sw_bsp//obj/HAL/src/crt0.o
00010268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 blinky.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 itoa.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 utoa.c
00000000 l    df *ABS*	00000000 findfp.c
0001118c l     F .text	00000008 __fp_unlock
000111a0 l     F .text	0000019c __sinit.part.1
0001133c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0001648c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
00013c78 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00013d8c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00013db8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00013eac l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00013f94 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00014080 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_read.c
00014298 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00017eec l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0001450c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00014648 l     F .text	00000034 alt_dev_reg
00016e60 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00014920 l     F .text	0000020c altera_avalon_jtag_uart_irq
00014b2c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000152b0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00015710 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00015870 l     F .text	0000003c alt_get_errno
000158ac l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
000199d4 g     O .bss	00000004 alt_instruction_exception_handler
000102fc g     F .text	00000020 init_RLED
0001066c g     F .text	0000003c dealerBust
00013bfc g     F .text	00000054 _isatty_r
00014198 g     F .text	0000007c alt_main
00010454 g     F .text	00000020 dispInstructions
00010ec4 g     F .text	000000c0 _puts_r
000103dc g     F .text	00000020 init_Keys
00019ad0 g     O .bss	00000100 alt_irq
00013924 g     F .text	00000060 _lseek_r
00017efc g       *ABS*	00000000 __flash_rwdata_start
000109d8 g     F .text	000000f0 sevenSegmentConversion
00019bd0 g       *ABS*	00000000 __alt_heap_start
00012ed8 g     F .text	0000005c __sseek
000114ec g     F .text	00000010 __sinit
00011344 g     F .text	00000078 __sfmoreglue
00014238 g     F .text	00000024 __malloc_unlock
000125c4 g     F .text	0000015c memmove
000114d4 g     F .text	00000018 _cleanup
000104ec g     F .text	00000104 dealInitialCards
00016458 g     O .rwdata	00000034 cardValues
0001041c g     F .text	00000020 readSwitches
0001425c g     F .text	0000003c alt_putstr
00015c98 g     F .text	00000024 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
00013ba0 g     F .text	0000005c _fstat_r
000199b8 g     O .bss	00000004 errno
00012e54 g     F .text	00000008 __seofread
000199a8 g     O .bss	00000004 gamesPlayed
00010804 g     F .text	0000005c resetDeck
000199c0 g     O .bss	00000004 alt_argv
0001fec0 g       *ABS*	00000000 _gp
00016ce0 g     O .rwdata	00000180 alt_fd_list
00015cbc g     F .text	00000090 alt_find_dev
0001247c g     F .text	00000148 memcpy
00010c30 g     F .text	00000074 stay
00011194 g     F .text	0000000c _cleanup_r
000108c0 g     F .text	0000008c displayPlayerSum
000157f4 g     F .text	0000007c alt_io_redirect
000163fc g       *ABS*	00000000 __DTOR_END__
00010ac8 g     F .text	0000006c endRound
00010f84 g     F .text	00000014 puts
00015f18 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00014d24 g     F .text	0000021c altera_avalon_jtag_uart_read
00010d9c g     F .text	00000064 .hidden __udivsi3
00013ee8 g     F .text	000000ac isatty
000199b4 g     O .bss	00000004 __malloc_top_pad
00010ec0 g     F .text	00000004 itoa
0001153c g     F .text	000004c8 __sfvwrite_r
000103fc g     F .text	00000020 init_LCD
00012dac g     F .text	00000054 _sbrk_r
00013b40 g     F .text	00000060 _read_r
00017ee4 g     O .rwdata	00000004 alt_max_fd
00013144 g     F .text	000000f0 _fclose_r
000134c0 g     F .text	00000030 fflush
000199b0 g     O .bss	00000004 __malloc_max_sbrked_mem
00010498 g     F .text	00000034 gameInitialization
000140bc g     F .text	000000dc lseek
00017ec4 g     O .rwdata	00000004 _global_impure_ptr
00012848 g     F .text	00000564 _realloc_r
00019bd0 g       *ABS*	00000000 __bss_end
00015620 g     F .text	000000f0 alt_iic_isr_register
00015b90 g     F .text	00000108 alt_tick
0001150c g     F .text	00000018 __fp_lock_all
000155d4 g     F .text	0000004c alt_ic_irq_enabled
000107c0 g     F .text	00000044 updateDeck
00015af4 g     F .text	0000009c alt_alarm_stop
000199c8 g     O .bss	00000004 alt_irq_active
000100fc g     F .exceptions	000000d4 alt_irq_handler
00016cb8 g     O .rwdata	00000028 alt_dev_null
00010610 g     F .text	0000003c playerBust
00015290 g     F .text	00000020 alt_dcache_flush_all
00011188 g     F .text	00000004 utoa
000199d8 g     O .bss	000000d0 cardDeck
00017efc g       *ABS*	00000000 __ram_rwdata_end
00017edc g     O .rwdata	00000008 alt_dev_list
00014548 g     F .text	00000100 write
00016458 g       *ABS*	00000000 __ram_rodata_end
00013df4 g     F .text	000000b8 fstat
00010860 g     F .text	00000060 translateCardValue
0001064c g     F .text	00000020 dealerTurn
00010e00 g     F .text	00000058 .hidden __umodsi3
00019bd0 g       *ABS*	00000000 end
00010e58 g     F .text	00000068 __itoa
00014860 g     F .text	000000c0 altera_avalon_jtag_uart_init
000101d0 g     F .exceptions	00000060 alt_instruction_exception_entry
000163fc g       *ABS*	00000000 __CTOR_LIST__
00020000 g       *ABS*	00000000 __alt_stack_pointer
00014f40 g     F .text	00000224 altera_avalon_jtag_uart_write
000114fc g     F .text	00000004 __sfp_lock_acquire
00012398 g     F .text	000000e4 memchr
000199a0 g     O .bss	00000004 dealerSum
00013614 g     F .text	00000310 _free_r
00016248 g     F .text	00000180 __call_exitprocs
00017ecc g     O .rwdata	00000004 __malloc_sbrk_base
00010230 g     F .text	0000003c _start
000199cc g     O .bss	00000004 _alt_tick_rate
000199d0 g     O .bss	00000004 _alt_nticks
0001043c g     F .text	00000018 play
000142d4 g     F .text	00000104 read
000103bc g     F .text	00000020 init_Switches
000146b4 g     F .text	00000048 alt_sys_init
00016130 g     F .text	00000118 __register_exitproc
000106a8 g     F .text	00000088 determineResult
00014bcc g     F .text	00000068 altera_avalon_jtag_uart_close
00013c50 g     F .text	00000028 .hidden __mulsi3
00016458 g       *ABS*	00000000 __ram_rwdata_start
000163fc g       *ABS*	00000000 __ram_rodata_start
00019aa8 g     O .bss	00000028 __malloc_current_mallinfo
000146fc g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00015e54 g     F .text	000000c4 alt_get_fd
00010474 g     F .text	00000024 dispBankroll
000130f0 g     F .text	00000054 _close_r
000160b4 g     F .text	0000007c memcmp
000147bc g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00019bd0 g       *ABS*	00000000 __alt_stack_base
0001480c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00012f9c g     F .text	00000154 __swsetup_r
000113bc g     F .text	00000118 __sfp
000168b0 g     O .rwdata	00000408 __malloc_av_
00011508 g     F .text	00000004 __sinit_lock_release
00012e00 g     F .text	00000054 __sread
00015d4c g     F .text	00000108 alt_find_file
000152ec g     F .text	000000a4 alt_dev_llist_insert
00014214 g     F .text	00000024 __malloc_lock
0001445c g     F .text	000000b0 sbrk
00013464 g     F .text	0000005c _fflush_r
00011030 g     F .text	00000158 __utoa
000199a0 g       *ABS*	00000000 __bss_start
00012720 g     F .text	00000128 memset
0001026c g     F .text	00000070 main
000199c4 g     O .bss	00000004 alt_envp
000199ac g     O .bss	00000004 __malloc_max_total_mem
0001475c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00012f34 g     F .text	00000008 __sclose
00020000 g       *ABS*	00000000 __alt_heap_limit
00013234 g     F .text	00000014 fclose
00011b8c g     F .text	0000080c _malloc_r
00017ee8 g     O .rwdata	00000004 alt_errno
000102dc g     F .text	00000020 init_GLED
000104cc g     F .text	00000020 playerBet
00011a04 g     F .text	000000c4 _fwalk
00010ca4 g     F .text	00000084 .hidden __divsi3
000134f0 g     F .text	00000124 _malloc_trim_r
000163fc g       *ABS*	00000000 __CTOR_END__
00010b34 g     F .text	000000fc hit
000163fc g       *ABS*	00000000 __flash_rodata_start
000163fc g       *ABS*	00000000 __DTOR_LIST__
0001094c g     F .text	0000008c displayDealerSum
00010730 g     F .text	00000044 delay
0001467c g     F .text	00000038 alt_irq_init
000143d8 g     F .text	00000084 alt_release_fd
00015fb4 g     F .text	00000014 atexit
00012f3c g     F .text	00000060 _write_r
000199a4 g     O .bss	00000004 playerSum
00017ec8 g     O .rwdata	00000004 _impure_ptr
000199bc g     O .bss	00000004 alt_argc
00013248 g     F .text	0000021c __sflush_r
000153f0 g     F .text	00000060 _do_dtors
0001031c g     F .text	000000a0 init_SevenSeg
00010020 g       .exceptions	00000000 alt_irq_entry
00011524 g     F .text	00000018 __fp_unlock_all
00017ed4 g     O .rwdata	00000008 alt_fs_list
00017ec0 g     O .rwdata	00000004 bankRoll
00010020 g       *ABS*	00000000 __ram_exceptions_start
00015470 g     F .text	00000050 alt_ic_isr_register
00017efc g       *ABS*	00000000 _edata
00019bd0 g       *ABS*	00000000 _end
000105f0 g     F .text	00000020 playerTurn
00010230 g       *ABS*	00000000 __ram_exceptions_end
00014c34 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00016000 g     F .text	0000009c _fputs_r
00015548 g     F .text	0000008c alt_ic_irq_disable
00012e5c g     F .text	0000007c __swrite
00017ed0 g     O .rwdata	00000004 __malloc_trim_threshold
00015fc8 g     F .text	00000038 exit
00011ac8 g     F .text	000000c4 _fwalk_reent
00010d28 g     F .text	00000074 .hidden __modsi3
00020000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00011500 g     F .text	00000004 __sfp_lock_release
00010774 g     F .text	0000004c generateRandomCard
00010000 g       *ABS*	00000000 __alt_mem_onchip_ram
000163c8 g     F .text	00000034 _exit
00015164 g     F .text	0000012c alt_alarm_start
00013984 g     F .text	000001bc __smakebuf_r
00010f98 g     F .text	00000098 strlen
00015998 g     F .text	0000015c open
00015450 g     F .text	00000020 alt_icache_flush_all
0001609c g     F .text	00000018 fputs
00017ef0 g     O .rwdata	00000004 alt_priority_mask
000154c0 g     F .text	00000088 alt_ic_irq_enable
00017ef4 g     O .rwdata	00000008 alt_alarm_list
00015390 g     F .text	00000060 _do_ctors
00013cb4 g     F .text	000000d8 close
00013ffc g     F .text	00000084 alt_load
00011504 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08408c14 	ori	at,at,560
    jmp r1
   10008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	00101d00 	call	101d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defff904 	addi	sp,sp,-28
   10100:	dfc00615 	stw	ra,24(sp)
   10104:	df000515 	stw	fp,20(sp)
   10108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   1010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10110:	0005313a 	rdctl	r2,ipending
   10114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   10118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   1011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   10120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10124:	00800044 	movi	r2,1
   10128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1012c:	e0fffb17 	ldw	r3,-20(fp)
   10130:	e0bffc17 	ldw	r2,-16(fp)
   10134:	1884703a 	and	r2,r3,r2
   10138:	10001426 	beq	r2,zero,1018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1013c:	008000b4 	movhi	r2,2
   10140:	10a6b404 	addi	r2,r2,-25904
   10144:	e0fffd17 	ldw	r3,-12(fp)
   10148:	180690fa 	slli	r3,r3,3
   1014c:	10c5883a 	add	r2,r2,r3
   10150:	10c00017 	ldw	r3,0(r2)
   10154:	008000b4 	movhi	r2,2
   10158:	10a6b404 	addi	r2,r2,-25904
   1015c:	e13ffd17 	ldw	r4,-12(fp)
   10160:	200890fa 	slli	r4,r4,3
   10164:	1105883a 	add	r2,r2,r4
   10168:	10800104 	addi	r2,r2,4
   1016c:	10800017 	ldw	r2,0(r2)
   10170:	1009883a 	mov	r4,r2
   10174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   10178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   1017c:	0005313a 	rdctl	r2,ipending
   10180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   10184:	e0bfff17 	ldw	r2,-4(fp)
   10188:	00000706 	br	101a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   1018c:	e0bffc17 	ldw	r2,-16(fp)
   10190:	1085883a 	add	r2,r2,r2
   10194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   10198:	e0bffd17 	ldw	r2,-12(fp)
   1019c:	10800044 	addi	r2,r2,1
   101a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   101a4:	003fe106 	br	1012c <__alt_data_end+0xffff012c>

    active = alt_irq_pending ();
   101a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   101ac:	e0bffb17 	ldw	r2,-20(fp)
   101b0:	103fdb1e 	bne	r2,zero,10120 <__alt_data_end+0xffff0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   101b4:	0001883a 	nop
}
   101b8:	0001883a 	nop
   101bc:	e037883a 	mov	sp,fp
   101c0:	dfc00117 	ldw	ra,4(sp)
   101c4:	df000017 	ldw	fp,0(sp)
   101c8:	dec00204 	addi	sp,sp,8
   101cc:	f800283a 	ret

000101d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   101d0:	defffb04 	addi	sp,sp,-20
   101d4:	dfc00415 	stw	ra,16(sp)
   101d8:	df000315 	stw	fp,12(sp)
   101dc:	df000304 	addi	fp,sp,12
   101e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   101e4:	00bfffc4 	movi	r2,-1
   101e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   101ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   101f0:	d0a6c517 	ldw	r2,-25836(gp)
   101f4:	10000726 	beq	r2,zero,10214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   101f8:	d0a6c517 	ldw	r2,-25836(gp)
   101fc:	e0fffd17 	ldw	r3,-12(fp)
   10200:	e1bffe17 	ldw	r6,-8(fp)
   10204:	e17fff17 	ldw	r5,-4(fp)
   10208:	1809883a 	mov	r4,r3
   1020c:	103ee83a 	callr	r2
   10210:	00000206 	br	1021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   10218:	0005883a 	mov	r2,zero
}
   1021c:	e037883a 	mov	sp,fp
   10220:	dfc00117 	ldw	ra,4(sp)
   10224:	df000017 	ldw	fp,0(sp)
   10228:	dec00204 	addi	sp,sp,8
   1022c:	f800283a 	ret

Disassembly of section .text:

00010230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10230:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   10234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   10238:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1023c:	d6bfb014 	ori	gp,gp,65216
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10240:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10244:	10a66814 	ori	r2,r2,39328

    movhi r3, %hi(__bss_end)
   10248:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1024c:	18e6f414 	ori	r3,r3,39888

    beq r2, r3, 1f
   10250:	10c00326 	beq	r2,r3,10260 <_start+0x30>

0:
    stw zero, (r2)
   10254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   1025c:	10fffd36 	bltu	r2,r3,10254 <__alt_data_end+0xffff0254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10260:	0013ffc0 	call	13ffc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10264:	00141980 	call	14198 <alt_main>

00010268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10268:	003fff06 	br	10268 <__alt_data_end+0xffff0268>

0001026c <main>:
// Player Actions
void hit(void); // KEY3
void stay(void); // KEY2

int main()
{
   1026c:	defffa04 	addi	sp,sp,-24
   10270:	dfc00515 	stw	ra,20(sp)
   10274:	df000415 	stw	fp,16(sp)
   10278:	df000404 	addi	fp,sp,16
	alt_putstr("Ciao from Nios II!\n");
   1027c:	01000074 	movhi	r4,1
   10280:	2118ff04 	addi	r4,r4,25596
   10284:	001425c0 	call	1425c <alt_putstr>
	printf("start program\n");
   10288:	01000074 	movhi	r4,1
   1028c:	21190404 	addi	r4,r4,25616
   10290:	0010f840 	call	10f84 <puts>
	int KEY_PRESS;
	// int led_pattern=0x0;
	init_SevenSeg();
   10294:	001031c0 	call	1031c <init_SevenSeg>
	char msg[10];

	while(1) {
		KEY_PRESS = IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE);
   10298:	008000b4 	movhi	r2,2
   1029c:	10840004 	addi	r2,r2,4096
   102a0:	10800037 	ldwio	r2,0(r2)
   102a4:	e0bffc15 	stw	r2,-16(fp)
//		itoa(KEY_PRESS, msg, 10);
//		alt_putstr(msg);
//		alt_putstr("\n");
//		delay(50000);

		if (KEY_PRESS == 3) {
   102a8:	e0bffc17 	ldw	r2,-16(fp)
   102ac:	108000d8 	cmpnei	r2,r2,3
   102b0:	103ff91e 	bne	r2,zero,10298 <__alt_data_end+0xffff0298>
			while (KEY_PRESS == 3){
   102b4:	00000106 	br	102bc <main+0x50>
				continue;
   102b8:	0001883a 	nop
//		alt_putstr(msg);
//		alt_putstr("\n");
//		delay(50000);

		if (KEY_PRESS == 3) {
			while (KEY_PRESS == 3){
   102bc:	e0bffc17 	ldw	r2,-16(fp)
   102c0:	108000e0 	cmpeqi	r2,r2,3
   102c4:	103ffc1e 	bne	r2,zero,102b8 <__alt_data_end+0xffff02b8>
				continue;
			}
			hit();
   102c8:	0010b340 	call	10b34 <hit>
			delay(100000);
   102cc:	010000b4 	movhi	r4,2
   102d0:	2121a804 	addi	r4,r4,-31072
   102d4:	00107300 	call	10730 <delay>
		}
	}
   102d8:	003fef06 	br	10298 <__alt_data_end+0xffff0298>

000102dc <init_GLED>:
}

/************************************************************
 Hardware Initialization
*************************************************************/ 
void init_GLED(void) {
   102dc:	deffff04 	addi	sp,sp,-4
   102e0:	df000015 	stw	fp,0(sp)
   102e4:	d839883a 	mov	fp,sp
	// Initialize to Match KEYS (specifically the green led that is in the middle of each key)
	return;
   102e8:	0001883a 	nop
} 
   102ec:	e037883a 	mov	sp,fp
   102f0:	df000017 	ldw	fp,0(sp)
   102f4:	dec00104 	addi	sp,sp,4
   102f8:	f800283a 	ret

000102fc <init_RLED>:
void init_RLED(void) {
   102fc:	deffff04 	addi	sp,sp,-4
   10300:	df000015 	stw	fp,0(sp)
   10304:	d839883a 	mov	fp,sp
	// Initialize to Match SWITCHES
	return;
   10308:	0001883a 	nop
}
   1030c:	e037883a 	mov	sp,fp
   10310:	df000017 	ldw	fp,0(sp)
   10314:	dec00104 	addi	sp,sp,4
   10318:	f800283a 	ret

0001031c <init_SevenSeg>:
void init_SevenSeg(void) {
   1031c:	deffff04 	addi	sp,sp,-4
   10320:	df000015 	stw	fp,0(sp)
   10324:	d839883a 	mov	fp,sp
	IOWR_ALTERA_AVALON_PIO_DATA(SEV_SEG_0_BASE, 191);
   10328:	00c02fc4 	movi	r3,191
   1032c:	008000b4 	movhi	r2,2
   10330:	10842c04 	addi	r2,r2,4272
   10334:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(SEV_SEG_1_BASE, 191);
   10338:	00c02fc4 	movi	r3,191
   1033c:	008000b4 	movhi	r2,2
   10340:	10842404 	addi	r2,r2,4240
   10344:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(SEV_SEG_2_BASE, 191);
   10348:	00c02fc4 	movi	r3,191
   1034c:	008000b4 	movhi	r2,2
   10350:	10842004 	addi	r2,r2,4224
   10354:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(SEV_SEG_3_BASE, 191);
   10358:	00c02fc4 	movi	r3,191
   1035c:	008000b4 	movhi	r2,2
   10360:	10841c04 	addi	r2,r2,4208
   10364:	10c00035 	stwio	r3,0(r2)

	IOWR_ALTERA_AVALON_PIO_DATA(SEV_SEG_4_BASE, 0xC7);
   10368:	00c031c4 	movi	r3,199
   1036c:	008000b4 	movhi	r2,2
   10370:	10841804 	addi	r2,r2,4192
   10374:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(SEV_SEG_5_BASE, 0xA1);
   10378:	00c02844 	movi	r3,161
   1037c:	008000b4 	movhi	r2,2
   10380:	10841404 	addi	r2,r2,4176
   10384:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(SEV_SEG_6_BASE, 0xC7);
   10388:	00c031c4 	movi	r3,199
   1038c:	008000b4 	movhi	r2,2
   10390:	10841004 	addi	r2,r2,4160
   10394:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(SEV_SEG_7_BASE, 0x8C);
   10398:	00c02304 	movi	r3,140
   1039c:	008000b4 	movhi	r2,2
   103a0:	10840c04 	addi	r2,r2,4144
   103a4:	10c00035 	stwio	r3,0(r2)
	return;
   103a8:	0001883a 	nop
} 
   103ac:	e037883a 	mov	sp,fp
   103b0:	df000017 	ldw	fp,0(sp)
   103b4:	dec00104 	addi	sp,sp,4
   103b8:	f800283a 	ret

000103bc <init_Switches>:
void init_Switches(void) {
   103bc:	deffff04 	addi	sp,sp,-4
   103c0:	df000015 	stw	fp,0(sp)
   103c4:	d839883a 	mov	fp,sp
	// NOTSURE IF WE NEED THIS
	return;
   103c8:	0001883a 	nop
}
   103cc:	e037883a 	mov	sp,fp
   103d0:	df000017 	ldw	fp,0(sp)
   103d4:	dec00104 	addi	sp,sp,4
   103d8:	f800283a 	ret

000103dc <init_Keys>:
void init_Keys(void) {
   103dc:	deffff04 	addi	sp,sp,-4
   103e0:	df000015 	stw	fp,0(sp)
   103e4:	d839883a 	mov	fp,sp
	// NOTSURE IF WE NEED THIS
	return;
   103e8:	0001883a 	nop
}
   103ec:	e037883a 	mov	sp,fp
   103f0:	df000017 	ldw	fp,0(sp)
   103f4:	dec00104 	addi	sp,sp,4
   103f8:	f800283a 	ret

000103fc <init_LCD>:
void init_LCD(void) {
   103fc:	deffff04 	addi	sp,sp,-4
   10400:	df000015 	stw	fp,0(sp)
   10404:	d839883a 	mov	fp,sp
	// TBD
	return;
   10408:	0001883a 	nop
}
   1040c:	e037883a 	mov	sp,fp
   10410:	df000017 	ldw	fp,0(sp)
   10414:	dec00104 	addi	sp,sp,4
   10418:	f800283a 	ret

0001041c <readSwitches>:


/************************************************************
 Game State
*************************************************************/ 
void readSwitches(void) {
   1041c:	deffff04 	addi	sp,sp,-4
   10420:	df000015 	stw	fp,0(sp)
   10424:	d839883a 	mov	fp,sp
	// play if SW0 = 1
	// display instructions if SW1 = 1 
	// display bankroll if SW2 = 1
	return;
   10428:	0001883a 	nop
}
   1042c:	e037883a 	mov	sp,fp
   10430:	df000017 	ldw	fp,0(sp)
   10434:	dec00104 	addi	sp,sp,4
   10438:	f800283a 	ret

0001043c <play>:
void play(void) {
   1043c:	defffe04 	addi	sp,sp,-8
   10440:	dfc00115 	stw	ra,4(sp)
   10444:	df000015 	stw	fp,0(sp)
   10448:	d839883a 	mov	fp,sp
	gameInitialization(); 
   1044c:	00104980 	call	10498 <gameInitialization>
		// Player Turn
		// Player Bust or Dealer Turn
		// Dealer Bust or Compare Sums
		// Update Bankroll
		// Reset Deck or Begin Next Round
	}
   10450:	003fff06 	br	10450 <__alt_data_end+0xffff0450>

00010454 <dispInstructions>:
} 
void dispInstructions(void) {
   10454:	deffff04 	addi	sp,sp,-4
   10458:	df000015 	stw	fp,0(sp)
   1045c:	d839883a 	mov	fp,sp
	// DISPLAY TO LCD
	return;
   10460:	0001883a 	nop
} 
   10464:	e037883a 	mov	sp,fp
   10468:	df000017 	ldw	fp,0(sp)
   1046c:	dec00104 	addi	sp,sp,4
   10470:	f800283a 	ret

00010474 <dispBankroll>:
void dispBankroll(int bankRoll) {
   10474:	defffe04 	addi	sp,sp,-8
   10478:	df000115 	stw	fp,4(sp)
   1047c:	df000104 	addi	fp,sp,4
   10480:	e13fff15 	stw	r4,-4(fp)
	// DISPLAY TO LCD
	return;
   10484:	0001883a 	nop
} 
   10488:	e037883a 	mov	sp,fp
   1048c:	df000017 	ldw	fp,0(sp)
   10490:	dec00104 	addi	sp,sp,4
   10494:	f800283a 	ret

00010498 <gameInitialization>:


/************************************************************
 Game Flow
*************************************************************/ 
void gameInitialization(void) {
   10498:	deffff04 	addi	sp,sp,-4
   1049c:	df000015 	stw	fp,0(sp)
   104a0:	d839883a 	mov	fp,sp
	bankRoll = 1000;
   104a4:	0080fa04 	movi	r2,1000
   104a8:	d0a00015 	stw	r2,-32768(gp)
	dealerSum = 0; 
   104ac:	d026b815 	stw	zero,-25888(gp)
	playerSum = 0; 
   104b0:	d026b915 	stw	zero,-25884(gp)
	gamesPlayed = 0; 
   104b4:	d026ba15 	stw	zero,-25880(gp)
}  
   104b8:	0001883a 	nop
   104bc:	e037883a 	mov	sp,fp
   104c0:	df000017 	ldw	fp,0(sp)
   104c4:	dec00104 	addi	sp,sp,4
   104c8:	f800283a 	ret

000104cc <playerBet>:
void playerBet(void) {
   104cc:	deffff04 	addi	sp,sp,-4
   104d0:	df000015 	stw	fp,0(sp)
   104d4:	d839883a 	mov	fp,sp
	// Wait for KEY0 to be pressed
	// Read Values on Switch
	// Translate Values to DEC.
	return;
   104d8:	0001883a 	nop
} 
   104dc:	e037883a 	mov	sp,fp
   104e0:	df000017 	ldw	fp,0(sp)
   104e4:	dec00104 	addi	sp,sp,4
   104e8:	f800283a 	ret

000104ec <dealInitialCards>:
void dealInitialCards(void) {
   104ec:	defffb04 	addi	sp,sp,-20
   104f0:	dfc00415 	stw	ra,16(sp)
   104f4:	df000315 	stw	fp,12(sp)
   104f8:	df000304 	addi	fp,sp,12
	// Dealer First Card Shown
	resetDeck(); 
   104fc:	00108040 	call	10804 <resetDeck>
	int tempCard = generateRandomCard(); 
   10500:	00107740 	call	10774 <generateRandomCard>
   10504:	e0bffd15 	stw	r2,-12(fp)
	while(cardDeck[tempCard] == 1) {
   10508:	00000206 	br	10514 <dealInitialCards+0x28>
		tempCard = generateRandomCard(); 
   1050c:	00107740 	call	10774 <generateRandomCard>
   10510:	e0bffd15 	stw	r2,-12(fp)
} 
void dealInitialCards(void) {
	// Dealer First Card Shown
	resetDeck(); 
	int tempCard = generateRandomCard(); 
	while(cardDeck[tempCard] == 1) {
   10514:	008000b4 	movhi	r2,2
   10518:	10a67604 	addi	r2,r2,-26152
   1051c:	e0fffd17 	ldw	r3,-12(fp)
   10520:	18c7883a 	add	r3,r3,r3
   10524:	18c7883a 	add	r3,r3,r3
   10528:	10c5883a 	add	r2,r2,r3
   1052c:	10800017 	ldw	r2,0(r2)
   10530:	10800060 	cmpeqi	r2,r2,1
   10534:	103ff51e 	bne	r2,zero,1050c <__alt_data_end+0xffff050c>
		tempCard = generateRandomCard(); 
	}
	updateDeck(tempCard);
   10538:	e13ffd17 	ldw	r4,-12(fp)
   1053c:	00107c00 	call	107c0 <updateDeck>
	int cardValue = translateCardValue(tempCard);
   10540:	e13ffd17 	ldw	r4,-12(fp)
   10544:	00108600 	call	10860 <translateCardValue>
   10548:	e0bfff15 	stw	r2,-4(fp)
	dealerSum = dealerSum + cardValue; 
   1054c:	d0e6b817 	ldw	r3,-25888(gp)
   10550:	e0bfff17 	ldw	r2,-4(fp)
   10554:	1885883a 	add	r2,r3,r2
   10558:	d0a6b815 	stw	r2,-25888(gp)

	// Player First Two Cards
	for (int i = 0; i < 2; i++) {
   1055c:	e03ffe15 	stw	zero,-8(fp)
   10560:	00001a06 	br	105cc <dealInitialCards+0xe0>
		tempCard = generateRandomCard(); 
   10564:	00107740 	call	10774 <generateRandomCard>
   10568:	e0bffd15 	stw	r2,-12(fp)
		while(cardDeck[tempCard] == 1) {
   1056c:	00000206 	br	10578 <dealInitialCards+0x8c>
			tempCard = generateRandomCard(); 
   10570:	00107740 	call	10774 <generateRandomCard>
   10574:	e0bffd15 	stw	r2,-12(fp)
	dealerSum = dealerSum + cardValue; 

	// Player First Two Cards
	for (int i = 0; i < 2; i++) {
		tempCard = generateRandomCard(); 
		while(cardDeck[tempCard] == 1) {
   10578:	008000b4 	movhi	r2,2
   1057c:	10a67604 	addi	r2,r2,-26152
   10580:	e0fffd17 	ldw	r3,-12(fp)
   10584:	18c7883a 	add	r3,r3,r3
   10588:	18c7883a 	add	r3,r3,r3
   1058c:	10c5883a 	add	r2,r2,r3
   10590:	10800017 	ldw	r2,0(r2)
   10594:	10800060 	cmpeqi	r2,r2,1
   10598:	103ff51e 	bne	r2,zero,10570 <__alt_data_end+0xffff0570>
			tempCard = generateRandomCard(); 
		}
		updateDeck(tempCard);
   1059c:	e13ffd17 	ldw	r4,-12(fp)
   105a0:	00107c00 	call	107c0 <updateDeck>
		cardValue = translateCardValue(tempCard);
   105a4:	e13ffd17 	ldw	r4,-12(fp)
   105a8:	00108600 	call	10860 <translateCardValue>
   105ac:	e0bfff15 	stw	r2,-4(fp)
		playerSum = dealerSum + cardValue;
   105b0:	d0e6b817 	ldw	r3,-25888(gp)
   105b4:	e0bfff17 	ldw	r2,-4(fp)
   105b8:	1885883a 	add	r2,r3,r2
   105bc:	d0a6b915 	stw	r2,-25884(gp)
	updateDeck(tempCard);
	int cardValue = translateCardValue(tempCard);
	dealerSum = dealerSum + cardValue; 

	// Player First Two Cards
	for (int i = 0; i < 2; i++) {
   105c0:	e0bffe17 	ldw	r2,-8(fp)
   105c4:	10800044 	addi	r2,r2,1
   105c8:	e0bffe15 	stw	r2,-8(fp)
   105cc:	e0bffe17 	ldw	r2,-8(fp)
   105d0:	10800090 	cmplti	r2,r2,2
   105d4:	103fe31e 	bne	r2,zero,10564 <__alt_data_end+0xffff0564>
		}
		updateDeck(tempCard);
		cardValue = translateCardValue(tempCard);
		playerSum = dealerSum + cardValue;
	}
	return;
   105d8:	0001883a 	nop
} 
   105dc:	e037883a 	mov	sp,fp
   105e0:	dfc00117 	ldw	ra,4(sp)
   105e4:	df000017 	ldw	fp,0(sp)
   105e8:	dec00204 	addi	sp,sp,8
   105ec:	f800283a 	ret

000105f0 <playerTurn>:
void playerTurn(void) {
   105f0:	deffff04 	addi	sp,sp,-4
   105f4:	df000015 	stw	fp,0(sp)
   105f8:	d839883a 	mov	fp,sp
	// Wait for Key Press (hit or stay)
	// Calculate
	// Bust?
	// Wait for Key Press...
	return;
   105fc:	0001883a 	nop
} 
   10600:	e037883a 	mov	sp,fp
   10604:	df000017 	ldw	fp,0(sp)
   10608:	dec00104 	addi	sp,sp,4
   1060c:	f800283a 	ret

00010610 <playerBust>:
int playerBust(int playerSum) {
   10610:	defffd04 	addi	sp,sp,-12
   10614:	df000215 	stw	fp,8(sp)
   10618:	df000204 	addi	fp,sp,8
   1061c:	e13fff15 	stw	r4,-4(fp)
	// Check if Player sum <= 21
	int busted = 0;
   10620:	e03ffe15 	stw	zero,-8(fp)
	if (playerSum > 21) {
   10624:	e0bfff17 	ldw	r2,-4(fp)
   10628:	10800590 	cmplti	r2,r2,22
   1062c:	1000021e 	bne	r2,zero,10638 <playerBust+0x28>
		busted = 1; 
   10630:	00800044 	movi	r2,1
   10634:	e0bffe15 	stw	r2,-8(fp)
	}
	return busted;
   10638:	e0bffe17 	ldw	r2,-8(fp)
} 
   1063c:	e037883a 	mov	sp,fp
   10640:	df000017 	ldw	fp,0(sp)
   10644:	dec00104 	addi	sp,sp,4
   10648:	f800283a 	ret

0001064c <dealerTurn>:
void dealerTurn(void) {
   1064c:	deffff04 	addi	sp,sp,-4
   10650:	df000015 	stw	fp,0(sp)
   10654:	d839883a 	mov	fp,sp
	// Automatic cycle
	// Implement wait time for each card
	return; 
   10658:	0001883a 	nop
} 
   1065c:	e037883a 	mov	sp,fp
   10660:	df000017 	ldw	fp,0(sp)
   10664:	dec00104 	addi	sp,sp,4
   10668:	f800283a 	ret

0001066c <dealerBust>:
int dealerBust(int dealerSum) {
   1066c:	defffd04 	addi	sp,sp,-12
   10670:	df000215 	stw	fp,8(sp)
   10674:	df000204 	addi	fp,sp,8
   10678:	e13fff15 	stw	r4,-4(fp)
	// Check if Dealer sum <= 21
	int busted = 0;
   1067c:	e03ffe15 	stw	zero,-8(fp)
	if (dealerSum > 21) {
   10680:	e0bfff17 	ldw	r2,-4(fp)
   10684:	10800590 	cmplti	r2,r2,22
   10688:	1000021e 	bne	r2,zero,10694 <dealerBust+0x28>
		busted = 1; 
   1068c:	00800044 	movi	r2,1
   10690:	e0bffe15 	stw	r2,-8(fp)
	}
	return busted;
   10694:	e0bffe17 	ldw	r2,-8(fp)
}
   10698:	e037883a 	mov	sp,fp
   1069c:	df000017 	ldw	fp,0(sp)
   106a0:	dec00104 	addi	sp,sp,4
   106a4:	f800283a 	ret

000106a8 <determineResult>:
int determineResult(int playerSum, int dealerSum) {
   106a8:	defffc04 	addi	sp,sp,-16
   106ac:	dfc00315 	stw	ra,12(sp)
   106b0:	df000215 	stw	fp,8(sp)
   106b4:	df000204 	addi	fp,sp,8
   106b8:	e13ffe15 	stw	r4,-8(fp)
   106bc:	e17fff15 	stw	r5,-4(fp)
	if (playerBust(playerSum) == 1) {
   106c0:	e13ffe17 	ldw	r4,-8(fp)
   106c4:	00106100 	call	10610 <playerBust>
   106c8:	10800058 	cmpnei	r2,r2,1
   106cc:	1000021e 	bne	r2,zero,106d8 <determineResult+0x30>
		return 0; 
   106d0:	0005883a 	mov	r2,zero
   106d4:	00001106 	br	1071c <determineResult+0x74>
	}
	else if (dealerBust(dealerSum) == 1) {
   106d8:	e13fff17 	ldw	r4,-4(fp)
   106dc:	001066c0 	call	1066c <dealerBust>
   106e0:	10800058 	cmpnei	r2,r2,1
   106e4:	1000021e 	bne	r2,zero,106f0 <determineResult+0x48>
		return 1;
   106e8:	00800044 	movi	r2,1
   106ec:	00000b06 	br	1071c <determineResult+0x74>
	}
	else if (playerSum == dealerSum) {
   106f0:	e0fffe17 	ldw	r3,-8(fp)
   106f4:	e0bfff17 	ldw	r2,-4(fp)
   106f8:	1880021e 	bne	r3,r2,10704 <determineResult+0x5c>
		return 2; 
   106fc:	00800084 	movi	r2,2
   10700:	00000606 	br	1071c <determineResult+0x74>
	}
	else if (playerSum > dealerSum) {
   10704:	e0bffe17 	ldw	r2,-8(fp)
   10708:	e0ffff17 	ldw	r3,-4(fp)
   1070c:	1880020e 	bge	r3,r2,10718 <determineResult+0x70>
		return 1; 
   10710:	00800044 	movi	r2,1
   10714:	00000106 	br	1071c <determineResult+0x74>
	}
	else {
		return 0; 
   10718:	0005883a 	mov	r2,zero
	}
}
   1071c:	e037883a 	mov	sp,fp
   10720:	dfc00117 	ldw	ra,4(sp)
   10724:	df000017 	ldw	fp,0(sp)
   10728:	dec00204 	addi	sp,sp,8
   1072c:	f800283a 	ret

00010730 <delay>:
void delay(int delay) {
   10730:	defffd04 	addi	sp,sp,-12
   10734:	df000215 	stw	fp,8(sp)
   10738:	df000204 	addi	fp,sp,8
   1073c:	e13fff15 	stw	r4,-4(fp)
	int count = 0; 
   10740:	e03ffe15 	stw	zero,-8(fp)
	while(count < delay) {
   10744:	00000306 	br	10754 <delay+0x24>
		count++;
   10748:	e0bffe17 	ldw	r2,-8(fp)
   1074c:	10800044 	addi	r2,r2,1
   10750:	e0bffe15 	stw	r2,-8(fp)
		return 0; 
	}
}
void delay(int delay) {
	int count = 0; 
	while(count < delay) {
   10754:	e0fffe17 	ldw	r3,-8(fp)
   10758:	e0bfff17 	ldw	r2,-4(fp)
   1075c:	18bffa16 	blt	r3,r2,10748 <__alt_data_end+0xffff0748>
		count++;
	}
	return; 
   10760:	0001883a 	nop
}
   10764:	e037883a 	mov	sp,fp
   10768:	df000017 	ldw	fp,0(sp)
   1076c:	dec00104 	addi	sp,sp,4
   10770:	f800283a 	ret

00010774 <generateRandomCard>:


/************************************************************
 Game Functionality
*************************************************************/ 
int generateRandomCard(void) {
   10774:	defffd04 	addi	sp,sp,-12
   10778:	dfc00215 	stw	ra,8(sp)
   1077c:	df000115 	stw	fp,4(sp)
   10780:	df000104 	addi	fp,sp,4
	int random_num = IORD_ALTERA_AVALON_PIO_DATA(RANDOMS_BASE);
   10784:	008000b4 	movhi	r2,2
   10788:	10842804 	addi	r2,r2,4256
   1078c:	10800037 	ldwio	r2,0(r2)
   10790:	e0bfff15 	stw	r2,-4(fp)
	return abs(random_num %52);
   10794:	e0bfff17 	ldw	r2,-4(fp)
   10798:	01400d04 	movi	r5,52
   1079c:	1009883a 	mov	r4,r2
   107a0:	0010d280 	call	10d28 <__modsi3>
   107a4:	1000010e 	bge	r2,zero,107ac <generateRandomCard+0x38>
   107a8:	0085c83a 	sub	r2,zero,r2
} 
   107ac:	e037883a 	mov	sp,fp
   107b0:	dfc00117 	ldw	ra,4(sp)
   107b4:	df000017 	ldw	fp,0(sp)
   107b8:	dec00204 	addi	sp,sp,8
   107bc:	f800283a 	ret

000107c0 <updateDeck>:
void updateDeck(int cardIdx) {
   107c0:	defffe04 	addi	sp,sp,-8
   107c4:	df000115 	stw	fp,4(sp)
   107c8:	df000104 	addi	fp,sp,4
   107cc:	e13fff15 	stw	r4,-4(fp)
	// set 0 -> 1 in cardDeck array
	cardDeck[cardIdx] = 1; 
   107d0:	008000b4 	movhi	r2,2
   107d4:	10a67604 	addi	r2,r2,-26152
   107d8:	e0ffff17 	ldw	r3,-4(fp)
   107dc:	18c7883a 	add	r3,r3,r3
   107e0:	18c7883a 	add	r3,r3,r3
   107e4:	10c5883a 	add	r2,r2,r3
   107e8:	00c00044 	movi	r3,1
   107ec:	10c00015 	stw	r3,0(r2)
	return;
   107f0:	0001883a 	nop
} 
   107f4:	e037883a 	mov	sp,fp
   107f8:	df000017 	ldw	fp,0(sp)
   107fc:	dec00104 	addi	sp,sp,4
   10800:	f800283a 	ret

00010804 <resetDeck>:
void resetDeck(void) {
   10804:	defffe04 	addi	sp,sp,-8
   10808:	df000115 	stw	fp,4(sp)
   1080c:	df000104 	addi	fp,sp,4
	// set all indicies of cardDeck array back to 0
	for (int i = 0; i < 52; i++) {
   10810:	e03fff15 	stw	zero,-4(fp)
   10814:	00000a06 	br	10840 <resetDeck+0x3c>
		cardDeck[i] = 0; 
   10818:	008000b4 	movhi	r2,2
   1081c:	10a67604 	addi	r2,r2,-26152
   10820:	e0ffff17 	ldw	r3,-4(fp)
   10824:	18c7883a 	add	r3,r3,r3
   10828:	18c7883a 	add	r3,r3,r3
   1082c:	10c5883a 	add	r2,r2,r3
   10830:	10000015 	stw	zero,0(r2)
	cardDeck[cardIdx] = 1; 
	return;
} 
void resetDeck(void) {
	// set all indicies of cardDeck array back to 0
	for (int i = 0; i < 52; i++) {
   10834:	e0bfff17 	ldw	r2,-4(fp)
   10838:	10800044 	addi	r2,r2,1
   1083c:	e0bfff15 	stw	r2,-4(fp)
   10840:	e0bfff17 	ldw	r2,-4(fp)
   10844:	10800d10 	cmplti	r2,r2,52
   10848:	103ff31e 	bne	r2,zero,10818 <__alt_data_end+0xffff0818>
		cardDeck[i] = 0; 
	}
	return;
   1084c:	0001883a 	nop
} 
   10850:	e037883a 	mov	sp,fp
   10854:	df000017 	ldw	fp,0(sp)
   10858:	dec00104 	addi	sp,sp,4
   1085c:	f800283a 	ret

00010860 <translateCardValue>:
int translateCardValue(int cardIdx) {
   10860:	defffd04 	addi	sp,sp,-12
   10864:	df000215 	stw	fp,8(sp)
   10868:	df000204 	addi	fp,sp,8
   1086c:	e13fff15 	stw	r4,-4(fp)
	int cardValue = cardValues[cardIdx] - 50;
   10870:	00800074 	movhi	r2,1
   10874:	10991604 	addi	r2,r2,25688
   10878:	e0ffff17 	ldw	r3,-4(fp)
   1087c:	10c5883a 	add	r2,r2,r3
   10880:	10800003 	ldbu	r2,0(r2)
   10884:	10803fcc 	andi	r2,r2,255
   10888:	1080201c 	xori	r2,r2,128
   1088c:	10bfe004 	addi	r2,r2,-128
   10890:	10bff384 	addi	r2,r2,-50
   10894:	e0bffe15 	stw	r2,-8(fp)
	if (cardValue > 11) {
   10898:	e0bffe17 	ldw	r2,-8(fp)
   1089c:	10800310 	cmplti	r2,r2,12
   108a0:	1000021e 	bne	r2,zero,108ac <translateCardValue+0x4c>
		cardValue = 10; 
   108a4:	00800284 	movi	r2,10
   108a8:	e0bffe15 	stw	r2,-8(fp)
	}
	return cardValue; 
   108ac:	e0bffe17 	ldw	r2,-8(fp)
}
   108b0:	e037883a 	mov	sp,fp
   108b4:	df000017 	ldw	fp,0(sp)
   108b8:	dec00104 	addi	sp,sp,4
   108bc:	f800283a 	ret

000108c0 <displayPlayerSum>:
void displayPlayerSum(int playerSum) {
   108c0:	defffa04 	addi	sp,sp,-24
   108c4:	dfc00515 	stw	ra,20(sp)
   108c8:	df000415 	stw	fp,16(sp)
   108cc:	df000404 	addi	fp,sp,16
   108d0:	e13fff15 	stw	r4,-4(fp)
	// display to HEX7 and HEX6
	int ones = playerSum % 10; 
   108d4:	e0bfff17 	ldw	r2,-4(fp)
   108d8:	01400284 	movi	r5,10
   108dc:	1009883a 	mov	r4,r2
   108e0:	0010d280 	call	10d28 <__modsi3>
   108e4:	e0bffc15 	stw	r2,-16(fp)
	int tens = playerSum / 10; 
   108e8:	e0bfff17 	ldw	r2,-4(fp)
   108ec:	01400284 	movi	r5,10
   108f0:	1009883a 	mov	r4,r2
   108f4:	0010ca40 	call	10ca4 <__divsi3>
   108f8:	e0bffd15 	stw	r2,-12(fp)
	int hexVal;
	hexVal = sevenSegmentConversion(ones);
   108fc:	e13ffc17 	ldw	r4,-16(fp)
   10900:	00109d80 	call	109d8 <sevenSegmentConversion>
   10904:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(SEV_SEG_6_BASE, hexVal);
   10908:	008000b4 	movhi	r2,2
   1090c:	10841004 	addi	r2,r2,4160
   10910:	e0fffe17 	ldw	r3,-8(fp)
   10914:	10c00035 	stwio	r3,0(r2)
	hexVal = sevenSegmentConversion(tens);
   10918:	e13ffd17 	ldw	r4,-12(fp)
   1091c:	00109d80 	call	109d8 <sevenSegmentConversion>
   10920:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(SEV_SEG_7_BASE, hexVal);
   10924:	008000b4 	movhi	r2,2
   10928:	10840c04 	addi	r2,r2,4144
   1092c:	e0fffe17 	ldw	r3,-8(fp)
   10930:	10c00035 	stwio	r3,0(r2)
	return;
   10934:	0001883a 	nop
} 
   10938:	e037883a 	mov	sp,fp
   1093c:	dfc00117 	ldw	ra,4(sp)
   10940:	df000017 	ldw	fp,0(sp)
   10944:	dec00204 	addi	sp,sp,8
   10948:	f800283a 	ret

0001094c <displayDealerSum>:
void displayDealerSum(int dealerSum) {
   1094c:	defffa04 	addi	sp,sp,-24
   10950:	dfc00515 	stw	ra,20(sp)
   10954:	df000415 	stw	fp,16(sp)
   10958:	df000404 	addi	fp,sp,16
   1095c:	e13fff15 	stw	r4,-4(fp)
	// display to HEX5 and HEX4
	int ones = dealerSum % 10; 
   10960:	e0bfff17 	ldw	r2,-4(fp)
   10964:	01400284 	movi	r5,10
   10968:	1009883a 	mov	r4,r2
   1096c:	0010d280 	call	10d28 <__modsi3>
   10970:	e0bffc15 	stw	r2,-16(fp)
	int tens = dealerSum / 10; 
   10974:	e0bfff17 	ldw	r2,-4(fp)
   10978:	01400284 	movi	r5,10
   1097c:	1009883a 	mov	r4,r2
   10980:	0010ca40 	call	10ca4 <__divsi3>
   10984:	e0bffd15 	stw	r2,-12(fp)
	int hexVal;
	hexVal = sevenSegmentConversion(ones);
   10988:	e13ffc17 	ldw	r4,-16(fp)
   1098c:	00109d80 	call	109d8 <sevenSegmentConversion>
   10990:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(SEV_SEG_4_BASE, hexVal);
   10994:	008000b4 	movhi	r2,2
   10998:	10841804 	addi	r2,r2,4192
   1099c:	e0fffe17 	ldw	r3,-8(fp)
   109a0:	10c00035 	stwio	r3,0(r2)
	hexVal = sevenSegmentConversion(tens);
   109a4:	e13ffd17 	ldw	r4,-12(fp)
   109a8:	00109d80 	call	109d8 <sevenSegmentConversion>
   109ac:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(SEV_SEG_5_BASE, hexVal);
   109b0:	008000b4 	movhi	r2,2
   109b4:	10841404 	addi	r2,r2,4176
   109b8:	e0fffe17 	ldw	r3,-8(fp)
   109bc:	10c00035 	stwio	r3,0(r2)
	return;
   109c0:	0001883a 	nop
} 
   109c4:	e037883a 	mov	sp,fp
   109c8:	dfc00117 	ldw	ra,4(sp)
   109cc:	df000017 	ldw	fp,0(sp)
   109d0:	dec00204 	addi	sp,sp,8
   109d4:	f800283a 	ret

000109d8 <sevenSegmentConversion>:
int sevenSegmentConversion(int digit) {
   109d8:	defffd04 	addi	sp,sp,-12
   109dc:	df000215 	stw	fp,8(sp)
   109e0:	df000204 	addi	fp,sp,8
   109e4:	e13fff15 	stw	r4,-4(fp)
	int hexVal;
	switch(digit) {
   109e8:	e0bfff17 	ldw	r2,-4(fp)
   109ec:	108002a8 	cmpgeui	r2,r2,10
   109f0:	10002f1e 	bne	r2,zero,10ab0 <sevenSegmentConversion+0xd8>
   109f4:	e0bfff17 	ldw	r2,-4(fp)
   109f8:	100690ba 	slli	r3,r2,2
   109fc:	00800074 	movhi	r2,1
   10a00:	10828404 	addi	r2,r2,2576
   10a04:	1885883a 	add	r2,r3,r2
   10a08:	10800017 	ldw	r2,0(r2)
   10a0c:	1000683a 	jmp	r2
   10a10:	00010aa4 	muli	zero,zero,1066
   10a14:	00010a98 	cmpnei	zero,zero,1066
   10a18:	00010a8c 	andi	zero,zero,1066
   10a1c:	00010a80 	call	10a8 <__alt_mem_onchip_ram-0xef58>
   10a20:	00010a74 	movhi	zero,1065
   10a24:	00010a68 	cmpgeui	zero,zero,1065
   10a28:	00010a5c 	xori	zero,zero,1065
   10a2c:	00010a50 	cmplti	zero,zero,1065
   10a30:	00010a44 	movi	zero,1065
   10a34:	00010a38 	rdprs	zero,zero,1064
		case 9: //00010010
			hexVal = 0x90;
   10a38:	00802404 	movi	r2,144
   10a3c:	e0bffe15 	stw	r2,-8(fp)
			break; 
   10a40:	00001c06 	br	10ab4 <sevenSegmentConversion+0xdc>
		case 8:
			hexVal = 0x80;
   10a44:	00802004 	movi	r2,128
   10a48:	e0bffe15 	stw	r2,-8(fp)
			break;
   10a4c:	00001906 	br	10ab4 <sevenSegmentConversion+0xdc>
		case 7:
			hexVal = 0xF8;
   10a50:	00803e04 	movi	r2,248
   10a54:	e0bffe15 	stw	r2,-8(fp)
			break;
   10a58:	00001606 	br	10ab4 <sevenSegmentConversion+0xdc>
		case 6:
			hexVal = 0x82;
   10a5c:	00802084 	movi	r2,130
   10a60:	e0bffe15 	stw	r2,-8(fp)
			break;
   10a64:	00001306 	br	10ab4 <sevenSegmentConversion+0xdc>
		case 5:
			hexVal = 0x92;
   10a68:	00802484 	movi	r2,146
   10a6c:	e0bffe15 	stw	r2,-8(fp)
			break;
   10a70:	00001006 	br	10ab4 <sevenSegmentConversion+0xdc>
		case 4:
			hexVal = 0x99;
   10a74:	00802644 	movi	r2,153
   10a78:	e0bffe15 	stw	r2,-8(fp)
			break;
   10a7c:	00000d06 	br	10ab4 <sevenSegmentConversion+0xdc>
		case 3:
			hexVal = 0xB0;
   10a80:	00802c04 	movi	r2,176
   10a84:	e0bffe15 	stw	r2,-8(fp)
			break;
   10a88:	00000a06 	br	10ab4 <sevenSegmentConversion+0xdc>
		case 2:
			hexVal = 0xA4;
   10a8c:	00802904 	movi	r2,164
   10a90:	e0bffe15 	stw	r2,-8(fp)
			break;
   10a94:	00000706 	br	10ab4 <sevenSegmentConversion+0xdc>
		case 1:
			hexVal = 0xF9;
   10a98:	00803e44 	movi	r2,249
   10a9c:	e0bffe15 	stw	r2,-8(fp)
			break;
   10aa0:	00000406 	br	10ab4 <sevenSegmentConversion+0xdc>
		case 0:
			hexVal = 0xC0;
   10aa4:	00803004 	movi	r2,192
   10aa8:	e0bffe15 	stw	r2,-8(fp)
			break;
   10aac:	00000106 	br	10ab4 <sevenSegmentConversion+0xdc>
		default: 
			break; 
   10ab0:	0001883a 	nop
	}
	return hexVal;
   10ab4:	e0bffe17 	ldw	r2,-8(fp)
}
   10ab8:	e037883a 	mov	sp,fp
   10abc:	df000017 	ldw	fp,0(sp)
   10ac0:	dec00104 	addi	sp,sp,4
   10ac4:	f800283a 	ret

00010ac8 <endRound>:
void endRound(int result, int playerBet) {
   10ac8:	defffd04 	addi	sp,sp,-12
   10acc:	df000215 	stw	fp,8(sp)
   10ad0:	df000204 	addi	fp,sp,8
   10ad4:	e13ffe15 	stw	r4,-8(fp)
   10ad8:	e17fff15 	stw	r5,-4(fp)
	// display message on LCD
	if (result == 2) { // PUSH
   10adc:	e0bffe17 	ldw	r2,-8(fp)
   10ae0:	10800098 	cmpnei	r2,r2,2
   10ae4:	10000e26 	beq	r2,zero,10b20 <endRound+0x58>
		// Display "PUSH"
		// Bankroll Doesn't Change
		return;
	}
	else if (result == 1) { // WIN
   10ae8:	e0bffe17 	ldw	r2,-8(fp)
   10aec:	10800058 	cmpnei	r2,r2,1
   10af0:	1000051e 	bne	r2,zero,10b08 <endRound+0x40>
		// Display "PLAYER WINS!"
		bankRoll = bankRoll - playerBet; 
   10af4:	d0e00017 	ldw	r3,-32768(gp)
   10af8:	e0bfff17 	ldw	r2,-4(fp)
   10afc:	1885c83a 	sub	r2,r3,r2
   10b00:	d0a00015 	stw	r2,-32768(gp)
		return; 
   10b04:	00000706 	br	10b24 <endRound+0x5c>
	}
	else { // LOSE
		// Display "DEALER WINS!"
		bankRoll = bankRoll + playerBet;
   10b08:	d0e00017 	ldw	r3,-32768(gp)
   10b0c:	e0bfff17 	ldw	r2,-4(fp)
   10b10:	1885883a 	add	r2,r3,r2
   10b14:	d0a00015 	stw	r2,-32768(gp)
		return; 
   10b18:	0001883a 	nop
   10b1c:	00000106 	br	10b24 <endRound+0x5c>
void endRound(int result, int playerBet) {
	// display message on LCD
	if (result == 2) { // PUSH
		// Display "PUSH"
		// Bankroll Doesn't Change
		return;
   10b20:	0001883a 	nop
		// Display "DEALER WINS!"
		bankRoll = bankRoll + playerBet;
		return; 
	}
	return;
}
   10b24:	e037883a 	mov	sp,fp
   10b28:	df000017 	ldw	fp,0(sp)
   10b2c:	dec00104 	addi	sp,sp,4
   10b30:	f800283a 	ret

00010b34 <hit>:


/************************************************************
 Player Actions
*************************************************************/ 
void hit(void) {
   10b34:	defff904 	addi	sp,sp,-28
   10b38:	dfc00615 	stw	ra,24(sp)
   10b3c:	df000515 	stw	fp,20(sp)
   10b40:	df000504 	addi	fp,sp,20
	IOWR_ALTERA_AVALON_PIO_DATA(SEV_SEG_0_BASE, 0xFF);
   10b44:	00c03fc4 	movi	r3,255
   10b48:	008000b4 	movhi	r2,2
   10b4c:	10842c04 	addi	r2,r2,4272
   10b50:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(SEV_SEG_1_BASE, 0x87);
   10b54:	00c021c4 	movi	r3,135
   10b58:	008000b4 	movhi	r2,2
   10b5c:	10842404 	addi	r2,r2,4240
   10b60:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(SEV_SEG_2_BASE, 0xCF);
   10b64:	00c033c4 	movi	r3,207
   10b68:	008000b4 	movhi	r2,2
   10b6c:	10842004 	addi	r2,r2,4224
   10b70:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(SEV_SEG_3_BASE, 0x89);
   10b74:	00c02244 	movi	r3,137
   10b78:	008000b4 	movhi	r2,2
   10b7c:	10841c04 	addi	r2,r2,4208
   10b80:	10c00035 	stwio	r3,0(r2)
	// Generate Random Card
	int card = generateRandomCard();
   10b84:	00107740 	call	10774 <generateRandomCard>
   10b88:	e0bffb15 	stw	r2,-20(fp)

	// Check and Update Deck
	while(cardDeck[card] == 1) {
   10b8c:	00000206 	br	10b98 <hit+0x64>
		card = generateRandomCard(); 
   10b90:	00107740 	call	10774 <generateRandomCard>
   10b94:	e0bffb15 	stw	r2,-20(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(SEV_SEG_3_BASE, 0x89);
	// Generate Random Card
	int card = generateRandomCard();

	// Check and Update Deck
	while(cardDeck[card] == 1) {
   10b98:	008000b4 	movhi	r2,2
   10b9c:	10a67604 	addi	r2,r2,-26152
   10ba0:	e0fffb17 	ldw	r3,-20(fp)
   10ba4:	18c7883a 	add	r3,r3,r3
   10ba8:	18c7883a 	add	r3,r3,r3
   10bac:	10c5883a 	add	r2,r2,r3
   10bb0:	10800017 	ldw	r2,0(r2)
   10bb4:	10800060 	cmpeqi	r2,r2,1
   10bb8:	103ff51e 	bne	r2,zero,10b90 <__alt_data_end+0xffff0b90>
		card = generateRandomCard(); 
	}
	updateDeck(card);
   10bbc:	e13ffb17 	ldw	r4,-20(fp)
   10bc0:	00107c00 	call	107c0 <updateDeck>

	// Char to Int
	int cardValue = translateCardValue(card);
   10bc4:	e13ffb17 	ldw	r4,-20(fp)
   10bc8:	00108600 	call	10860 <translateCardValue>
   10bcc:	e0bffc15 	stw	r2,-16(fp)
	char msg[10];
	itoa(cardValue, msg, 10);
   10bd0:	e0bffd04 	addi	r2,fp,-12
   10bd4:	01800284 	movi	r6,10
   10bd8:	100b883a 	mov	r5,r2
   10bdc:	e13ffc17 	ldw	r4,-16(fp)
   10be0:	0010ec00 	call	10ec0 <itoa>
	alt_putstr(msg);
   10be4:	e0bffd04 	addi	r2,fp,-12
   10be8:	1009883a 	mov	r4,r2
   10bec:	001425c0 	call	1425c <alt_putstr>
	alt_putstr("\n");
   10bf0:	01000074 	movhi	r4,1
   10bf4:	21190804 	addi	r4,r4,25632
   10bf8:	001425c0 	call	1425c <alt_putstr>
	// Update playerSum
	playerSum = playerSum + cardValue;
   10bfc:	d0e6b917 	ldw	r3,-25884(gp)
   10c00:	e0bffc17 	ldw	r2,-16(fp)
   10c04:	1885883a 	add	r2,r3,r2
   10c08:	d0a6b915 	stw	r2,-25884(gp)
	displayPlayerSum(playerSum);
   10c0c:	d0a6b917 	ldw	r2,-25884(gp)
   10c10:	1009883a 	mov	r4,r2
   10c14:	00108c00 	call	108c0 <displayPlayerSum>
	return;
   10c18:	0001883a 	nop
} 
   10c1c:	e037883a 	mov	sp,fp
   10c20:	dfc00117 	ldw	ra,4(sp)
   10c24:	df000017 	ldw	fp,0(sp)
   10c28:	dec00204 	addi	sp,sp,8
   10c2c:	f800283a 	ret

00010c30 <stay>:
void stay(void) { // Nothing Happens
   10c30:	defffe04 	addi	sp,sp,-8
   10c34:	dfc00115 	stw	ra,4(sp)
   10c38:	df000015 	stw	fp,0(sp)
   10c3c:	d839883a 	mov	fp,sp
	IOWR_ALTERA_AVALON_PIO_DATA(SEV_SEG_0_BASE, 0x91);
   10c40:	00c02444 	movi	r3,145
   10c44:	008000b4 	movhi	r2,2
   10c48:	10842c04 	addi	r2,r2,4272
   10c4c:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(SEV_SEG_1_BASE, 0x88);
   10c50:	00c02204 	movi	r3,136
   10c54:	008000b4 	movhi	r2,2
   10c58:	10842404 	addi	r2,r2,4240
   10c5c:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(SEV_SEG_2_BASE, 0x87);
   10c60:	00c021c4 	movi	r3,135
   10c64:	008000b4 	movhi	r2,2
   10c68:	10842004 	addi	r2,r2,4224
   10c6c:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(SEV_SEG_3_BASE, 0x92);
   10c70:	00c02484 	movi	r3,146
   10c74:	008000b4 	movhi	r2,2
   10c78:	10841c04 	addi	r2,r2,4208
   10c7c:	10c00035 	stwio	r3,0(r2)
	displayPlayerSum(playerSum);
   10c80:	d0a6b917 	ldw	r2,-25884(gp)
   10c84:	1009883a 	mov	r4,r2
   10c88:	00108c00 	call	108c0 <displayPlayerSum>
	return;
   10c8c:	0001883a 	nop
}
   10c90:	e037883a 	mov	sp,fp
   10c94:	dfc00117 	ldw	ra,4(sp)
   10c98:	df000017 	ldw	fp,0(sp)
   10c9c:	dec00204 	addi	sp,sp,8
   10ca0:	f800283a 	ret

00010ca4 <__divsi3>:
   10ca4:	20001b16 	blt	r4,zero,10d14 <__divsi3+0x70>
   10ca8:	000f883a 	mov	r7,zero
   10cac:	28001616 	blt	r5,zero,10d08 <__divsi3+0x64>
   10cb0:	200d883a 	mov	r6,r4
   10cb4:	29001a2e 	bgeu	r5,r4,10d20 <__divsi3+0x7c>
   10cb8:	00800804 	movi	r2,32
   10cbc:	00c00044 	movi	r3,1
   10cc0:	00000106 	br	10cc8 <__divsi3+0x24>
   10cc4:	10000d26 	beq	r2,zero,10cfc <__divsi3+0x58>
   10cc8:	294b883a 	add	r5,r5,r5
   10ccc:	10bfffc4 	addi	r2,r2,-1
   10cd0:	18c7883a 	add	r3,r3,r3
   10cd4:	293ffb36 	bltu	r5,r4,10cc4 <__alt_data_end+0xffff0cc4>
   10cd8:	0005883a 	mov	r2,zero
   10cdc:	18000726 	beq	r3,zero,10cfc <__divsi3+0x58>
   10ce0:	0005883a 	mov	r2,zero
   10ce4:	31400236 	bltu	r6,r5,10cf0 <__divsi3+0x4c>
   10ce8:	314dc83a 	sub	r6,r6,r5
   10cec:	10c4b03a 	or	r2,r2,r3
   10cf0:	1806d07a 	srli	r3,r3,1
   10cf4:	280ad07a 	srli	r5,r5,1
   10cf8:	183ffa1e 	bne	r3,zero,10ce4 <__alt_data_end+0xffff0ce4>
   10cfc:	38000126 	beq	r7,zero,10d04 <__divsi3+0x60>
   10d00:	0085c83a 	sub	r2,zero,r2
   10d04:	f800283a 	ret
   10d08:	014bc83a 	sub	r5,zero,r5
   10d0c:	39c0005c 	xori	r7,r7,1
   10d10:	003fe706 	br	10cb0 <__alt_data_end+0xffff0cb0>
   10d14:	0109c83a 	sub	r4,zero,r4
   10d18:	01c00044 	movi	r7,1
   10d1c:	003fe306 	br	10cac <__alt_data_end+0xffff0cac>
   10d20:	00c00044 	movi	r3,1
   10d24:	003fee06 	br	10ce0 <__alt_data_end+0xffff0ce0>

00010d28 <__modsi3>:
   10d28:	20001716 	blt	r4,zero,10d88 <__modsi3+0x60>
   10d2c:	000f883a 	mov	r7,zero
   10d30:	2005883a 	mov	r2,r4
   10d34:	28001216 	blt	r5,zero,10d80 <__modsi3+0x58>
   10d38:	2900162e 	bgeu	r5,r4,10d94 <__modsi3+0x6c>
   10d3c:	01800804 	movi	r6,32
   10d40:	00c00044 	movi	r3,1
   10d44:	00000106 	br	10d4c <__modsi3+0x24>
   10d48:	30000a26 	beq	r6,zero,10d74 <__modsi3+0x4c>
   10d4c:	294b883a 	add	r5,r5,r5
   10d50:	31bfffc4 	addi	r6,r6,-1
   10d54:	18c7883a 	add	r3,r3,r3
   10d58:	293ffb36 	bltu	r5,r4,10d48 <__alt_data_end+0xffff0d48>
   10d5c:	18000526 	beq	r3,zero,10d74 <__modsi3+0x4c>
   10d60:	1806d07a 	srli	r3,r3,1
   10d64:	11400136 	bltu	r2,r5,10d6c <__modsi3+0x44>
   10d68:	1145c83a 	sub	r2,r2,r5
   10d6c:	280ad07a 	srli	r5,r5,1
   10d70:	183ffb1e 	bne	r3,zero,10d60 <__alt_data_end+0xffff0d60>
   10d74:	38000126 	beq	r7,zero,10d7c <__modsi3+0x54>
   10d78:	0085c83a 	sub	r2,zero,r2
   10d7c:	f800283a 	ret
   10d80:	014bc83a 	sub	r5,zero,r5
   10d84:	003fec06 	br	10d38 <__alt_data_end+0xffff0d38>
   10d88:	0109c83a 	sub	r4,zero,r4
   10d8c:	01c00044 	movi	r7,1
   10d90:	003fe706 	br	10d30 <__alt_data_end+0xffff0d30>
   10d94:	00c00044 	movi	r3,1
   10d98:	003ff106 	br	10d60 <__alt_data_end+0xffff0d60>

00010d9c <__udivsi3>:
   10d9c:	200d883a 	mov	r6,r4
   10da0:	2900152e 	bgeu	r5,r4,10df8 <__udivsi3+0x5c>
   10da4:	28001416 	blt	r5,zero,10df8 <__udivsi3+0x5c>
   10da8:	00800804 	movi	r2,32
   10dac:	00c00044 	movi	r3,1
   10db0:	00000206 	br	10dbc <__udivsi3+0x20>
   10db4:	10000e26 	beq	r2,zero,10df0 <__udivsi3+0x54>
   10db8:	28000516 	blt	r5,zero,10dd0 <__udivsi3+0x34>
   10dbc:	294b883a 	add	r5,r5,r5
   10dc0:	10bfffc4 	addi	r2,r2,-1
   10dc4:	18c7883a 	add	r3,r3,r3
   10dc8:	293ffa36 	bltu	r5,r4,10db4 <__alt_data_end+0xffff0db4>
   10dcc:	18000826 	beq	r3,zero,10df0 <__udivsi3+0x54>
   10dd0:	0005883a 	mov	r2,zero
   10dd4:	31400236 	bltu	r6,r5,10de0 <__udivsi3+0x44>
   10dd8:	314dc83a 	sub	r6,r6,r5
   10ddc:	10c4b03a 	or	r2,r2,r3
   10de0:	1806d07a 	srli	r3,r3,1
   10de4:	280ad07a 	srli	r5,r5,1
   10de8:	183ffa1e 	bne	r3,zero,10dd4 <__alt_data_end+0xffff0dd4>
   10dec:	f800283a 	ret
   10df0:	0005883a 	mov	r2,zero
   10df4:	f800283a 	ret
   10df8:	00c00044 	movi	r3,1
   10dfc:	003ff406 	br	10dd0 <__alt_data_end+0xffff0dd0>

00010e00 <__umodsi3>:
   10e00:	2005883a 	mov	r2,r4
   10e04:	2900122e 	bgeu	r5,r4,10e50 <__umodsi3+0x50>
   10e08:	28001116 	blt	r5,zero,10e50 <__umodsi3+0x50>
   10e0c:	01800804 	movi	r6,32
   10e10:	00c00044 	movi	r3,1
   10e14:	00000206 	br	10e20 <__umodsi3+0x20>
   10e18:	30000c26 	beq	r6,zero,10e4c <__umodsi3+0x4c>
   10e1c:	28000516 	blt	r5,zero,10e34 <__umodsi3+0x34>
   10e20:	294b883a 	add	r5,r5,r5
   10e24:	31bfffc4 	addi	r6,r6,-1
   10e28:	18c7883a 	add	r3,r3,r3
   10e2c:	293ffa36 	bltu	r5,r4,10e18 <__alt_data_end+0xffff0e18>
   10e30:	18000626 	beq	r3,zero,10e4c <__umodsi3+0x4c>
   10e34:	1806d07a 	srli	r3,r3,1
   10e38:	11400136 	bltu	r2,r5,10e40 <__umodsi3+0x40>
   10e3c:	1145c83a 	sub	r2,r2,r5
   10e40:	280ad07a 	srli	r5,r5,1
   10e44:	183ffb1e 	bne	r3,zero,10e34 <__alt_data_end+0xffff0e34>
   10e48:	f800283a 	ret
   10e4c:	f800283a 	ret
   10e50:	00c00044 	movi	r3,1
   10e54:	003ff706 	br	10e34 <__alt_data_end+0xffff0e34>

00010e58 <__itoa>:
   10e58:	30bfff84 	addi	r2,r6,-2
   10e5c:	00c00884 	movi	r3,34
   10e60:	18801436 	bltu	r3,r2,10eb4 <__itoa+0x5c>
   10e64:	defffe04 	addi	sp,sp,-8
   10e68:	dfc00115 	stw	ra,4(sp)
   10e6c:	dc000015 	stw	r16,0(sp)
   10e70:	00800284 	movi	r2,10
   10e74:	30800926 	beq	r6,r2,10e9c <__itoa+0x44>
   10e78:	0005883a 	mov	r2,zero
   10e7c:	2821883a 	mov	r16,r5
   10e80:	288b883a 	add	r5,r5,r2
   10e84:	00110300 	call	11030 <__utoa>
   10e88:	8005883a 	mov	r2,r16
   10e8c:	dfc00117 	ldw	ra,4(sp)
   10e90:	dc000017 	ldw	r16,0(sp)
   10e94:	dec00204 	addi	sp,sp,8
   10e98:	f800283a 	ret
   10e9c:	203ff60e 	bge	r4,zero,10e78 <__alt_data_end+0xffff0e78>
   10ea0:	00800b44 	movi	r2,45
   10ea4:	28800005 	stb	r2,0(r5)
   10ea8:	0109c83a 	sub	r4,zero,r4
   10eac:	00800044 	movi	r2,1
   10eb0:	003ff206 	br	10e7c <__alt_data_end+0xffff0e7c>
   10eb4:	28000005 	stb	zero,0(r5)
   10eb8:	0005883a 	mov	r2,zero
   10ebc:	f800283a 	ret

00010ec0 <itoa>:
   10ec0:	0010e581 	jmpi	10e58 <__itoa>

00010ec4 <_puts_r>:
   10ec4:	defff604 	addi	sp,sp,-40
   10ec8:	dc000715 	stw	r16,28(sp)
   10ecc:	2021883a 	mov	r16,r4
   10ed0:	2809883a 	mov	r4,r5
   10ed4:	dc400815 	stw	r17,32(sp)
   10ed8:	dfc00915 	stw	ra,36(sp)
   10edc:	2823883a 	mov	r17,r5
   10ee0:	0010f980 	call	10f98 <strlen>
   10ee4:	10c00044 	addi	r3,r2,1
   10ee8:	d8800115 	stw	r2,4(sp)
   10eec:	00800074 	movhi	r2,1
   10ef0:	10990904 	addi	r2,r2,25636
   10ef4:	d8800215 	stw	r2,8(sp)
   10ef8:	00800044 	movi	r2,1
   10efc:	d8800315 	stw	r2,12(sp)
   10f00:	00800084 	movi	r2,2
   10f04:	dc400015 	stw	r17,0(sp)
   10f08:	d8c00615 	stw	r3,24(sp)
   10f0c:	dec00415 	stw	sp,16(sp)
   10f10:	d8800515 	stw	r2,20(sp)
   10f14:	80000226 	beq	r16,zero,10f20 <_puts_r+0x5c>
   10f18:	80800e17 	ldw	r2,56(r16)
   10f1c:	10001426 	beq	r2,zero,10f70 <_puts_r+0xac>
   10f20:	81400217 	ldw	r5,8(r16)
   10f24:	2880030b 	ldhu	r2,12(r5)
   10f28:	10c8000c 	andi	r3,r2,8192
   10f2c:	1800061e 	bne	r3,zero,10f48 <_puts_r+0x84>
   10f30:	29001917 	ldw	r4,100(r5)
   10f34:	00f7ffc4 	movi	r3,-8193
   10f38:	10880014 	ori	r2,r2,8192
   10f3c:	20c6703a 	and	r3,r4,r3
   10f40:	2880030d 	sth	r2,12(r5)
   10f44:	28c01915 	stw	r3,100(r5)
   10f48:	d9800404 	addi	r6,sp,16
   10f4c:	8009883a 	mov	r4,r16
   10f50:	001153c0 	call	1153c <__sfvwrite_r>
   10f54:	1000091e 	bne	r2,zero,10f7c <_puts_r+0xb8>
   10f58:	00800284 	movi	r2,10
   10f5c:	dfc00917 	ldw	ra,36(sp)
   10f60:	dc400817 	ldw	r17,32(sp)
   10f64:	dc000717 	ldw	r16,28(sp)
   10f68:	dec00a04 	addi	sp,sp,40
   10f6c:	f800283a 	ret
   10f70:	8009883a 	mov	r4,r16
   10f74:	00114ec0 	call	114ec <__sinit>
   10f78:	003fe906 	br	10f20 <__alt_data_end+0xffff0f20>
   10f7c:	00bfffc4 	movi	r2,-1
   10f80:	003ff606 	br	10f5c <__alt_data_end+0xffff0f5c>

00010f84 <puts>:
   10f84:	00800074 	movhi	r2,1
   10f88:	109fb204 	addi	r2,r2,32456
   10f8c:	200b883a 	mov	r5,r4
   10f90:	11000017 	ldw	r4,0(r2)
   10f94:	0010ec41 	jmpi	10ec4 <_puts_r>

00010f98 <strlen>:
   10f98:	208000cc 	andi	r2,r4,3
   10f9c:	10002026 	beq	r2,zero,11020 <strlen+0x88>
   10fa0:	20800007 	ldb	r2,0(r4)
   10fa4:	10002026 	beq	r2,zero,11028 <strlen+0x90>
   10fa8:	2005883a 	mov	r2,r4
   10fac:	00000206 	br	10fb8 <strlen+0x20>
   10fb0:	10c00007 	ldb	r3,0(r2)
   10fb4:	18001826 	beq	r3,zero,11018 <strlen+0x80>
   10fb8:	10800044 	addi	r2,r2,1
   10fbc:	10c000cc 	andi	r3,r2,3
   10fc0:	183ffb1e 	bne	r3,zero,10fb0 <__alt_data_end+0xffff0fb0>
   10fc4:	10c00017 	ldw	r3,0(r2)
   10fc8:	01ffbff4 	movhi	r7,65279
   10fcc:	39ffbfc4 	addi	r7,r7,-257
   10fd0:	00ca303a 	nor	r5,zero,r3
   10fd4:	01a02074 	movhi	r6,32897
   10fd8:	19c7883a 	add	r3,r3,r7
   10fdc:	31a02004 	addi	r6,r6,-32640
   10fe0:	1946703a 	and	r3,r3,r5
   10fe4:	1986703a 	and	r3,r3,r6
   10fe8:	1800091e 	bne	r3,zero,11010 <strlen+0x78>
   10fec:	10800104 	addi	r2,r2,4
   10ff0:	10c00017 	ldw	r3,0(r2)
   10ff4:	19cb883a 	add	r5,r3,r7
   10ff8:	00c6303a 	nor	r3,zero,r3
   10ffc:	28c6703a 	and	r3,r5,r3
   11000:	1986703a 	and	r3,r3,r6
   11004:	183ff926 	beq	r3,zero,10fec <__alt_data_end+0xffff0fec>
   11008:	00000106 	br	11010 <strlen+0x78>
   1100c:	10800044 	addi	r2,r2,1
   11010:	10c00007 	ldb	r3,0(r2)
   11014:	183ffd1e 	bne	r3,zero,1100c <__alt_data_end+0xffff100c>
   11018:	1105c83a 	sub	r2,r2,r4
   1101c:	f800283a 	ret
   11020:	2005883a 	mov	r2,r4
   11024:	003fe706 	br	10fc4 <__alt_data_end+0xffff0fc4>
   11028:	0005883a 	mov	r2,zero
   1102c:	f800283a 	ret

00011030 <__utoa>:
   11030:	008cccb4 	movhi	r2,13106
   11034:	defff004 	addi	sp,sp,-64
   11038:	108c4c04 	addi	r2,r2,12592
   1103c:	d8800015 	stw	r2,0(sp)
   11040:	008dcdb4 	movhi	r2,14134
   11044:	108d4d04 	addi	r2,r2,13620
   11048:	d8800115 	stw	r2,4(sp)
   1104c:	00989874 	movhi	r2,25185
   11050:	108e4e04 	addi	r2,r2,14648
   11054:	d8800215 	stw	r2,8(sp)
   11058:	00999974 	movhi	r2,26213
   1105c:	109918c4 	addi	r2,r2,25699
   11060:	d8800315 	stw	r2,12(sp)
   11064:	009a9a74 	movhi	r2,27241
   11068:	109a19c4 	addi	r2,r2,26727
   1106c:	d8800415 	stw	r2,16(sp)
   11070:	009b9b74 	movhi	r2,28269
   11074:	109b1ac4 	addi	r2,r2,27755
   11078:	d8800515 	stw	r2,20(sp)
   1107c:	009c9c74 	movhi	r2,29297
   11080:	109c1bc4 	addi	r2,r2,28783
   11084:	d8800615 	stw	r2,24(sp)
   11088:	009d9d74 	movhi	r2,30325
   1108c:	109d1cc4 	addi	r2,r2,29811
   11090:	d8800715 	stw	r2,28(sp)
   11094:	009e9e74 	movhi	r2,31353
   11098:	109e1dc4 	addi	r2,r2,30839
   1109c:	dd000e15 	stw	r20,56(sp)
   110a0:	d8800815 	stw	r2,32(sp)
   110a4:	dfc00f15 	stw	ra,60(sp)
   110a8:	dcc00d15 	stw	r19,52(sp)
   110ac:	dc800c15 	stw	r18,48(sp)
   110b0:	dc400b15 	stw	r17,44(sp)
   110b4:	dc000a15 	stw	r16,40(sp)
   110b8:	d8000905 	stb	zero,36(sp)
   110bc:	30bfff84 	addi	r2,r6,-2
   110c0:	00c00884 	movi	r3,34
   110c4:	2829883a 	mov	r20,r5
   110c8:	18802c36 	bltu	r3,r2,1117c <__utoa+0x14c>
   110cc:	3027883a 	mov	r19,r6
   110d0:	2023883a 	mov	r17,r4
   110d4:	2825883a 	mov	r18,r5
   110d8:	0021883a 	mov	r16,zero
   110dc:	00000106 	br	110e4 <__utoa+0xb4>
   110e0:	1821883a 	mov	r16,r3
   110e4:	8809883a 	mov	r4,r17
   110e8:	980b883a 	mov	r5,r19
   110ec:	0010e000 	call	10e00 <__umodsi3>
   110f0:	d885883a 	add	r2,sp,r2
   110f4:	10800003 	ldbu	r2,0(r2)
   110f8:	8809883a 	mov	r4,r17
   110fc:	980b883a 	mov	r5,r19
   11100:	90800005 	stb	r2,0(r18)
   11104:	0010d9c0 	call	10d9c <__udivsi3>
   11108:	1023883a 	mov	r17,r2
   1110c:	80c00044 	addi	r3,r16,1
   11110:	94800044 	addi	r18,r18,1
   11114:	103ff21e 	bne	r2,zero,110e0 <__alt_data_end+0xffff10e0>
   11118:	a0c7883a 	add	r3,r20,r3
   1111c:	18000005 	stb	zero,0(r3)
   11120:	80000d26 	beq	r16,zero,11158 <__utoa+0x128>
   11124:	01c00044 	movi	r7,1
   11128:	a409883a 	add	r4,r20,r16
   1112c:	a007883a 	mov	r3,r20
   11130:	3d0fc83a 	sub	r7,r7,r20
   11134:	21800003 	ldbu	r6,0(r4)
   11138:	19400003 	ldbu	r5,0(r3)
   1113c:	38c5883a 	add	r2,r7,r3
   11140:	19800005 	stb	r6,0(r3)
   11144:	21400005 	stb	r5,0(r4)
   11148:	843fffc4 	addi	r16,r16,-1
   1114c:	18c00044 	addi	r3,r3,1
   11150:	213fffc4 	addi	r4,r4,-1
   11154:	143ff716 	blt	r2,r16,11134 <__alt_data_end+0xffff1134>
   11158:	a005883a 	mov	r2,r20
   1115c:	dfc00f17 	ldw	ra,60(sp)
   11160:	dd000e17 	ldw	r20,56(sp)
   11164:	dcc00d17 	ldw	r19,52(sp)
   11168:	dc800c17 	ldw	r18,48(sp)
   1116c:	dc400b17 	ldw	r17,44(sp)
   11170:	dc000a17 	ldw	r16,40(sp)
   11174:	dec01004 	addi	sp,sp,64
   11178:	f800283a 	ret
   1117c:	28000005 	stb	zero,0(r5)
   11180:	0005883a 	mov	r2,zero
   11184:	003ff506 	br	1115c <__alt_data_end+0xffff115c>

00011188 <utoa>:
   11188:	00110301 	jmpi	11030 <__utoa>

0001118c <__fp_unlock>:
   1118c:	0005883a 	mov	r2,zero
   11190:	f800283a 	ret

00011194 <_cleanup_r>:
   11194:	01400074 	movhi	r5,1
   11198:	294c5104 	addi	r5,r5,12612
   1119c:	0011ac81 	jmpi	11ac8 <_fwalk_reent>

000111a0 <__sinit.part.1>:
   111a0:	defff704 	addi	sp,sp,-36
   111a4:	00c00074 	movhi	r3,1
   111a8:	dfc00815 	stw	ra,32(sp)
   111ac:	ddc00715 	stw	r23,28(sp)
   111b0:	dd800615 	stw	r22,24(sp)
   111b4:	dd400515 	stw	r21,20(sp)
   111b8:	dd000415 	stw	r20,16(sp)
   111bc:	dcc00315 	stw	r19,12(sp)
   111c0:	dc800215 	stw	r18,8(sp)
   111c4:	dc400115 	stw	r17,4(sp)
   111c8:	dc000015 	stw	r16,0(sp)
   111cc:	18c46504 	addi	r3,r3,4500
   111d0:	24000117 	ldw	r16,4(r4)
   111d4:	20c00f15 	stw	r3,60(r4)
   111d8:	2080bb04 	addi	r2,r4,748
   111dc:	00c000c4 	movi	r3,3
   111e0:	20c0b915 	stw	r3,740(r4)
   111e4:	2080ba15 	stw	r2,744(r4)
   111e8:	2000b815 	stw	zero,736(r4)
   111ec:	05c00204 	movi	r23,8
   111f0:	00800104 	movi	r2,4
   111f4:	2025883a 	mov	r18,r4
   111f8:	b80d883a 	mov	r6,r23
   111fc:	81001704 	addi	r4,r16,92
   11200:	000b883a 	mov	r5,zero
   11204:	80000015 	stw	zero,0(r16)
   11208:	80000115 	stw	zero,4(r16)
   1120c:	80000215 	stw	zero,8(r16)
   11210:	8080030d 	sth	r2,12(r16)
   11214:	80001915 	stw	zero,100(r16)
   11218:	8000038d 	sth	zero,14(r16)
   1121c:	80000415 	stw	zero,16(r16)
   11220:	80000515 	stw	zero,20(r16)
   11224:	80000615 	stw	zero,24(r16)
   11228:	00127200 	call	12720 <memset>
   1122c:	05800074 	movhi	r22,1
   11230:	94400217 	ldw	r17,8(r18)
   11234:	05400074 	movhi	r21,1
   11238:	05000074 	movhi	r20,1
   1123c:	04c00074 	movhi	r19,1
   11240:	b58b8004 	addi	r22,r22,11776
   11244:	ad4b9704 	addi	r21,r21,11868
   11248:	a50bb604 	addi	r20,r20,11992
   1124c:	9ccbcd04 	addi	r19,r19,12084
   11250:	85800815 	stw	r22,32(r16)
   11254:	85400915 	stw	r21,36(r16)
   11258:	85000a15 	stw	r20,40(r16)
   1125c:	84c00b15 	stw	r19,44(r16)
   11260:	84000715 	stw	r16,28(r16)
   11264:	00800284 	movi	r2,10
   11268:	8880030d 	sth	r2,12(r17)
   1126c:	00800044 	movi	r2,1
   11270:	b80d883a 	mov	r6,r23
   11274:	89001704 	addi	r4,r17,92
   11278:	000b883a 	mov	r5,zero
   1127c:	88000015 	stw	zero,0(r17)
   11280:	88000115 	stw	zero,4(r17)
   11284:	88000215 	stw	zero,8(r17)
   11288:	88001915 	stw	zero,100(r17)
   1128c:	8880038d 	sth	r2,14(r17)
   11290:	88000415 	stw	zero,16(r17)
   11294:	88000515 	stw	zero,20(r17)
   11298:	88000615 	stw	zero,24(r17)
   1129c:	00127200 	call	12720 <memset>
   112a0:	94000317 	ldw	r16,12(r18)
   112a4:	00800484 	movi	r2,18
   112a8:	8c400715 	stw	r17,28(r17)
   112ac:	8d800815 	stw	r22,32(r17)
   112b0:	8d400915 	stw	r21,36(r17)
   112b4:	8d000a15 	stw	r20,40(r17)
   112b8:	8cc00b15 	stw	r19,44(r17)
   112bc:	8080030d 	sth	r2,12(r16)
   112c0:	00800084 	movi	r2,2
   112c4:	80000015 	stw	zero,0(r16)
   112c8:	80000115 	stw	zero,4(r16)
   112cc:	80000215 	stw	zero,8(r16)
   112d0:	80001915 	stw	zero,100(r16)
   112d4:	8080038d 	sth	r2,14(r16)
   112d8:	80000415 	stw	zero,16(r16)
   112dc:	80000515 	stw	zero,20(r16)
   112e0:	80000615 	stw	zero,24(r16)
   112e4:	b80d883a 	mov	r6,r23
   112e8:	000b883a 	mov	r5,zero
   112ec:	81001704 	addi	r4,r16,92
   112f0:	00127200 	call	12720 <memset>
   112f4:	00800044 	movi	r2,1
   112f8:	84000715 	stw	r16,28(r16)
   112fc:	85800815 	stw	r22,32(r16)
   11300:	85400915 	stw	r21,36(r16)
   11304:	85000a15 	stw	r20,40(r16)
   11308:	84c00b15 	stw	r19,44(r16)
   1130c:	90800e15 	stw	r2,56(r18)
   11310:	dfc00817 	ldw	ra,32(sp)
   11314:	ddc00717 	ldw	r23,28(sp)
   11318:	dd800617 	ldw	r22,24(sp)
   1131c:	dd400517 	ldw	r21,20(sp)
   11320:	dd000417 	ldw	r20,16(sp)
   11324:	dcc00317 	ldw	r19,12(sp)
   11328:	dc800217 	ldw	r18,8(sp)
   1132c:	dc400117 	ldw	r17,4(sp)
   11330:	dc000017 	ldw	r16,0(sp)
   11334:	dec00904 	addi	sp,sp,36
   11338:	f800283a 	ret

0001133c <__fp_lock>:
   1133c:	0005883a 	mov	r2,zero
   11340:	f800283a 	ret

00011344 <__sfmoreglue>:
   11344:	defffc04 	addi	sp,sp,-16
   11348:	dc800215 	stw	r18,8(sp)
   1134c:	2825883a 	mov	r18,r5
   11350:	dc000015 	stw	r16,0(sp)
   11354:	01401a04 	movi	r5,104
   11358:	2021883a 	mov	r16,r4
   1135c:	913fffc4 	addi	r4,r18,-1
   11360:	dfc00315 	stw	ra,12(sp)
   11364:	dc400115 	stw	r17,4(sp)
   11368:	0013c500 	call	13c50 <__mulsi3>
   1136c:	8009883a 	mov	r4,r16
   11370:	11401d04 	addi	r5,r2,116
   11374:	1023883a 	mov	r17,r2
   11378:	0011b8c0 	call	11b8c <_malloc_r>
   1137c:	1021883a 	mov	r16,r2
   11380:	10000726 	beq	r2,zero,113a0 <__sfmoreglue+0x5c>
   11384:	11000304 	addi	r4,r2,12
   11388:	10000015 	stw	zero,0(r2)
   1138c:	14800115 	stw	r18,4(r2)
   11390:	11000215 	stw	r4,8(r2)
   11394:	89801a04 	addi	r6,r17,104
   11398:	000b883a 	mov	r5,zero
   1139c:	00127200 	call	12720 <memset>
   113a0:	8005883a 	mov	r2,r16
   113a4:	dfc00317 	ldw	ra,12(sp)
   113a8:	dc800217 	ldw	r18,8(sp)
   113ac:	dc400117 	ldw	r17,4(sp)
   113b0:	dc000017 	ldw	r16,0(sp)
   113b4:	dec00404 	addi	sp,sp,16
   113b8:	f800283a 	ret

000113bc <__sfp>:
   113bc:	defffb04 	addi	sp,sp,-20
   113c0:	dc000015 	stw	r16,0(sp)
   113c4:	04000074 	movhi	r16,1
   113c8:	841fb104 	addi	r16,r16,32452
   113cc:	dcc00315 	stw	r19,12(sp)
   113d0:	2027883a 	mov	r19,r4
   113d4:	81000017 	ldw	r4,0(r16)
   113d8:	dfc00415 	stw	ra,16(sp)
   113dc:	dc800215 	stw	r18,8(sp)
   113e0:	20800e17 	ldw	r2,56(r4)
   113e4:	dc400115 	stw	r17,4(sp)
   113e8:	1000021e 	bne	r2,zero,113f4 <__sfp+0x38>
   113ec:	00111a00 	call	111a0 <__sinit.part.1>
   113f0:	81000017 	ldw	r4,0(r16)
   113f4:	2480b804 	addi	r18,r4,736
   113f8:	047fffc4 	movi	r17,-1
   113fc:	91000117 	ldw	r4,4(r18)
   11400:	94000217 	ldw	r16,8(r18)
   11404:	213fffc4 	addi	r4,r4,-1
   11408:	20000a16 	blt	r4,zero,11434 <__sfp+0x78>
   1140c:	8080030f 	ldh	r2,12(r16)
   11410:	10000c26 	beq	r2,zero,11444 <__sfp+0x88>
   11414:	80c01d04 	addi	r3,r16,116
   11418:	00000206 	br	11424 <__sfp+0x68>
   1141c:	18bfe60f 	ldh	r2,-104(r3)
   11420:	10000826 	beq	r2,zero,11444 <__sfp+0x88>
   11424:	213fffc4 	addi	r4,r4,-1
   11428:	1c3ffd04 	addi	r16,r3,-12
   1142c:	18c01a04 	addi	r3,r3,104
   11430:	247ffa1e 	bne	r4,r17,1141c <__alt_data_end+0xffff141c>
   11434:	90800017 	ldw	r2,0(r18)
   11438:	10001d26 	beq	r2,zero,114b0 <__sfp+0xf4>
   1143c:	1025883a 	mov	r18,r2
   11440:	003fee06 	br	113fc <__alt_data_end+0xffff13fc>
   11444:	00bfffc4 	movi	r2,-1
   11448:	8080038d 	sth	r2,14(r16)
   1144c:	00800044 	movi	r2,1
   11450:	8080030d 	sth	r2,12(r16)
   11454:	80001915 	stw	zero,100(r16)
   11458:	80000015 	stw	zero,0(r16)
   1145c:	80000215 	stw	zero,8(r16)
   11460:	80000115 	stw	zero,4(r16)
   11464:	80000415 	stw	zero,16(r16)
   11468:	80000515 	stw	zero,20(r16)
   1146c:	80000615 	stw	zero,24(r16)
   11470:	01800204 	movi	r6,8
   11474:	000b883a 	mov	r5,zero
   11478:	81001704 	addi	r4,r16,92
   1147c:	00127200 	call	12720 <memset>
   11480:	8005883a 	mov	r2,r16
   11484:	80000c15 	stw	zero,48(r16)
   11488:	80000d15 	stw	zero,52(r16)
   1148c:	80001115 	stw	zero,68(r16)
   11490:	80001215 	stw	zero,72(r16)
   11494:	dfc00417 	ldw	ra,16(sp)
   11498:	dcc00317 	ldw	r19,12(sp)
   1149c:	dc800217 	ldw	r18,8(sp)
   114a0:	dc400117 	ldw	r17,4(sp)
   114a4:	dc000017 	ldw	r16,0(sp)
   114a8:	dec00504 	addi	sp,sp,20
   114ac:	f800283a 	ret
   114b0:	01400104 	movi	r5,4
   114b4:	9809883a 	mov	r4,r19
   114b8:	00113440 	call	11344 <__sfmoreglue>
   114bc:	90800015 	stw	r2,0(r18)
   114c0:	103fde1e 	bne	r2,zero,1143c <__alt_data_end+0xffff143c>
   114c4:	00800304 	movi	r2,12
   114c8:	98800015 	stw	r2,0(r19)
   114cc:	0005883a 	mov	r2,zero
   114d0:	003ff006 	br	11494 <__alt_data_end+0xffff1494>

000114d4 <_cleanup>:
   114d4:	00800074 	movhi	r2,1
   114d8:	109fb104 	addi	r2,r2,32452
   114dc:	11000017 	ldw	r4,0(r2)
   114e0:	01400074 	movhi	r5,1
   114e4:	294c5104 	addi	r5,r5,12612
   114e8:	0011ac81 	jmpi	11ac8 <_fwalk_reent>

000114ec <__sinit>:
   114ec:	20800e17 	ldw	r2,56(r4)
   114f0:	10000126 	beq	r2,zero,114f8 <__sinit+0xc>
   114f4:	f800283a 	ret
   114f8:	00111a01 	jmpi	111a0 <__sinit.part.1>

000114fc <__sfp_lock_acquire>:
   114fc:	f800283a 	ret

00011500 <__sfp_lock_release>:
   11500:	f800283a 	ret

00011504 <__sinit_lock_acquire>:
   11504:	f800283a 	ret

00011508 <__sinit_lock_release>:
   11508:	f800283a 	ret

0001150c <__fp_lock_all>:
   1150c:	00800074 	movhi	r2,1
   11510:	109fb204 	addi	r2,r2,32456
   11514:	11000017 	ldw	r4,0(r2)
   11518:	01400074 	movhi	r5,1
   1151c:	2944cf04 	addi	r5,r5,4924
   11520:	0011a041 	jmpi	11a04 <_fwalk>

00011524 <__fp_unlock_all>:
   11524:	00800074 	movhi	r2,1
   11528:	109fb204 	addi	r2,r2,32456
   1152c:	11000017 	ldw	r4,0(r2)
   11530:	01400074 	movhi	r5,1
   11534:	29446304 	addi	r5,r5,4492
   11538:	0011a041 	jmpi	11a04 <_fwalk>

0001153c <__sfvwrite_r>:
   1153c:	30800217 	ldw	r2,8(r6)
   11540:	10006726 	beq	r2,zero,116e0 <__sfvwrite_r+0x1a4>
   11544:	28c0030b 	ldhu	r3,12(r5)
   11548:	defff404 	addi	sp,sp,-48
   1154c:	dd400715 	stw	r21,28(sp)
   11550:	dd000615 	stw	r20,24(sp)
   11554:	dc000215 	stw	r16,8(sp)
   11558:	dfc00b15 	stw	ra,44(sp)
   1155c:	df000a15 	stw	fp,40(sp)
   11560:	ddc00915 	stw	r23,36(sp)
   11564:	dd800815 	stw	r22,32(sp)
   11568:	dcc00515 	stw	r19,20(sp)
   1156c:	dc800415 	stw	r18,16(sp)
   11570:	dc400315 	stw	r17,12(sp)
   11574:	1880020c 	andi	r2,r3,8
   11578:	2821883a 	mov	r16,r5
   1157c:	202b883a 	mov	r21,r4
   11580:	3029883a 	mov	r20,r6
   11584:	10002726 	beq	r2,zero,11624 <__sfvwrite_r+0xe8>
   11588:	28800417 	ldw	r2,16(r5)
   1158c:	10002526 	beq	r2,zero,11624 <__sfvwrite_r+0xe8>
   11590:	1880008c 	andi	r2,r3,2
   11594:	a4400017 	ldw	r17,0(r20)
   11598:	10002a26 	beq	r2,zero,11644 <__sfvwrite_r+0x108>
   1159c:	05a00034 	movhi	r22,32768
   115a0:	0027883a 	mov	r19,zero
   115a4:	0025883a 	mov	r18,zero
   115a8:	b5bf0004 	addi	r22,r22,-1024
   115ac:	980d883a 	mov	r6,r19
   115b0:	a809883a 	mov	r4,r21
   115b4:	90004626 	beq	r18,zero,116d0 <__sfvwrite_r+0x194>
   115b8:	900f883a 	mov	r7,r18
   115bc:	b480022e 	bgeu	r22,r18,115c8 <__sfvwrite_r+0x8c>
   115c0:	01e00034 	movhi	r7,32768
   115c4:	39ff0004 	addi	r7,r7,-1024
   115c8:	80800917 	ldw	r2,36(r16)
   115cc:	81400717 	ldw	r5,28(r16)
   115d0:	103ee83a 	callr	r2
   115d4:	00805a0e 	bge	zero,r2,11740 <__sfvwrite_r+0x204>
   115d8:	a0c00217 	ldw	r3,8(r20)
   115dc:	98a7883a 	add	r19,r19,r2
   115e0:	90a5c83a 	sub	r18,r18,r2
   115e4:	1885c83a 	sub	r2,r3,r2
   115e8:	a0800215 	stw	r2,8(r20)
   115ec:	103fef1e 	bne	r2,zero,115ac <__alt_data_end+0xffff15ac>
   115f0:	0005883a 	mov	r2,zero
   115f4:	dfc00b17 	ldw	ra,44(sp)
   115f8:	df000a17 	ldw	fp,40(sp)
   115fc:	ddc00917 	ldw	r23,36(sp)
   11600:	dd800817 	ldw	r22,32(sp)
   11604:	dd400717 	ldw	r21,28(sp)
   11608:	dd000617 	ldw	r20,24(sp)
   1160c:	dcc00517 	ldw	r19,20(sp)
   11610:	dc800417 	ldw	r18,16(sp)
   11614:	dc400317 	ldw	r17,12(sp)
   11618:	dc000217 	ldw	r16,8(sp)
   1161c:	dec00c04 	addi	sp,sp,48
   11620:	f800283a 	ret
   11624:	800b883a 	mov	r5,r16
   11628:	a809883a 	mov	r4,r21
   1162c:	0012f9c0 	call	12f9c <__swsetup_r>
   11630:	1000ee1e 	bne	r2,zero,119ec <__sfvwrite_r+0x4b0>
   11634:	80c0030b 	ldhu	r3,12(r16)
   11638:	a4400017 	ldw	r17,0(r20)
   1163c:	1880008c 	andi	r2,r3,2
   11640:	103fd61e 	bne	r2,zero,1159c <__alt_data_end+0xffff159c>
   11644:	1880004c 	andi	r2,r3,1
   11648:	1000421e 	bne	r2,zero,11754 <__sfvwrite_r+0x218>
   1164c:	0039883a 	mov	fp,zero
   11650:	0025883a 	mov	r18,zero
   11654:	90001a26 	beq	r18,zero,116c0 <__sfvwrite_r+0x184>
   11658:	1880800c 	andi	r2,r3,512
   1165c:	84c00217 	ldw	r19,8(r16)
   11660:	10002126 	beq	r2,zero,116e8 <__sfvwrite_r+0x1ac>
   11664:	982f883a 	mov	r23,r19
   11668:	94c09636 	bltu	r18,r19,118c4 <__sfvwrite_r+0x388>
   1166c:	1881200c 	andi	r2,r3,1152
   11670:	1000a11e 	bne	r2,zero,118f8 <__sfvwrite_r+0x3bc>
   11674:	81000017 	ldw	r4,0(r16)
   11678:	b80d883a 	mov	r6,r23
   1167c:	e00b883a 	mov	r5,fp
   11680:	00125c40 	call	125c4 <memmove>
   11684:	80c00217 	ldw	r3,8(r16)
   11688:	81000017 	ldw	r4,0(r16)
   1168c:	9005883a 	mov	r2,r18
   11690:	1ce7c83a 	sub	r19,r3,r19
   11694:	25cf883a 	add	r7,r4,r23
   11698:	84c00215 	stw	r19,8(r16)
   1169c:	81c00015 	stw	r7,0(r16)
   116a0:	a0c00217 	ldw	r3,8(r20)
   116a4:	e0b9883a 	add	fp,fp,r2
   116a8:	90a5c83a 	sub	r18,r18,r2
   116ac:	18a7c83a 	sub	r19,r3,r2
   116b0:	a4c00215 	stw	r19,8(r20)
   116b4:	983fce26 	beq	r19,zero,115f0 <__alt_data_end+0xffff15f0>
   116b8:	80c0030b 	ldhu	r3,12(r16)
   116bc:	903fe61e 	bne	r18,zero,11658 <__alt_data_end+0xffff1658>
   116c0:	8f000017 	ldw	fp,0(r17)
   116c4:	8c800117 	ldw	r18,4(r17)
   116c8:	8c400204 	addi	r17,r17,8
   116cc:	003fe106 	br	11654 <__alt_data_end+0xffff1654>
   116d0:	8cc00017 	ldw	r19,0(r17)
   116d4:	8c800117 	ldw	r18,4(r17)
   116d8:	8c400204 	addi	r17,r17,8
   116dc:	003fb306 	br	115ac <__alt_data_end+0xffff15ac>
   116e0:	0005883a 	mov	r2,zero
   116e4:	f800283a 	ret
   116e8:	81000017 	ldw	r4,0(r16)
   116ec:	80800417 	ldw	r2,16(r16)
   116f0:	11005a36 	bltu	r2,r4,1185c <__sfvwrite_r+0x320>
   116f4:	85c00517 	ldw	r23,20(r16)
   116f8:	95c05836 	bltu	r18,r23,1185c <__sfvwrite_r+0x320>
   116fc:	00a00034 	movhi	r2,32768
   11700:	10bfffc4 	addi	r2,r2,-1
   11704:	9009883a 	mov	r4,r18
   11708:	1480012e 	bgeu	r2,r18,11710 <__sfvwrite_r+0x1d4>
   1170c:	1009883a 	mov	r4,r2
   11710:	b80b883a 	mov	r5,r23
   11714:	0010ca40 	call	10ca4 <__divsi3>
   11718:	b80b883a 	mov	r5,r23
   1171c:	1009883a 	mov	r4,r2
   11720:	0013c500 	call	13c50 <__mulsi3>
   11724:	81400717 	ldw	r5,28(r16)
   11728:	80c00917 	ldw	r3,36(r16)
   1172c:	100f883a 	mov	r7,r2
   11730:	e00d883a 	mov	r6,fp
   11734:	a809883a 	mov	r4,r21
   11738:	183ee83a 	callr	r3
   1173c:	00bfd816 	blt	zero,r2,116a0 <__alt_data_end+0xffff16a0>
   11740:	8080030b 	ldhu	r2,12(r16)
   11744:	10801014 	ori	r2,r2,64
   11748:	8080030d 	sth	r2,12(r16)
   1174c:	00bfffc4 	movi	r2,-1
   11750:	003fa806 	br	115f4 <__alt_data_end+0xffff15f4>
   11754:	0027883a 	mov	r19,zero
   11758:	0011883a 	mov	r8,zero
   1175c:	0039883a 	mov	fp,zero
   11760:	0025883a 	mov	r18,zero
   11764:	90001f26 	beq	r18,zero,117e4 <__sfvwrite_r+0x2a8>
   11768:	40005a26 	beq	r8,zero,118d4 <__sfvwrite_r+0x398>
   1176c:	982d883a 	mov	r22,r19
   11770:	94c0012e 	bgeu	r18,r19,11778 <__sfvwrite_r+0x23c>
   11774:	902d883a 	mov	r22,r18
   11778:	81000017 	ldw	r4,0(r16)
   1177c:	80800417 	ldw	r2,16(r16)
   11780:	b02f883a 	mov	r23,r22
   11784:	81c00517 	ldw	r7,20(r16)
   11788:	1100032e 	bgeu	r2,r4,11798 <__sfvwrite_r+0x25c>
   1178c:	80c00217 	ldw	r3,8(r16)
   11790:	38c7883a 	add	r3,r7,r3
   11794:	1d801816 	blt	r3,r22,117f8 <__sfvwrite_r+0x2bc>
   11798:	b1c03e16 	blt	r22,r7,11894 <__sfvwrite_r+0x358>
   1179c:	80800917 	ldw	r2,36(r16)
   117a0:	81400717 	ldw	r5,28(r16)
   117a4:	e00d883a 	mov	r6,fp
   117a8:	da000115 	stw	r8,4(sp)
   117ac:	a809883a 	mov	r4,r21
   117b0:	103ee83a 	callr	r2
   117b4:	102f883a 	mov	r23,r2
   117b8:	da000117 	ldw	r8,4(sp)
   117bc:	00bfe00e 	bge	zero,r2,11740 <__alt_data_end+0xffff1740>
   117c0:	9de7c83a 	sub	r19,r19,r23
   117c4:	98001f26 	beq	r19,zero,11844 <__sfvwrite_r+0x308>
   117c8:	a0800217 	ldw	r2,8(r20)
   117cc:	e5f9883a 	add	fp,fp,r23
   117d0:	95e5c83a 	sub	r18,r18,r23
   117d4:	15efc83a 	sub	r23,r2,r23
   117d8:	a5c00215 	stw	r23,8(r20)
   117dc:	b83f8426 	beq	r23,zero,115f0 <__alt_data_end+0xffff15f0>
   117e0:	903fe11e 	bne	r18,zero,11768 <__alt_data_end+0xffff1768>
   117e4:	8f000017 	ldw	fp,0(r17)
   117e8:	8c800117 	ldw	r18,4(r17)
   117ec:	0011883a 	mov	r8,zero
   117f0:	8c400204 	addi	r17,r17,8
   117f4:	003fdb06 	br	11764 <__alt_data_end+0xffff1764>
   117f8:	180d883a 	mov	r6,r3
   117fc:	e00b883a 	mov	r5,fp
   11800:	da000115 	stw	r8,4(sp)
   11804:	d8c00015 	stw	r3,0(sp)
   11808:	00125c40 	call	125c4 <memmove>
   1180c:	d8c00017 	ldw	r3,0(sp)
   11810:	80800017 	ldw	r2,0(r16)
   11814:	800b883a 	mov	r5,r16
   11818:	a809883a 	mov	r4,r21
   1181c:	10c5883a 	add	r2,r2,r3
   11820:	80800015 	stw	r2,0(r16)
   11824:	d8c00015 	stw	r3,0(sp)
   11828:	00134640 	call	13464 <_fflush_r>
   1182c:	d8c00017 	ldw	r3,0(sp)
   11830:	da000117 	ldw	r8,4(sp)
   11834:	103fc21e 	bne	r2,zero,11740 <__alt_data_end+0xffff1740>
   11838:	182f883a 	mov	r23,r3
   1183c:	9de7c83a 	sub	r19,r19,r23
   11840:	983fe11e 	bne	r19,zero,117c8 <__alt_data_end+0xffff17c8>
   11844:	800b883a 	mov	r5,r16
   11848:	a809883a 	mov	r4,r21
   1184c:	00134640 	call	13464 <_fflush_r>
   11850:	103fbb1e 	bne	r2,zero,11740 <__alt_data_end+0xffff1740>
   11854:	0011883a 	mov	r8,zero
   11858:	003fdb06 	br	117c8 <__alt_data_end+0xffff17c8>
   1185c:	94c0012e 	bgeu	r18,r19,11864 <__sfvwrite_r+0x328>
   11860:	9027883a 	mov	r19,r18
   11864:	980d883a 	mov	r6,r19
   11868:	e00b883a 	mov	r5,fp
   1186c:	00125c40 	call	125c4 <memmove>
   11870:	80800217 	ldw	r2,8(r16)
   11874:	80c00017 	ldw	r3,0(r16)
   11878:	14c5c83a 	sub	r2,r2,r19
   1187c:	1cc7883a 	add	r3,r3,r19
   11880:	80800215 	stw	r2,8(r16)
   11884:	80c00015 	stw	r3,0(r16)
   11888:	10004326 	beq	r2,zero,11998 <__sfvwrite_r+0x45c>
   1188c:	9805883a 	mov	r2,r19
   11890:	003f8306 	br	116a0 <__alt_data_end+0xffff16a0>
   11894:	b00d883a 	mov	r6,r22
   11898:	e00b883a 	mov	r5,fp
   1189c:	da000115 	stw	r8,4(sp)
   118a0:	00125c40 	call	125c4 <memmove>
   118a4:	80800217 	ldw	r2,8(r16)
   118a8:	80c00017 	ldw	r3,0(r16)
   118ac:	da000117 	ldw	r8,4(sp)
   118b0:	1585c83a 	sub	r2,r2,r22
   118b4:	1dad883a 	add	r22,r3,r22
   118b8:	80800215 	stw	r2,8(r16)
   118bc:	85800015 	stw	r22,0(r16)
   118c0:	003fbf06 	br	117c0 <__alt_data_end+0xffff17c0>
   118c4:	81000017 	ldw	r4,0(r16)
   118c8:	9027883a 	mov	r19,r18
   118cc:	902f883a 	mov	r23,r18
   118d0:	003f6906 	br	11678 <__alt_data_end+0xffff1678>
   118d4:	900d883a 	mov	r6,r18
   118d8:	01400284 	movi	r5,10
   118dc:	e009883a 	mov	r4,fp
   118e0:	00123980 	call	12398 <memchr>
   118e4:	10003e26 	beq	r2,zero,119e0 <__sfvwrite_r+0x4a4>
   118e8:	10800044 	addi	r2,r2,1
   118ec:	1727c83a 	sub	r19,r2,fp
   118f0:	02000044 	movi	r8,1
   118f4:	003f9d06 	br	1176c <__alt_data_end+0xffff176c>
   118f8:	80800517 	ldw	r2,20(r16)
   118fc:	81400417 	ldw	r5,16(r16)
   11900:	81c00017 	ldw	r7,0(r16)
   11904:	10a7883a 	add	r19,r2,r2
   11908:	9885883a 	add	r2,r19,r2
   1190c:	1026d7fa 	srli	r19,r2,31
   11910:	396dc83a 	sub	r22,r7,r5
   11914:	b1000044 	addi	r4,r22,1
   11918:	9885883a 	add	r2,r19,r2
   1191c:	1027d07a 	srai	r19,r2,1
   11920:	2485883a 	add	r2,r4,r18
   11924:	980d883a 	mov	r6,r19
   11928:	9880022e 	bgeu	r19,r2,11934 <__sfvwrite_r+0x3f8>
   1192c:	1027883a 	mov	r19,r2
   11930:	100d883a 	mov	r6,r2
   11934:	18c1000c 	andi	r3,r3,1024
   11938:	18001c26 	beq	r3,zero,119ac <__sfvwrite_r+0x470>
   1193c:	300b883a 	mov	r5,r6
   11940:	a809883a 	mov	r4,r21
   11944:	0011b8c0 	call	11b8c <_malloc_r>
   11948:	102f883a 	mov	r23,r2
   1194c:	10002926 	beq	r2,zero,119f4 <__sfvwrite_r+0x4b8>
   11950:	81400417 	ldw	r5,16(r16)
   11954:	b00d883a 	mov	r6,r22
   11958:	1009883a 	mov	r4,r2
   1195c:	001247c0 	call	1247c <memcpy>
   11960:	8080030b 	ldhu	r2,12(r16)
   11964:	00fedfc4 	movi	r3,-1153
   11968:	10c4703a 	and	r2,r2,r3
   1196c:	10802014 	ori	r2,r2,128
   11970:	8080030d 	sth	r2,12(r16)
   11974:	bd89883a 	add	r4,r23,r22
   11978:	9d8fc83a 	sub	r7,r19,r22
   1197c:	85c00415 	stw	r23,16(r16)
   11980:	84c00515 	stw	r19,20(r16)
   11984:	81000015 	stw	r4,0(r16)
   11988:	9027883a 	mov	r19,r18
   1198c:	81c00215 	stw	r7,8(r16)
   11990:	902f883a 	mov	r23,r18
   11994:	003f3806 	br	11678 <__alt_data_end+0xffff1678>
   11998:	800b883a 	mov	r5,r16
   1199c:	a809883a 	mov	r4,r21
   119a0:	00134640 	call	13464 <_fflush_r>
   119a4:	103fb926 	beq	r2,zero,1188c <__alt_data_end+0xffff188c>
   119a8:	003f6506 	br	11740 <__alt_data_end+0xffff1740>
   119ac:	a809883a 	mov	r4,r21
   119b0:	00128480 	call	12848 <_realloc_r>
   119b4:	102f883a 	mov	r23,r2
   119b8:	103fee1e 	bne	r2,zero,11974 <__alt_data_end+0xffff1974>
   119bc:	81400417 	ldw	r5,16(r16)
   119c0:	a809883a 	mov	r4,r21
   119c4:	00136140 	call	13614 <_free_r>
   119c8:	8080030b 	ldhu	r2,12(r16)
   119cc:	00ffdfc4 	movi	r3,-129
   119d0:	1884703a 	and	r2,r3,r2
   119d4:	00c00304 	movi	r3,12
   119d8:	a8c00015 	stw	r3,0(r21)
   119dc:	003f5906 	br	11744 <__alt_data_end+0xffff1744>
   119e0:	94c00044 	addi	r19,r18,1
   119e4:	02000044 	movi	r8,1
   119e8:	003f6006 	br	1176c <__alt_data_end+0xffff176c>
   119ec:	00bfffc4 	movi	r2,-1
   119f0:	003f0006 	br	115f4 <__alt_data_end+0xffff15f4>
   119f4:	00800304 	movi	r2,12
   119f8:	a8800015 	stw	r2,0(r21)
   119fc:	8080030b 	ldhu	r2,12(r16)
   11a00:	003f5006 	br	11744 <__alt_data_end+0xffff1744>

00011a04 <_fwalk>:
   11a04:	defff704 	addi	sp,sp,-36
   11a08:	dd000415 	stw	r20,16(sp)
   11a0c:	dfc00815 	stw	ra,32(sp)
   11a10:	ddc00715 	stw	r23,28(sp)
   11a14:	dd800615 	stw	r22,24(sp)
   11a18:	dd400515 	stw	r21,20(sp)
   11a1c:	dcc00315 	stw	r19,12(sp)
   11a20:	dc800215 	stw	r18,8(sp)
   11a24:	dc400115 	stw	r17,4(sp)
   11a28:	dc000015 	stw	r16,0(sp)
   11a2c:	2500b804 	addi	r20,r4,736
   11a30:	a0002326 	beq	r20,zero,11ac0 <_fwalk+0xbc>
   11a34:	282b883a 	mov	r21,r5
   11a38:	002f883a 	mov	r23,zero
   11a3c:	05800044 	movi	r22,1
   11a40:	04ffffc4 	movi	r19,-1
   11a44:	a4400117 	ldw	r17,4(r20)
   11a48:	a4800217 	ldw	r18,8(r20)
   11a4c:	8c7fffc4 	addi	r17,r17,-1
   11a50:	88000d16 	blt	r17,zero,11a88 <_fwalk+0x84>
   11a54:	94000304 	addi	r16,r18,12
   11a58:	94800384 	addi	r18,r18,14
   11a5c:	8080000b 	ldhu	r2,0(r16)
   11a60:	8c7fffc4 	addi	r17,r17,-1
   11a64:	813ffd04 	addi	r4,r16,-12
   11a68:	b080042e 	bgeu	r22,r2,11a7c <_fwalk+0x78>
   11a6c:	9080000f 	ldh	r2,0(r18)
   11a70:	14c00226 	beq	r2,r19,11a7c <_fwalk+0x78>
   11a74:	a83ee83a 	callr	r21
   11a78:	b8aeb03a 	or	r23,r23,r2
   11a7c:	84001a04 	addi	r16,r16,104
   11a80:	94801a04 	addi	r18,r18,104
   11a84:	8cfff51e 	bne	r17,r19,11a5c <__alt_data_end+0xffff1a5c>
   11a88:	a5000017 	ldw	r20,0(r20)
   11a8c:	a03fed1e 	bne	r20,zero,11a44 <__alt_data_end+0xffff1a44>
   11a90:	b805883a 	mov	r2,r23
   11a94:	dfc00817 	ldw	ra,32(sp)
   11a98:	ddc00717 	ldw	r23,28(sp)
   11a9c:	dd800617 	ldw	r22,24(sp)
   11aa0:	dd400517 	ldw	r21,20(sp)
   11aa4:	dd000417 	ldw	r20,16(sp)
   11aa8:	dcc00317 	ldw	r19,12(sp)
   11aac:	dc800217 	ldw	r18,8(sp)
   11ab0:	dc400117 	ldw	r17,4(sp)
   11ab4:	dc000017 	ldw	r16,0(sp)
   11ab8:	dec00904 	addi	sp,sp,36
   11abc:	f800283a 	ret
   11ac0:	002f883a 	mov	r23,zero
   11ac4:	003ff206 	br	11a90 <__alt_data_end+0xffff1a90>

00011ac8 <_fwalk_reent>:
   11ac8:	defff704 	addi	sp,sp,-36
   11acc:	dd000415 	stw	r20,16(sp)
   11ad0:	dfc00815 	stw	ra,32(sp)
   11ad4:	ddc00715 	stw	r23,28(sp)
   11ad8:	dd800615 	stw	r22,24(sp)
   11adc:	dd400515 	stw	r21,20(sp)
   11ae0:	dcc00315 	stw	r19,12(sp)
   11ae4:	dc800215 	stw	r18,8(sp)
   11ae8:	dc400115 	stw	r17,4(sp)
   11aec:	dc000015 	stw	r16,0(sp)
   11af0:	2500b804 	addi	r20,r4,736
   11af4:	a0002326 	beq	r20,zero,11b84 <_fwalk_reent+0xbc>
   11af8:	282b883a 	mov	r21,r5
   11afc:	2027883a 	mov	r19,r4
   11b00:	002f883a 	mov	r23,zero
   11b04:	05800044 	movi	r22,1
   11b08:	04bfffc4 	movi	r18,-1
   11b0c:	a4400117 	ldw	r17,4(r20)
   11b10:	a4000217 	ldw	r16,8(r20)
   11b14:	8c7fffc4 	addi	r17,r17,-1
   11b18:	88000c16 	blt	r17,zero,11b4c <_fwalk_reent+0x84>
   11b1c:	84000304 	addi	r16,r16,12
   11b20:	8080000b 	ldhu	r2,0(r16)
   11b24:	8c7fffc4 	addi	r17,r17,-1
   11b28:	817ffd04 	addi	r5,r16,-12
   11b2c:	b080052e 	bgeu	r22,r2,11b44 <_fwalk_reent+0x7c>
   11b30:	8080008f 	ldh	r2,2(r16)
   11b34:	9809883a 	mov	r4,r19
   11b38:	14800226 	beq	r2,r18,11b44 <_fwalk_reent+0x7c>
   11b3c:	a83ee83a 	callr	r21
   11b40:	b8aeb03a 	or	r23,r23,r2
   11b44:	84001a04 	addi	r16,r16,104
   11b48:	8cbff51e 	bne	r17,r18,11b20 <__alt_data_end+0xffff1b20>
   11b4c:	a5000017 	ldw	r20,0(r20)
   11b50:	a03fee1e 	bne	r20,zero,11b0c <__alt_data_end+0xffff1b0c>
   11b54:	b805883a 	mov	r2,r23
   11b58:	dfc00817 	ldw	ra,32(sp)
   11b5c:	ddc00717 	ldw	r23,28(sp)
   11b60:	dd800617 	ldw	r22,24(sp)
   11b64:	dd400517 	ldw	r21,20(sp)
   11b68:	dd000417 	ldw	r20,16(sp)
   11b6c:	dcc00317 	ldw	r19,12(sp)
   11b70:	dc800217 	ldw	r18,8(sp)
   11b74:	dc400117 	ldw	r17,4(sp)
   11b78:	dc000017 	ldw	r16,0(sp)
   11b7c:	dec00904 	addi	sp,sp,36
   11b80:	f800283a 	ret
   11b84:	002f883a 	mov	r23,zero
   11b88:	003ff206 	br	11b54 <__alt_data_end+0xffff1b54>

00011b8c <_malloc_r>:
   11b8c:	defff504 	addi	sp,sp,-44
   11b90:	dc800315 	stw	r18,12(sp)
   11b94:	dfc00a15 	stw	ra,40(sp)
   11b98:	df000915 	stw	fp,36(sp)
   11b9c:	ddc00815 	stw	r23,32(sp)
   11ba0:	dd800715 	stw	r22,28(sp)
   11ba4:	dd400615 	stw	r21,24(sp)
   11ba8:	dd000515 	stw	r20,20(sp)
   11bac:	dcc00415 	stw	r19,16(sp)
   11bb0:	dc400215 	stw	r17,8(sp)
   11bb4:	dc000115 	stw	r16,4(sp)
   11bb8:	288002c4 	addi	r2,r5,11
   11bbc:	00c00584 	movi	r3,22
   11bc0:	2025883a 	mov	r18,r4
   11bc4:	18807f2e 	bgeu	r3,r2,11dc4 <_malloc_r+0x238>
   11bc8:	047ffe04 	movi	r17,-8
   11bcc:	1462703a 	and	r17,r2,r17
   11bd0:	8800a316 	blt	r17,zero,11e60 <_malloc_r+0x2d4>
   11bd4:	8940a236 	bltu	r17,r5,11e60 <_malloc_r+0x2d4>
   11bd8:	00142140 	call	14214 <__malloc_lock>
   11bdc:	00807dc4 	movi	r2,503
   11be0:	1441e92e 	bgeu	r2,r17,12388 <_malloc_r+0x7fc>
   11be4:	8804d27a 	srli	r2,r17,9
   11be8:	1000a126 	beq	r2,zero,11e70 <_malloc_r+0x2e4>
   11bec:	00c00104 	movi	r3,4
   11bf0:	18811e36 	bltu	r3,r2,1206c <_malloc_r+0x4e0>
   11bf4:	8804d1ba 	srli	r2,r17,6
   11bf8:	12000e44 	addi	r8,r2,57
   11bfc:	11c00e04 	addi	r7,r2,56
   11c00:	4209883a 	add	r4,r8,r8
   11c04:	04c00074 	movhi	r19,1
   11c08:	2109883a 	add	r4,r4,r4
   11c0c:	9cda2c04 	addi	r19,r19,26800
   11c10:	2109883a 	add	r4,r4,r4
   11c14:	9909883a 	add	r4,r19,r4
   11c18:	24000117 	ldw	r16,4(r4)
   11c1c:	213ffe04 	addi	r4,r4,-8
   11c20:	24009726 	beq	r4,r16,11e80 <_malloc_r+0x2f4>
   11c24:	80800117 	ldw	r2,4(r16)
   11c28:	01bfff04 	movi	r6,-4
   11c2c:	014003c4 	movi	r5,15
   11c30:	1184703a 	and	r2,r2,r6
   11c34:	1447c83a 	sub	r3,r2,r17
   11c38:	28c00716 	blt	r5,r3,11c58 <_malloc_r+0xcc>
   11c3c:	1800920e 	bge	r3,zero,11e88 <_malloc_r+0x2fc>
   11c40:	84000317 	ldw	r16,12(r16)
   11c44:	24008e26 	beq	r4,r16,11e80 <_malloc_r+0x2f4>
   11c48:	80800117 	ldw	r2,4(r16)
   11c4c:	1184703a 	and	r2,r2,r6
   11c50:	1447c83a 	sub	r3,r2,r17
   11c54:	28fff90e 	bge	r5,r3,11c3c <__alt_data_end+0xffff1c3c>
   11c58:	3809883a 	mov	r4,r7
   11c5c:	01800074 	movhi	r6,1
   11c60:	9c000417 	ldw	r16,16(r19)
   11c64:	319a2c04 	addi	r6,r6,26800
   11c68:	32000204 	addi	r8,r6,8
   11c6c:	82013426 	beq	r16,r8,12140 <_malloc_r+0x5b4>
   11c70:	80c00117 	ldw	r3,4(r16)
   11c74:	00bfff04 	movi	r2,-4
   11c78:	188e703a 	and	r7,r3,r2
   11c7c:	3c45c83a 	sub	r2,r7,r17
   11c80:	00c003c4 	movi	r3,15
   11c84:	18811f16 	blt	r3,r2,12104 <_malloc_r+0x578>
   11c88:	32000515 	stw	r8,20(r6)
   11c8c:	32000415 	stw	r8,16(r6)
   11c90:	10007f0e 	bge	r2,zero,11e90 <_malloc_r+0x304>
   11c94:	00807fc4 	movi	r2,511
   11c98:	11c0fd36 	bltu	r2,r7,12090 <_malloc_r+0x504>
   11c9c:	3806d0fa 	srli	r3,r7,3
   11ca0:	01c00044 	movi	r7,1
   11ca4:	30800117 	ldw	r2,4(r6)
   11ca8:	19400044 	addi	r5,r3,1
   11cac:	294b883a 	add	r5,r5,r5
   11cb0:	1807d0ba 	srai	r3,r3,2
   11cb4:	294b883a 	add	r5,r5,r5
   11cb8:	294b883a 	add	r5,r5,r5
   11cbc:	298b883a 	add	r5,r5,r6
   11cc0:	38c6983a 	sll	r3,r7,r3
   11cc4:	29c00017 	ldw	r7,0(r5)
   11cc8:	2a7ffe04 	addi	r9,r5,-8
   11ccc:	1886b03a 	or	r3,r3,r2
   11cd0:	82400315 	stw	r9,12(r16)
   11cd4:	81c00215 	stw	r7,8(r16)
   11cd8:	30c00115 	stw	r3,4(r6)
   11cdc:	2c000015 	stw	r16,0(r5)
   11ce0:	3c000315 	stw	r16,12(r7)
   11ce4:	2005d0ba 	srai	r2,r4,2
   11ce8:	01400044 	movi	r5,1
   11cec:	288a983a 	sll	r5,r5,r2
   11cf0:	19406f36 	bltu	r3,r5,11eb0 <_malloc_r+0x324>
   11cf4:	28c4703a 	and	r2,r5,r3
   11cf8:	10000a1e 	bne	r2,zero,11d24 <_malloc_r+0x198>
   11cfc:	00bfff04 	movi	r2,-4
   11d00:	294b883a 	add	r5,r5,r5
   11d04:	2088703a 	and	r4,r4,r2
   11d08:	28c4703a 	and	r2,r5,r3
   11d0c:	21000104 	addi	r4,r4,4
   11d10:	1000041e 	bne	r2,zero,11d24 <_malloc_r+0x198>
   11d14:	294b883a 	add	r5,r5,r5
   11d18:	28c4703a 	and	r2,r5,r3
   11d1c:	21000104 	addi	r4,r4,4
   11d20:	103ffc26 	beq	r2,zero,11d14 <__alt_data_end+0xffff1d14>
   11d24:	02bfff04 	movi	r10,-4
   11d28:	024003c4 	movi	r9,15
   11d2c:	21800044 	addi	r6,r4,1
   11d30:	318d883a 	add	r6,r6,r6
   11d34:	318d883a 	add	r6,r6,r6
   11d38:	318d883a 	add	r6,r6,r6
   11d3c:	998d883a 	add	r6,r19,r6
   11d40:	333ffe04 	addi	r12,r6,-8
   11d44:	2017883a 	mov	r11,r4
   11d48:	31800104 	addi	r6,r6,4
   11d4c:	34000017 	ldw	r16,0(r6)
   11d50:	31fffd04 	addi	r7,r6,-12
   11d54:	81c0041e 	bne	r16,r7,11d68 <_malloc_r+0x1dc>
   11d58:	0000fb06 	br	12148 <_malloc_r+0x5bc>
   11d5c:	1801030e 	bge	r3,zero,1216c <_malloc_r+0x5e0>
   11d60:	84000317 	ldw	r16,12(r16)
   11d64:	81c0f826 	beq	r16,r7,12148 <_malloc_r+0x5bc>
   11d68:	80800117 	ldw	r2,4(r16)
   11d6c:	1284703a 	and	r2,r2,r10
   11d70:	1447c83a 	sub	r3,r2,r17
   11d74:	48fff90e 	bge	r9,r3,11d5c <__alt_data_end+0xffff1d5c>
   11d78:	80800317 	ldw	r2,12(r16)
   11d7c:	81000217 	ldw	r4,8(r16)
   11d80:	89400054 	ori	r5,r17,1
   11d84:	81400115 	stw	r5,4(r16)
   11d88:	20800315 	stw	r2,12(r4)
   11d8c:	11000215 	stw	r4,8(r2)
   11d90:	8463883a 	add	r17,r16,r17
   11d94:	9c400515 	stw	r17,20(r19)
   11d98:	9c400415 	stw	r17,16(r19)
   11d9c:	18800054 	ori	r2,r3,1
   11da0:	88800115 	stw	r2,4(r17)
   11da4:	8a000315 	stw	r8,12(r17)
   11da8:	8a000215 	stw	r8,8(r17)
   11dac:	88e3883a 	add	r17,r17,r3
   11db0:	88c00015 	stw	r3,0(r17)
   11db4:	9009883a 	mov	r4,r18
   11db8:	00142380 	call	14238 <__malloc_unlock>
   11dbc:	80800204 	addi	r2,r16,8
   11dc0:	00001b06 	br	11e30 <_malloc_r+0x2a4>
   11dc4:	04400404 	movi	r17,16
   11dc8:	89402536 	bltu	r17,r5,11e60 <_malloc_r+0x2d4>
   11dcc:	00142140 	call	14214 <__malloc_lock>
   11dd0:	00800184 	movi	r2,6
   11dd4:	01000084 	movi	r4,2
   11dd8:	04c00074 	movhi	r19,1
   11ddc:	1085883a 	add	r2,r2,r2
   11de0:	9cda2c04 	addi	r19,r19,26800
   11de4:	1085883a 	add	r2,r2,r2
   11de8:	9885883a 	add	r2,r19,r2
   11dec:	14000117 	ldw	r16,4(r2)
   11df0:	10fffe04 	addi	r3,r2,-8
   11df4:	80c0d926 	beq	r16,r3,1215c <_malloc_r+0x5d0>
   11df8:	80c00117 	ldw	r3,4(r16)
   11dfc:	81000317 	ldw	r4,12(r16)
   11e00:	00bfff04 	movi	r2,-4
   11e04:	1884703a 	and	r2,r3,r2
   11e08:	81400217 	ldw	r5,8(r16)
   11e0c:	8085883a 	add	r2,r16,r2
   11e10:	10c00117 	ldw	r3,4(r2)
   11e14:	29000315 	stw	r4,12(r5)
   11e18:	21400215 	stw	r5,8(r4)
   11e1c:	18c00054 	ori	r3,r3,1
   11e20:	10c00115 	stw	r3,4(r2)
   11e24:	9009883a 	mov	r4,r18
   11e28:	00142380 	call	14238 <__malloc_unlock>
   11e2c:	80800204 	addi	r2,r16,8
   11e30:	dfc00a17 	ldw	ra,40(sp)
   11e34:	df000917 	ldw	fp,36(sp)
   11e38:	ddc00817 	ldw	r23,32(sp)
   11e3c:	dd800717 	ldw	r22,28(sp)
   11e40:	dd400617 	ldw	r21,24(sp)
   11e44:	dd000517 	ldw	r20,20(sp)
   11e48:	dcc00417 	ldw	r19,16(sp)
   11e4c:	dc800317 	ldw	r18,12(sp)
   11e50:	dc400217 	ldw	r17,8(sp)
   11e54:	dc000117 	ldw	r16,4(sp)
   11e58:	dec00b04 	addi	sp,sp,44
   11e5c:	f800283a 	ret
   11e60:	00800304 	movi	r2,12
   11e64:	90800015 	stw	r2,0(r18)
   11e68:	0005883a 	mov	r2,zero
   11e6c:	003ff006 	br	11e30 <__alt_data_end+0xffff1e30>
   11e70:	01002004 	movi	r4,128
   11e74:	02001004 	movi	r8,64
   11e78:	01c00fc4 	movi	r7,63
   11e7c:	003f6106 	br	11c04 <__alt_data_end+0xffff1c04>
   11e80:	4009883a 	mov	r4,r8
   11e84:	003f7506 	br	11c5c <__alt_data_end+0xffff1c5c>
   11e88:	81000317 	ldw	r4,12(r16)
   11e8c:	003fde06 	br	11e08 <__alt_data_end+0xffff1e08>
   11e90:	81c5883a 	add	r2,r16,r7
   11e94:	11400117 	ldw	r5,4(r2)
   11e98:	9009883a 	mov	r4,r18
   11e9c:	29400054 	ori	r5,r5,1
   11ea0:	11400115 	stw	r5,4(r2)
   11ea4:	00142380 	call	14238 <__malloc_unlock>
   11ea8:	80800204 	addi	r2,r16,8
   11eac:	003fe006 	br	11e30 <__alt_data_end+0xffff1e30>
   11eb0:	9c000217 	ldw	r16,8(r19)
   11eb4:	00bfff04 	movi	r2,-4
   11eb8:	85800117 	ldw	r22,4(r16)
   11ebc:	b0ac703a 	and	r22,r22,r2
   11ec0:	b4400336 	bltu	r22,r17,11ed0 <_malloc_r+0x344>
   11ec4:	b445c83a 	sub	r2,r22,r17
   11ec8:	00c003c4 	movi	r3,15
   11ecc:	18805d16 	blt	r3,r2,12044 <_malloc_r+0x4b8>
   11ed0:	05c00074 	movhi	r23,1
   11ed4:	008000b4 	movhi	r2,2
   11ed8:	10a66d04 	addi	r2,r2,-26188
   11edc:	bddfb304 	addi	r23,r23,32460
   11ee0:	15400017 	ldw	r21,0(r2)
   11ee4:	b8c00017 	ldw	r3,0(r23)
   11ee8:	00bfffc4 	movi	r2,-1
   11eec:	858d883a 	add	r6,r16,r22
   11ef0:	8d6b883a 	add	r21,r17,r21
   11ef4:	1880ea26 	beq	r3,r2,122a0 <_malloc_r+0x714>
   11ef8:	ad4403c4 	addi	r21,r21,4111
   11efc:	00bc0004 	movi	r2,-4096
   11f00:	a8aa703a 	and	r21,r21,r2
   11f04:	a80b883a 	mov	r5,r21
   11f08:	9009883a 	mov	r4,r18
   11f0c:	d9800015 	stw	r6,0(sp)
   11f10:	0012dac0 	call	12dac <_sbrk_r>
   11f14:	1029883a 	mov	r20,r2
   11f18:	00bfffc4 	movi	r2,-1
   11f1c:	d9800017 	ldw	r6,0(sp)
   11f20:	a080e826 	beq	r20,r2,122c4 <_malloc_r+0x738>
   11f24:	a180a636 	bltu	r20,r6,121c0 <_malloc_r+0x634>
   11f28:	070000b4 	movhi	fp,2
   11f2c:	e726aa04 	addi	fp,fp,-25944
   11f30:	e0800017 	ldw	r2,0(fp)
   11f34:	a887883a 	add	r3,r21,r2
   11f38:	e0c00015 	stw	r3,0(fp)
   11f3c:	3500e626 	beq	r6,r20,122d8 <_malloc_r+0x74c>
   11f40:	b9000017 	ldw	r4,0(r23)
   11f44:	00bfffc4 	movi	r2,-1
   11f48:	2080ee26 	beq	r4,r2,12304 <_malloc_r+0x778>
   11f4c:	a185c83a 	sub	r2,r20,r6
   11f50:	10c5883a 	add	r2,r2,r3
   11f54:	e0800015 	stw	r2,0(fp)
   11f58:	a0c001cc 	andi	r3,r20,7
   11f5c:	1800bc26 	beq	r3,zero,12250 <_malloc_r+0x6c4>
   11f60:	a0e9c83a 	sub	r20,r20,r3
   11f64:	00840204 	movi	r2,4104
   11f68:	a5000204 	addi	r20,r20,8
   11f6c:	10c7c83a 	sub	r3,r2,r3
   11f70:	a545883a 	add	r2,r20,r21
   11f74:	1083ffcc 	andi	r2,r2,4095
   11f78:	18abc83a 	sub	r21,r3,r2
   11f7c:	a80b883a 	mov	r5,r21
   11f80:	9009883a 	mov	r4,r18
   11f84:	0012dac0 	call	12dac <_sbrk_r>
   11f88:	00ffffc4 	movi	r3,-1
   11f8c:	10c0e126 	beq	r2,r3,12314 <_malloc_r+0x788>
   11f90:	1505c83a 	sub	r2,r2,r20
   11f94:	1545883a 	add	r2,r2,r21
   11f98:	10800054 	ori	r2,r2,1
   11f9c:	e0c00017 	ldw	r3,0(fp)
   11fa0:	9d000215 	stw	r20,8(r19)
   11fa4:	a0800115 	stw	r2,4(r20)
   11fa8:	a8c7883a 	add	r3,r21,r3
   11fac:	e0c00015 	stw	r3,0(fp)
   11fb0:	84c00e26 	beq	r16,r19,11fec <_malloc_r+0x460>
   11fb4:	018003c4 	movi	r6,15
   11fb8:	3580a72e 	bgeu	r6,r22,12258 <_malloc_r+0x6cc>
   11fbc:	81400117 	ldw	r5,4(r16)
   11fc0:	013ffe04 	movi	r4,-8
   11fc4:	b0bffd04 	addi	r2,r22,-12
   11fc8:	1104703a 	and	r2,r2,r4
   11fcc:	2900004c 	andi	r4,r5,1
   11fd0:	2088b03a 	or	r4,r4,r2
   11fd4:	81000115 	stw	r4,4(r16)
   11fd8:	01400144 	movi	r5,5
   11fdc:	8089883a 	add	r4,r16,r2
   11fe0:	21400115 	stw	r5,4(r4)
   11fe4:	21400215 	stw	r5,8(r4)
   11fe8:	3080cd36 	bltu	r6,r2,12320 <_malloc_r+0x794>
   11fec:	008000b4 	movhi	r2,2
   11ff0:	10a66c04 	addi	r2,r2,-26192
   11ff4:	11000017 	ldw	r4,0(r2)
   11ff8:	20c0012e 	bgeu	r4,r3,12000 <_malloc_r+0x474>
   11ffc:	10c00015 	stw	r3,0(r2)
   12000:	008000b4 	movhi	r2,2
   12004:	10a66b04 	addi	r2,r2,-26196
   12008:	11000017 	ldw	r4,0(r2)
   1200c:	9c000217 	ldw	r16,8(r19)
   12010:	20c0012e 	bgeu	r4,r3,12018 <_malloc_r+0x48c>
   12014:	10c00015 	stw	r3,0(r2)
   12018:	80c00117 	ldw	r3,4(r16)
   1201c:	00bfff04 	movi	r2,-4
   12020:	1886703a 	and	r3,r3,r2
   12024:	1c45c83a 	sub	r2,r3,r17
   12028:	1c400236 	bltu	r3,r17,12034 <_malloc_r+0x4a8>
   1202c:	00c003c4 	movi	r3,15
   12030:	18800416 	blt	r3,r2,12044 <_malloc_r+0x4b8>
   12034:	9009883a 	mov	r4,r18
   12038:	00142380 	call	14238 <__malloc_unlock>
   1203c:	0005883a 	mov	r2,zero
   12040:	003f7b06 	br	11e30 <__alt_data_end+0xffff1e30>
   12044:	88c00054 	ori	r3,r17,1
   12048:	80c00115 	stw	r3,4(r16)
   1204c:	8463883a 	add	r17,r16,r17
   12050:	10800054 	ori	r2,r2,1
   12054:	9c400215 	stw	r17,8(r19)
   12058:	88800115 	stw	r2,4(r17)
   1205c:	9009883a 	mov	r4,r18
   12060:	00142380 	call	14238 <__malloc_unlock>
   12064:	80800204 	addi	r2,r16,8
   12068:	003f7106 	br	11e30 <__alt_data_end+0xffff1e30>
   1206c:	00c00504 	movi	r3,20
   12070:	18804a2e 	bgeu	r3,r2,1219c <_malloc_r+0x610>
   12074:	00c01504 	movi	r3,84
   12078:	18806e36 	bltu	r3,r2,12234 <_malloc_r+0x6a8>
   1207c:	8804d33a 	srli	r2,r17,12
   12080:	12001bc4 	addi	r8,r2,111
   12084:	11c01b84 	addi	r7,r2,110
   12088:	4209883a 	add	r4,r8,r8
   1208c:	003edd06 	br	11c04 <__alt_data_end+0xffff1c04>
   12090:	3804d27a 	srli	r2,r7,9
   12094:	00c00104 	movi	r3,4
   12098:	1880442e 	bgeu	r3,r2,121ac <_malloc_r+0x620>
   1209c:	00c00504 	movi	r3,20
   120a0:	18808136 	bltu	r3,r2,122a8 <_malloc_r+0x71c>
   120a4:	11401704 	addi	r5,r2,92
   120a8:	10c016c4 	addi	r3,r2,91
   120ac:	294b883a 	add	r5,r5,r5
   120b0:	294b883a 	add	r5,r5,r5
   120b4:	294b883a 	add	r5,r5,r5
   120b8:	994b883a 	add	r5,r19,r5
   120bc:	28800017 	ldw	r2,0(r5)
   120c0:	01800074 	movhi	r6,1
   120c4:	297ffe04 	addi	r5,r5,-8
   120c8:	319a2c04 	addi	r6,r6,26800
   120cc:	28806526 	beq	r5,r2,12264 <_malloc_r+0x6d8>
   120d0:	01bfff04 	movi	r6,-4
   120d4:	10c00117 	ldw	r3,4(r2)
   120d8:	1986703a 	and	r3,r3,r6
   120dc:	38c0022e 	bgeu	r7,r3,120e8 <_malloc_r+0x55c>
   120e0:	10800217 	ldw	r2,8(r2)
   120e4:	28bffb1e 	bne	r5,r2,120d4 <__alt_data_end+0xffff20d4>
   120e8:	11400317 	ldw	r5,12(r2)
   120ec:	98c00117 	ldw	r3,4(r19)
   120f0:	81400315 	stw	r5,12(r16)
   120f4:	80800215 	stw	r2,8(r16)
   120f8:	2c000215 	stw	r16,8(r5)
   120fc:	14000315 	stw	r16,12(r2)
   12100:	003ef806 	br	11ce4 <__alt_data_end+0xffff1ce4>
   12104:	88c00054 	ori	r3,r17,1
   12108:	80c00115 	stw	r3,4(r16)
   1210c:	8463883a 	add	r17,r16,r17
   12110:	34400515 	stw	r17,20(r6)
   12114:	34400415 	stw	r17,16(r6)
   12118:	10c00054 	ori	r3,r2,1
   1211c:	8a000315 	stw	r8,12(r17)
   12120:	8a000215 	stw	r8,8(r17)
   12124:	88c00115 	stw	r3,4(r17)
   12128:	88a3883a 	add	r17,r17,r2
   1212c:	88800015 	stw	r2,0(r17)
   12130:	9009883a 	mov	r4,r18
   12134:	00142380 	call	14238 <__malloc_unlock>
   12138:	80800204 	addi	r2,r16,8
   1213c:	003f3c06 	br	11e30 <__alt_data_end+0xffff1e30>
   12140:	30c00117 	ldw	r3,4(r6)
   12144:	003ee706 	br	11ce4 <__alt_data_end+0xffff1ce4>
   12148:	5ac00044 	addi	r11,r11,1
   1214c:	588000cc 	andi	r2,r11,3
   12150:	31800204 	addi	r6,r6,8
   12154:	103efd1e 	bne	r2,zero,11d4c <__alt_data_end+0xffff1d4c>
   12158:	00002406 	br	121ec <_malloc_r+0x660>
   1215c:	14000317 	ldw	r16,12(r2)
   12160:	143f251e 	bne	r2,r16,11df8 <__alt_data_end+0xffff1df8>
   12164:	21000084 	addi	r4,r4,2
   12168:	003ebc06 	br	11c5c <__alt_data_end+0xffff1c5c>
   1216c:	8085883a 	add	r2,r16,r2
   12170:	10c00117 	ldw	r3,4(r2)
   12174:	81000317 	ldw	r4,12(r16)
   12178:	81400217 	ldw	r5,8(r16)
   1217c:	18c00054 	ori	r3,r3,1
   12180:	10c00115 	stw	r3,4(r2)
   12184:	29000315 	stw	r4,12(r5)
   12188:	21400215 	stw	r5,8(r4)
   1218c:	9009883a 	mov	r4,r18
   12190:	00142380 	call	14238 <__malloc_unlock>
   12194:	80800204 	addi	r2,r16,8
   12198:	003f2506 	br	11e30 <__alt_data_end+0xffff1e30>
   1219c:	12001704 	addi	r8,r2,92
   121a0:	11c016c4 	addi	r7,r2,91
   121a4:	4209883a 	add	r4,r8,r8
   121a8:	003e9606 	br	11c04 <__alt_data_end+0xffff1c04>
   121ac:	3804d1ba 	srli	r2,r7,6
   121b0:	11400e44 	addi	r5,r2,57
   121b4:	10c00e04 	addi	r3,r2,56
   121b8:	294b883a 	add	r5,r5,r5
   121bc:	003fbc06 	br	120b0 <__alt_data_end+0xffff20b0>
   121c0:	84ff5926 	beq	r16,r19,11f28 <__alt_data_end+0xffff1f28>
   121c4:	00800074 	movhi	r2,1
   121c8:	109a2c04 	addi	r2,r2,26800
   121cc:	14000217 	ldw	r16,8(r2)
   121d0:	00bfff04 	movi	r2,-4
   121d4:	80c00117 	ldw	r3,4(r16)
   121d8:	1886703a 	and	r3,r3,r2
   121dc:	003f9106 	br	12024 <__alt_data_end+0xffff2024>
   121e0:	60800217 	ldw	r2,8(r12)
   121e4:	213fffc4 	addi	r4,r4,-1
   121e8:	1300651e 	bne	r2,r12,12380 <_malloc_r+0x7f4>
   121ec:	208000cc 	andi	r2,r4,3
   121f0:	633ffe04 	addi	r12,r12,-8
   121f4:	103ffa1e 	bne	r2,zero,121e0 <__alt_data_end+0xffff21e0>
   121f8:	98800117 	ldw	r2,4(r19)
   121fc:	0146303a 	nor	r3,zero,r5
   12200:	1884703a 	and	r2,r3,r2
   12204:	98800115 	stw	r2,4(r19)
   12208:	294b883a 	add	r5,r5,r5
   1220c:	117f2836 	bltu	r2,r5,11eb0 <__alt_data_end+0xffff1eb0>
   12210:	283f2726 	beq	r5,zero,11eb0 <__alt_data_end+0xffff1eb0>
   12214:	2886703a 	and	r3,r5,r2
   12218:	5809883a 	mov	r4,r11
   1221c:	183ec31e 	bne	r3,zero,11d2c <__alt_data_end+0xffff1d2c>
   12220:	294b883a 	add	r5,r5,r5
   12224:	2886703a 	and	r3,r5,r2
   12228:	21000104 	addi	r4,r4,4
   1222c:	183ffc26 	beq	r3,zero,12220 <__alt_data_end+0xffff2220>
   12230:	003ebe06 	br	11d2c <__alt_data_end+0xffff1d2c>
   12234:	00c05504 	movi	r3,340
   12238:	18801236 	bltu	r3,r2,12284 <_malloc_r+0x6f8>
   1223c:	8804d3fa 	srli	r2,r17,15
   12240:	12001e04 	addi	r8,r2,120
   12244:	11c01dc4 	addi	r7,r2,119
   12248:	4209883a 	add	r4,r8,r8
   1224c:	003e6d06 	br	11c04 <__alt_data_end+0xffff1c04>
   12250:	00c40004 	movi	r3,4096
   12254:	003f4606 	br	11f70 <__alt_data_end+0xffff1f70>
   12258:	00800044 	movi	r2,1
   1225c:	a0800115 	stw	r2,4(r20)
   12260:	003f7406 	br	12034 <__alt_data_end+0xffff2034>
   12264:	1805d0ba 	srai	r2,r3,2
   12268:	01c00044 	movi	r7,1
   1226c:	30c00117 	ldw	r3,4(r6)
   12270:	388e983a 	sll	r7,r7,r2
   12274:	2805883a 	mov	r2,r5
   12278:	38c6b03a 	or	r3,r7,r3
   1227c:	30c00115 	stw	r3,4(r6)
   12280:	003f9b06 	br	120f0 <__alt_data_end+0xffff20f0>
   12284:	00c15504 	movi	r3,1364
   12288:	18801a36 	bltu	r3,r2,122f4 <_malloc_r+0x768>
   1228c:	8804d4ba 	srli	r2,r17,18
   12290:	12001f44 	addi	r8,r2,125
   12294:	11c01f04 	addi	r7,r2,124
   12298:	4209883a 	add	r4,r8,r8
   1229c:	003e5906 	br	11c04 <__alt_data_end+0xffff1c04>
   122a0:	ad400404 	addi	r21,r21,16
   122a4:	003f1706 	br	11f04 <__alt_data_end+0xffff1f04>
   122a8:	00c01504 	movi	r3,84
   122ac:	18802336 	bltu	r3,r2,1233c <_malloc_r+0x7b0>
   122b0:	3804d33a 	srli	r2,r7,12
   122b4:	11401bc4 	addi	r5,r2,111
   122b8:	10c01b84 	addi	r3,r2,110
   122bc:	294b883a 	add	r5,r5,r5
   122c0:	003f7b06 	br	120b0 <__alt_data_end+0xffff20b0>
   122c4:	9c000217 	ldw	r16,8(r19)
   122c8:	00bfff04 	movi	r2,-4
   122cc:	80c00117 	ldw	r3,4(r16)
   122d0:	1886703a 	and	r3,r3,r2
   122d4:	003f5306 	br	12024 <__alt_data_end+0xffff2024>
   122d8:	3083ffcc 	andi	r2,r6,4095
   122dc:	103f181e 	bne	r2,zero,11f40 <__alt_data_end+0xffff1f40>
   122e0:	99000217 	ldw	r4,8(r19)
   122e4:	b545883a 	add	r2,r22,r21
   122e8:	10800054 	ori	r2,r2,1
   122ec:	20800115 	stw	r2,4(r4)
   122f0:	003f3e06 	br	11fec <__alt_data_end+0xffff1fec>
   122f4:	01003f84 	movi	r4,254
   122f8:	02001fc4 	movi	r8,127
   122fc:	01c01f84 	movi	r7,126
   12300:	003e4006 	br	11c04 <__alt_data_end+0xffff1c04>
   12304:	00800074 	movhi	r2,1
   12308:	109fb304 	addi	r2,r2,32460
   1230c:	15000015 	stw	r20,0(r2)
   12310:	003f1106 	br	11f58 <__alt_data_end+0xffff1f58>
   12314:	00800044 	movi	r2,1
   12318:	002b883a 	mov	r21,zero
   1231c:	003f1f06 	br	11f9c <__alt_data_end+0xffff1f9c>
   12320:	81400204 	addi	r5,r16,8
   12324:	9009883a 	mov	r4,r18
   12328:	00136140 	call	13614 <_free_r>
   1232c:	008000b4 	movhi	r2,2
   12330:	10a6aa04 	addi	r2,r2,-25944
   12334:	10c00017 	ldw	r3,0(r2)
   12338:	003f2c06 	br	11fec <__alt_data_end+0xffff1fec>
   1233c:	00c05504 	movi	r3,340
   12340:	18800536 	bltu	r3,r2,12358 <_malloc_r+0x7cc>
   12344:	3804d3fa 	srli	r2,r7,15
   12348:	11401e04 	addi	r5,r2,120
   1234c:	10c01dc4 	addi	r3,r2,119
   12350:	294b883a 	add	r5,r5,r5
   12354:	003f5606 	br	120b0 <__alt_data_end+0xffff20b0>
   12358:	00c15504 	movi	r3,1364
   1235c:	18800536 	bltu	r3,r2,12374 <_malloc_r+0x7e8>
   12360:	3804d4ba 	srli	r2,r7,18
   12364:	11401f44 	addi	r5,r2,125
   12368:	10c01f04 	addi	r3,r2,124
   1236c:	294b883a 	add	r5,r5,r5
   12370:	003f4f06 	br	120b0 <__alt_data_end+0xffff20b0>
   12374:	01403f84 	movi	r5,254
   12378:	00c01f84 	movi	r3,126
   1237c:	003f4c06 	br	120b0 <__alt_data_end+0xffff20b0>
   12380:	98800117 	ldw	r2,4(r19)
   12384:	003fa006 	br	12208 <__alt_data_end+0xffff2208>
   12388:	8808d0fa 	srli	r4,r17,3
   1238c:	20800044 	addi	r2,r4,1
   12390:	1085883a 	add	r2,r2,r2
   12394:	003e9006 	br	11dd8 <__alt_data_end+0xffff1dd8>

00012398 <memchr>:
   12398:	208000cc 	andi	r2,r4,3
   1239c:	280f883a 	mov	r7,r5
   123a0:	10003426 	beq	r2,zero,12474 <memchr+0xdc>
   123a4:	30bfffc4 	addi	r2,r6,-1
   123a8:	30001a26 	beq	r6,zero,12414 <memchr+0x7c>
   123ac:	20c00003 	ldbu	r3,0(r4)
   123b0:	29803fcc 	andi	r6,r5,255
   123b4:	30c0051e 	bne	r6,r3,123cc <memchr+0x34>
   123b8:	00001806 	br	1241c <memchr+0x84>
   123bc:	10001526 	beq	r2,zero,12414 <memchr+0x7c>
   123c0:	20c00003 	ldbu	r3,0(r4)
   123c4:	10bfffc4 	addi	r2,r2,-1
   123c8:	30c01426 	beq	r6,r3,1241c <memchr+0x84>
   123cc:	21000044 	addi	r4,r4,1
   123d0:	20c000cc 	andi	r3,r4,3
   123d4:	183ff91e 	bne	r3,zero,123bc <__alt_data_end+0xffff23bc>
   123d8:	020000c4 	movi	r8,3
   123dc:	40801136 	bltu	r8,r2,12424 <memchr+0x8c>
   123e0:	10000c26 	beq	r2,zero,12414 <memchr+0x7c>
   123e4:	20c00003 	ldbu	r3,0(r4)
   123e8:	29403fcc 	andi	r5,r5,255
   123ec:	28c00b26 	beq	r5,r3,1241c <memchr+0x84>
   123f0:	20c00044 	addi	r3,r4,1
   123f4:	39803fcc 	andi	r6,r7,255
   123f8:	2089883a 	add	r4,r4,r2
   123fc:	00000306 	br	1240c <memchr+0x74>
   12400:	18c00044 	addi	r3,r3,1
   12404:	197fffc3 	ldbu	r5,-1(r3)
   12408:	31400526 	beq	r6,r5,12420 <memchr+0x88>
   1240c:	1805883a 	mov	r2,r3
   12410:	20fffb1e 	bne	r4,r3,12400 <__alt_data_end+0xffff2400>
   12414:	0005883a 	mov	r2,zero
   12418:	f800283a 	ret
   1241c:	2005883a 	mov	r2,r4
   12420:	f800283a 	ret
   12424:	28c03fcc 	andi	r3,r5,255
   12428:	1812923a 	slli	r9,r3,8
   1242c:	02ffbff4 	movhi	r11,65279
   12430:	02a02074 	movhi	r10,32897
   12434:	48d2b03a 	or	r9,r9,r3
   12438:	4806943a 	slli	r3,r9,16
   1243c:	5affbfc4 	addi	r11,r11,-257
   12440:	52a02004 	addi	r10,r10,-32640
   12444:	48d2b03a 	or	r9,r9,r3
   12448:	20c00017 	ldw	r3,0(r4)
   1244c:	48c6f03a 	xor	r3,r9,r3
   12450:	1acd883a 	add	r6,r3,r11
   12454:	00c6303a 	nor	r3,zero,r3
   12458:	30c6703a 	and	r3,r6,r3
   1245c:	1a86703a 	and	r3,r3,r10
   12460:	183fe01e 	bne	r3,zero,123e4 <__alt_data_end+0xffff23e4>
   12464:	10bfff04 	addi	r2,r2,-4
   12468:	21000104 	addi	r4,r4,4
   1246c:	40bff636 	bltu	r8,r2,12448 <__alt_data_end+0xffff2448>
   12470:	003fdb06 	br	123e0 <__alt_data_end+0xffff23e0>
   12474:	3005883a 	mov	r2,r6
   12478:	003fd706 	br	123d8 <__alt_data_end+0xffff23d8>

0001247c <memcpy>:
   1247c:	defffd04 	addi	sp,sp,-12
   12480:	dfc00215 	stw	ra,8(sp)
   12484:	dc400115 	stw	r17,4(sp)
   12488:	dc000015 	stw	r16,0(sp)
   1248c:	00c003c4 	movi	r3,15
   12490:	2005883a 	mov	r2,r4
   12494:	1980452e 	bgeu	r3,r6,125ac <memcpy+0x130>
   12498:	2906b03a 	or	r3,r5,r4
   1249c:	18c000cc 	andi	r3,r3,3
   124a0:	1800441e 	bne	r3,zero,125b4 <memcpy+0x138>
   124a4:	347ffc04 	addi	r17,r6,-16
   124a8:	8822d13a 	srli	r17,r17,4
   124ac:	28c00104 	addi	r3,r5,4
   124b0:	23400104 	addi	r13,r4,4
   124b4:	8820913a 	slli	r16,r17,4
   124b8:	2b000204 	addi	r12,r5,8
   124bc:	22c00204 	addi	r11,r4,8
   124c0:	84000504 	addi	r16,r16,20
   124c4:	2a800304 	addi	r10,r5,12
   124c8:	22400304 	addi	r9,r4,12
   124cc:	2c21883a 	add	r16,r5,r16
   124d0:	2811883a 	mov	r8,r5
   124d4:	200f883a 	mov	r7,r4
   124d8:	41000017 	ldw	r4,0(r8)
   124dc:	1fc00017 	ldw	ra,0(r3)
   124e0:	63c00017 	ldw	r15,0(r12)
   124e4:	39000015 	stw	r4,0(r7)
   124e8:	53800017 	ldw	r14,0(r10)
   124ec:	6fc00015 	stw	ra,0(r13)
   124f0:	5bc00015 	stw	r15,0(r11)
   124f4:	4b800015 	stw	r14,0(r9)
   124f8:	18c00404 	addi	r3,r3,16
   124fc:	39c00404 	addi	r7,r7,16
   12500:	42000404 	addi	r8,r8,16
   12504:	6b400404 	addi	r13,r13,16
   12508:	63000404 	addi	r12,r12,16
   1250c:	5ac00404 	addi	r11,r11,16
   12510:	52800404 	addi	r10,r10,16
   12514:	4a400404 	addi	r9,r9,16
   12518:	1c3fef1e 	bne	r3,r16,124d8 <__alt_data_end+0xffff24d8>
   1251c:	89c00044 	addi	r7,r17,1
   12520:	380e913a 	slli	r7,r7,4
   12524:	310003cc 	andi	r4,r6,15
   12528:	02c000c4 	movi	r11,3
   1252c:	11c7883a 	add	r3,r2,r7
   12530:	29cb883a 	add	r5,r5,r7
   12534:	5900212e 	bgeu	r11,r4,125bc <memcpy+0x140>
   12538:	1813883a 	mov	r9,r3
   1253c:	2811883a 	mov	r8,r5
   12540:	200f883a 	mov	r7,r4
   12544:	42800017 	ldw	r10,0(r8)
   12548:	4a400104 	addi	r9,r9,4
   1254c:	39ffff04 	addi	r7,r7,-4
   12550:	4abfff15 	stw	r10,-4(r9)
   12554:	42000104 	addi	r8,r8,4
   12558:	59fffa36 	bltu	r11,r7,12544 <__alt_data_end+0xffff2544>
   1255c:	213fff04 	addi	r4,r4,-4
   12560:	2008d0ba 	srli	r4,r4,2
   12564:	318000cc 	andi	r6,r6,3
   12568:	21000044 	addi	r4,r4,1
   1256c:	2109883a 	add	r4,r4,r4
   12570:	2109883a 	add	r4,r4,r4
   12574:	1907883a 	add	r3,r3,r4
   12578:	290b883a 	add	r5,r5,r4
   1257c:	30000626 	beq	r6,zero,12598 <memcpy+0x11c>
   12580:	198d883a 	add	r6,r3,r6
   12584:	29c00003 	ldbu	r7,0(r5)
   12588:	18c00044 	addi	r3,r3,1
   1258c:	29400044 	addi	r5,r5,1
   12590:	19ffffc5 	stb	r7,-1(r3)
   12594:	19bffb1e 	bne	r3,r6,12584 <__alt_data_end+0xffff2584>
   12598:	dfc00217 	ldw	ra,8(sp)
   1259c:	dc400117 	ldw	r17,4(sp)
   125a0:	dc000017 	ldw	r16,0(sp)
   125a4:	dec00304 	addi	sp,sp,12
   125a8:	f800283a 	ret
   125ac:	2007883a 	mov	r3,r4
   125b0:	003ff206 	br	1257c <__alt_data_end+0xffff257c>
   125b4:	2007883a 	mov	r3,r4
   125b8:	003ff106 	br	12580 <__alt_data_end+0xffff2580>
   125bc:	200d883a 	mov	r6,r4
   125c0:	003fee06 	br	1257c <__alt_data_end+0xffff257c>

000125c4 <memmove>:
   125c4:	2005883a 	mov	r2,r4
   125c8:	29000b2e 	bgeu	r5,r4,125f8 <memmove+0x34>
   125cc:	298f883a 	add	r7,r5,r6
   125d0:	21c0092e 	bgeu	r4,r7,125f8 <memmove+0x34>
   125d4:	2187883a 	add	r3,r4,r6
   125d8:	198bc83a 	sub	r5,r3,r6
   125dc:	30004826 	beq	r6,zero,12700 <memmove+0x13c>
   125e0:	39ffffc4 	addi	r7,r7,-1
   125e4:	39000003 	ldbu	r4,0(r7)
   125e8:	18ffffc4 	addi	r3,r3,-1
   125ec:	19000005 	stb	r4,0(r3)
   125f0:	28fffb1e 	bne	r5,r3,125e0 <__alt_data_end+0xffff25e0>
   125f4:	f800283a 	ret
   125f8:	00c003c4 	movi	r3,15
   125fc:	1980412e 	bgeu	r3,r6,12704 <memmove+0x140>
   12600:	2886b03a 	or	r3,r5,r2
   12604:	18c000cc 	andi	r3,r3,3
   12608:	1800401e 	bne	r3,zero,1270c <memmove+0x148>
   1260c:	33fffc04 	addi	r15,r6,-16
   12610:	781ed13a 	srli	r15,r15,4
   12614:	28c00104 	addi	r3,r5,4
   12618:	13400104 	addi	r13,r2,4
   1261c:	781c913a 	slli	r14,r15,4
   12620:	2b000204 	addi	r12,r5,8
   12624:	12c00204 	addi	r11,r2,8
   12628:	73800504 	addi	r14,r14,20
   1262c:	2a800304 	addi	r10,r5,12
   12630:	12400304 	addi	r9,r2,12
   12634:	2b9d883a 	add	r14,r5,r14
   12638:	2811883a 	mov	r8,r5
   1263c:	100f883a 	mov	r7,r2
   12640:	41000017 	ldw	r4,0(r8)
   12644:	39c00404 	addi	r7,r7,16
   12648:	18c00404 	addi	r3,r3,16
   1264c:	393ffc15 	stw	r4,-16(r7)
   12650:	193ffc17 	ldw	r4,-16(r3)
   12654:	6b400404 	addi	r13,r13,16
   12658:	5ac00404 	addi	r11,r11,16
   1265c:	693ffc15 	stw	r4,-16(r13)
   12660:	61000017 	ldw	r4,0(r12)
   12664:	4a400404 	addi	r9,r9,16
   12668:	42000404 	addi	r8,r8,16
   1266c:	593ffc15 	stw	r4,-16(r11)
   12670:	51000017 	ldw	r4,0(r10)
   12674:	63000404 	addi	r12,r12,16
   12678:	52800404 	addi	r10,r10,16
   1267c:	493ffc15 	stw	r4,-16(r9)
   12680:	1bbfef1e 	bne	r3,r14,12640 <__alt_data_end+0xffff2640>
   12684:	79000044 	addi	r4,r15,1
   12688:	2008913a 	slli	r4,r4,4
   1268c:	328003cc 	andi	r10,r6,15
   12690:	02c000c4 	movi	r11,3
   12694:	1107883a 	add	r3,r2,r4
   12698:	290b883a 	add	r5,r5,r4
   1269c:	5a801e2e 	bgeu	r11,r10,12718 <memmove+0x154>
   126a0:	1813883a 	mov	r9,r3
   126a4:	2811883a 	mov	r8,r5
   126a8:	500f883a 	mov	r7,r10
   126ac:	41000017 	ldw	r4,0(r8)
   126b0:	4a400104 	addi	r9,r9,4
   126b4:	39ffff04 	addi	r7,r7,-4
   126b8:	493fff15 	stw	r4,-4(r9)
   126bc:	42000104 	addi	r8,r8,4
   126c0:	59fffa36 	bltu	r11,r7,126ac <__alt_data_end+0xffff26ac>
   126c4:	513fff04 	addi	r4,r10,-4
   126c8:	2008d0ba 	srli	r4,r4,2
   126cc:	318000cc 	andi	r6,r6,3
   126d0:	21000044 	addi	r4,r4,1
   126d4:	2109883a 	add	r4,r4,r4
   126d8:	2109883a 	add	r4,r4,r4
   126dc:	1907883a 	add	r3,r3,r4
   126e0:	290b883a 	add	r5,r5,r4
   126e4:	30000b26 	beq	r6,zero,12714 <memmove+0x150>
   126e8:	198d883a 	add	r6,r3,r6
   126ec:	29c00003 	ldbu	r7,0(r5)
   126f0:	18c00044 	addi	r3,r3,1
   126f4:	29400044 	addi	r5,r5,1
   126f8:	19ffffc5 	stb	r7,-1(r3)
   126fc:	19bffb1e 	bne	r3,r6,126ec <__alt_data_end+0xffff26ec>
   12700:	f800283a 	ret
   12704:	1007883a 	mov	r3,r2
   12708:	003ff606 	br	126e4 <__alt_data_end+0xffff26e4>
   1270c:	1007883a 	mov	r3,r2
   12710:	003ff506 	br	126e8 <__alt_data_end+0xffff26e8>
   12714:	f800283a 	ret
   12718:	500d883a 	mov	r6,r10
   1271c:	003ff106 	br	126e4 <__alt_data_end+0xffff26e4>

00012720 <memset>:
   12720:	20c000cc 	andi	r3,r4,3
   12724:	2005883a 	mov	r2,r4
   12728:	18004426 	beq	r3,zero,1283c <memset+0x11c>
   1272c:	31ffffc4 	addi	r7,r6,-1
   12730:	30004026 	beq	r6,zero,12834 <memset+0x114>
   12734:	2813883a 	mov	r9,r5
   12738:	200d883a 	mov	r6,r4
   1273c:	2007883a 	mov	r3,r4
   12740:	00000406 	br	12754 <memset+0x34>
   12744:	3a3fffc4 	addi	r8,r7,-1
   12748:	31800044 	addi	r6,r6,1
   1274c:	38003926 	beq	r7,zero,12834 <memset+0x114>
   12750:	400f883a 	mov	r7,r8
   12754:	18c00044 	addi	r3,r3,1
   12758:	32400005 	stb	r9,0(r6)
   1275c:	1a0000cc 	andi	r8,r3,3
   12760:	403ff81e 	bne	r8,zero,12744 <__alt_data_end+0xffff2744>
   12764:	010000c4 	movi	r4,3
   12768:	21c02d2e 	bgeu	r4,r7,12820 <memset+0x100>
   1276c:	29003fcc 	andi	r4,r5,255
   12770:	200c923a 	slli	r6,r4,8
   12774:	3108b03a 	or	r4,r6,r4
   12778:	200c943a 	slli	r6,r4,16
   1277c:	218cb03a 	or	r6,r4,r6
   12780:	010003c4 	movi	r4,15
   12784:	21c0182e 	bgeu	r4,r7,127e8 <memset+0xc8>
   12788:	3b3ffc04 	addi	r12,r7,-16
   1278c:	6018d13a 	srli	r12,r12,4
   12790:	1a000104 	addi	r8,r3,4
   12794:	1ac00204 	addi	r11,r3,8
   12798:	6008913a 	slli	r4,r12,4
   1279c:	1a800304 	addi	r10,r3,12
   127a0:	1813883a 	mov	r9,r3
   127a4:	21000504 	addi	r4,r4,20
   127a8:	1909883a 	add	r4,r3,r4
   127ac:	49800015 	stw	r6,0(r9)
   127b0:	41800015 	stw	r6,0(r8)
   127b4:	59800015 	stw	r6,0(r11)
   127b8:	51800015 	stw	r6,0(r10)
   127bc:	42000404 	addi	r8,r8,16
   127c0:	4a400404 	addi	r9,r9,16
   127c4:	5ac00404 	addi	r11,r11,16
   127c8:	52800404 	addi	r10,r10,16
   127cc:	413ff71e 	bne	r8,r4,127ac <__alt_data_end+0xffff27ac>
   127d0:	63000044 	addi	r12,r12,1
   127d4:	6018913a 	slli	r12,r12,4
   127d8:	39c003cc 	andi	r7,r7,15
   127dc:	010000c4 	movi	r4,3
   127e0:	1b07883a 	add	r3,r3,r12
   127e4:	21c00e2e 	bgeu	r4,r7,12820 <memset+0x100>
   127e8:	1813883a 	mov	r9,r3
   127ec:	3811883a 	mov	r8,r7
   127f0:	010000c4 	movi	r4,3
   127f4:	49800015 	stw	r6,0(r9)
   127f8:	423fff04 	addi	r8,r8,-4
   127fc:	4a400104 	addi	r9,r9,4
   12800:	223ffc36 	bltu	r4,r8,127f4 <__alt_data_end+0xffff27f4>
   12804:	393fff04 	addi	r4,r7,-4
   12808:	2008d0ba 	srli	r4,r4,2
   1280c:	39c000cc 	andi	r7,r7,3
   12810:	21000044 	addi	r4,r4,1
   12814:	2109883a 	add	r4,r4,r4
   12818:	2109883a 	add	r4,r4,r4
   1281c:	1907883a 	add	r3,r3,r4
   12820:	38000526 	beq	r7,zero,12838 <memset+0x118>
   12824:	19cf883a 	add	r7,r3,r7
   12828:	19400005 	stb	r5,0(r3)
   1282c:	18c00044 	addi	r3,r3,1
   12830:	38fffd1e 	bne	r7,r3,12828 <__alt_data_end+0xffff2828>
   12834:	f800283a 	ret
   12838:	f800283a 	ret
   1283c:	2007883a 	mov	r3,r4
   12840:	300f883a 	mov	r7,r6
   12844:	003fc706 	br	12764 <__alt_data_end+0xffff2764>

00012848 <_realloc_r>:
   12848:	defff604 	addi	sp,sp,-40
   1284c:	dc800215 	stw	r18,8(sp)
   12850:	dfc00915 	stw	ra,36(sp)
   12854:	df000815 	stw	fp,32(sp)
   12858:	ddc00715 	stw	r23,28(sp)
   1285c:	dd800615 	stw	r22,24(sp)
   12860:	dd400515 	stw	r21,20(sp)
   12864:	dd000415 	stw	r20,16(sp)
   12868:	dcc00315 	stw	r19,12(sp)
   1286c:	dc400115 	stw	r17,4(sp)
   12870:	dc000015 	stw	r16,0(sp)
   12874:	3025883a 	mov	r18,r6
   12878:	2800b726 	beq	r5,zero,12b58 <_realloc_r+0x310>
   1287c:	282b883a 	mov	r21,r5
   12880:	2029883a 	mov	r20,r4
   12884:	00142140 	call	14214 <__malloc_lock>
   12888:	a8bfff17 	ldw	r2,-4(r21)
   1288c:	043fff04 	movi	r16,-4
   12890:	90c002c4 	addi	r3,r18,11
   12894:	01000584 	movi	r4,22
   12898:	acfffe04 	addi	r19,r21,-8
   1289c:	1420703a 	and	r16,r2,r16
   128a0:	20c0332e 	bgeu	r4,r3,12970 <_realloc_r+0x128>
   128a4:	047ffe04 	movi	r17,-8
   128a8:	1c62703a 	and	r17,r3,r17
   128ac:	8807883a 	mov	r3,r17
   128b0:	88005816 	blt	r17,zero,12a14 <_realloc_r+0x1cc>
   128b4:	8c805736 	bltu	r17,r18,12a14 <_realloc_r+0x1cc>
   128b8:	80c0300e 	bge	r16,r3,1297c <_realloc_r+0x134>
   128bc:	07000074 	movhi	fp,1
   128c0:	e71a2c04 	addi	fp,fp,26800
   128c4:	e1c00217 	ldw	r7,8(fp)
   128c8:	9c09883a 	add	r4,r19,r16
   128cc:	22000117 	ldw	r8,4(r4)
   128d0:	21c06326 	beq	r4,r7,12a60 <_realloc_r+0x218>
   128d4:	017fff84 	movi	r5,-2
   128d8:	414a703a 	and	r5,r8,r5
   128dc:	214b883a 	add	r5,r4,r5
   128e0:	29800117 	ldw	r6,4(r5)
   128e4:	3180004c 	andi	r6,r6,1
   128e8:	30003f26 	beq	r6,zero,129e8 <_realloc_r+0x1a0>
   128ec:	1080004c 	andi	r2,r2,1
   128f0:	10008326 	beq	r2,zero,12b00 <_realloc_r+0x2b8>
   128f4:	900b883a 	mov	r5,r18
   128f8:	a009883a 	mov	r4,r20
   128fc:	0011b8c0 	call	11b8c <_malloc_r>
   12900:	1025883a 	mov	r18,r2
   12904:	10011e26 	beq	r2,zero,12d80 <_realloc_r+0x538>
   12908:	a93fff17 	ldw	r4,-4(r21)
   1290c:	10fffe04 	addi	r3,r2,-8
   12910:	00bfff84 	movi	r2,-2
   12914:	2084703a 	and	r2,r4,r2
   12918:	9885883a 	add	r2,r19,r2
   1291c:	1880ee26 	beq	r3,r2,12cd8 <_realloc_r+0x490>
   12920:	81bfff04 	addi	r6,r16,-4
   12924:	00800904 	movi	r2,36
   12928:	1180b836 	bltu	r2,r6,12c0c <_realloc_r+0x3c4>
   1292c:	00c004c4 	movi	r3,19
   12930:	19809636 	bltu	r3,r6,12b8c <_realloc_r+0x344>
   12934:	9005883a 	mov	r2,r18
   12938:	a807883a 	mov	r3,r21
   1293c:	19000017 	ldw	r4,0(r3)
   12940:	11000015 	stw	r4,0(r2)
   12944:	19000117 	ldw	r4,4(r3)
   12948:	11000115 	stw	r4,4(r2)
   1294c:	18c00217 	ldw	r3,8(r3)
   12950:	10c00215 	stw	r3,8(r2)
   12954:	a80b883a 	mov	r5,r21
   12958:	a009883a 	mov	r4,r20
   1295c:	00136140 	call	13614 <_free_r>
   12960:	a009883a 	mov	r4,r20
   12964:	00142380 	call	14238 <__malloc_unlock>
   12968:	9005883a 	mov	r2,r18
   1296c:	00001206 	br	129b8 <_realloc_r+0x170>
   12970:	00c00404 	movi	r3,16
   12974:	1823883a 	mov	r17,r3
   12978:	003fce06 	br	128b4 <__alt_data_end+0xffff28b4>
   1297c:	a825883a 	mov	r18,r21
   12980:	8445c83a 	sub	r2,r16,r17
   12984:	00c003c4 	movi	r3,15
   12988:	18802636 	bltu	r3,r2,12a24 <_realloc_r+0x1dc>
   1298c:	99800117 	ldw	r6,4(r19)
   12990:	9c07883a 	add	r3,r19,r16
   12994:	3180004c 	andi	r6,r6,1
   12998:	3420b03a 	or	r16,r6,r16
   1299c:	9c000115 	stw	r16,4(r19)
   129a0:	18800117 	ldw	r2,4(r3)
   129a4:	10800054 	ori	r2,r2,1
   129a8:	18800115 	stw	r2,4(r3)
   129ac:	a009883a 	mov	r4,r20
   129b0:	00142380 	call	14238 <__malloc_unlock>
   129b4:	9005883a 	mov	r2,r18
   129b8:	dfc00917 	ldw	ra,36(sp)
   129bc:	df000817 	ldw	fp,32(sp)
   129c0:	ddc00717 	ldw	r23,28(sp)
   129c4:	dd800617 	ldw	r22,24(sp)
   129c8:	dd400517 	ldw	r21,20(sp)
   129cc:	dd000417 	ldw	r20,16(sp)
   129d0:	dcc00317 	ldw	r19,12(sp)
   129d4:	dc800217 	ldw	r18,8(sp)
   129d8:	dc400117 	ldw	r17,4(sp)
   129dc:	dc000017 	ldw	r16,0(sp)
   129e0:	dec00a04 	addi	sp,sp,40
   129e4:	f800283a 	ret
   129e8:	017fff04 	movi	r5,-4
   129ec:	414a703a 	and	r5,r8,r5
   129f0:	814d883a 	add	r6,r16,r5
   129f4:	30c01f16 	blt	r6,r3,12a74 <_realloc_r+0x22c>
   129f8:	20800317 	ldw	r2,12(r4)
   129fc:	20c00217 	ldw	r3,8(r4)
   12a00:	a825883a 	mov	r18,r21
   12a04:	3021883a 	mov	r16,r6
   12a08:	18800315 	stw	r2,12(r3)
   12a0c:	10c00215 	stw	r3,8(r2)
   12a10:	003fdb06 	br	12980 <__alt_data_end+0xffff2980>
   12a14:	00800304 	movi	r2,12
   12a18:	a0800015 	stw	r2,0(r20)
   12a1c:	0005883a 	mov	r2,zero
   12a20:	003fe506 	br	129b8 <__alt_data_end+0xffff29b8>
   12a24:	98c00117 	ldw	r3,4(r19)
   12a28:	9c4b883a 	add	r5,r19,r17
   12a2c:	11000054 	ori	r4,r2,1
   12a30:	18c0004c 	andi	r3,r3,1
   12a34:	1c62b03a 	or	r17,r3,r17
   12a38:	9c400115 	stw	r17,4(r19)
   12a3c:	29000115 	stw	r4,4(r5)
   12a40:	2885883a 	add	r2,r5,r2
   12a44:	10c00117 	ldw	r3,4(r2)
   12a48:	29400204 	addi	r5,r5,8
   12a4c:	a009883a 	mov	r4,r20
   12a50:	18c00054 	ori	r3,r3,1
   12a54:	10c00115 	stw	r3,4(r2)
   12a58:	00136140 	call	13614 <_free_r>
   12a5c:	003fd306 	br	129ac <__alt_data_end+0xffff29ac>
   12a60:	017fff04 	movi	r5,-4
   12a64:	414a703a 	and	r5,r8,r5
   12a68:	89800404 	addi	r6,r17,16
   12a6c:	8151883a 	add	r8,r16,r5
   12a70:	4180590e 	bge	r8,r6,12bd8 <_realloc_r+0x390>
   12a74:	1080004c 	andi	r2,r2,1
   12a78:	103f9e1e 	bne	r2,zero,128f4 <__alt_data_end+0xffff28f4>
   12a7c:	adbffe17 	ldw	r22,-8(r21)
   12a80:	00bfff04 	movi	r2,-4
   12a84:	9dadc83a 	sub	r22,r19,r22
   12a88:	b1800117 	ldw	r6,4(r22)
   12a8c:	3084703a 	and	r2,r6,r2
   12a90:	20002026 	beq	r4,zero,12b14 <_realloc_r+0x2cc>
   12a94:	80af883a 	add	r23,r16,r2
   12a98:	b96f883a 	add	r23,r23,r5
   12a9c:	21c05f26 	beq	r4,r7,12c1c <_realloc_r+0x3d4>
   12aa0:	b8c01c16 	blt	r23,r3,12b14 <_realloc_r+0x2cc>
   12aa4:	20800317 	ldw	r2,12(r4)
   12aa8:	20c00217 	ldw	r3,8(r4)
   12aac:	81bfff04 	addi	r6,r16,-4
   12ab0:	01000904 	movi	r4,36
   12ab4:	18800315 	stw	r2,12(r3)
   12ab8:	10c00215 	stw	r3,8(r2)
   12abc:	b0c00217 	ldw	r3,8(r22)
   12ac0:	b0800317 	ldw	r2,12(r22)
   12ac4:	b4800204 	addi	r18,r22,8
   12ac8:	18800315 	stw	r2,12(r3)
   12acc:	10c00215 	stw	r3,8(r2)
   12ad0:	21801b36 	bltu	r4,r6,12b40 <_realloc_r+0x2f8>
   12ad4:	008004c4 	movi	r2,19
   12ad8:	1180352e 	bgeu	r2,r6,12bb0 <_realloc_r+0x368>
   12adc:	a8800017 	ldw	r2,0(r21)
   12ae0:	b0800215 	stw	r2,8(r22)
   12ae4:	a8800117 	ldw	r2,4(r21)
   12ae8:	b0800315 	stw	r2,12(r22)
   12aec:	008006c4 	movi	r2,27
   12af0:	11807f36 	bltu	r2,r6,12cf0 <_realloc_r+0x4a8>
   12af4:	b0800404 	addi	r2,r22,16
   12af8:	ad400204 	addi	r21,r21,8
   12afc:	00002d06 	br	12bb4 <_realloc_r+0x36c>
   12b00:	adbffe17 	ldw	r22,-8(r21)
   12b04:	00bfff04 	movi	r2,-4
   12b08:	9dadc83a 	sub	r22,r19,r22
   12b0c:	b1000117 	ldw	r4,4(r22)
   12b10:	2084703a 	and	r2,r4,r2
   12b14:	b03f7726 	beq	r22,zero,128f4 <__alt_data_end+0xffff28f4>
   12b18:	80af883a 	add	r23,r16,r2
   12b1c:	b8ff7516 	blt	r23,r3,128f4 <__alt_data_end+0xffff28f4>
   12b20:	b0800317 	ldw	r2,12(r22)
   12b24:	b0c00217 	ldw	r3,8(r22)
   12b28:	81bfff04 	addi	r6,r16,-4
   12b2c:	01000904 	movi	r4,36
   12b30:	18800315 	stw	r2,12(r3)
   12b34:	10c00215 	stw	r3,8(r2)
   12b38:	b4800204 	addi	r18,r22,8
   12b3c:	21bfe52e 	bgeu	r4,r6,12ad4 <__alt_data_end+0xffff2ad4>
   12b40:	a80b883a 	mov	r5,r21
   12b44:	9009883a 	mov	r4,r18
   12b48:	00125c40 	call	125c4 <memmove>
   12b4c:	b821883a 	mov	r16,r23
   12b50:	b027883a 	mov	r19,r22
   12b54:	003f8a06 	br	12980 <__alt_data_end+0xffff2980>
   12b58:	300b883a 	mov	r5,r6
   12b5c:	dfc00917 	ldw	ra,36(sp)
   12b60:	df000817 	ldw	fp,32(sp)
   12b64:	ddc00717 	ldw	r23,28(sp)
   12b68:	dd800617 	ldw	r22,24(sp)
   12b6c:	dd400517 	ldw	r21,20(sp)
   12b70:	dd000417 	ldw	r20,16(sp)
   12b74:	dcc00317 	ldw	r19,12(sp)
   12b78:	dc800217 	ldw	r18,8(sp)
   12b7c:	dc400117 	ldw	r17,4(sp)
   12b80:	dc000017 	ldw	r16,0(sp)
   12b84:	dec00a04 	addi	sp,sp,40
   12b88:	0011b8c1 	jmpi	11b8c <_malloc_r>
   12b8c:	a8c00017 	ldw	r3,0(r21)
   12b90:	90c00015 	stw	r3,0(r18)
   12b94:	a8c00117 	ldw	r3,4(r21)
   12b98:	90c00115 	stw	r3,4(r18)
   12b9c:	00c006c4 	movi	r3,27
   12ba0:	19804536 	bltu	r3,r6,12cb8 <_realloc_r+0x470>
   12ba4:	90800204 	addi	r2,r18,8
   12ba8:	a8c00204 	addi	r3,r21,8
   12bac:	003f6306 	br	1293c <__alt_data_end+0xffff293c>
   12bb0:	9005883a 	mov	r2,r18
   12bb4:	a8c00017 	ldw	r3,0(r21)
   12bb8:	b821883a 	mov	r16,r23
   12bbc:	b027883a 	mov	r19,r22
   12bc0:	10c00015 	stw	r3,0(r2)
   12bc4:	a8c00117 	ldw	r3,4(r21)
   12bc8:	10c00115 	stw	r3,4(r2)
   12bcc:	a8c00217 	ldw	r3,8(r21)
   12bd0:	10c00215 	stw	r3,8(r2)
   12bd4:	003f6a06 	br	12980 <__alt_data_end+0xffff2980>
   12bd8:	9c67883a 	add	r19,r19,r17
   12bdc:	4445c83a 	sub	r2,r8,r17
   12be0:	e4c00215 	stw	r19,8(fp)
   12be4:	10800054 	ori	r2,r2,1
   12be8:	98800115 	stw	r2,4(r19)
   12bec:	a8bfff17 	ldw	r2,-4(r21)
   12bf0:	a009883a 	mov	r4,r20
   12bf4:	1080004c 	andi	r2,r2,1
   12bf8:	1462b03a 	or	r17,r2,r17
   12bfc:	ac7fff15 	stw	r17,-4(r21)
   12c00:	00142380 	call	14238 <__malloc_unlock>
   12c04:	a805883a 	mov	r2,r21
   12c08:	003f6b06 	br	129b8 <__alt_data_end+0xffff29b8>
   12c0c:	a80b883a 	mov	r5,r21
   12c10:	9009883a 	mov	r4,r18
   12c14:	00125c40 	call	125c4 <memmove>
   12c18:	003f4e06 	br	12954 <__alt_data_end+0xffff2954>
   12c1c:	89000404 	addi	r4,r17,16
   12c20:	b93fbc16 	blt	r23,r4,12b14 <__alt_data_end+0xffff2b14>
   12c24:	b0800317 	ldw	r2,12(r22)
   12c28:	b0c00217 	ldw	r3,8(r22)
   12c2c:	81bfff04 	addi	r6,r16,-4
   12c30:	01000904 	movi	r4,36
   12c34:	18800315 	stw	r2,12(r3)
   12c38:	10c00215 	stw	r3,8(r2)
   12c3c:	b4800204 	addi	r18,r22,8
   12c40:	21804336 	bltu	r4,r6,12d50 <_realloc_r+0x508>
   12c44:	008004c4 	movi	r2,19
   12c48:	11803f2e 	bgeu	r2,r6,12d48 <_realloc_r+0x500>
   12c4c:	a8800017 	ldw	r2,0(r21)
   12c50:	b0800215 	stw	r2,8(r22)
   12c54:	a8800117 	ldw	r2,4(r21)
   12c58:	b0800315 	stw	r2,12(r22)
   12c5c:	008006c4 	movi	r2,27
   12c60:	11803f36 	bltu	r2,r6,12d60 <_realloc_r+0x518>
   12c64:	b0800404 	addi	r2,r22,16
   12c68:	ad400204 	addi	r21,r21,8
   12c6c:	a8c00017 	ldw	r3,0(r21)
   12c70:	10c00015 	stw	r3,0(r2)
   12c74:	a8c00117 	ldw	r3,4(r21)
   12c78:	10c00115 	stw	r3,4(r2)
   12c7c:	a8c00217 	ldw	r3,8(r21)
   12c80:	10c00215 	stw	r3,8(r2)
   12c84:	b447883a 	add	r3,r22,r17
   12c88:	bc45c83a 	sub	r2,r23,r17
   12c8c:	e0c00215 	stw	r3,8(fp)
   12c90:	10800054 	ori	r2,r2,1
   12c94:	18800115 	stw	r2,4(r3)
   12c98:	b0800117 	ldw	r2,4(r22)
   12c9c:	a009883a 	mov	r4,r20
   12ca0:	1080004c 	andi	r2,r2,1
   12ca4:	1462b03a 	or	r17,r2,r17
   12ca8:	b4400115 	stw	r17,4(r22)
   12cac:	00142380 	call	14238 <__malloc_unlock>
   12cb0:	9005883a 	mov	r2,r18
   12cb4:	003f4006 	br	129b8 <__alt_data_end+0xffff29b8>
   12cb8:	a8c00217 	ldw	r3,8(r21)
   12cbc:	90c00215 	stw	r3,8(r18)
   12cc0:	a8c00317 	ldw	r3,12(r21)
   12cc4:	90c00315 	stw	r3,12(r18)
   12cc8:	30801126 	beq	r6,r2,12d10 <_realloc_r+0x4c8>
   12ccc:	90800404 	addi	r2,r18,16
   12cd0:	a8c00404 	addi	r3,r21,16
   12cd4:	003f1906 	br	1293c <__alt_data_end+0xffff293c>
   12cd8:	90ffff17 	ldw	r3,-4(r18)
   12cdc:	00bfff04 	movi	r2,-4
   12ce0:	a825883a 	mov	r18,r21
   12ce4:	1884703a 	and	r2,r3,r2
   12ce8:	80a1883a 	add	r16,r16,r2
   12cec:	003f2406 	br	12980 <__alt_data_end+0xffff2980>
   12cf0:	a8800217 	ldw	r2,8(r21)
   12cf4:	b0800415 	stw	r2,16(r22)
   12cf8:	a8800317 	ldw	r2,12(r21)
   12cfc:	b0800515 	stw	r2,20(r22)
   12d00:	31000a26 	beq	r6,r4,12d2c <_realloc_r+0x4e4>
   12d04:	b0800604 	addi	r2,r22,24
   12d08:	ad400404 	addi	r21,r21,16
   12d0c:	003fa906 	br	12bb4 <__alt_data_end+0xffff2bb4>
   12d10:	a9000417 	ldw	r4,16(r21)
   12d14:	90800604 	addi	r2,r18,24
   12d18:	a8c00604 	addi	r3,r21,24
   12d1c:	91000415 	stw	r4,16(r18)
   12d20:	a9000517 	ldw	r4,20(r21)
   12d24:	91000515 	stw	r4,20(r18)
   12d28:	003f0406 	br	1293c <__alt_data_end+0xffff293c>
   12d2c:	a8c00417 	ldw	r3,16(r21)
   12d30:	ad400604 	addi	r21,r21,24
   12d34:	b0800804 	addi	r2,r22,32
   12d38:	b0c00615 	stw	r3,24(r22)
   12d3c:	a8ffff17 	ldw	r3,-4(r21)
   12d40:	b0c00715 	stw	r3,28(r22)
   12d44:	003f9b06 	br	12bb4 <__alt_data_end+0xffff2bb4>
   12d48:	9005883a 	mov	r2,r18
   12d4c:	003fc706 	br	12c6c <__alt_data_end+0xffff2c6c>
   12d50:	a80b883a 	mov	r5,r21
   12d54:	9009883a 	mov	r4,r18
   12d58:	00125c40 	call	125c4 <memmove>
   12d5c:	003fc906 	br	12c84 <__alt_data_end+0xffff2c84>
   12d60:	a8800217 	ldw	r2,8(r21)
   12d64:	b0800415 	stw	r2,16(r22)
   12d68:	a8800317 	ldw	r2,12(r21)
   12d6c:	b0800515 	stw	r2,20(r22)
   12d70:	31000726 	beq	r6,r4,12d90 <_realloc_r+0x548>
   12d74:	b0800604 	addi	r2,r22,24
   12d78:	ad400404 	addi	r21,r21,16
   12d7c:	003fbb06 	br	12c6c <__alt_data_end+0xffff2c6c>
   12d80:	a009883a 	mov	r4,r20
   12d84:	00142380 	call	14238 <__malloc_unlock>
   12d88:	0005883a 	mov	r2,zero
   12d8c:	003f0a06 	br	129b8 <__alt_data_end+0xffff29b8>
   12d90:	a8c00417 	ldw	r3,16(r21)
   12d94:	ad400604 	addi	r21,r21,24
   12d98:	b0800804 	addi	r2,r22,32
   12d9c:	b0c00615 	stw	r3,24(r22)
   12da0:	a8ffff17 	ldw	r3,-4(r21)
   12da4:	b0c00715 	stw	r3,28(r22)
   12da8:	003fb006 	br	12c6c <__alt_data_end+0xffff2c6c>

00012dac <_sbrk_r>:
   12dac:	defffd04 	addi	sp,sp,-12
   12db0:	dc000015 	stw	r16,0(sp)
   12db4:	040000b4 	movhi	r16,2
   12db8:	dc400115 	stw	r17,4(sp)
   12dbc:	84266e04 	addi	r16,r16,-26184
   12dc0:	2023883a 	mov	r17,r4
   12dc4:	2809883a 	mov	r4,r5
   12dc8:	dfc00215 	stw	ra,8(sp)
   12dcc:	80000015 	stw	zero,0(r16)
   12dd0:	001445c0 	call	1445c <sbrk>
   12dd4:	00ffffc4 	movi	r3,-1
   12dd8:	10c00526 	beq	r2,r3,12df0 <_sbrk_r+0x44>
   12ddc:	dfc00217 	ldw	ra,8(sp)
   12de0:	dc400117 	ldw	r17,4(sp)
   12de4:	dc000017 	ldw	r16,0(sp)
   12de8:	dec00304 	addi	sp,sp,12
   12dec:	f800283a 	ret
   12df0:	80c00017 	ldw	r3,0(r16)
   12df4:	183ff926 	beq	r3,zero,12ddc <__alt_data_end+0xffff2ddc>
   12df8:	88c00015 	stw	r3,0(r17)
   12dfc:	003ff706 	br	12ddc <__alt_data_end+0xffff2ddc>

00012e00 <__sread>:
   12e00:	defffe04 	addi	sp,sp,-8
   12e04:	dc000015 	stw	r16,0(sp)
   12e08:	2821883a 	mov	r16,r5
   12e0c:	2940038f 	ldh	r5,14(r5)
   12e10:	dfc00115 	stw	ra,4(sp)
   12e14:	0013b400 	call	13b40 <_read_r>
   12e18:	10000716 	blt	r2,zero,12e38 <__sread+0x38>
   12e1c:	80c01417 	ldw	r3,80(r16)
   12e20:	1887883a 	add	r3,r3,r2
   12e24:	80c01415 	stw	r3,80(r16)
   12e28:	dfc00117 	ldw	ra,4(sp)
   12e2c:	dc000017 	ldw	r16,0(sp)
   12e30:	dec00204 	addi	sp,sp,8
   12e34:	f800283a 	ret
   12e38:	80c0030b 	ldhu	r3,12(r16)
   12e3c:	18fbffcc 	andi	r3,r3,61439
   12e40:	80c0030d 	sth	r3,12(r16)
   12e44:	dfc00117 	ldw	ra,4(sp)
   12e48:	dc000017 	ldw	r16,0(sp)
   12e4c:	dec00204 	addi	sp,sp,8
   12e50:	f800283a 	ret

00012e54 <__seofread>:
   12e54:	0005883a 	mov	r2,zero
   12e58:	f800283a 	ret

00012e5c <__swrite>:
   12e5c:	2880030b 	ldhu	r2,12(r5)
   12e60:	defffb04 	addi	sp,sp,-20
   12e64:	dcc00315 	stw	r19,12(sp)
   12e68:	dc800215 	stw	r18,8(sp)
   12e6c:	dc400115 	stw	r17,4(sp)
   12e70:	dc000015 	stw	r16,0(sp)
   12e74:	dfc00415 	stw	ra,16(sp)
   12e78:	10c0400c 	andi	r3,r2,256
   12e7c:	2821883a 	mov	r16,r5
   12e80:	2023883a 	mov	r17,r4
   12e84:	3025883a 	mov	r18,r6
   12e88:	3827883a 	mov	r19,r7
   12e8c:	18000526 	beq	r3,zero,12ea4 <__swrite+0x48>
   12e90:	2940038f 	ldh	r5,14(r5)
   12e94:	01c00084 	movi	r7,2
   12e98:	000d883a 	mov	r6,zero
   12e9c:	00139240 	call	13924 <_lseek_r>
   12ea0:	8080030b 	ldhu	r2,12(r16)
   12ea4:	8140038f 	ldh	r5,14(r16)
   12ea8:	10bbffcc 	andi	r2,r2,61439
   12eac:	980f883a 	mov	r7,r19
   12eb0:	900d883a 	mov	r6,r18
   12eb4:	8809883a 	mov	r4,r17
   12eb8:	8080030d 	sth	r2,12(r16)
   12ebc:	dfc00417 	ldw	ra,16(sp)
   12ec0:	dcc00317 	ldw	r19,12(sp)
   12ec4:	dc800217 	ldw	r18,8(sp)
   12ec8:	dc400117 	ldw	r17,4(sp)
   12ecc:	dc000017 	ldw	r16,0(sp)
   12ed0:	dec00504 	addi	sp,sp,20
   12ed4:	0012f3c1 	jmpi	12f3c <_write_r>

00012ed8 <__sseek>:
   12ed8:	defffe04 	addi	sp,sp,-8
   12edc:	dc000015 	stw	r16,0(sp)
   12ee0:	2821883a 	mov	r16,r5
   12ee4:	2940038f 	ldh	r5,14(r5)
   12ee8:	dfc00115 	stw	ra,4(sp)
   12eec:	00139240 	call	13924 <_lseek_r>
   12ef0:	00ffffc4 	movi	r3,-1
   12ef4:	10c00826 	beq	r2,r3,12f18 <__sseek+0x40>
   12ef8:	80c0030b 	ldhu	r3,12(r16)
   12efc:	80801415 	stw	r2,80(r16)
   12f00:	18c40014 	ori	r3,r3,4096
   12f04:	80c0030d 	sth	r3,12(r16)
   12f08:	dfc00117 	ldw	ra,4(sp)
   12f0c:	dc000017 	ldw	r16,0(sp)
   12f10:	dec00204 	addi	sp,sp,8
   12f14:	f800283a 	ret
   12f18:	80c0030b 	ldhu	r3,12(r16)
   12f1c:	18fbffcc 	andi	r3,r3,61439
   12f20:	80c0030d 	sth	r3,12(r16)
   12f24:	dfc00117 	ldw	ra,4(sp)
   12f28:	dc000017 	ldw	r16,0(sp)
   12f2c:	dec00204 	addi	sp,sp,8
   12f30:	f800283a 	ret

00012f34 <__sclose>:
   12f34:	2940038f 	ldh	r5,14(r5)
   12f38:	00130f01 	jmpi	130f0 <_close_r>

00012f3c <_write_r>:
   12f3c:	defffd04 	addi	sp,sp,-12
   12f40:	2805883a 	mov	r2,r5
   12f44:	dc000015 	stw	r16,0(sp)
   12f48:	040000b4 	movhi	r16,2
   12f4c:	dc400115 	stw	r17,4(sp)
   12f50:	300b883a 	mov	r5,r6
   12f54:	84266e04 	addi	r16,r16,-26184
   12f58:	2023883a 	mov	r17,r4
   12f5c:	380d883a 	mov	r6,r7
   12f60:	1009883a 	mov	r4,r2
   12f64:	dfc00215 	stw	ra,8(sp)
   12f68:	80000015 	stw	zero,0(r16)
   12f6c:	00145480 	call	14548 <write>
   12f70:	00ffffc4 	movi	r3,-1
   12f74:	10c00526 	beq	r2,r3,12f8c <_write_r+0x50>
   12f78:	dfc00217 	ldw	ra,8(sp)
   12f7c:	dc400117 	ldw	r17,4(sp)
   12f80:	dc000017 	ldw	r16,0(sp)
   12f84:	dec00304 	addi	sp,sp,12
   12f88:	f800283a 	ret
   12f8c:	80c00017 	ldw	r3,0(r16)
   12f90:	183ff926 	beq	r3,zero,12f78 <__alt_data_end+0xffff2f78>
   12f94:	88c00015 	stw	r3,0(r17)
   12f98:	003ff706 	br	12f78 <__alt_data_end+0xffff2f78>

00012f9c <__swsetup_r>:
   12f9c:	00800074 	movhi	r2,1
   12fa0:	defffd04 	addi	sp,sp,-12
   12fa4:	109fb204 	addi	r2,r2,32456
   12fa8:	dc400115 	stw	r17,4(sp)
   12fac:	2023883a 	mov	r17,r4
   12fb0:	11000017 	ldw	r4,0(r2)
   12fb4:	dc000015 	stw	r16,0(sp)
   12fb8:	dfc00215 	stw	ra,8(sp)
   12fbc:	2821883a 	mov	r16,r5
   12fc0:	20000226 	beq	r4,zero,12fcc <__swsetup_r+0x30>
   12fc4:	20800e17 	ldw	r2,56(r4)
   12fc8:	10003126 	beq	r2,zero,13090 <__swsetup_r+0xf4>
   12fcc:	8080030b 	ldhu	r2,12(r16)
   12fd0:	10c0020c 	andi	r3,r2,8
   12fd4:	1009883a 	mov	r4,r2
   12fd8:	18000f26 	beq	r3,zero,13018 <__swsetup_r+0x7c>
   12fdc:	80c00417 	ldw	r3,16(r16)
   12fe0:	18001526 	beq	r3,zero,13038 <__swsetup_r+0x9c>
   12fe4:	1100004c 	andi	r4,r2,1
   12fe8:	20001c1e 	bne	r4,zero,1305c <__swsetup_r+0xc0>
   12fec:	1080008c 	andi	r2,r2,2
   12ff0:	1000291e 	bne	r2,zero,13098 <__swsetup_r+0xfc>
   12ff4:	80800517 	ldw	r2,20(r16)
   12ff8:	80800215 	stw	r2,8(r16)
   12ffc:	18001c26 	beq	r3,zero,13070 <__swsetup_r+0xd4>
   13000:	0005883a 	mov	r2,zero
   13004:	dfc00217 	ldw	ra,8(sp)
   13008:	dc400117 	ldw	r17,4(sp)
   1300c:	dc000017 	ldw	r16,0(sp)
   13010:	dec00304 	addi	sp,sp,12
   13014:	f800283a 	ret
   13018:	2080040c 	andi	r2,r4,16
   1301c:	10002e26 	beq	r2,zero,130d8 <__swsetup_r+0x13c>
   13020:	2080010c 	andi	r2,r4,4
   13024:	10001e1e 	bne	r2,zero,130a0 <__swsetup_r+0x104>
   13028:	80c00417 	ldw	r3,16(r16)
   1302c:	20800214 	ori	r2,r4,8
   13030:	8080030d 	sth	r2,12(r16)
   13034:	183feb1e 	bne	r3,zero,12fe4 <__alt_data_end+0xffff2fe4>
   13038:	1100a00c 	andi	r4,r2,640
   1303c:	01408004 	movi	r5,512
   13040:	217fe826 	beq	r4,r5,12fe4 <__alt_data_end+0xffff2fe4>
   13044:	800b883a 	mov	r5,r16
   13048:	8809883a 	mov	r4,r17
   1304c:	00139840 	call	13984 <__smakebuf_r>
   13050:	8080030b 	ldhu	r2,12(r16)
   13054:	80c00417 	ldw	r3,16(r16)
   13058:	003fe206 	br	12fe4 <__alt_data_end+0xffff2fe4>
   1305c:	80800517 	ldw	r2,20(r16)
   13060:	80000215 	stw	zero,8(r16)
   13064:	0085c83a 	sub	r2,zero,r2
   13068:	80800615 	stw	r2,24(r16)
   1306c:	183fe41e 	bne	r3,zero,13000 <__alt_data_end+0xffff3000>
   13070:	80c0030b 	ldhu	r3,12(r16)
   13074:	0005883a 	mov	r2,zero
   13078:	1900200c 	andi	r4,r3,128
   1307c:	203fe126 	beq	r4,zero,13004 <__alt_data_end+0xffff3004>
   13080:	18c01014 	ori	r3,r3,64
   13084:	80c0030d 	sth	r3,12(r16)
   13088:	00bfffc4 	movi	r2,-1
   1308c:	003fdd06 	br	13004 <__alt_data_end+0xffff3004>
   13090:	00114ec0 	call	114ec <__sinit>
   13094:	003fcd06 	br	12fcc <__alt_data_end+0xffff2fcc>
   13098:	0005883a 	mov	r2,zero
   1309c:	003fd606 	br	12ff8 <__alt_data_end+0xffff2ff8>
   130a0:	81400c17 	ldw	r5,48(r16)
   130a4:	28000626 	beq	r5,zero,130c0 <__swsetup_r+0x124>
   130a8:	80801004 	addi	r2,r16,64
   130ac:	28800326 	beq	r5,r2,130bc <__swsetup_r+0x120>
   130b0:	8809883a 	mov	r4,r17
   130b4:	00136140 	call	13614 <_free_r>
   130b8:	8100030b 	ldhu	r4,12(r16)
   130bc:	80000c15 	stw	zero,48(r16)
   130c0:	80c00417 	ldw	r3,16(r16)
   130c4:	00bff6c4 	movi	r2,-37
   130c8:	1108703a 	and	r4,r2,r4
   130cc:	80000115 	stw	zero,4(r16)
   130d0:	80c00015 	stw	r3,0(r16)
   130d4:	003fd506 	br	1302c <__alt_data_end+0xffff302c>
   130d8:	00800244 	movi	r2,9
   130dc:	88800015 	stw	r2,0(r17)
   130e0:	20801014 	ori	r2,r4,64
   130e4:	8080030d 	sth	r2,12(r16)
   130e8:	00bfffc4 	movi	r2,-1
   130ec:	003fc506 	br	13004 <__alt_data_end+0xffff3004>

000130f0 <_close_r>:
   130f0:	defffd04 	addi	sp,sp,-12
   130f4:	dc000015 	stw	r16,0(sp)
   130f8:	040000b4 	movhi	r16,2
   130fc:	dc400115 	stw	r17,4(sp)
   13100:	84266e04 	addi	r16,r16,-26184
   13104:	2023883a 	mov	r17,r4
   13108:	2809883a 	mov	r4,r5
   1310c:	dfc00215 	stw	ra,8(sp)
   13110:	80000015 	stw	zero,0(r16)
   13114:	0013cb40 	call	13cb4 <close>
   13118:	00ffffc4 	movi	r3,-1
   1311c:	10c00526 	beq	r2,r3,13134 <_close_r+0x44>
   13120:	dfc00217 	ldw	ra,8(sp)
   13124:	dc400117 	ldw	r17,4(sp)
   13128:	dc000017 	ldw	r16,0(sp)
   1312c:	dec00304 	addi	sp,sp,12
   13130:	f800283a 	ret
   13134:	80c00017 	ldw	r3,0(r16)
   13138:	183ff926 	beq	r3,zero,13120 <__alt_data_end+0xffff3120>
   1313c:	88c00015 	stw	r3,0(r17)
   13140:	003ff706 	br	13120 <__alt_data_end+0xffff3120>

00013144 <_fclose_r>:
   13144:	28003926 	beq	r5,zero,1322c <_fclose_r+0xe8>
   13148:	defffc04 	addi	sp,sp,-16
   1314c:	dc400115 	stw	r17,4(sp)
   13150:	dc000015 	stw	r16,0(sp)
   13154:	dfc00315 	stw	ra,12(sp)
   13158:	dc800215 	stw	r18,8(sp)
   1315c:	2023883a 	mov	r17,r4
   13160:	2821883a 	mov	r16,r5
   13164:	20000226 	beq	r4,zero,13170 <_fclose_r+0x2c>
   13168:	20800e17 	ldw	r2,56(r4)
   1316c:	10002726 	beq	r2,zero,1320c <_fclose_r+0xc8>
   13170:	8080030f 	ldh	r2,12(r16)
   13174:	1000071e 	bne	r2,zero,13194 <_fclose_r+0x50>
   13178:	0005883a 	mov	r2,zero
   1317c:	dfc00317 	ldw	ra,12(sp)
   13180:	dc800217 	ldw	r18,8(sp)
   13184:	dc400117 	ldw	r17,4(sp)
   13188:	dc000017 	ldw	r16,0(sp)
   1318c:	dec00404 	addi	sp,sp,16
   13190:	f800283a 	ret
   13194:	800b883a 	mov	r5,r16
   13198:	8809883a 	mov	r4,r17
   1319c:	00132480 	call	13248 <__sflush_r>
   131a0:	1025883a 	mov	r18,r2
   131a4:	80800b17 	ldw	r2,44(r16)
   131a8:	10000426 	beq	r2,zero,131bc <_fclose_r+0x78>
   131ac:	81400717 	ldw	r5,28(r16)
   131b0:	8809883a 	mov	r4,r17
   131b4:	103ee83a 	callr	r2
   131b8:	10001616 	blt	r2,zero,13214 <_fclose_r+0xd0>
   131bc:	8080030b 	ldhu	r2,12(r16)
   131c0:	1080200c 	andi	r2,r2,128
   131c4:	1000151e 	bne	r2,zero,1321c <_fclose_r+0xd8>
   131c8:	81400c17 	ldw	r5,48(r16)
   131cc:	28000526 	beq	r5,zero,131e4 <_fclose_r+0xa0>
   131d0:	80801004 	addi	r2,r16,64
   131d4:	28800226 	beq	r5,r2,131e0 <_fclose_r+0x9c>
   131d8:	8809883a 	mov	r4,r17
   131dc:	00136140 	call	13614 <_free_r>
   131e0:	80000c15 	stw	zero,48(r16)
   131e4:	81401117 	ldw	r5,68(r16)
   131e8:	28000326 	beq	r5,zero,131f8 <_fclose_r+0xb4>
   131ec:	8809883a 	mov	r4,r17
   131f0:	00136140 	call	13614 <_free_r>
   131f4:	80001115 	stw	zero,68(r16)
   131f8:	00114fc0 	call	114fc <__sfp_lock_acquire>
   131fc:	8000030d 	sth	zero,12(r16)
   13200:	00115000 	call	11500 <__sfp_lock_release>
   13204:	9005883a 	mov	r2,r18
   13208:	003fdc06 	br	1317c <__alt_data_end+0xffff317c>
   1320c:	00114ec0 	call	114ec <__sinit>
   13210:	003fd706 	br	13170 <__alt_data_end+0xffff3170>
   13214:	04bfffc4 	movi	r18,-1
   13218:	003fe806 	br	131bc <__alt_data_end+0xffff31bc>
   1321c:	81400417 	ldw	r5,16(r16)
   13220:	8809883a 	mov	r4,r17
   13224:	00136140 	call	13614 <_free_r>
   13228:	003fe706 	br	131c8 <__alt_data_end+0xffff31c8>
   1322c:	0005883a 	mov	r2,zero
   13230:	f800283a 	ret

00013234 <fclose>:
   13234:	00800074 	movhi	r2,1
   13238:	109fb204 	addi	r2,r2,32456
   1323c:	200b883a 	mov	r5,r4
   13240:	11000017 	ldw	r4,0(r2)
   13244:	00131441 	jmpi	13144 <_fclose_r>

00013248 <__sflush_r>:
   13248:	2880030b 	ldhu	r2,12(r5)
   1324c:	defffb04 	addi	sp,sp,-20
   13250:	dcc00315 	stw	r19,12(sp)
   13254:	dc400115 	stw	r17,4(sp)
   13258:	dfc00415 	stw	ra,16(sp)
   1325c:	dc800215 	stw	r18,8(sp)
   13260:	dc000015 	stw	r16,0(sp)
   13264:	10c0020c 	andi	r3,r2,8
   13268:	2823883a 	mov	r17,r5
   1326c:	2027883a 	mov	r19,r4
   13270:	1800311e 	bne	r3,zero,13338 <__sflush_r+0xf0>
   13274:	28c00117 	ldw	r3,4(r5)
   13278:	10820014 	ori	r2,r2,2048
   1327c:	2880030d 	sth	r2,12(r5)
   13280:	00c04b0e 	bge	zero,r3,133b0 <__sflush_r+0x168>
   13284:	8a000a17 	ldw	r8,40(r17)
   13288:	40002326 	beq	r8,zero,13318 <__sflush_r+0xd0>
   1328c:	9c000017 	ldw	r16,0(r19)
   13290:	10c4000c 	andi	r3,r2,4096
   13294:	98000015 	stw	zero,0(r19)
   13298:	18004826 	beq	r3,zero,133bc <__sflush_r+0x174>
   1329c:	89801417 	ldw	r6,80(r17)
   132a0:	10c0010c 	andi	r3,r2,4
   132a4:	18000626 	beq	r3,zero,132c0 <__sflush_r+0x78>
   132a8:	88c00117 	ldw	r3,4(r17)
   132ac:	88800c17 	ldw	r2,48(r17)
   132b0:	30cdc83a 	sub	r6,r6,r3
   132b4:	10000226 	beq	r2,zero,132c0 <__sflush_r+0x78>
   132b8:	88800f17 	ldw	r2,60(r17)
   132bc:	308dc83a 	sub	r6,r6,r2
   132c0:	89400717 	ldw	r5,28(r17)
   132c4:	000f883a 	mov	r7,zero
   132c8:	9809883a 	mov	r4,r19
   132cc:	403ee83a 	callr	r8
   132d0:	00ffffc4 	movi	r3,-1
   132d4:	10c04426 	beq	r2,r3,133e8 <__sflush_r+0x1a0>
   132d8:	88c0030b 	ldhu	r3,12(r17)
   132dc:	89000417 	ldw	r4,16(r17)
   132e0:	88000115 	stw	zero,4(r17)
   132e4:	197dffcc 	andi	r5,r3,63487
   132e8:	8940030d 	sth	r5,12(r17)
   132ec:	89000015 	stw	r4,0(r17)
   132f0:	18c4000c 	andi	r3,r3,4096
   132f4:	18002c1e 	bne	r3,zero,133a8 <__sflush_r+0x160>
   132f8:	89400c17 	ldw	r5,48(r17)
   132fc:	9c000015 	stw	r16,0(r19)
   13300:	28000526 	beq	r5,zero,13318 <__sflush_r+0xd0>
   13304:	88801004 	addi	r2,r17,64
   13308:	28800226 	beq	r5,r2,13314 <__sflush_r+0xcc>
   1330c:	9809883a 	mov	r4,r19
   13310:	00136140 	call	13614 <_free_r>
   13314:	88000c15 	stw	zero,48(r17)
   13318:	0005883a 	mov	r2,zero
   1331c:	dfc00417 	ldw	ra,16(sp)
   13320:	dcc00317 	ldw	r19,12(sp)
   13324:	dc800217 	ldw	r18,8(sp)
   13328:	dc400117 	ldw	r17,4(sp)
   1332c:	dc000017 	ldw	r16,0(sp)
   13330:	dec00504 	addi	sp,sp,20
   13334:	f800283a 	ret
   13338:	2c800417 	ldw	r18,16(r5)
   1333c:	903ff626 	beq	r18,zero,13318 <__alt_data_end+0xffff3318>
   13340:	2c000017 	ldw	r16,0(r5)
   13344:	108000cc 	andi	r2,r2,3
   13348:	2c800015 	stw	r18,0(r5)
   1334c:	84a1c83a 	sub	r16,r16,r18
   13350:	1000131e 	bne	r2,zero,133a0 <__sflush_r+0x158>
   13354:	28800517 	ldw	r2,20(r5)
   13358:	88800215 	stw	r2,8(r17)
   1335c:	04000316 	blt	zero,r16,1336c <__sflush_r+0x124>
   13360:	003fed06 	br	13318 <__alt_data_end+0xffff3318>
   13364:	90a5883a 	add	r18,r18,r2
   13368:	043feb0e 	bge	zero,r16,13318 <__alt_data_end+0xffff3318>
   1336c:	88800917 	ldw	r2,36(r17)
   13370:	89400717 	ldw	r5,28(r17)
   13374:	800f883a 	mov	r7,r16
   13378:	900d883a 	mov	r6,r18
   1337c:	9809883a 	mov	r4,r19
   13380:	103ee83a 	callr	r2
   13384:	80a1c83a 	sub	r16,r16,r2
   13388:	00bff616 	blt	zero,r2,13364 <__alt_data_end+0xffff3364>
   1338c:	88c0030b 	ldhu	r3,12(r17)
   13390:	00bfffc4 	movi	r2,-1
   13394:	18c01014 	ori	r3,r3,64
   13398:	88c0030d 	sth	r3,12(r17)
   1339c:	003fdf06 	br	1331c <__alt_data_end+0xffff331c>
   133a0:	0005883a 	mov	r2,zero
   133a4:	003fec06 	br	13358 <__alt_data_end+0xffff3358>
   133a8:	88801415 	stw	r2,80(r17)
   133ac:	003fd206 	br	132f8 <__alt_data_end+0xffff32f8>
   133b0:	28c00f17 	ldw	r3,60(r5)
   133b4:	00ffb316 	blt	zero,r3,13284 <__alt_data_end+0xffff3284>
   133b8:	003fd706 	br	13318 <__alt_data_end+0xffff3318>
   133bc:	89400717 	ldw	r5,28(r17)
   133c0:	000d883a 	mov	r6,zero
   133c4:	01c00044 	movi	r7,1
   133c8:	9809883a 	mov	r4,r19
   133cc:	403ee83a 	callr	r8
   133d0:	100d883a 	mov	r6,r2
   133d4:	00bfffc4 	movi	r2,-1
   133d8:	30801426 	beq	r6,r2,1342c <__sflush_r+0x1e4>
   133dc:	8880030b 	ldhu	r2,12(r17)
   133e0:	8a000a17 	ldw	r8,40(r17)
   133e4:	003fae06 	br	132a0 <__alt_data_end+0xffff32a0>
   133e8:	98c00017 	ldw	r3,0(r19)
   133ec:	183fba26 	beq	r3,zero,132d8 <__alt_data_end+0xffff32d8>
   133f0:	01000744 	movi	r4,29
   133f4:	19000626 	beq	r3,r4,13410 <__sflush_r+0x1c8>
   133f8:	01000584 	movi	r4,22
   133fc:	19000426 	beq	r3,r4,13410 <__sflush_r+0x1c8>
   13400:	88c0030b 	ldhu	r3,12(r17)
   13404:	18c01014 	ori	r3,r3,64
   13408:	88c0030d 	sth	r3,12(r17)
   1340c:	003fc306 	br	1331c <__alt_data_end+0xffff331c>
   13410:	8880030b 	ldhu	r2,12(r17)
   13414:	88c00417 	ldw	r3,16(r17)
   13418:	88000115 	stw	zero,4(r17)
   1341c:	10bdffcc 	andi	r2,r2,63487
   13420:	8880030d 	sth	r2,12(r17)
   13424:	88c00015 	stw	r3,0(r17)
   13428:	003fb306 	br	132f8 <__alt_data_end+0xffff32f8>
   1342c:	98800017 	ldw	r2,0(r19)
   13430:	103fea26 	beq	r2,zero,133dc <__alt_data_end+0xffff33dc>
   13434:	00c00744 	movi	r3,29
   13438:	10c00226 	beq	r2,r3,13444 <__sflush_r+0x1fc>
   1343c:	00c00584 	movi	r3,22
   13440:	10c0031e 	bne	r2,r3,13450 <__sflush_r+0x208>
   13444:	9c000015 	stw	r16,0(r19)
   13448:	0005883a 	mov	r2,zero
   1344c:	003fb306 	br	1331c <__alt_data_end+0xffff331c>
   13450:	88c0030b 	ldhu	r3,12(r17)
   13454:	3005883a 	mov	r2,r6
   13458:	18c01014 	ori	r3,r3,64
   1345c:	88c0030d 	sth	r3,12(r17)
   13460:	003fae06 	br	1331c <__alt_data_end+0xffff331c>

00013464 <_fflush_r>:
   13464:	defffd04 	addi	sp,sp,-12
   13468:	dc000115 	stw	r16,4(sp)
   1346c:	dfc00215 	stw	ra,8(sp)
   13470:	2021883a 	mov	r16,r4
   13474:	20000226 	beq	r4,zero,13480 <_fflush_r+0x1c>
   13478:	20800e17 	ldw	r2,56(r4)
   1347c:	10000c26 	beq	r2,zero,134b0 <_fflush_r+0x4c>
   13480:	2880030f 	ldh	r2,12(r5)
   13484:	1000051e 	bne	r2,zero,1349c <_fflush_r+0x38>
   13488:	0005883a 	mov	r2,zero
   1348c:	dfc00217 	ldw	ra,8(sp)
   13490:	dc000117 	ldw	r16,4(sp)
   13494:	dec00304 	addi	sp,sp,12
   13498:	f800283a 	ret
   1349c:	8009883a 	mov	r4,r16
   134a0:	dfc00217 	ldw	ra,8(sp)
   134a4:	dc000117 	ldw	r16,4(sp)
   134a8:	dec00304 	addi	sp,sp,12
   134ac:	00132481 	jmpi	13248 <__sflush_r>
   134b0:	d9400015 	stw	r5,0(sp)
   134b4:	00114ec0 	call	114ec <__sinit>
   134b8:	d9400017 	ldw	r5,0(sp)
   134bc:	003ff006 	br	13480 <__alt_data_end+0xffff3480>

000134c0 <fflush>:
   134c0:	20000526 	beq	r4,zero,134d8 <fflush+0x18>
   134c4:	00800074 	movhi	r2,1
   134c8:	109fb204 	addi	r2,r2,32456
   134cc:	200b883a 	mov	r5,r4
   134d0:	11000017 	ldw	r4,0(r2)
   134d4:	00134641 	jmpi	13464 <_fflush_r>
   134d8:	00800074 	movhi	r2,1
   134dc:	109fb104 	addi	r2,r2,32452
   134e0:	11000017 	ldw	r4,0(r2)
   134e4:	01400074 	movhi	r5,1
   134e8:	294d1904 	addi	r5,r5,13412
   134ec:	0011ac81 	jmpi	11ac8 <_fwalk_reent>

000134f0 <_malloc_trim_r>:
   134f0:	defffb04 	addi	sp,sp,-20
   134f4:	dcc00315 	stw	r19,12(sp)
   134f8:	04c00074 	movhi	r19,1
   134fc:	dc800215 	stw	r18,8(sp)
   13500:	dc400115 	stw	r17,4(sp)
   13504:	dc000015 	stw	r16,0(sp)
   13508:	dfc00415 	stw	ra,16(sp)
   1350c:	2821883a 	mov	r16,r5
   13510:	9cda2c04 	addi	r19,r19,26800
   13514:	2025883a 	mov	r18,r4
   13518:	00142140 	call	14214 <__malloc_lock>
   1351c:	98800217 	ldw	r2,8(r19)
   13520:	14400117 	ldw	r17,4(r2)
   13524:	00bfff04 	movi	r2,-4
   13528:	88a2703a 	and	r17,r17,r2
   1352c:	8c21c83a 	sub	r16,r17,r16
   13530:	8403fbc4 	addi	r16,r16,4079
   13534:	8020d33a 	srli	r16,r16,12
   13538:	0083ffc4 	movi	r2,4095
   1353c:	843fffc4 	addi	r16,r16,-1
   13540:	8020933a 	slli	r16,r16,12
   13544:	1400060e 	bge	r2,r16,13560 <_malloc_trim_r+0x70>
   13548:	000b883a 	mov	r5,zero
   1354c:	9009883a 	mov	r4,r18
   13550:	0012dac0 	call	12dac <_sbrk_r>
   13554:	98c00217 	ldw	r3,8(r19)
   13558:	1c47883a 	add	r3,r3,r17
   1355c:	10c00a26 	beq	r2,r3,13588 <_malloc_trim_r+0x98>
   13560:	9009883a 	mov	r4,r18
   13564:	00142380 	call	14238 <__malloc_unlock>
   13568:	0005883a 	mov	r2,zero
   1356c:	dfc00417 	ldw	ra,16(sp)
   13570:	dcc00317 	ldw	r19,12(sp)
   13574:	dc800217 	ldw	r18,8(sp)
   13578:	dc400117 	ldw	r17,4(sp)
   1357c:	dc000017 	ldw	r16,0(sp)
   13580:	dec00504 	addi	sp,sp,20
   13584:	f800283a 	ret
   13588:	040bc83a 	sub	r5,zero,r16
   1358c:	9009883a 	mov	r4,r18
   13590:	0012dac0 	call	12dac <_sbrk_r>
   13594:	00ffffc4 	movi	r3,-1
   13598:	10c00d26 	beq	r2,r3,135d0 <_malloc_trim_r+0xe0>
   1359c:	00c000b4 	movhi	r3,2
   135a0:	18e6aa04 	addi	r3,r3,-25944
   135a4:	18800017 	ldw	r2,0(r3)
   135a8:	99000217 	ldw	r4,8(r19)
   135ac:	8c23c83a 	sub	r17,r17,r16
   135b0:	8c400054 	ori	r17,r17,1
   135b4:	1421c83a 	sub	r16,r2,r16
   135b8:	24400115 	stw	r17,4(r4)
   135bc:	9009883a 	mov	r4,r18
   135c0:	1c000015 	stw	r16,0(r3)
   135c4:	00142380 	call	14238 <__malloc_unlock>
   135c8:	00800044 	movi	r2,1
   135cc:	003fe706 	br	1356c <__alt_data_end+0xffff356c>
   135d0:	000b883a 	mov	r5,zero
   135d4:	9009883a 	mov	r4,r18
   135d8:	0012dac0 	call	12dac <_sbrk_r>
   135dc:	99000217 	ldw	r4,8(r19)
   135e0:	014003c4 	movi	r5,15
   135e4:	1107c83a 	sub	r3,r2,r4
   135e8:	28ffdd0e 	bge	r5,r3,13560 <__alt_data_end+0xffff3560>
   135ec:	01400074 	movhi	r5,1
   135f0:	295fb304 	addi	r5,r5,32460
   135f4:	29400017 	ldw	r5,0(r5)
   135f8:	18c00054 	ori	r3,r3,1
   135fc:	20c00115 	stw	r3,4(r4)
   13600:	00c000b4 	movhi	r3,2
   13604:	1145c83a 	sub	r2,r2,r5
   13608:	18e6aa04 	addi	r3,r3,-25944
   1360c:	18800015 	stw	r2,0(r3)
   13610:	003fd306 	br	13560 <__alt_data_end+0xffff3560>

00013614 <_free_r>:
   13614:	28004126 	beq	r5,zero,1371c <_free_r+0x108>
   13618:	defffd04 	addi	sp,sp,-12
   1361c:	dc400115 	stw	r17,4(sp)
   13620:	dc000015 	stw	r16,0(sp)
   13624:	2023883a 	mov	r17,r4
   13628:	2821883a 	mov	r16,r5
   1362c:	dfc00215 	stw	ra,8(sp)
   13630:	00142140 	call	14214 <__malloc_lock>
   13634:	81ffff17 	ldw	r7,-4(r16)
   13638:	00bfff84 	movi	r2,-2
   1363c:	01000074 	movhi	r4,1
   13640:	81bffe04 	addi	r6,r16,-8
   13644:	3884703a 	and	r2,r7,r2
   13648:	211a2c04 	addi	r4,r4,26800
   1364c:	308b883a 	add	r5,r6,r2
   13650:	2a400117 	ldw	r9,4(r5)
   13654:	22000217 	ldw	r8,8(r4)
   13658:	00ffff04 	movi	r3,-4
   1365c:	48c6703a 	and	r3,r9,r3
   13660:	2a005726 	beq	r5,r8,137c0 <_free_r+0x1ac>
   13664:	28c00115 	stw	r3,4(r5)
   13668:	39c0004c 	andi	r7,r7,1
   1366c:	3800091e 	bne	r7,zero,13694 <_free_r+0x80>
   13670:	823ffe17 	ldw	r8,-8(r16)
   13674:	22400204 	addi	r9,r4,8
   13678:	320dc83a 	sub	r6,r6,r8
   1367c:	31c00217 	ldw	r7,8(r6)
   13680:	1205883a 	add	r2,r2,r8
   13684:	3a406526 	beq	r7,r9,1381c <_free_r+0x208>
   13688:	32000317 	ldw	r8,12(r6)
   1368c:	3a000315 	stw	r8,12(r7)
   13690:	41c00215 	stw	r7,8(r8)
   13694:	28cf883a 	add	r7,r5,r3
   13698:	39c00117 	ldw	r7,4(r7)
   1369c:	39c0004c 	andi	r7,r7,1
   136a0:	38003a26 	beq	r7,zero,1378c <_free_r+0x178>
   136a4:	10c00054 	ori	r3,r2,1
   136a8:	30c00115 	stw	r3,4(r6)
   136ac:	3087883a 	add	r3,r6,r2
   136b0:	18800015 	stw	r2,0(r3)
   136b4:	00c07fc4 	movi	r3,511
   136b8:	18801936 	bltu	r3,r2,13720 <_free_r+0x10c>
   136bc:	1004d0fa 	srli	r2,r2,3
   136c0:	01c00044 	movi	r7,1
   136c4:	21400117 	ldw	r5,4(r4)
   136c8:	10c00044 	addi	r3,r2,1
   136cc:	18c7883a 	add	r3,r3,r3
   136d0:	1005d0ba 	srai	r2,r2,2
   136d4:	18c7883a 	add	r3,r3,r3
   136d8:	18c7883a 	add	r3,r3,r3
   136dc:	1907883a 	add	r3,r3,r4
   136e0:	3884983a 	sll	r2,r7,r2
   136e4:	19c00017 	ldw	r7,0(r3)
   136e8:	1a3ffe04 	addi	r8,r3,-8
   136ec:	1144b03a 	or	r2,r2,r5
   136f0:	32000315 	stw	r8,12(r6)
   136f4:	31c00215 	stw	r7,8(r6)
   136f8:	20800115 	stw	r2,4(r4)
   136fc:	19800015 	stw	r6,0(r3)
   13700:	39800315 	stw	r6,12(r7)
   13704:	8809883a 	mov	r4,r17
   13708:	dfc00217 	ldw	ra,8(sp)
   1370c:	dc400117 	ldw	r17,4(sp)
   13710:	dc000017 	ldw	r16,0(sp)
   13714:	dec00304 	addi	sp,sp,12
   13718:	00142381 	jmpi	14238 <__malloc_unlock>
   1371c:	f800283a 	ret
   13720:	100ad27a 	srli	r5,r2,9
   13724:	00c00104 	movi	r3,4
   13728:	19404a36 	bltu	r3,r5,13854 <_free_r+0x240>
   1372c:	100ad1ba 	srli	r5,r2,6
   13730:	28c00e44 	addi	r3,r5,57
   13734:	18c7883a 	add	r3,r3,r3
   13738:	29400e04 	addi	r5,r5,56
   1373c:	18c7883a 	add	r3,r3,r3
   13740:	18c7883a 	add	r3,r3,r3
   13744:	1909883a 	add	r4,r3,r4
   13748:	20c00017 	ldw	r3,0(r4)
   1374c:	01c00074 	movhi	r7,1
   13750:	213ffe04 	addi	r4,r4,-8
   13754:	39da2c04 	addi	r7,r7,26800
   13758:	20c04426 	beq	r4,r3,1386c <_free_r+0x258>
   1375c:	01ffff04 	movi	r7,-4
   13760:	19400117 	ldw	r5,4(r3)
   13764:	29ca703a 	and	r5,r5,r7
   13768:	1140022e 	bgeu	r2,r5,13774 <_free_r+0x160>
   1376c:	18c00217 	ldw	r3,8(r3)
   13770:	20fffb1e 	bne	r4,r3,13760 <__alt_data_end+0xffff3760>
   13774:	19000317 	ldw	r4,12(r3)
   13778:	31000315 	stw	r4,12(r6)
   1377c:	30c00215 	stw	r3,8(r6)
   13780:	21800215 	stw	r6,8(r4)
   13784:	19800315 	stw	r6,12(r3)
   13788:	003fde06 	br	13704 <__alt_data_end+0xffff3704>
   1378c:	29c00217 	ldw	r7,8(r5)
   13790:	10c5883a 	add	r2,r2,r3
   13794:	00c00074 	movhi	r3,1
   13798:	18da2e04 	addi	r3,r3,26808
   1379c:	38c03b26 	beq	r7,r3,1388c <_free_r+0x278>
   137a0:	2a000317 	ldw	r8,12(r5)
   137a4:	11400054 	ori	r5,r2,1
   137a8:	3087883a 	add	r3,r6,r2
   137ac:	3a000315 	stw	r8,12(r7)
   137b0:	41c00215 	stw	r7,8(r8)
   137b4:	31400115 	stw	r5,4(r6)
   137b8:	18800015 	stw	r2,0(r3)
   137bc:	003fbd06 	br	136b4 <__alt_data_end+0xffff36b4>
   137c0:	39c0004c 	andi	r7,r7,1
   137c4:	10c5883a 	add	r2,r2,r3
   137c8:	3800071e 	bne	r7,zero,137e8 <_free_r+0x1d4>
   137cc:	81fffe17 	ldw	r7,-8(r16)
   137d0:	31cdc83a 	sub	r6,r6,r7
   137d4:	30c00317 	ldw	r3,12(r6)
   137d8:	31400217 	ldw	r5,8(r6)
   137dc:	11c5883a 	add	r2,r2,r7
   137e0:	28c00315 	stw	r3,12(r5)
   137e4:	19400215 	stw	r5,8(r3)
   137e8:	10c00054 	ori	r3,r2,1
   137ec:	30c00115 	stw	r3,4(r6)
   137f0:	00c00074 	movhi	r3,1
   137f4:	18dfb404 	addi	r3,r3,32464
   137f8:	18c00017 	ldw	r3,0(r3)
   137fc:	21800215 	stw	r6,8(r4)
   13800:	10ffc036 	bltu	r2,r3,13704 <__alt_data_end+0xffff3704>
   13804:	008000b4 	movhi	r2,2
   13808:	10a66d04 	addi	r2,r2,-26188
   1380c:	11400017 	ldw	r5,0(r2)
   13810:	8809883a 	mov	r4,r17
   13814:	00134f00 	call	134f0 <_malloc_trim_r>
   13818:	003fba06 	br	13704 <__alt_data_end+0xffff3704>
   1381c:	28c9883a 	add	r4,r5,r3
   13820:	21000117 	ldw	r4,4(r4)
   13824:	2100004c 	andi	r4,r4,1
   13828:	2000391e 	bne	r4,zero,13910 <_free_r+0x2fc>
   1382c:	29c00217 	ldw	r7,8(r5)
   13830:	29000317 	ldw	r4,12(r5)
   13834:	1885883a 	add	r2,r3,r2
   13838:	10c00054 	ori	r3,r2,1
   1383c:	39000315 	stw	r4,12(r7)
   13840:	21c00215 	stw	r7,8(r4)
   13844:	30c00115 	stw	r3,4(r6)
   13848:	308d883a 	add	r6,r6,r2
   1384c:	30800015 	stw	r2,0(r6)
   13850:	003fac06 	br	13704 <__alt_data_end+0xffff3704>
   13854:	00c00504 	movi	r3,20
   13858:	19401536 	bltu	r3,r5,138b0 <_free_r+0x29c>
   1385c:	28c01704 	addi	r3,r5,92
   13860:	18c7883a 	add	r3,r3,r3
   13864:	294016c4 	addi	r5,r5,91
   13868:	003fb406 	br	1373c <__alt_data_end+0xffff373c>
   1386c:	280bd0ba 	srai	r5,r5,2
   13870:	00c00044 	movi	r3,1
   13874:	38800117 	ldw	r2,4(r7)
   13878:	194a983a 	sll	r5,r3,r5
   1387c:	2007883a 	mov	r3,r4
   13880:	2884b03a 	or	r2,r5,r2
   13884:	38800115 	stw	r2,4(r7)
   13888:	003fbb06 	br	13778 <__alt_data_end+0xffff3778>
   1388c:	21800515 	stw	r6,20(r4)
   13890:	21800415 	stw	r6,16(r4)
   13894:	10c00054 	ori	r3,r2,1
   13898:	31c00315 	stw	r7,12(r6)
   1389c:	31c00215 	stw	r7,8(r6)
   138a0:	30c00115 	stw	r3,4(r6)
   138a4:	308d883a 	add	r6,r6,r2
   138a8:	30800015 	stw	r2,0(r6)
   138ac:	003f9506 	br	13704 <__alt_data_end+0xffff3704>
   138b0:	00c01504 	movi	r3,84
   138b4:	19400536 	bltu	r3,r5,138cc <_free_r+0x2b8>
   138b8:	100ad33a 	srli	r5,r2,12
   138bc:	28c01bc4 	addi	r3,r5,111
   138c0:	18c7883a 	add	r3,r3,r3
   138c4:	29401b84 	addi	r5,r5,110
   138c8:	003f9c06 	br	1373c <__alt_data_end+0xffff373c>
   138cc:	00c05504 	movi	r3,340
   138d0:	19400536 	bltu	r3,r5,138e8 <_free_r+0x2d4>
   138d4:	100ad3fa 	srli	r5,r2,15
   138d8:	28c01e04 	addi	r3,r5,120
   138dc:	18c7883a 	add	r3,r3,r3
   138e0:	29401dc4 	addi	r5,r5,119
   138e4:	003f9506 	br	1373c <__alt_data_end+0xffff373c>
   138e8:	00c15504 	movi	r3,1364
   138ec:	19400536 	bltu	r3,r5,13904 <_free_r+0x2f0>
   138f0:	100ad4ba 	srli	r5,r2,18
   138f4:	28c01f44 	addi	r3,r5,125
   138f8:	18c7883a 	add	r3,r3,r3
   138fc:	29401f04 	addi	r5,r5,124
   13900:	003f8e06 	br	1373c <__alt_data_end+0xffff373c>
   13904:	00c03f84 	movi	r3,254
   13908:	01401f84 	movi	r5,126
   1390c:	003f8b06 	br	1373c <__alt_data_end+0xffff373c>
   13910:	10c00054 	ori	r3,r2,1
   13914:	30c00115 	stw	r3,4(r6)
   13918:	308d883a 	add	r6,r6,r2
   1391c:	30800015 	stw	r2,0(r6)
   13920:	003f7806 	br	13704 <__alt_data_end+0xffff3704>

00013924 <_lseek_r>:
   13924:	defffd04 	addi	sp,sp,-12
   13928:	2805883a 	mov	r2,r5
   1392c:	dc000015 	stw	r16,0(sp)
   13930:	040000b4 	movhi	r16,2
   13934:	dc400115 	stw	r17,4(sp)
   13938:	300b883a 	mov	r5,r6
   1393c:	84266e04 	addi	r16,r16,-26184
   13940:	2023883a 	mov	r17,r4
   13944:	380d883a 	mov	r6,r7
   13948:	1009883a 	mov	r4,r2
   1394c:	dfc00215 	stw	ra,8(sp)
   13950:	80000015 	stw	zero,0(r16)
   13954:	00140bc0 	call	140bc <lseek>
   13958:	00ffffc4 	movi	r3,-1
   1395c:	10c00526 	beq	r2,r3,13974 <_lseek_r+0x50>
   13960:	dfc00217 	ldw	ra,8(sp)
   13964:	dc400117 	ldw	r17,4(sp)
   13968:	dc000017 	ldw	r16,0(sp)
   1396c:	dec00304 	addi	sp,sp,12
   13970:	f800283a 	ret
   13974:	80c00017 	ldw	r3,0(r16)
   13978:	183ff926 	beq	r3,zero,13960 <__alt_data_end+0xffff3960>
   1397c:	88c00015 	stw	r3,0(r17)
   13980:	003ff706 	br	13960 <__alt_data_end+0xffff3960>

00013984 <__smakebuf_r>:
   13984:	2880030b 	ldhu	r2,12(r5)
   13988:	10c0008c 	andi	r3,r2,2
   1398c:	1800411e 	bne	r3,zero,13a94 <__smakebuf_r+0x110>
   13990:	deffec04 	addi	sp,sp,-80
   13994:	dc000f15 	stw	r16,60(sp)
   13998:	2821883a 	mov	r16,r5
   1399c:	2940038f 	ldh	r5,14(r5)
   139a0:	dc401015 	stw	r17,64(sp)
   139a4:	dfc01315 	stw	ra,76(sp)
   139a8:	dcc01215 	stw	r19,72(sp)
   139ac:	dc801115 	stw	r18,68(sp)
   139b0:	2023883a 	mov	r17,r4
   139b4:	28001c16 	blt	r5,zero,13a28 <__smakebuf_r+0xa4>
   139b8:	d80d883a 	mov	r6,sp
   139bc:	0013ba00 	call	13ba0 <_fstat_r>
   139c0:	10001816 	blt	r2,zero,13a24 <__smakebuf_r+0xa0>
   139c4:	d8800117 	ldw	r2,4(sp)
   139c8:	00e00014 	movui	r3,32768
   139cc:	10bc000c 	andi	r2,r2,61440
   139d0:	14c80020 	cmpeqi	r19,r2,8192
   139d4:	10c03726 	beq	r2,r3,13ab4 <__smakebuf_r+0x130>
   139d8:	80c0030b 	ldhu	r3,12(r16)
   139dc:	18c20014 	ori	r3,r3,2048
   139e0:	80c0030d 	sth	r3,12(r16)
   139e4:	00c80004 	movi	r3,8192
   139e8:	10c0521e 	bne	r2,r3,13b34 <__smakebuf_r+0x1b0>
   139ec:	8140038f 	ldh	r5,14(r16)
   139f0:	8809883a 	mov	r4,r17
   139f4:	0013bfc0 	call	13bfc <_isatty_r>
   139f8:	10004c26 	beq	r2,zero,13b2c <__smakebuf_r+0x1a8>
   139fc:	8080030b 	ldhu	r2,12(r16)
   13a00:	80c010c4 	addi	r3,r16,67
   13a04:	80c00015 	stw	r3,0(r16)
   13a08:	10800054 	ori	r2,r2,1
   13a0c:	8080030d 	sth	r2,12(r16)
   13a10:	00800044 	movi	r2,1
   13a14:	80c00415 	stw	r3,16(r16)
   13a18:	80800515 	stw	r2,20(r16)
   13a1c:	04810004 	movi	r18,1024
   13a20:	00000706 	br	13a40 <__smakebuf_r+0xbc>
   13a24:	8080030b 	ldhu	r2,12(r16)
   13a28:	10c0200c 	andi	r3,r2,128
   13a2c:	18001f1e 	bne	r3,zero,13aac <__smakebuf_r+0x128>
   13a30:	04810004 	movi	r18,1024
   13a34:	10820014 	ori	r2,r2,2048
   13a38:	8080030d 	sth	r2,12(r16)
   13a3c:	0027883a 	mov	r19,zero
   13a40:	900b883a 	mov	r5,r18
   13a44:	8809883a 	mov	r4,r17
   13a48:	0011b8c0 	call	11b8c <_malloc_r>
   13a4c:	10002c26 	beq	r2,zero,13b00 <__smakebuf_r+0x17c>
   13a50:	80c0030b 	ldhu	r3,12(r16)
   13a54:	01000074 	movhi	r4,1
   13a58:	21046504 	addi	r4,r4,4500
   13a5c:	89000f15 	stw	r4,60(r17)
   13a60:	18c02014 	ori	r3,r3,128
   13a64:	80c0030d 	sth	r3,12(r16)
   13a68:	80800015 	stw	r2,0(r16)
   13a6c:	80800415 	stw	r2,16(r16)
   13a70:	84800515 	stw	r18,20(r16)
   13a74:	98001a1e 	bne	r19,zero,13ae0 <__smakebuf_r+0x15c>
   13a78:	dfc01317 	ldw	ra,76(sp)
   13a7c:	dcc01217 	ldw	r19,72(sp)
   13a80:	dc801117 	ldw	r18,68(sp)
   13a84:	dc401017 	ldw	r17,64(sp)
   13a88:	dc000f17 	ldw	r16,60(sp)
   13a8c:	dec01404 	addi	sp,sp,80
   13a90:	f800283a 	ret
   13a94:	288010c4 	addi	r2,r5,67
   13a98:	28800015 	stw	r2,0(r5)
   13a9c:	28800415 	stw	r2,16(r5)
   13aa0:	00800044 	movi	r2,1
   13aa4:	28800515 	stw	r2,20(r5)
   13aa8:	f800283a 	ret
   13aac:	04801004 	movi	r18,64
   13ab0:	003fe006 	br	13a34 <__alt_data_end+0xffff3a34>
   13ab4:	81000a17 	ldw	r4,40(r16)
   13ab8:	00c00074 	movhi	r3,1
   13abc:	18cbb604 	addi	r3,r3,11992
   13ac0:	20ffc51e 	bne	r4,r3,139d8 <__alt_data_end+0xffff39d8>
   13ac4:	8080030b 	ldhu	r2,12(r16)
   13ac8:	04810004 	movi	r18,1024
   13acc:	84801315 	stw	r18,76(r16)
   13ad0:	1484b03a 	or	r2,r2,r18
   13ad4:	8080030d 	sth	r2,12(r16)
   13ad8:	0027883a 	mov	r19,zero
   13adc:	003fd806 	br	13a40 <__alt_data_end+0xffff3a40>
   13ae0:	8140038f 	ldh	r5,14(r16)
   13ae4:	8809883a 	mov	r4,r17
   13ae8:	0013bfc0 	call	13bfc <_isatty_r>
   13aec:	103fe226 	beq	r2,zero,13a78 <__alt_data_end+0xffff3a78>
   13af0:	8080030b 	ldhu	r2,12(r16)
   13af4:	10800054 	ori	r2,r2,1
   13af8:	8080030d 	sth	r2,12(r16)
   13afc:	003fde06 	br	13a78 <__alt_data_end+0xffff3a78>
   13b00:	8080030b 	ldhu	r2,12(r16)
   13b04:	10c0800c 	andi	r3,r2,512
   13b08:	183fdb1e 	bne	r3,zero,13a78 <__alt_data_end+0xffff3a78>
   13b0c:	10800094 	ori	r2,r2,2
   13b10:	80c010c4 	addi	r3,r16,67
   13b14:	8080030d 	sth	r2,12(r16)
   13b18:	00800044 	movi	r2,1
   13b1c:	80c00015 	stw	r3,0(r16)
   13b20:	80c00415 	stw	r3,16(r16)
   13b24:	80800515 	stw	r2,20(r16)
   13b28:	003fd306 	br	13a78 <__alt_data_end+0xffff3a78>
   13b2c:	04810004 	movi	r18,1024
   13b30:	003fc306 	br	13a40 <__alt_data_end+0xffff3a40>
   13b34:	0027883a 	mov	r19,zero
   13b38:	04810004 	movi	r18,1024
   13b3c:	003fc006 	br	13a40 <__alt_data_end+0xffff3a40>

00013b40 <_read_r>:
   13b40:	defffd04 	addi	sp,sp,-12
   13b44:	2805883a 	mov	r2,r5
   13b48:	dc000015 	stw	r16,0(sp)
   13b4c:	040000b4 	movhi	r16,2
   13b50:	dc400115 	stw	r17,4(sp)
   13b54:	300b883a 	mov	r5,r6
   13b58:	84266e04 	addi	r16,r16,-26184
   13b5c:	2023883a 	mov	r17,r4
   13b60:	380d883a 	mov	r6,r7
   13b64:	1009883a 	mov	r4,r2
   13b68:	dfc00215 	stw	ra,8(sp)
   13b6c:	80000015 	stw	zero,0(r16)
   13b70:	00142d40 	call	142d4 <read>
   13b74:	00ffffc4 	movi	r3,-1
   13b78:	10c00526 	beq	r2,r3,13b90 <_read_r+0x50>
   13b7c:	dfc00217 	ldw	ra,8(sp)
   13b80:	dc400117 	ldw	r17,4(sp)
   13b84:	dc000017 	ldw	r16,0(sp)
   13b88:	dec00304 	addi	sp,sp,12
   13b8c:	f800283a 	ret
   13b90:	80c00017 	ldw	r3,0(r16)
   13b94:	183ff926 	beq	r3,zero,13b7c <__alt_data_end+0xffff3b7c>
   13b98:	88c00015 	stw	r3,0(r17)
   13b9c:	003ff706 	br	13b7c <__alt_data_end+0xffff3b7c>

00013ba0 <_fstat_r>:
   13ba0:	defffd04 	addi	sp,sp,-12
   13ba4:	2805883a 	mov	r2,r5
   13ba8:	dc000015 	stw	r16,0(sp)
   13bac:	040000b4 	movhi	r16,2
   13bb0:	dc400115 	stw	r17,4(sp)
   13bb4:	84266e04 	addi	r16,r16,-26184
   13bb8:	2023883a 	mov	r17,r4
   13bbc:	300b883a 	mov	r5,r6
   13bc0:	1009883a 	mov	r4,r2
   13bc4:	dfc00215 	stw	ra,8(sp)
   13bc8:	80000015 	stw	zero,0(r16)
   13bcc:	0013df40 	call	13df4 <fstat>
   13bd0:	00ffffc4 	movi	r3,-1
   13bd4:	10c00526 	beq	r2,r3,13bec <_fstat_r+0x4c>
   13bd8:	dfc00217 	ldw	ra,8(sp)
   13bdc:	dc400117 	ldw	r17,4(sp)
   13be0:	dc000017 	ldw	r16,0(sp)
   13be4:	dec00304 	addi	sp,sp,12
   13be8:	f800283a 	ret
   13bec:	80c00017 	ldw	r3,0(r16)
   13bf0:	183ff926 	beq	r3,zero,13bd8 <__alt_data_end+0xffff3bd8>
   13bf4:	88c00015 	stw	r3,0(r17)
   13bf8:	003ff706 	br	13bd8 <__alt_data_end+0xffff3bd8>

00013bfc <_isatty_r>:
   13bfc:	defffd04 	addi	sp,sp,-12
   13c00:	dc000015 	stw	r16,0(sp)
   13c04:	040000b4 	movhi	r16,2
   13c08:	dc400115 	stw	r17,4(sp)
   13c0c:	84266e04 	addi	r16,r16,-26184
   13c10:	2023883a 	mov	r17,r4
   13c14:	2809883a 	mov	r4,r5
   13c18:	dfc00215 	stw	ra,8(sp)
   13c1c:	80000015 	stw	zero,0(r16)
   13c20:	0013ee80 	call	13ee8 <isatty>
   13c24:	00ffffc4 	movi	r3,-1
   13c28:	10c00526 	beq	r2,r3,13c40 <_isatty_r+0x44>
   13c2c:	dfc00217 	ldw	ra,8(sp)
   13c30:	dc400117 	ldw	r17,4(sp)
   13c34:	dc000017 	ldw	r16,0(sp)
   13c38:	dec00304 	addi	sp,sp,12
   13c3c:	f800283a 	ret
   13c40:	80c00017 	ldw	r3,0(r16)
   13c44:	183ff926 	beq	r3,zero,13c2c <__alt_data_end+0xffff3c2c>
   13c48:	88c00015 	stw	r3,0(r17)
   13c4c:	003ff706 	br	13c2c <__alt_data_end+0xffff3c2c>

00013c50 <__mulsi3>:
   13c50:	0005883a 	mov	r2,zero
   13c54:	20000726 	beq	r4,zero,13c74 <__mulsi3+0x24>
   13c58:	20c0004c 	andi	r3,r4,1
   13c5c:	2008d07a 	srli	r4,r4,1
   13c60:	18000126 	beq	r3,zero,13c68 <__mulsi3+0x18>
   13c64:	1145883a 	add	r2,r2,r5
   13c68:	294b883a 	add	r5,r5,r5
   13c6c:	203ffa1e 	bne	r4,zero,13c58 <__alt_data_end+0xffff3c58>
   13c70:	f800283a 	ret
   13c74:	f800283a 	ret

00013c78 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13c78:	defffe04 	addi	sp,sp,-8
   13c7c:	dfc00115 	stw	ra,4(sp)
   13c80:	df000015 	stw	fp,0(sp)
   13c84:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13c88:	d0a00a17 	ldw	r2,-32728(gp)
   13c8c:	10000326 	beq	r2,zero,13c9c <alt_get_errno+0x24>
   13c90:	d0a00a17 	ldw	r2,-32728(gp)
   13c94:	103ee83a 	callr	r2
   13c98:	00000106 	br	13ca0 <alt_get_errno+0x28>
   13c9c:	d0a6be04 	addi	r2,gp,-25864
}
   13ca0:	e037883a 	mov	sp,fp
   13ca4:	dfc00117 	ldw	ra,4(sp)
   13ca8:	df000017 	ldw	fp,0(sp)
   13cac:	dec00204 	addi	sp,sp,8
   13cb0:	f800283a 	ret

00013cb4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   13cb4:	defffb04 	addi	sp,sp,-20
   13cb8:	dfc00415 	stw	ra,16(sp)
   13cbc:	df000315 	stw	fp,12(sp)
   13cc0:	df000304 	addi	fp,sp,12
   13cc4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   13cc8:	e0bfff17 	ldw	r2,-4(fp)
   13ccc:	10000816 	blt	r2,zero,13cf0 <close+0x3c>
   13cd0:	01400304 	movi	r5,12
   13cd4:	e13fff17 	ldw	r4,-4(fp)
   13cd8:	0013c500 	call	13c50 <__mulsi3>
   13cdc:	1007883a 	mov	r3,r2
   13ce0:	00800074 	movhi	r2,1
   13ce4:	109b3804 	addi	r2,r2,27872
   13ce8:	1885883a 	add	r2,r3,r2
   13cec:	00000106 	br	13cf4 <close+0x40>
   13cf0:	0005883a 	mov	r2,zero
   13cf4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   13cf8:	e0bffd17 	ldw	r2,-12(fp)
   13cfc:	10001926 	beq	r2,zero,13d64 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   13d00:	e0bffd17 	ldw	r2,-12(fp)
   13d04:	10800017 	ldw	r2,0(r2)
   13d08:	10800417 	ldw	r2,16(r2)
   13d0c:	10000626 	beq	r2,zero,13d28 <close+0x74>
   13d10:	e0bffd17 	ldw	r2,-12(fp)
   13d14:	10800017 	ldw	r2,0(r2)
   13d18:	10800417 	ldw	r2,16(r2)
   13d1c:	e13ffd17 	ldw	r4,-12(fp)
   13d20:	103ee83a 	callr	r2
   13d24:	00000106 	br	13d2c <close+0x78>
   13d28:	0005883a 	mov	r2,zero
   13d2c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   13d30:	e13fff17 	ldw	r4,-4(fp)
   13d34:	00143d80 	call	143d8 <alt_release_fd>
    if (rval < 0)
   13d38:	e0bffe17 	ldw	r2,-8(fp)
   13d3c:	1000070e 	bge	r2,zero,13d5c <close+0xa8>
    {
      ALT_ERRNO = -rval;
   13d40:	0013c780 	call	13c78 <alt_get_errno>
   13d44:	1007883a 	mov	r3,r2
   13d48:	e0bffe17 	ldw	r2,-8(fp)
   13d4c:	0085c83a 	sub	r2,zero,r2
   13d50:	18800015 	stw	r2,0(r3)
      return -1;
   13d54:	00bfffc4 	movi	r2,-1
   13d58:	00000706 	br	13d78 <close+0xc4>
    }
    return 0;
   13d5c:	0005883a 	mov	r2,zero
   13d60:	00000506 	br	13d78 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   13d64:	0013c780 	call	13c78 <alt_get_errno>
   13d68:	1007883a 	mov	r3,r2
   13d6c:	00801444 	movi	r2,81
   13d70:	18800015 	stw	r2,0(r3)
    return -1;
   13d74:	00bfffc4 	movi	r2,-1
  }
}
   13d78:	e037883a 	mov	sp,fp
   13d7c:	dfc00117 	ldw	ra,4(sp)
   13d80:	df000017 	ldw	fp,0(sp)
   13d84:	dec00204 	addi	sp,sp,8
   13d88:	f800283a 	ret

00013d8c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   13d8c:	defffc04 	addi	sp,sp,-16
   13d90:	df000315 	stw	fp,12(sp)
   13d94:	df000304 	addi	fp,sp,12
   13d98:	e13ffd15 	stw	r4,-12(fp)
   13d9c:	e17ffe15 	stw	r5,-8(fp)
   13da0:	e1bfff15 	stw	r6,-4(fp)
  return len;
   13da4:	e0bfff17 	ldw	r2,-4(fp)
}
   13da8:	e037883a 	mov	sp,fp
   13dac:	df000017 	ldw	fp,0(sp)
   13db0:	dec00104 	addi	sp,sp,4
   13db4:	f800283a 	ret

00013db8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13db8:	defffe04 	addi	sp,sp,-8
   13dbc:	dfc00115 	stw	ra,4(sp)
   13dc0:	df000015 	stw	fp,0(sp)
   13dc4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13dc8:	d0a00a17 	ldw	r2,-32728(gp)
   13dcc:	10000326 	beq	r2,zero,13ddc <alt_get_errno+0x24>
   13dd0:	d0a00a17 	ldw	r2,-32728(gp)
   13dd4:	103ee83a 	callr	r2
   13dd8:	00000106 	br	13de0 <alt_get_errno+0x28>
   13ddc:	d0a6be04 	addi	r2,gp,-25864
}
   13de0:	e037883a 	mov	sp,fp
   13de4:	dfc00117 	ldw	ra,4(sp)
   13de8:	df000017 	ldw	fp,0(sp)
   13dec:	dec00204 	addi	sp,sp,8
   13df0:	f800283a 	ret

00013df4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   13df4:	defffb04 	addi	sp,sp,-20
   13df8:	dfc00415 	stw	ra,16(sp)
   13dfc:	df000315 	stw	fp,12(sp)
   13e00:	df000304 	addi	fp,sp,12
   13e04:	e13ffe15 	stw	r4,-8(fp)
   13e08:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13e0c:	e0bffe17 	ldw	r2,-8(fp)
   13e10:	10000816 	blt	r2,zero,13e34 <fstat+0x40>
   13e14:	01400304 	movi	r5,12
   13e18:	e13ffe17 	ldw	r4,-8(fp)
   13e1c:	0013c500 	call	13c50 <__mulsi3>
   13e20:	1007883a 	mov	r3,r2
   13e24:	00800074 	movhi	r2,1
   13e28:	109b3804 	addi	r2,r2,27872
   13e2c:	1885883a 	add	r2,r3,r2
   13e30:	00000106 	br	13e38 <fstat+0x44>
   13e34:	0005883a 	mov	r2,zero
   13e38:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   13e3c:	e0bffd17 	ldw	r2,-12(fp)
   13e40:	10001026 	beq	r2,zero,13e84 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   13e44:	e0bffd17 	ldw	r2,-12(fp)
   13e48:	10800017 	ldw	r2,0(r2)
   13e4c:	10800817 	ldw	r2,32(r2)
   13e50:	10000726 	beq	r2,zero,13e70 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   13e54:	e0bffd17 	ldw	r2,-12(fp)
   13e58:	10800017 	ldw	r2,0(r2)
   13e5c:	10800817 	ldw	r2,32(r2)
   13e60:	e17fff17 	ldw	r5,-4(fp)
   13e64:	e13ffd17 	ldw	r4,-12(fp)
   13e68:	103ee83a 	callr	r2
   13e6c:	00000a06 	br	13e98 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   13e70:	e0bfff17 	ldw	r2,-4(fp)
   13e74:	00c80004 	movi	r3,8192
   13e78:	10c00115 	stw	r3,4(r2)
      return 0;
   13e7c:	0005883a 	mov	r2,zero
   13e80:	00000506 	br	13e98 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   13e84:	0013db80 	call	13db8 <alt_get_errno>
   13e88:	1007883a 	mov	r3,r2
   13e8c:	00801444 	movi	r2,81
   13e90:	18800015 	stw	r2,0(r3)
    return -1;
   13e94:	00bfffc4 	movi	r2,-1
  }
}
   13e98:	e037883a 	mov	sp,fp
   13e9c:	dfc00117 	ldw	ra,4(sp)
   13ea0:	df000017 	ldw	fp,0(sp)
   13ea4:	dec00204 	addi	sp,sp,8
   13ea8:	f800283a 	ret

00013eac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13eac:	defffe04 	addi	sp,sp,-8
   13eb0:	dfc00115 	stw	ra,4(sp)
   13eb4:	df000015 	stw	fp,0(sp)
   13eb8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13ebc:	d0a00a17 	ldw	r2,-32728(gp)
   13ec0:	10000326 	beq	r2,zero,13ed0 <alt_get_errno+0x24>
   13ec4:	d0a00a17 	ldw	r2,-32728(gp)
   13ec8:	103ee83a 	callr	r2
   13ecc:	00000106 	br	13ed4 <alt_get_errno+0x28>
   13ed0:	d0a6be04 	addi	r2,gp,-25864
}
   13ed4:	e037883a 	mov	sp,fp
   13ed8:	dfc00117 	ldw	ra,4(sp)
   13edc:	df000017 	ldw	fp,0(sp)
   13ee0:	dec00204 	addi	sp,sp,8
   13ee4:	f800283a 	ret

00013ee8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   13ee8:	deffed04 	addi	sp,sp,-76
   13eec:	dfc01215 	stw	ra,72(sp)
   13ef0:	df001115 	stw	fp,68(sp)
   13ef4:	df001104 	addi	fp,sp,68
   13ef8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13efc:	e0bfff17 	ldw	r2,-4(fp)
   13f00:	10000816 	blt	r2,zero,13f24 <isatty+0x3c>
   13f04:	01400304 	movi	r5,12
   13f08:	e13fff17 	ldw	r4,-4(fp)
   13f0c:	0013c500 	call	13c50 <__mulsi3>
   13f10:	1007883a 	mov	r3,r2
   13f14:	00800074 	movhi	r2,1
   13f18:	109b3804 	addi	r2,r2,27872
   13f1c:	1885883a 	add	r2,r3,r2
   13f20:	00000106 	br	13f28 <isatty+0x40>
   13f24:	0005883a 	mov	r2,zero
   13f28:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   13f2c:	e0bfef17 	ldw	r2,-68(fp)
   13f30:	10000e26 	beq	r2,zero,13f6c <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   13f34:	e0bfef17 	ldw	r2,-68(fp)
   13f38:	10800017 	ldw	r2,0(r2)
   13f3c:	10800817 	ldw	r2,32(r2)
   13f40:	1000021e 	bne	r2,zero,13f4c <isatty+0x64>
    {
      return 1;
   13f44:	00800044 	movi	r2,1
   13f48:	00000d06 	br	13f80 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   13f4c:	e0bff004 	addi	r2,fp,-64
   13f50:	100b883a 	mov	r5,r2
   13f54:	e13fff17 	ldw	r4,-4(fp)
   13f58:	0013df40 	call	13df4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   13f5c:	e0bff117 	ldw	r2,-60(fp)
   13f60:	10880020 	cmpeqi	r2,r2,8192
   13f64:	10803fcc 	andi	r2,r2,255
   13f68:	00000506 	br	13f80 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   13f6c:	0013eac0 	call	13eac <alt_get_errno>
   13f70:	1007883a 	mov	r3,r2
   13f74:	00801444 	movi	r2,81
   13f78:	18800015 	stw	r2,0(r3)
    return 0;
   13f7c:	0005883a 	mov	r2,zero
  }
}
   13f80:	e037883a 	mov	sp,fp
   13f84:	dfc00117 	ldw	ra,4(sp)
   13f88:	df000017 	ldw	fp,0(sp)
   13f8c:	dec00204 	addi	sp,sp,8
   13f90:	f800283a 	ret

00013f94 <alt_load_section>:
   13f94:	defffc04 	addi	sp,sp,-16
   13f98:	df000315 	stw	fp,12(sp)
   13f9c:	df000304 	addi	fp,sp,12
   13fa0:	e13ffd15 	stw	r4,-12(fp)
   13fa4:	e17ffe15 	stw	r5,-8(fp)
   13fa8:	e1bfff15 	stw	r6,-4(fp)
   13fac:	e0fffe17 	ldw	r3,-8(fp)
   13fb0:	e0bffd17 	ldw	r2,-12(fp)
   13fb4:	18800c26 	beq	r3,r2,13fe8 <alt_load_section+0x54>
   13fb8:	00000806 	br	13fdc <alt_load_section+0x48>
   13fbc:	e0bffe17 	ldw	r2,-8(fp)
   13fc0:	10c00104 	addi	r3,r2,4
   13fc4:	e0fffe15 	stw	r3,-8(fp)
   13fc8:	e0fffd17 	ldw	r3,-12(fp)
   13fcc:	19000104 	addi	r4,r3,4
   13fd0:	e13ffd15 	stw	r4,-12(fp)
   13fd4:	18c00017 	ldw	r3,0(r3)
   13fd8:	10c00015 	stw	r3,0(r2)
   13fdc:	e0fffe17 	ldw	r3,-8(fp)
   13fe0:	e0bfff17 	ldw	r2,-4(fp)
   13fe4:	18bff51e 	bne	r3,r2,13fbc <__alt_data_end+0xffff3fbc>
   13fe8:	0001883a 	nop
   13fec:	e037883a 	mov	sp,fp
   13ff0:	df000017 	ldw	fp,0(sp)
   13ff4:	dec00104 	addi	sp,sp,4
   13ff8:	f800283a 	ret

00013ffc <alt_load>:
   13ffc:	defffe04 	addi	sp,sp,-8
   14000:	dfc00115 	stw	ra,4(sp)
   14004:	df000015 	stw	fp,0(sp)
   14008:	d839883a 	mov	fp,sp
   1400c:	01800074 	movhi	r6,1
   14010:	319fbf04 	addi	r6,r6,32508
   14014:	01400074 	movhi	r5,1
   14018:	29591604 	addi	r5,r5,25688
   1401c:	01000074 	movhi	r4,1
   14020:	211fbf04 	addi	r4,r4,32508
   14024:	0013f940 	call	13f94 <alt_load_section>
   14028:	01800074 	movhi	r6,1
   1402c:	31808c04 	addi	r6,r6,560
   14030:	01400074 	movhi	r5,1
   14034:	29400804 	addi	r5,r5,32
   14038:	01000074 	movhi	r4,1
   1403c:	21000804 	addi	r4,r4,32
   14040:	0013f940 	call	13f94 <alt_load_section>
   14044:	01800074 	movhi	r6,1
   14048:	31991604 	addi	r6,r6,25688
   1404c:	01400074 	movhi	r5,1
   14050:	2958ff04 	addi	r5,r5,25596
   14054:	01000074 	movhi	r4,1
   14058:	2118ff04 	addi	r4,r4,25596
   1405c:	0013f940 	call	13f94 <alt_load_section>
   14060:	00152900 	call	15290 <alt_dcache_flush_all>
   14064:	00154500 	call	15450 <alt_icache_flush_all>
   14068:	0001883a 	nop
   1406c:	e037883a 	mov	sp,fp
   14070:	dfc00117 	ldw	ra,4(sp)
   14074:	df000017 	ldw	fp,0(sp)
   14078:	dec00204 	addi	sp,sp,8
   1407c:	f800283a 	ret

00014080 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14080:	defffe04 	addi	sp,sp,-8
   14084:	dfc00115 	stw	ra,4(sp)
   14088:	df000015 	stw	fp,0(sp)
   1408c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14090:	d0a00a17 	ldw	r2,-32728(gp)
   14094:	10000326 	beq	r2,zero,140a4 <alt_get_errno+0x24>
   14098:	d0a00a17 	ldw	r2,-32728(gp)
   1409c:	103ee83a 	callr	r2
   140a0:	00000106 	br	140a8 <alt_get_errno+0x28>
   140a4:	d0a6be04 	addi	r2,gp,-25864
}
   140a8:	e037883a 	mov	sp,fp
   140ac:	dfc00117 	ldw	ra,4(sp)
   140b0:	df000017 	ldw	fp,0(sp)
   140b4:	dec00204 	addi	sp,sp,8
   140b8:	f800283a 	ret

000140bc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   140bc:	defff904 	addi	sp,sp,-28
   140c0:	dfc00615 	stw	ra,24(sp)
   140c4:	df000515 	stw	fp,20(sp)
   140c8:	df000504 	addi	fp,sp,20
   140cc:	e13ffd15 	stw	r4,-12(fp)
   140d0:	e17ffe15 	stw	r5,-8(fp)
   140d4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   140d8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   140dc:	e0bffd17 	ldw	r2,-12(fp)
   140e0:	10000816 	blt	r2,zero,14104 <lseek+0x48>
   140e4:	01400304 	movi	r5,12
   140e8:	e13ffd17 	ldw	r4,-12(fp)
   140ec:	0013c500 	call	13c50 <__mulsi3>
   140f0:	1007883a 	mov	r3,r2
   140f4:	00800074 	movhi	r2,1
   140f8:	109b3804 	addi	r2,r2,27872
   140fc:	1885883a 	add	r2,r3,r2
   14100:	00000106 	br	14108 <lseek+0x4c>
   14104:	0005883a 	mov	r2,zero
   14108:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   1410c:	e0bffc17 	ldw	r2,-16(fp)
   14110:	10001026 	beq	r2,zero,14154 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   14114:	e0bffc17 	ldw	r2,-16(fp)
   14118:	10800017 	ldw	r2,0(r2)
   1411c:	10800717 	ldw	r2,28(r2)
   14120:	10000926 	beq	r2,zero,14148 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   14124:	e0bffc17 	ldw	r2,-16(fp)
   14128:	10800017 	ldw	r2,0(r2)
   1412c:	10800717 	ldw	r2,28(r2)
   14130:	e1bfff17 	ldw	r6,-4(fp)
   14134:	e17ffe17 	ldw	r5,-8(fp)
   14138:	e13ffc17 	ldw	r4,-16(fp)
   1413c:	103ee83a 	callr	r2
   14140:	e0bffb15 	stw	r2,-20(fp)
   14144:	00000506 	br	1415c <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   14148:	00bfde84 	movi	r2,-134
   1414c:	e0bffb15 	stw	r2,-20(fp)
   14150:	00000206 	br	1415c <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   14154:	00bfebc4 	movi	r2,-81
   14158:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   1415c:	e0bffb17 	ldw	r2,-20(fp)
   14160:	1000070e 	bge	r2,zero,14180 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   14164:	00140800 	call	14080 <alt_get_errno>
   14168:	1007883a 	mov	r3,r2
   1416c:	e0bffb17 	ldw	r2,-20(fp)
   14170:	0085c83a 	sub	r2,zero,r2
   14174:	18800015 	stw	r2,0(r3)
    rc = -1;
   14178:	00bfffc4 	movi	r2,-1
   1417c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   14180:	e0bffb17 	ldw	r2,-20(fp)
}
   14184:	e037883a 	mov	sp,fp
   14188:	dfc00117 	ldw	ra,4(sp)
   1418c:	df000017 	ldw	fp,0(sp)
   14190:	dec00204 	addi	sp,sp,8
   14194:	f800283a 	ret

00014198 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   14198:	defffd04 	addi	sp,sp,-12
   1419c:	dfc00215 	stw	ra,8(sp)
   141a0:	df000115 	stw	fp,4(sp)
   141a4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   141a8:	0009883a 	mov	r4,zero
   141ac:	001467c0 	call	1467c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   141b0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   141b4:	00146b40 	call	146b4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   141b8:	01800074 	movhi	r6,1
   141bc:	31990e04 	addi	r6,r6,25656
   141c0:	01400074 	movhi	r5,1
   141c4:	29590e04 	addi	r5,r5,25656
   141c8:	01000074 	movhi	r4,1
   141cc:	21190e04 	addi	r4,r4,25656
   141d0:	00157f40 	call	157f4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   141d4:	00153900 	call	15390 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   141d8:	01000074 	movhi	r4,1
   141dc:	2114fc04 	addi	r4,r4,21488
   141e0:	0015fb40 	call	15fb4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   141e4:	d0a6bf17 	ldw	r2,-25860(gp)
   141e8:	d0e6c017 	ldw	r3,-25856(gp)
   141ec:	d126c117 	ldw	r4,-25852(gp)
   141f0:	200d883a 	mov	r6,r4
   141f4:	180b883a 	mov	r5,r3
   141f8:	1009883a 	mov	r4,r2
   141fc:	001026c0 	call	1026c <main>
   14200:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   14204:	01000044 	movi	r4,1
   14208:	0013cb40 	call	13cb4 <close>
  exit (result);
   1420c:	e13fff17 	ldw	r4,-4(fp)
   14210:	0015fc80 	call	15fc8 <exit>

00014214 <__malloc_lock>:
   14214:	defffe04 	addi	sp,sp,-8
   14218:	df000115 	stw	fp,4(sp)
   1421c:	df000104 	addi	fp,sp,4
   14220:	e13fff15 	stw	r4,-4(fp)
   14224:	0001883a 	nop
   14228:	e037883a 	mov	sp,fp
   1422c:	df000017 	ldw	fp,0(sp)
   14230:	dec00104 	addi	sp,sp,4
   14234:	f800283a 	ret

00014238 <__malloc_unlock>:
   14238:	defffe04 	addi	sp,sp,-8
   1423c:	df000115 	stw	fp,4(sp)
   14240:	df000104 	addi	fp,sp,4
   14244:	e13fff15 	stw	r4,-4(fp)
   14248:	0001883a 	nop
   1424c:	e037883a 	mov	sp,fp
   14250:	df000017 	ldw	fp,0(sp)
   14254:	dec00104 	addi	sp,sp,4
   14258:	f800283a 	ret

0001425c <alt_putstr>:
   1425c:	defffd04 	addi	sp,sp,-12
   14260:	dfc00215 	stw	ra,8(sp)
   14264:	df000115 	stw	fp,4(sp)
   14268:	df000104 	addi	fp,sp,4
   1426c:	e13fff15 	stw	r4,-4(fp)
   14270:	d0a00217 	ldw	r2,-32760(gp)
   14274:	10800217 	ldw	r2,8(r2)
   14278:	100b883a 	mov	r5,r2
   1427c:	e13fff17 	ldw	r4,-4(fp)
   14280:	001609c0 	call	1609c <fputs>
   14284:	e037883a 	mov	sp,fp
   14288:	dfc00117 	ldw	ra,4(sp)
   1428c:	df000017 	ldw	fp,0(sp)
   14290:	dec00204 	addi	sp,sp,8
   14294:	f800283a 	ret

00014298 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14298:	defffe04 	addi	sp,sp,-8
   1429c:	dfc00115 	stw	ra,4(sp)
   142a0:	df000015 	stw	fp,0(sp)
   142a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   142a8:	d0a00a17 	ldw	r2,-32728(gp)
   142ac:	10000326 	beq	r2,zero,142bc <alt_get_errno+0x24>
   142b0:	d0a00a17 	ldw	r2,-32728(gp)
   142b4:	103ee83a 	callr	r2
   142b8:	00000106 	br	142c0 <alt_get_errno+0x28>
   142bc:	d0a6be04 	addi	r2,gp,-25864
}
   142c0:	e037883a 	mov	sp,fp
   142c4:	dfc00117 	ldw	ra,4(sp)
   142c8:	df000017 	ldw	fp,0(sp)
   142cc:	dec00204 	addi	sp,sp,8
   142d0:	f800283a 	ret

000142d4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   142d4:	defff904 	addi	sp,sp,-28
   142d8:	dfc00615 	stw	ra,24(sp)
   142dc:	df000515 	stw	fp,20(sp)
   142e0:	df000504 	addi	fp,sp,20
   142e4:	e13ffd15 	stw	r4,-12(fp)
   142e8:	e17ffe15 	stw	r5,-8(fp)
   142ec:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   142f0:	e0bffd17 	ldw	r2,-12(fp)
   142f4:	10000816 	blt	r2,zero,14318 <read+0x44>
   142f8:	01400304 	movi	r5,12
   142fc:	e13ffd17 	ldw	r4,-12(fp)
   14300:	0013c500 	call	13c50 <__mulsi3>
   14304:	1007883a 	mov	r3,r2
   14308:	00800074 	movhi	r2,1
   1430c:	109b3804 	addi	r2,r2,27872
   14310:	1885883a 	add	r2,r3,r2
   14314:	00000106 	br	1431c <read+0x48>
   14318:	0005883a 	mov	r2,zero
   1431c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   14320:	e0bffb17 	ldw	r2,-20(fp)
   14324:	10002226 	beq	r2,zero,143b0 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   14328:	e0bffb17 	ldw	r2,-20(fp)
   1432c:	10800217 	ldw	r2,8(r2)
   14330:	108000cc 	andi	r2,r2,3
   14334:	10800060 	cmpeqi	r2,r2,1
   14338:	1000181e 	bne	r2,zero,1439c <read+0xc8>
        (fd->dev->read))
   1433c:	e0bffb17 	ldw	r2,-20(fp)
   14340:	10800017 	ldw	r2,0(r2)
   14344:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   14348:	10001426 	beq	r2,zero,1439c <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   1434c:	e0bffb17 	ldw	r2,-20(fp)
   14350:	10800017 	ldw	r2,0(r2)
   14354:	10800517 	ldw	r2,20(r2)
   14358:	e0ffff17 	ldw	r3,-4(fp)
   1435c:	180d883a 	mov	r6,r3
   14360:	e17ffe17 	ldw	r5,-8(fp)
   14364:	e13ffb17 	ldw	r4,-20(fp)
   14368:	103ee83a 	callr	r2
   1436c:	e0bffc15 	stw	r2,-16(fp)
   14370:	e0bffc17 	ldw	r2,-16(fp)
   14374:	1000070e 	bge	r2,zero,14394 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   14378:	00142980 	call	14298 <alt_get_errno>
   1437c:	1007883a 	mov	r3,r2
   14380:	e0bffc17 	ldw	r2,-16(fp)
   14384:	0085c83a 	sub	r2,zero,r2
   14388:	18800015 	stw	r2,0(r3)
          return -1;
   1438c:	00bfffc4 	movi	r2,-1
   14390:	00000c06 	br	143c4 <read+0xf0>
        }
        return rval;
   14394:	e0bffc17 	ldw	r2,-16(fp)
   14398:	00000a06 	br	143c4 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   1439c:	00142980 	call	14298 <alt_get_errno>
   143a0:	1007883a 	mov	r3,r2
   143a4:	00800344 	movi	r2,13
   143a8:	18800015 	stw	r2,0(r3)
   143ac:	00000406 	br	143c0 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   143b0:	00142980 	call	14298 <alt_get_errno>
   143b4:	1007883a 	mov	r3,r2
   143b8:	00801444 	movi	r2,81
   143bc:	18800015 	stw	r2,0(r3)
  }
  return -1;
   143c0:	00bfffc4 	movi	r2,-1
}
   143c4:	e037883a 	mov	sp,fp
   143c8:	dfc00117 	ldw	ra,4(sp)
   143cc:	df000017 	ldw	fp,0(sp)
   143d0:	dec00204 	addi	sp,sp,8
   143d4:	f800283a 	ret

000143d8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   143d8:	defffc04 	addi	sp,sp,-16
   143dc:	dfc00315 	stw	ra,12(sp)
   143e0:	df000215 	stw	fp,8(sp)
   143e4:	dc000115 	stw	r16,4(sp)
   143e8:	df000204 	addi	fp,sp,8
   143ec:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   143f0:	e0bffe17 	ldw	r2,-8(fp)
   143f4:	108000d0 	cmplti	r2,r2,3
   143f8:	1000111e 	bne	r2,zero,14440 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   143fc:	04000074 	movhi	r16,1
   14400:	841b3804 	addi	r16,r16,27872
   14404:	e0bffe17 	ldw	r2,-8(fp)
   14408:	01400304 	movi	r5,12
   1440c:	1009883a 	mov	r4,r2
   14410:	0013c500 	call	13c50 <__mulsi3>
   14414:	8085883a 	add	r2,r16,r2
   14418:	10800204 	addi	r2,r2,8
   1441c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   14420:	04000074 	movhi	r16,1
   14424:	841b3804 	addi	r16,r16,27872
   14428:	e0bffe17 	ldw	r2,-8(fp)
   1442c:	01400304 	movi	r5,12
   14430:	1009883a 	mov	r4,r2
   14434:	0013c500 	call	13c50 <__mulsi3>
   14438:	8085883a 	add	r2,r16,r2
   1443c:	10000015 	stw	zero,0(r2)
  }
}
   14440:	0001883a 	nop
   14444:	e6ffff04 	addi	sp,fp,-4
   14448:	dfc00217 	ldw	ra,8(sp)
   1444c:	df000117 	ldw	fp,4(sp)
   14450:	dc000017 	ldw	r16,0(sp)
   14454:	dec00304 	addi	sp,sp,12
   14458:	f800283a 	ret

0001445c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   1445c:	defff904 	addi	sp,sp,-28
   14460:	df000615 	stw	fp,24(sp)
   14464:	df000604 	addi	fp,sp,24
   14468:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1446c:	0005303a 	rdctl	r2,status
   14470:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14474:	e0fffe17 	ldw	r3,-8(fp)
   14478:	00bfff84 	movi	r2,-2
   1447c:	1884703a 	and	r2,r3,r2
   14480:	1001703a 	wrctl	status,r2
  
  return context;
   14484:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   14488:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   1448c:	d0a00b17 	ldw	r2,-32724(gp)
   14490:	10c000c4 	addi	r3,r2,3
   14494:	00bfff04 	movi	r2,-4
   14498:	1884703a 	and	r2,r3,r2
   1449c:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   144a0:	d0e00b17 	ldw	r3,-32724(gp)
   144a4:	e0bfff17 	ldw	r2,-4(fp)
   144a8:	1887883a 	add	r3,r3,r2
   144ac:	008000b4 	movhi	r2,2
   144b0:	10800004 	addi	r2,r2,0
   144b4:	10c0062e 	bgeu	r2,r3,144d0 <sbrk+0x74>
   144b8:	e0bffb17 	ldw	r2,-20(fp)
   144bc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   144c0:	e0bffa17 	ldw	r2,-24(fp)
   144c4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   144c8:	00bfffc4 	movi	r2,-1
   144cc:	00000b06 	br	144fc <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   144d0:	d0a00b17 	ldw	r2,-32724(gp)
   144d4:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   144d8:	d0e00b17 	ldw	r3,-32724(gp)
   144dc:	e0bfff17 	ldw	r2,-4(fp)
   144e0:	1885883a 	add	r2,r3,r2
   144e4:	d0a00b15 	stw	r2,-32724(gp)
   144e8:	e0bffb17 	ldw	r2,-20(fp)
   144ec:	e0bffc15 	stw	r2,-16(fp)
   144f0:	e0bffc17 	ldw	r2,-16(fp)
   144f4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   144f8:	e0bffd17 	ldw	r2,-12(fp)
} 
   144fc:	e037883a 	mov	sp,fp
   14500:	df000017 	ldw	fp,0(sp)
   14504:	dec00104 	addi	sp,sp,4
   14508:	f800283a 	ret

0001450c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1450c:	defffe04 	addi	sp,sp,-8
   14510:	dfc00115 	stw	ra,4(sp)
   14514:	df000015 	stw	fp,0(sp)
   14518:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1451c:	d0a00a17 	ldw	r2,-32728(gp)
   14520:	10000326 	beq	r2,zero,14530 <alt_get_errno+0x24>
   14524:	d0a00a17 	ldw	r2,-32728(gp)
   14528:	103ee83a 	callr	r2
   1452c:	00000106 	br	14534 <alt_get_errno+0x28>
   14530:	d0a6be04 	addi	r2,gp,-25864
}
   14534:	e037883a 	mov	sp,fp
   14538:	dfc00117 	ldw	ra,4(sp)
   1453c:	df000017 	ldw	fp,0(sp)
   14540:	dec00204 	addi	sp,sp,8
   14544:	f800283a 	ret

00014548 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   14548:	defff904 	addi	sp,sp,-28
   1454c:	dfc00615 	stw	ra,24(sp)
   14550:	df000515 	stw	fp,20(sp)
   14554:	df000504 	addi	fp,sp,20
   14558:	e13ffd15 	stw	r4,-12(fp)
   1455c:	e17ffe15 	stw	r5,-8(fp)
   14560:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   14564:	e0bffd17 	ldw	r2,-12(fp)
   14568:	10000816 	blt	r2,zero,1458c <write+0x44>
   1456c:	01400304 	movi	r5,12
   14570:	e13ffd17 	ldw	r4,-12(fp)
   14574:	0013c500 	call	13c50 <__mulsi3>
   14578:	1007883a 	mov	r3,r2
   1457c:	00800074 	movhi	r2,1
   14580:	109b3804 	addi	r2,r2,27872
   14584:	1885883a 	add	r2,r3,r2
   14588:	00000106 	br	14590 <write+0x48>
   1458c:	0005883a 	mov	r2,zero
   14590:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   14594:	e0bffb17 	ldw	r2,-20(fp)
   14598:	10002126 	beq	r2,zero,14620 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   1459c:	e0bffb17 	ldw	r2,-20(fp)
   145a0:	10800217 	ldw	r2,8(r2)
   145a4:	108000cc 	andi	r2,r2,3
   145a8:	10001826 	beq	r2,zero,1460c <write+0xc4>
   145ac:	e0bffb17 	ldw	r2,-20(fp)
   145b0:	10800017 	ldw	r2,0(r2)
   145b4:	10800617 	ldw	r2,24(r2)
   145b8:	10001426 	beq	r2,zero,1460c <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   145bc:	e0bffb17 	ldw	r2,-20(fp)
   145c0:	10800017 	ldw	r2,0(r2)
   145c4:	10800617 	ldw	r2,24(r2)
   145c8:	e0ffff17 	ldw	r3,-4(fp)
   145cc:	180d883a 	mov	r6,r3
   145d0:	e17ffe17 	ldw	r5,-8(fp)
   145d4:	e13ffb17 	ldw	r4,-20(fp)
   145d8:	103ee83a 	callr	r2
   145dc:	e0bffc15 	stw	r2,-16(fp)
   145e0:	e0bffc17 	ldw	r2,-16(fp)
   145e4:	1000070e 	bge	r2,zero,14604 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   145e8:	001450c0 	call	1450c <alt_get_errno>
   145ec:	1007883a 	mov	r3,r2
   145f0:	e0bffc17 	ldw	r2,-16(fp)
   145f4:	0085c83a 	sub	r2,zero,r2
   145f8:	18800015 	stw	r2,0(r3)
        return -1;
   145fc:	00bfffc4 	movi	r2,-1
   14600:	00000c06 	br	14634 <write+0xec>
      }
      return rval;
   14604:	e0bffc17 	ldw	r2,-16(fp)
   14608:	00000a06 	br	14634 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   1460c:	001450c0 	call	1450c <alt_get_errno>
   14610:	1007883a 	mov	r3,r2
   14614:	00800344 	movi	r2,13
   14618:	18800015 	stw	r2,0(r3)
   1461c:	00000406 	br	14630 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   14620:	001450c0 	call	1450c <alt_get_errno>
   14624:	1007883a 	mov	r3,r2
   14628:	00801444 	movi	r2,81
   1462c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   14630:	00bfffc4 	movi	r2,-1
}
   14634:	e037883a 	mov	sp,fp
   14638:	dfc00117 	ldw	ra,4(sp)
   1463c:	df000017 	ldw	fp,0(sp)
   14640:	dec00204 	addi	sp,sp,8
   14644:	f800283a 	ret

00014648 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   14648:	defffd04 	addi	sp,sp,-12
   1464c:	dfc00215 	stw	ra,8(sp)
   14650:	df000115 	stw	fp,4(sp)
   14654:	df000104 	addi	fp,sp,4
   14658:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   1465c:	d1600704 	addi	r5,gp,-32740
   14660:	e13fff17 	ldw	r4,-4(fp)
   14664:	00152ec0 	call	152ec <alt_dev_llist_insert>
}
   14668:	e037883a 	mov	sp,fp
   1466c:	dfc00117 	ldw	ra,4(sp)
   14670:	df000017 	ldw	fp,0(sp)
   14674:	dec00204 	addi	sp,sp,8
   14678:	f800283a 	ret

0001467c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   1467c:	defffd04 	addi	sp,sp,-12
   14680:	dfc00215 	stw	ra,8(sp)
   14684:	df000115 	stw	fp,4(sp)
   14688:	df000104 	addi	fp,sp,4
   1468c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   14690:	0015c980 	call	15c98 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   14694:	00800044 	movi	r2,1
   14698:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   1469c:	0001883a 	nop
   146a0:	e037883a 	mov	sp,fp
   146a4:	dfc00117 	ldw	ra,4(sp)
   146a8:	df000017 	ldw	fp,0(sp)
   146ac:	dec00204 	addi	sp,sp,8
   146b0:	f800283a 	ret

000146b4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   146b4:	defffe04 	addi	sp,sp,-8
   146b8:	dfc00115 	stw	ra,4(sp)
   146bc:	df000015 	stw	fp,0(sp)
   146c0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   146c4:	000d883a 	mov	r6,zero
   146c8:	000b883a 	mov	r5,zero
   146cc:	01000074 	movhi	r4,1
   146d0:	211ba204 	addi	r4,r4,28296
   146d4:	00148600 	call	14860 <altera_avalon_jtag_uart_init>
   146d8:	01000074 	movhi	r4,1
   146dc:	211b9804 	addi	r4,r4,28256
   146e0:	00146480 	call	14648 <alt_dev_reg>
}
   146e4:	0001883a 	nop
   146e8:	e037883a 	mov	sp,fp
   146ec:	dfc00117 	ldw	ra,4(sp)
   146f0:	df000017 	ldw	fp,0(sp)
   146f4:	dec00204 	addi	sp,sp,8
   146f8:	f800283a 	ret

000146fc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   146fc:	defffa04 	addi	sp,sp,-24
   14700:	dfc00515 	stw	ra,20(sp)
   14704:	df000415 	stw	fp,16(sp)
   14708:	df000404 	addi	fp,sp,16
   1470c:	e13ffd15 	stw	r4,-12(fp)
   14710:	e17ffe15 	stw	r5,-8(fp)
   14714:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   14718:	e0bffd17 	ldw	r2,-12(fp)
   1471c:	10800017 	ldw	r2,0(r2)
   14720:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   14724:	e0bffc17 	ldw	r2,-16(fp)
   14728:	10c00a04 	addi	r3,r2,40
   1472c:	e0bffd17 	ldw	r2,-12(fp)
   14730:	10800217 	ldw	r2,8(r2)
   14734:	100f883a 	mov	r7,r2
   14738:	e1bfff17 	ldw	r6,-4(fp)
   1473c:	e17ffe17 	ldw	r5,-8(fp)
   14740:	1809883a 	mov	r4,r3
   14744:	0014d240 	call	14d24 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   14748:	e037883a 	mov	sp,fp
   1474c:	dfc00117 	ldw	ra,4(sp)
   14750:	df000017 	ldw	fp,0(sp)
   14754:	dec00204 	addi	sp,sp,8
   14758:	f800283a 	ret

0001475c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   1475c:	defffa04 	addi	sp,sp,-24
   14760:	dfc00515 	stw	ra,20(sp)
   14764:	df000415 	stw	fp,16(sp)
   14768:	df000404 	addi	fp,sp,16
   1476c:	e13ffd15 	stw	r4,-12(fp)
   14770:	e17ffe15 	stw	r5,-8(fp)
   14774:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   14778:	e0bffd17 	ldw	r2,-12(fp)
   1477c:	10800017 	ldw	r2,0(r2)
   14780:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   14784:	e0bffc17 	ldw	r2,-16(fp)
   14788:	10c00a04 	addi	r3,r2,40
   1478c:	e0bffd17 	ldw	r2,-12(fp)
   14790:	10800217 	ldw	r2,8(r2)
   14794:	100f883a 	mov	r7,r2
   14798:	e1bfff17 	ldw	r6,-4(fp)
   1479c:	e17ffe17 	ldw	r5,-8(fp)
   147a0:	1809883a 	mov	r4,r3
   147a4:	0014f400 	call	14f40 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   147a8:	e037883a 	mov	sp,fp
   147ac:	dfc00117 	ldw	ra,4(sp)
   147b0:	df000017 	ldw	fp,0(sp)
   147b4:	dec00204 	addi	sp,sp,8
   147b8:	f800283a 	ret

000147bc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   147bc:	defffc04 	addi	sp,sp,-16
   147c0:	dfc00315 	stw	ra,12(sp)
   147c4:	df000215 	stw	fp,8(sp)
   147c8:	df000204 	addi	fp,sp,8
   147cc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   147d0:	e0bfff17 	ldw	r2,-4(fp)
   147d4:	10800017 	ldw	r2,0(r2)
   147d8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   147dc:	e0bffe17 	ldw	r2,-8(fp)
   147e0:	10c00a04 	addi	r3,r2,40
   147e4:	e0bfff17 	ldw	r2,-4(fp)
   147e8:	10800217 	ldw	r2,8(r2)
   147ec:	100b883a 	mov	r5,r2
   147f0:	1809883a 	mov	r4,r3
   147f4:	0014bcc0 	call	14bcc <altera_avalon_jtag_uart_close>
}
   147f8:	e037883a 	mov	sp,fp
   147fc:	dfc00117 	ldw	ra,4(sp)
   14800:	df000017 	ldw	fp,0(sp)
   14804:	dec00204 	addi	sp,sp,8
   14808:	f800283a 	ret

0001480c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   1480c:	defffa04 	addi	sp,sp,-24
   14810:	dfc00515 	stw	ra,20(sp)
   14814:	df000415 	stw	fp,16(sp)
   14818:	df000404 	addi	fp,sp,16
   1481c:	e13ffd15 	stw	r4,-12(fp)
   14820:	e17ffe15 	stw	r5,-8(fp)
   14824:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   14828:	e0bffd17 	ldw	r2,-12(fp)
   1482c:	10800017 	ldw	r2,0(r2)
   14830:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   14834:	e0bffc17 	ldw	r2,-16(fp)
   14838:	10800a04 	addi	r2,r2,40
   1483c:	e1bfff17 	ldw	r6,-4(fp)
   14840:	e17ffe17 	ldw	r5,-8(fp)
   14844:	1009883a 	mov	r4,r2
   14848:	0014c340 	call	14c34 <altera_avalon_jtag_uart_ioctl>
}
   1484c:	e037883a 	mov	sp,fp
   14850:	dfc00117 	ldw	ra,4(sp)
   14854:	df000017 	ldw	fp,0(sp)
   14858:	dec00204 	addi	sp,sp,8
   1485c:	f800283a 	ret

00014860 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   14860:	defffa04 	addi	sp,sp,-24
   14864:	dfc00515 	stw	ra,20(sp)
   14868:	df000415 	stw	fp,16(sp)
   1486c:	df000404 	addi	fp,sp,16
   14870:	e13ffd15 	stw	r4,-12(fp)
   14874:	e17ffe15 	stw	r5,-8(fp)
   14878:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1487c:	e0bffd17 	ldw	r2,-12(fp)
   14880:	00c00044 	movi	r3,1
   14884:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   14888:	e0bffd17 	ldw	r2,-12(fp)
   1488c:	10800017 	ldw	r2,0(r2)
   14890:	10800104 	addi	r2,r2,4
   14894:	1007883a 	mov	r3,r2
   14898:	e0bffd17 	ldw	r2,-12(fp)
   1489c:	10800817 	ldw	r2,32(r2)
   148a0:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   148a4:	e0bffe17 	ldw	r2,-8(fp)
   148a8:	e0ffff17 	ldw	r3,-4(fp)
   148ac:	d8000015 	stw	zero,0(sp)
   148b0:	e1fffd17 	ldw	r7,-12(fp)
   148b4:	01800074 	movhi	r6,1
   148b8:	31924804 	addi	r6,r6,18720
   148bc:	180b883a 	mov	r5,r3
   148c0:	1009883a 	mov	r4,r2
   148c4:	00154700 	call	15470 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   148c8:	e0bffd17 	ldw	r2,-12(fp)
   148cc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   148d0:	e0bffd17 	ldw	r2,-12(fp)
   148d4:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   148d8:	d0e6c317 	ldw	r3,-25844(gp)
   148dc:	e1fffd17 	ldw	r7,-12(fp)
   148e0:	01800074 	movhi	r6,1
   148e4:	3192cb04 	addi	r6,r6,19244
   148e8:	180b883a 	mov	r5,r3
   148ec:	1009883a 	mov	r4,r2
   148f0:	00151640 	call	15164 <alt_alarm_start>
   148f4:	1000040e 	bge	r2,zero,14908 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   148f8:	e0fffd17 	ldw	r3,-12(fp)
   148fc:	00a00034 	movhi	r2,32768
   14900:	10bfffc4 	addi	r2,r2,-1
   14904:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   14908:	0001883a 	nop
   1490c:	e037883a 	mov	sp,fp
   14910:	dfc00117 	ldw	ra,4(sp)
   14914:	df000017 	ldw	fp,0(sp)
   14918:	dec00204 	addi	sp,sp,8
   1491c:	f800283a 	ret

00014920 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   14920:	defff804 	addi	sp,sp,-32
   14924:	df000715 	stw	fp,28(sp)
   14928:	df000704 	addi	fp,sp,28
   1492c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   14930:	e0bfff17 	ldw	r2,-4(fp)
   14934:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   14938:	e0bffb17 	ldw	r2,-20(fp)
   1493c:	10800017 	ldw	r2,0(r2)
   14940:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   14944:	e0bffc17 	ldw	r2,-16(fp)
   14948:	10800104 	addi	r2,r2,4
   1494c:	10800037 	ldwio	r2,0(r2)
   14950:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   14954:	e0bffd17 	ldw	r2,-12(fp)
   14958:	1080c00c 	andi	r2,r2,768
   1495c:	10006d26 	beq	r2,zero,14b14 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   14960:	e0bffd17 	ldw	r2,-12(fp)
   14964:	1080400c 	andi	r2,r2,256
   14968:	10003526 	beq	r2,zero,14a40 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   1496c:	00800074 	movhi	r2,1
   14970:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   14974:	e0bffb17 	ldw	r2,-20(fp)
   14978:	10800a17 	ldw	r2,40(r2)
   1497c:	10800044 	addi	r2,r2,1
   14980:	1081ffcc 	andi	r2,r2,2047
   14984:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   14988:	e0bffb17 	ldw	r2,-20(fp)
   1498c:	10c00b17 	ldw	r3,44(r2)
   14990:	e0bffe17 	ldw	r2,-8(fp)
   14994:	18801526 	beq	r3,r2,149ec <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   14998:	e0bffc17 	ldw	r2,-16(fp)
   1499c:	10800037 	ldwio	r2,0(r2)
   149a0:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   149a4:	e0bff917 	ldw	r2,-28(fp)
   149a8:	10a0000c 	andi	r2,r2,32768
   149ac:	10001126 	beq	r2,zero,149f4 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   149b0:	e0bffb17 	ldw	r2,-20(fp)
   149b4:	10800a17 	ldw	r2,40(r2)
   149b8:	e0fff917 	ldw	r3,-28(fp)
   149bc:	1809883a 	mov	r4,r3
   149c0:	e0fffb17 	ldw	r3,-20(fp)
   149c4:	1885883a 	add	r2,r3,r2
   149c8:	10800e04 	addi	r2,r2,56
   149cc:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   149d0:	e0bffb17 	ldw	r2,-20(fp)
   149d4:	10800a17 	ldw	r2,40(r2)
   149d8:	10800044 	addi	r2,r2,1
   149dc:	10c1ffcc 	andi	r3,r2,2047
   149e0:	e0bffb17 	ldw	r2,-20(fp)
   149e4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   149e8:	003fe206 	br	14974 <__alt_data_end+0xffff4974>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   149ec:	0001883a 	nop
   149f0:	00000106 	br	149f8 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   149f4:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   149f8:	e0bff917 	ldw	r2,-28(fp)
   149fc:	10bfffec 	andhi	r2,r2,65535
   14a00:	10000f26 	beq	r2,zero,14a40 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   14a04:	e0bffb17 	ldw	r2,-20(fp)
   14a08:	10c00817 	ldw	r3,32(r2)
   14a0c:	00bfff84 	movi	r2,-2
   14a10:	1886703a 	and	r3,r3,r2
   14a14:	e0bffb17 	ldw	r2,-20(fp)
   14a18:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   14a1c:	e0bffc17 	ldw	r2,-16(fp)
   14a20:	10800104 	addi	r2,r2,4
   14a24:	1007883a 	mov	r3,r2
   14a28:	e0bffb17 	ldw	r2,-20(fp)
   14a2c:	10800817 	ldw	r2,32(r2)
   14a30:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   14a34:	e0bffc17 	ldw	r2,-16(fp)
   14a38:	10800104 	addi	r2,r2,4
   14a3c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   14a40:	e0bffd17 	ldw	r2,-12(fp)
   14a44:	1080800c 	andi	r2,r2,512
   14a48:	103fbe26 	beq	r2,zero,14944 <__alt_data_end+0xffff4944>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   14a4c:	e0bffd17 	ldw	r2,-12(fp)
   14a50:	1004d43a 	srli	r2,r2,16
   14a54:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   14a58:	00001406 	br	14aac <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   14a5c:	e0bffc17 	ldw	r2,-16(fp)
   14a60:	e0fffb17 	ldw	r3,-20(fp)
   14a64:	18c00d17 	ldw	r3,52(r3)
   14a68:	e13ffb17 	ldw	r4,-20(fp)
   14a6c:	20c7883a 	add	r3,r4,r3
   14a70:	18c20e04 	addi	r3,r3,2104
   14a74:	18c00003 	ldbu	r3,0(r3)
   14a78:	18c03fcc 	andi	r3,r3,255
   14a7c:	18c0201c 	xori	r3,r3,128
   14a80:	18ffe004 	addi	r3,r3,-128
   14a84:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   14a88:	e0bffb17 	ldw	r2,-20(fp)
   14a8c:	10800d17 	ldw	r2,52(r2)
   14a90:	10800044 	addi	r2,r2,1
   14a94:	10c1ffcc 	andi	r3,r2,2047
   14a98:	e0bffb17 	ldw	r2,-20(fp)
   14a9c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   14aa0:	e0bffa17 	ldw	r2,-24(fp)
   14aa4:	10bfffc4 	addi	r2,r2,-1
   14aa8:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   14aac:	e0bffa17 	ldw	r2,-24(fp)
   14ab0:	10000526 	beq	r2,zero,14ac8 <altera_avalon_jtag_uart_irq+0x1a8>
   14ab4:	e0bffb17 	ldw	r2,-20(fp)
   14ab8:	10c00d17 	ldw	r3,52(r2)
   14abc:	e0bffb17 	ldw	r2,-20(fp)
   14ac0:	10800c17 	ldw	r2,48(r2)
   14ac4:	18bfe51e 	bne	r3,r2,14a5c <__alt_data_end+0xffff4a5c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   14ac8:	e0bffa17 	ldw	r2,-24(fp)
   14acc:	103f9d26 	beq	r2,zero,14944 <__alt_data_end+0xffff4944>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   14ad0:	e0bffb17 	ldw	r2,-20(fp)
   14ad4:	10c00817 	ldw	r3,32(r2)
   14ad8:	00bfff44 	movi	r2,-3
   14adc:	1886703a 	and	r3,r3,r2
   14ae0:	e0bffb17 	ldw	r2,-20(fp)
   14ae4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   14ae8:	e0bffb17 	ldw	r2,-20(fp)
   14aec:	10800017 	ldw	r2,0(r2)
   14af0:	10800104 	addi	r2,r2,4
   14af4:	1007883a 	mov	r3,r2
   14af8:	e0bffb17 	ldw	r2,-20(fp)
   14afc:	10800817 	ldw	r2,32(r2)
   14b00:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   14b04:	e0bffc17 	ldw	r2,-16(fp)
   14b08:	10800104 	addi	r2,r2,4
   14b0c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   14b10:	003f8c06 	br	14944 <__alt_data_end+0xffff4944>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   14b14:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   14b18:	0001883a 	nop
   14b1c:	e037883a 	mov	sp,fp
   14b20:	df000017 	ldw	fp,0(sp)
   14b24:	dec00104 	addi	sp,sp,4
   14b28:	f800283a 	ret

00014b2c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   14b2c:	defff804 	addi	sp,sp,-32
   14b30:	df000715 	stw	fp,28(sp)
   14b34:	df000704 	addi	fp,sp,28
   14b38:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   14b3c:	e0bffb17 	ldw	r2,-20(fp)
   14b40:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   14b44:	e0bff917 	ldw	r2,-28(fp)
   14b48:	10800017 	ldw	r2,0(r2)
   14b4c:	10800104 	addi	r2,r2,4
   14b50:	10800037 	ldwio	r2,0(r2)
   14b54:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   14b58:	e0bffa17 	ldw	r2,-24(fp)
   14b5c:	1081000c 	andi	r2,r2,1024
   14b60:	10000b26 	beq	r2,zero,14b90 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   14b64:	e0bff917 	ldw	r2,-28(fp)
   14b68:	10800017 	ldw	r2,0(r2)
   14b6c:	10800104 	addi	r2,r2,4
   14b70:	1007883a 	mov	r3,r2
   14b74:	e0bff917 	ldw	r2,-28(fp)
   14b78:	10800817 	ldw	r2,32(r2)
   14b7c:	10810014 	ori	r2,r2,1024
   14b80:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   14b84:	e0bff917 	ldw	r2,-28(fp)
   14b88:	10000915 	stw	zero,36(r2)
   14b8c:	00000a06 	br	14bb8 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   14b90:	e0bff917 	ldw	r2,-28(fp)
   14b94:	10c00917 	ldw	r3,36(r2)
   14b98:	00a00034 	movhi	r2,32768
   14b9c:	10bfff04 	addi	r2,r2,-4
   14ba0:	10c00536 	bltu	r2,r3,14bb8 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   14ba4:	e0bff917 	ldw	r2,-28(fp)
   14ba8:	10800917 	ldw	r2,36(r2)
   14bac:	10c00044 	addi	r3,r2,1
   14bb0:	e0bff917 	ldw	r2,-28(fp)
   14bb4:	10c00915 	stw	r3,36(r2)
   14bb8:	d0a6c317 	ldw	r2,-25844(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   14bbc:	e037883a 	mov	sp,fp
   14bc0:	df000017 	ldw	fp,0(sp)
   14bc4:	dec00104 	addi	sp,sp,4
   14bc8:	f800283a 	ret

00014bcc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   14bcc:	defffd04 	addi	sp,sp,-12
   14bd0:	df000215 	stw	fp,8(sp)
   14bd4:	df000204 	addi	fp,sp,8
   14bd8:	e13ffe15 	stw	r4,-8(fp)
   14bdc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   14be0:	00000506 	br	14bf8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   14be4:	e0bfff17 	ldw	r2,-4(fp)
   14be8:	1090000c 	andi	r2,r2,16384
   14bec:	10000226 	beq	r2,zero,14bf8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   14bf0:	00bffd44 	movi	r2,-11
   14bf4:	00000b06 	br	14c24 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   14bf8:	e0bffe17 	ldw	r2,-8(fp)
   14bfc:	10c00d17 	ldw	r3,52(r2)
   14c00:	e0bffe17 	ldw	r2,-8(fp)
   14c04:	10800c17 	ldw	r2,48(r2)
   14c08:	18800526 	beq	r3,r2,14c20 <altera_avalon_jtag_uart_close+0x54>
   14c0c:	e0bffe17 	ldw	r2,-8(fp)
   14c10:	10c00917 	ldw	r3,36(r2)
   14c14:	e0bffe17 	ldw	r2,-8(fp)
   14c18:	10800117 	ldw	r2,4(r2)
   14c1c:	18bff136 	bltu	r3,r2,14be4 <__alt_data_end+0xffff4be4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   14c20:	0005883a 	mov	r2,zero
}
   14c24:	e037883a 	mov	sp,fp
   14c28:	df000017 	ldw	fp,0(sp)
   14c2c:	dec00104 	addi	sp,sp,4
   14c30:	f800283a 	ret

00014c34 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   14c34:	defffa04 	addi	sp,sp,-24
   14c38:	df000515 	stw	fp,20(sp)
   14c3c:	df000504 	addi	fp,sp,20
   14c40:	e13ffd15 	stw	r4,-12(fp)
   14c44:	e17ffe15 	stw	r5,-8(fp)
   14c48:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   14c4c:	00bff9c4 	movi	r2,-25
   14c50:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   14c54:	e0bffe17 	ldw	r2,-8(fp)
   14c58:	10da8060 	cmpeqi	r3,r2,27137
   14c5c:	1800031e 	bne	r3,zero,14c6c <altera_avalon_jtag_uart_ioctl+0x38>
   14c60:	109a80a0 	cmpeqi	r2,r2,27138
   14c64:	1000181e 	bne	r2,zero,14cc8 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   14c68:	00002906 	br	14d10 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   14c6c:	e0bffd17 	ldw	r2,-12(fp)
   14c70:	10c00117 	ldw	r3,4(r2)
   14c74:	00a00034 	movhi	r2,32768
   14c78:	10bfffc4 	addi	r2,r2,-1
   14c7c:	18802126 	beq	r3,r2,14d04 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   14c80:	e0bfff17 	ldw	r2,-4(fp)
   14c84:	10800017 	ldw	r2,0(r2)
   14c88:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   14c8c:	e0bffc17 	ldw	r2,-16(fp)
   14c90:	10800090 	cmplti	r2,r2,2
   14c94:	1000061e 	bne	r2,zero,14cb0 <altera_avalon_jtag_uart_ioctl+0x7c>
   14c98:	e0fffc17 	ldw	r3,-16(fp)
   14c9c:	00a00034 	movhi	r2,32768
   14ca0:	10bfffc4 	addi	r2,r2,-1
   14ca4:	18800226 	beq	r3,r2,14cb0 <altera_avalon_jtag_uart_ioctl+0x7c>
   14ca8:	e0bffc17 	ldw	r2,-16(fp)
   14cac:	00000206 	br	14cb8 <altera_avalon_jtag_uart_ioctl+0x84>
   14cb0:	00a00034 	movhi	r2,32768
   14cb4:	10bfff84 	addi	r2,r2,-2
   14cb8:	e0fffd17 	ldw	r3,-12(fp)
   14cbc:	18800115 	stw	r2,4(r3)
      rc = 0;
   14cc0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   14cc4:	00000f06 	br	14d04 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   14cc8:	e0bffd17 	ldw	r2,-12(fp)
   14ccc:	10c00117 	ldw	r3,4(r2)
   14cd0:	00a00034 	movhi	r2,32768
   14cd4:	10bfffc4 	addi	r2,r2,-1
   14cd8:	18800c26 	beq	r3,r2,14d0c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   14cdc:	e0bffd17 	ldw	r2,-12(fp)
   14ce0:	10c00917 	ldw	r3,36(r2)
   14ce4:	e0bffd17 	ldw	r2,-12(fp)
   14ce8:	10800117 	ldw	r2,4(r2)
   14cec:	1885803a 	cmpltu	r2,r3,r2
   14cf0:	10c03fcc 	andi	r3,r2,255
   14cf4:	e0bfff17 	ldw	r2,-4(fp)
   14cf8:	10c00015 	stw	r3,0(r2)
      rc = 0;
   14cfc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   14d00:	00000206 	br	14d0c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   14d04:	0001883a 	nop
   14d08:	00000106 	br	14d10 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   14d0c:	0001883a 	nop

  default:
    break;
  }

  return rc;
   14d10:	e0bffb17 	ldw	r2,-20(fp)
}
   14d14:	e037883a 	mov	sp,fp
   14d18:	df000017 	ldw	fp,0(sp)
   14d1c:	dec00104 	addi	sp,sp,4
   14d20:	f800283a 	ret

00014d24 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   14d24:	defff304 	addi	sp,sp,-52
   14d28:	dfc00c15 	stw	ra,48(sp)
   14d2c:	df000b15 	stw	fp,44(sp)
   14d30:	df000b04 	addi	fp,sp,44
   14d34:	e13ffc15 	stw	r4,-16(fp)
   14d38:	e17ffd15 	stw	r5,-12(fp)
   14d3c:	e1bffe15 	stw	r6,-8(fp)
   14d40:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   14d44:	e0bffd17 	ldw	r2,-12(fp)
   14d48:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   14d4c:	00004706 	br	14e6c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   14d50:	e0bffc17 	ldw	r2,-16(fp)
   14d54:	10800a17 	ldw	r2,40(r2)
   14d58:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   14d5c:	e0bffc17 	ldw	r2,-16(fp)
   14d60:	10800b17 	ldw	r2,44(r2)
   14d64:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   14d68:	e0fff717 	ldw	r3,-36(fp)
   14d6c:	e0bff817 	ldw	r2,-32(fp)
   14d70:	18800536 	bltu	r3,r2,14d88 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   14d74:	e0fff717 	ldw	r3,-36(fp)
   14d78:	e0bff817 	ldw	r2,-32(fp)
   14d7c:	1885c83a 	sub	r2,r3,r2
   14d80:	e0bff615 	stw	r2,-40(fp)
   14d84:	00000406 	br	14d98 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   14d88:	00c20004 	movi	r3,2048
   14d8c:	e0bff817 	ldw	r2,-32(fp)
   14d90:	1885c83a 	sub	r2,r3,r2
   14d94:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   14d98:	e0bff617 	ldw	r2,-40(fp)
   14d9c:	10001e26 	beq	r2,zero,14e18 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   14da0:	e0fffe17 	ldw	r3,-8(fp)
   14da4:	e0bff617 	ldw	r2,-40(fp)
   14da8:	1880022e 	bgeu	r3,r2,14db4 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   14dac:	e0bffe17 	ldw	r2,-8(fp)
   14db0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   14db4:	e0bffc17 	ldw	r2,-16(fp)
   14db8:	10c00e04 	addi	r3,r2,56
   14dbc:	e0bff817 	ldw	r2,-32(fp)
   14dc0:	1885883a 	add	r2,r3,r2
   14dc4:	e1bff617 	ldw	r6,-40(fp)
   14dc8:	100b883a 	mov	r5,r2
   14dcc:	e13ff517 	ldw	r4,-44(fp)
   14dd0:	001247c0 	call	1247c <memcpy>
      ptr   += n;
   14dd4:	e0fff517 	ldw	r3,-44(fp)
   14dd8:	e0bff617 	ldw	r2,-40(fp)
   14ddc:	1885883a 	add	r2,r3,r2
   14de0:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   14de4:	e0fffe17 	ldw	r3,-8(fp)
   14de8:	e0bff617 	ldw	r2,-40(fp)
   14dec:	1885c83a 	sub	r2,r3,r2
   14df0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   14df4:	e0fff817 	ldw	r3,-32(fp)
   14df8:	e0bff617 	ldw	r2,-40(fp)
   14dfc:	1885883a 	add	r2,r3,r2
   14e00:	10c1ffcc 	andi	r3,r2,2047
   14e04:	e0bffc17 	ldw	r2,-16(fp)
   14e08:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   14e0c:	e0bffe17 	ldw	r2,-8(fp)
   14e10:	00bfcf16 	blt	zero,r2,14d50 <__alt_data_end+0xffff4d50>
   14e14:	00000106 	br	14e1c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   14e18:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   14e1c:	e0fff517 	ldw	r3,-44(fp)
   14e20:	e0bffd17 	ldw	r2,-12(fp)
   14e24:	1880141e 	bne	r3,r2,14e78 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   14e28:	e0bfff17 	ldw	r2,-4(fp)
   14e2c:	1090000c 	andi	r2,r2,16384
   14e30:	1000131e 	bne	r2,zero,14e80 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   14e34:	0001883a 	nop
   14e38:	e0bffc17 	ldw	r2,-16(fp)
   14e3c:	10c00a17 	ldw	r3,40(r2)
   14e40:	e0bff717 	ldw	r2,-36(fp)
   14e44:	1880051e 	bne	r3,r2,14e5c <altera_avalon_jtag_uart_read+0x138>
   14e48:	e0bffc17 	ldw	r2,-16(fp)
   14e4c:	10c00917 	ldw	r3,36(r2)
   14e50:	e0bffc17 	ldw	r2,-16(fp)
   14e54:	10800117 	ldw	r2,4(r2)
   14e58:	18bff736 	bltu	r3,r2,14e38 <__alt_data_end+0xffff4e38>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   14e5c:	e0bffc17 	ldw	r2,-16(fp)
   14e60:	10c00a17 	ldw	r3,40(r2)
   14e64:	e0bff717 	ldw	r2,-36(fp)
   14e68:	18800726 	beq	r3,r2,14e88 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   14e6c:	e0bffe17 	ldw	r2,-8(fp)
   14e70:	00bfb716 	blt	zero,r2,14d50 <__alt_data_end+0xffff4d50>
   14e74:	00000506 	br	14e8c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   14e78:	0001883a 	nop
   14e7c:	00000306 	br	14e8c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   14e80:	0001883a 	nop
   14e84:	00000106 	br	14e8c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   14e88:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   14e8c:	e0fff517 	ldw	r3,-44(fp)
   14e90:	e0bffd17 	ldw	r2,-12(fp)
   14e94:	18801826 	beq	r3,r2,14ef8 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14e98:	0005303a 	rdctl	r2,status
   14e9c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14ea0:	e0fffb17 	ldw	r3,-20(fp)
   14ea4:	00bfff84 	movi	r2,-2
   14ea8:	1884703a 	and	r2,r3,r2
   14eac:	1001703a 	wrctl	status,r2
  
  return context;
   14eb0:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   14eb4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   14eb8:	e0bffc17 	ldw	r2,-16(fp)
   14ebc:	10800817 	ldw	r2,32(r2)
   14ec0:	10c00054 	ori	r3,r2,1
   14ec4:	e0bffc17 	ldw	r2,-16(fp)
   14ec8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   14ecc:	e0bffc17 	ldw	r2,-16(fp)
   14ed0:	10800017 	ldw	r2,0(r2)
   14ed4:	10800104 	addi	r2,r2,4
   14ed8:	1007883a 	mov	r3,r2
   14edc:	e0bffc17 	ldw	r2,-16(fp)
   14ee0:	10800817 	ldw	r2,32(r2)
   14ee4:	18800035 	stwio	r2,0(r3)
   14ee8:	e0bffa17 	ldw	r2,-24(fp)
   14eec:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14ef0:	e0bff917 	ldw	r2,-28(fp)
   14ef4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   14ef8:	e0fff517 	ldw	r3,-44(fp)
   14efc:	e0bffd17 	ldw	r2,-12(fp)
   14f00:	18800426 	beq	r3,r2,14f14 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   14f04:	e0fff517 	ldw	r3,-44(fp)
   14f08:	e0bffd17 	ldw	r2,-12(fp)
   14f0c:	1885c83a 	sub	r2,r3,r2
   14f10:	00000606 	br	14f2c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   14f14:	e0bfff17 	ldw	r2,-4(fp)
   14f18:	1090000c 	andi	r2,r2,16384
   14f1c:	10000226 	beq	r2,zero,14f28 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   14f20:	00bffd44 	movi	r2,-11
   14f24:	00000106 	br	14f2c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   14f28:	00bffec4 	movi	r2,-5
}
   14f2c:	e037883a 	mov	sp,fp
   14f30:	dfc00117 	ldw	ra,4(sp)
   14f34:	df000017 	ldw	fp,0(sp)
   14f38:	dec00204 	addi	sp,sp,8
   14f3c:	f800283a 	ret

00014f40 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   14f40:	defff304 	addi	sp,sp,-52
   14f44:	dfc00c15 	stw	ra,48(sp)
   14f48:	df000b15 	stw	fp,44(sp)
   14f4c:	df000b04 	addi	fp,sp,44
   14f50:	e13ffc15 	stw	r4,-16(fp)
   14f54:	e17ffd15 	stw	r5,-12(fp)
   14f58:	e1bffe15 	stw	r6,-8(fp)
   14f5c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   14f60:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   14f64:	e0bffd17 	ldw	r2,-12(fp)
   14f68:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   14f6c:	00003706 	br	1504c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   14f70:	e0bffc17 	ldw	r2,-16(fp)
   14f74:	10800c17 	ldw	r2,48(r2)
   14f78:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   14f7c:	e0bffc17 	ldw	r2,-16(fp)
   14f80:	10800d17 	ldw	r2,52(r2)
   14f84:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   14f88:	e0fff917 	ldw	r3,-28(fp)
   14f8c:	e0bff517 	ldw	r2,-44(fp)
   14f90:	1880062e 	bgeu	r3,r2,14fac <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   14f94:	e0fff517 	ldw	r3,-44(fp)
   14f98:	e0bff917 	ldw	r2,-28(fp)
   14f9c:	1885c83a 	sub	r2,r3,r2
   14fa0:	10bfffc4 	addi	r2,r2,-1
   14fa4:	e0bff615 	stw	r2,-40(fp)
   14fa8:	00000b06 	br	14fd8 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   14fac:	e0bff517 	ldw	r2,-44(fp)
   14fb0:	10000526 	beq	r2,zero,14fc8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   14fb4:	00c20004 	movi	r3,2048
   14fb8:	e0bff917 	ldw	r2,-28(fp)
   14fbc:	1885c83a 	sub	r2,r3,r2
   14fc0:	e0bff615 	stw	r2,-40(fp)
   14fc4:	00000406 	br	14fd8 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   14fc8:	00c1ffc4 	movi	r3,2047
   14fcc:	e0bff917 	ldw	r2,-28(fp)
   14fd0:	1885c83a 	sub	r2,r3,r2
   14fd4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   14fd8:	e0bff617 	ldw	r2,-40(fp)
   14fdc:	10001e26 	beq	r2,zero,15058 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   14fe0:	e0fffe17 	ldw	r3,-8(fp)
   14fe4:	e0bff617 	ldw	r2,-40(fp)
   14fe8:	1880022e 	bgeu	r3,r2,14ff4 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   14fec:	e0bffe17 	ldw	r2,-8(fp)
   14ff0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   14ff4:	e0bffc17 	ldw	r2,-16(fp)
   14ff8:	10c20e04 	addi	r3,r2,2104
   14ffc:	e0bff917 	ldw	r2,-28(fp)
   15000:	1885883a 	add	r2,r3,r2
   15004:	e1bff617 	ldw	r6,-40(fp)
   15008:	e17ffd17 	ldw	r5,-12(fp)
   1500c:	1009883a 	mov	r4,r2
   15010:	001247c0 	call	1247c <memcpy>
      ptr   += n;
   15014:	e0fffd17 	ldw	r3,-12(fp)
   15018:	e0bff617 	ldw	r2,-40(fp)
   1501c:	1885883a 	add	r2,r3,r2
   15020:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   15024:	e0fffe17 	ldw	r3,-8(fp)
   15028:	e0bff617 	ldw	r2,-40(fp)
   1502c:	1885c83a 	sub	r2,r3,r2
   15030:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   15034:	e0fff917 	ldw	r3,-28(fp)
   15038:	e0bff617 	ldw	r2,-40(fp)
   1503c:	1885883a 	add	r2,r3,r2
   15040:	10c1ffcc 	andi	r3,r2,2047
   15044:	e0bffc17 	ldw	r2,-16(fp)
   15048:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1504c:	e0bffe17 	ldw	r2,-8(fp)
   15050:	00bfc716 	blt	zero,r2,14f70 <__alt_data_end+0xffff4f70>
   15054:	00000106 	br	1505c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   15058:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1505c:	0005303a 	rdctl	r2,status
   15060:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15064:	e0fffb17 	ldw	r3,-20(fp)
   15068:	00bfff84 	movi	r2,-2
   1506c:	1884703a 	and	r2,r3,r2
   15070:	1001703a 	wrctl	status,r2
  
  return context;
   15074:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   15078:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1507c:	e0bffc17 	ldw	r2,-16(fp)
   15080:	10800817 	ldw	r2,32(r2)
   15084:	10c00094 	ori	r3,r2,2
   15088:	e0bffc17 	ldw	r2,-16(fp)
   1508c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   15090:	e0bffc17 	ldw	r2,-16(fp)
   15094:	10800017 	ldw	r2,0(r2)
   15098:	10800104 	addi	r2,r2,4
   1509c:	1007883a 	mov	r3,r2
   150a0:	e0bffc17 	ldw	r2,-16(fp)
   150a4:	10800817 	ldw	r2,32(r2)
   150a8:	18800035 	stwio	r2,0(r3)
   150ac:	e0bffa17 	ldw	r2,-24(fp)
   150b0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   150b4:	e0bff817 	ldw	r2,-32(fp)
   150b8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   150bc:	e0bffe17 	ldw	r2,-8(fp)
   150c0:	0080100e 	bge	zero,r2,15104 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   150c4:	e0bfff17 	ldw	r2,-4(fp)
   150c8:	1090000c 	andi	r2,r2,16384
   150cc:	1000101e 	bne	r2,zero,15110 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   150d0:	0001883a 	nop
   150d4:	e0bffc17 	ldw	r2,-16(fp)
   150d8:	10c00d17 	ldw	r3,52(r2)
   150dc:	e0bff517 	ldw	r2,-44(fp)
   150e0:	1880051e 	bne	r3,r2,150f8 <altera_avalon_jtag_uart_write+0x1b8>
   150e4:	e0bffc17 	ldw	r2,-16(fp)
   150e8:	10c00917 	ldw	r3,36(r2)
   150ec:	e0bffc17 	ldw	r2,-16(fp)
   150f0:	10800117 	ldw	r2,4(r2)
   150f4:	18bff736 	bltu	r3,r2,150d4 <__alt_data_end+0xffff50d4>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   150f8:	e0bffc17 	ldw	r2,-16(fp)
   150fc:	10800917 	ldw	r2,36(r2)
   15100:	1000051e 	bne	r2,zero,15118 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   15104:	e0bffe17 	ldw	r2,-8(fp)
   15108:	00bfd016 	blt	zero,r2,1504c <__alt_data_end+0xffff504c>
   1510c:	00000306 	br	1511c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   15110:	0001883a 	nop
   15114:	00000106 	br	1511c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   15118:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   1511c:	e0fffd17 	ldw	r3,-12(fp)
   15120:	e0bff717 	ldw	r2,-36(fp)
   15124:	18800426 	beq	r3,r2,15138 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   15128:	e0fffd17 	ldw	r3,-12(fp)
   1512c:	e0bff717 	ldw	r2,-36(fp)
   15130:	1885c83a 	sub	r2,r3,r2
   15134:	00000606 	br	15150 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   15138:	e0bfff17 	ldw	r2,-4(fp)
   1513c:	1090000c 	andi	r2,r2,16384
   15140:	10000226 	beq	r2,zero,1514c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   15144:	00bffd44 	movi	r2,-11
   15148:	00000106 	br	15150 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   1514c:	00bffec4 	movi	r2,-5
}
   15150:	e037883a 	mov	sp,fp
   15154:	dfc00117 	ldw	ra,4(sp)
   15158:	df000017 	ldw	fp,0(sp)
   1515c:	dec00204 	addi	sp,sp,8
   15160:	f800283a 	ret

00015164 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   15164:	defff504 	addi	sp,sp,-44
   15168:	df000a15 	stw	fp,40(sp)
   1516c:	df000a04 	addi	fp,sp,40
   15170:	e13ffc15 	stw	r4,-16(fp)
   15174:	e17ffd15 	stw	r5,-12(fp)
   15178:	e1bffe15 	stw	r6,-8(fp)
   1517c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   15180:	e03ff615 	stw	zero,-40(fp)
   15184:	d0a6c317 	ldw	r2,-25844(gp)
  
  if (alt_ticks_per_second ())
   15188:	10003c26 	beq	r2,zero,1527c <alt_alarm_start+0x118>
  {
    if (alarm)
   1518c:	e0bffc17 	ldw	r2,-16(fp)
   15190:	10003826 	beq	r2,zero,15274 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   15194:	e0bffc17 	ldw	r2,-16(fp)
   15198:	e0fffe17 	ldw	r3,-8(fp)
   1519c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   151a0:	e0bffc17 	ldw	r2,-16(fp)
   151a4:	e0ffff17 	ldw	r3,-4(fp)
   151a8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   151ac:	0005303a 	rdctl	r2,status
   151b0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   151b4:	e0fff917 	ldw	r3,-28(fp)
   151b8:	00bfff84 	movi	r2,-2
   151bc:	1884703a 	and	r2,r3,r2
   151c0:	1001703a 	wrctl	status,r2
  
  return context;
   151c4:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   151c8:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   151cc:	d0a6c417 	ldw	r2,-25840(gp)
      
      current_nticks = alt_nticks();
   151d0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   151d4:	e0fffd17 	ldw	r3,-12(fp)
   151d8:	e0bff617 	ldw	r2,-40(fp)
   151dc:	1885883a 	add	r2,r3,r2
   151e0:	10c00044 	addi	r3,r2,1
   151e4:	e0bffc17 	ldw	r2,-16(fp)
   151e8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   151ec:	e0bffc17 	ldw	r2,-16(fp)
   151f0:	10c00217 	ldw	r3,8(r2)
   151f4:	e0bff617 	ldw	r2,-40(fp)
   151f8:	1880042e 	bgeu	r3,r2,1520c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   151fc:	e0bffc17 	ldw	r2,-16(fp)
   15200:	00c00044 	movi	r3,1
   15204:	10c00405 	stb	r3,16(r2)
   15208:	00000206 	br	15214 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   1520c:	e0bffc17 	ldw	r2,-16(fp)
   15210:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   15214:	e0bffc17 	ldw	r2,-16(fp)
   15218:	d0e00d04 	addi	r3,gp,-32716
   1521c:	e0fffa15 	stw	r3,-24(fp)
   15220:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   15224:	e0bffb17 	ldw	r2,-20(fp)
   15228:	e0fffa17 	ldw	r3,-24(fp)
   1522c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   15230:	e0bffa17 	ldw	r2,-24(fp)
   15234:	10c00017 	ldw	r3,0(r2)
   15238:	e0bffb17 	ldw	r2,-20(fp)
   1523c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   15240:	e0bffa17 	ldw	r2,-24(fp)
   15244:	10800017 	ldw	r2,0(r2)
   15248:	e0fffb17 	ldw	r3,-20(fp)
   1524c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   15250:	e0bffa17 	ldw	r2,-24(fp)
   15254:	e0fffb17 	ldw	r3,-20(fp)
   15258:	10c00015 	stw	r3,0(r2)
   1525c:	e0bff817 	ldw	r2,-32(fp)
   15260:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15264:	e0bff717 	ldw	r2,-36(fp)
   15268:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   1526c:	0005883a 	mov	r2,zero
   15270:	00000306 	br	15280 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   15274:	00bffa84 	movi	r2,-22
   15278:	00000106 	br	15280 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   1527c:	00bfde84 	movi	r2,-134
  }
}
   15280:	e037883a 	mov	sp,fp
   15284:	df000017 	ldw	fp,0(sp)
   15288:	dec00104 	addi	sp,sp,4
   1528c:	f800283a 	ret

00015290 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   15290:	deffff04 	addi	sp,sp,-4
   15294:	df000015 	stw	fp,0(sp)
   15298:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   1529c:	0001883a 	nop
   152a0:	e037883a 	mov	sp,fp
   152a4:	df000017 	ldw	fp,0(sp)
   152a8:	dec00104 	addi	sp,sp,4
   152ac:	f800283a 	ret

000152b0 <alt_get_errno>:
   152b0:	defffe04 	addi	sp,sp,-8
   152b4:	dfc00115 	stw	ra,4(sp)
   152b8:	df000015 	stw	fp,0(sp)
   152bc:	d839883a 	mov	fp,sp
   152c0:	d0a00a17 	ldw	r2,-32728(gp)
   152c4:	10000326 	beq	r2,zero,152d4 <alt_get_errno+0x24>
   152c8:	d0a00a17 	ldw	r2,-32728(gp)
   152cc:	103ee83a 	callr	r2
   152d0:	00000106 	br	152d8 <alt_get_errno+0x28>
   152d4:	d0a6be04 	addi	r2,gp,-25864
   152d8:	e037883a 	mov	sp,fp
   152dc:	dfc00117 	ldw	ra,4(sp)
   152e0:	df000017 	ldw	fp,0(sp)
   152e4:	dec00204 	addi	sp,sp,8
   152e8:	f800283a 	ret

000152ec <alt_dev_llist_insert>:
   152ec:	defffa04 	addi	sp,sp,-24
   152f0:	dfc00515 	stw	ra,20(sp)
   152f4:	df000415 	stw	fp,16(sp)
   152f8:	df000404 	addi	fp,sp,16
   152fc:	e13ffe15 	stw	r4,-8(fp)
   15300:	e17fff15 	stw	r5,-4(fp)
   15304:	e0bffe17 	ldw	r2,-8(fp)
   15308:	10000326 	beq	r2,zero,15318 <alt_dev_llist_insert+0x2c>
   1530c:	e0bffe17 	ldw	r2,-8(fp)
   15310:	10800217 	ldw	r2,8(r2)
   15314:	1000061e 	bne	r2,zero,15330 <alt_dev_llist_insert+0x44>
   15318:	00152b00 	call	152b0 <alt_get_errno>
   1531c:	1007883a 	mov	r3,r2
   15320:	00800584 	movi	r2,22
   15324:	18800015 	stw	r2,0(r3)
   15328:	00bffa84 	movi	r2,-22
   1532c:	00001306 	br	1537c <alt_dev_llist_insert+0x90>
   15330:	e0bffe17 	ldw	r2,-8(fp)
   15334:	e0ffff17 	ldw	r3,-4(fp)
   15338:	e0fffc15 	stw	r3,-16(fp)
   1533c:	e0bffd15 	stw	r2,-12(fp)
   15340:	e0bffd17 	ldw	r2,-12(fp)
   15344:	e0fffc17 	ldw	r3,-16(fp)
   15348:	10c00115 	stw	r3,4(r2)
   1534c:	e0bffc17 	ldw	r2,-16(fp)
   15350:	10c00017 	ldw	r3,0(r2)
   15354:	e0bffd17 	ldw	r2,-12(fp)
   15358:	10c00015 	stw	r3,0(r2)
   1535c:	e0bffc17 	ldw	r2,-16(fp)
   15360:	10800017 	ldw	r2,0(r2)
   15364:	e0fffd17 	ldw	r3,-12(fp)
   15368:	10c00115 	stw	r3,4(r2)
   1536c:	e0bffc17 	ldw	r2,-16(fp)
   15370:	e0fffd17 	ldw	r3,-12(fp)
   15374:	10c00015 	stw	r3,0(r2)
   15378:	0005883a 	mov	r2,zero
   1537c:	e037883a 	mov	sp,fp
   15380:	dfc00117 	ldw	ra,4(sp)
   15384:	df000017 	ldw	fp,0(sp)
   15388:	dec00204 	addi	sp,sp,8
   1538c:	f800283a 	ret

00015390 <_do_ctors>:
   15390:	defffd04 	addi	sp,sp,-12
   15394:	dfc00215 	stw	ra,8(sp)
   15398:	df000115 	stw	fp,4(sp)
   1539c:	df000104 	addi	fp,sp,4
   153a0:	00800074 	movhi	r2,1
   153a4:	1098fe04 	addi	r2,r2,25592
   153a8:	e0bfff15 	stw	r2,-4(fp)
   153ac:	00000606 	br	153c8 <_do_ctors+0x38>
   153b0:	e0bfff17 	ldw	r2,-4(fp)
   153b4:	10800017 	ldw	r2,0(r2)
   153b8:	103ee83a 	callr	r2
   153bc:	e0bfff17 	ldw	r2,-4(fp)
   153c0:	10bfff04 	addi	r2,r2,-4
   153c4:	e0bfff15 	stw	r2,-4(fp)
   153c8:	e0ffff17 	ldw	r3,-4(fp)
   153cc:	00800074 	movhi	r2,1
   153d0:	1098ff04 	addi	r2,r2,25596
   153d4:	18bff62e 	bgeu	r3,r2,153b0 <__alt_data_end+0xffff53b0>
   153d8:	0001883a 	nop
   153dc:	e037883a 	mov	sp,fp
   153e0:	dfc00117 	ldw	ra,4(sp)
   153e4:	df000017 	ldw	fp,0(sp)
   153e8:	dec00204 	addi	sp,sp,8
   153ec:	f800283a 	ret

000153f0 <_do_dtors>:
   153f0:	defffd04 	addi	sp,sp,-12
   153f4:	dfc00215 	stw	ra,8(sp)
   153f8:	df000115 	stw	fp,4(sp)
   153fc:	df000104 	addi	fp,sp,4
   15400:	00800074 	movhi	r2,1
   15404:	1098fe04 	addi	r2,r2,25592
   15408:	e0bfff15 	stw	r2,-4(fp)
   1540c:	00000606 	br	15428 <_do_dtors+0x38>
   15410:	e0bfff17 	ldw	r2,-4(fp)
   15414:	10800017 	ldw	r2,0(r2)
   15418:	103ee83a 	callr	r2
   1541c:	e0bfff17 	ldw	r2,-4(fp)
   15420:	10bfff04 	addi	r2,r2,-4
   15424:	e0bfff15 	stw	r2,-4(fp)
   15428:	e0ffff17 	ldw	r3,-4(fp)
   1542c:	00800074 	movhi	r2,1
   15430:	1098ff04 	addi	r2,r2,25596
   15434:	18bff62e 	bgeu	r3,r2,15410 <__alt_data_end+0xffff5410>
   15438:	0001883a 	nop
   1543c:	e037883a 	mov	sp,fp
   15440:	dfc00117 	ldw	ra,4(sp)
   15444:	df000017 	ldw	fp,0(sp)
   15448:	dec00204 	addi	sp,sp,8
   1544c:	f800283a 	ret

00015450 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   15450:	deffff04 	addi	sp,sp,-4
   15454:	df000015 	stw	fp,0(sp)
   15458:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   1545c:	0001883a 	nop
   15460:	e037883a 	mov	sp,fp
   15464:	df000017 	ldw	fp,0(sp)
   15468:	dec00104 	addi	sp,sp,4
   1546c:	f800283a 	ret

00015470 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   15470:	defff904 	addi	sp,sp,-28
   15474:	dfc00615 	stw	ra,24(sp)
   15478:	df000515 	stw	fp,20(sp)
   1547c:	df000504 	addi	fp,sp,20
   15480:	e13ffc15 	stw	r4,-16(fp)
   15484:	e17ffd15 	stw	r5,-12(fp)
   15488:	e1bffe15 	stw	r6,-8(fp)
   1548c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   15490:	e0800217 	ldw	r2,8(fp)
   15494:	d8800015 	stw	r2,0(sp)
   15498:	e1ffff17 	ldw	r7,-4(fp)
   1549c:	e1bffe17 	ldw	r6,-8(fp)
   154a0:	e17ffd17 	ldw	r5,-12(fp)
   154a4:	e13ffc17 	ldw	r4,-16(fp)
   154a8:	00156200 	call	15620 <alt_iic_isr_register>
}  
   154ac:	e037883a 	mov	sp,fp
   154b0:	dfc00117 	ldw	ra,4(sp)
   154b4:	df000017 	ldw	fp,0(sp)
   154b8:	dec00204 	addi	sp,sp,8
   154bc:	f800283a 	ret

000154c0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   154c0:	defff904 	addi	sp,sp,-28
   154c4:	df000615 	stw	fp,24(sp)
   154c8:	df000604 	addi	fp,sp,24
   154cc:	e13ffe15 	stw	r4,-8(fp)
   154d0:	e17fff15 	stw	r5,-4(fp)
   154d4:	e0bfff17 	ldw	r2,-4(fp)
   154d8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   154dc:	0005303a 	rdctl	r2,status
   154e0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   154e4:	e0fffb17 	ldw	r3,-20(fp)
   154e8:	00bfff84 	movi	r2,-2
   154ec:	1884703a 	and	r2,r3,r2
   154f0:	1001703a 	wrctl	status,r2
  
  return context;
   154f4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   154f8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   154fc:	00c00044 	movi	r3,1
   15500:	e0bffa17 	ldw	r2,-24(fp)
   15504:	1884983a 	sll	r2,r3,r2
   15508:	1007883a 	mov	r3,r2
   1550c:	d0a6c217 	ldw	r2,-25848(gp)
   15510:	1884b03a 	or	r2,r3,r2
   15514:	d0a6c215 	stw	r2,-25848(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   15518:	d0a6c217 	ldw	r2,-25848(gp)
   1551c:	100170fa 	wrctl	ienable,r2
   15520:	e0bffc17 	ldw	r2,-16(fp)
   15524:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15528:	e0bffd17 	ldw	r2,-12(fp)
   1552c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   15530:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   15534:	0001883a 	nop
}
   15538:	e037883a 	mov	sp,fp
   1553c:	df000017 	ldw	fp,0(sp)
   15540:	dec00104 	addi	sp,sp,4
   15544:	f800283a 	ret

00015548 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   15548:	defff904 	addi	sp,sp,-28
   1554c:	df000615 	stw	fp,24(sp)
   15550:	df000604 	addi	fp,sp,24
   15554:	e13ffe15 	stw	r4,-8(fp)
   15558:	e17fff15 	stw	r5,-4(fp)
   1555c:	e0bfff17 	ldw	r2,-4(fp)
   15560:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15564:	0005303a 	rdctl	r2,status
   15568:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1556c:	e0fffb17 	ldw	r3,-20(fp)
   15570:	00bfff84 	movi	r2,-2
   15574:	1884703a 	and	r2,r3,r2
   15578:	1001703a 	wrctl	status,r2
  
  return context;
   1557c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   15580:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   15584:	00c00044 	movi	r3,1
   15588:	e0bffa17 	ldw	r2,-24(fp)
   1558c:	1884983a 	sll	r2,r3,r2
   15590:	0084303a 	nor	r2,zero,r2
   15594:	1007883a 	mov	r3,r2
   15598:	d0a6c217 	ldw	r2,-25848(gp)
   1559c:	1884703a 	and	r2,r3,r2
   155a0:	d0a6c215 	stw	r2,-25848(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   155a4:	d0a6c217 	ldw	r2,-25848(gp)
   155a8:	100170fa 	wrctl	ienable,r2
   155ac:	e0bffc17 	ldw	r2,-16(fp)
   155b0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   155b4:	e0bffd17 	ldw	r2,-12(fp)
   155b8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   155bc:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   155c0:	0001883a 	nop
}
   155c4:	e037883a 	mov	sp,fp
   155c8:	df000017 	ldw	fp,0(sp)
   155cc:	dec00104 	addi	sp,sp,4
   155d0:	f800283a 	ret

000155d4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   155d4:	defffc04 	addi	sp,sp,-16
   155d8:	df000315 	stw	fp,12(sp)
   155dc:	df000304 	addi	fp,sp,12
   155e0:	e13ffe15 	stw	r4,-8(fp)
   155e4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   155e8:	000530fa 	rdctl	r2,ienable
   155ec:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   155f0:	00c00044 	movi	r3,1
   155f4:	e0bfff17 	ldw	r2,-4(fp)
   155f8:	1884983a 	sll	r2,r3,r2
   155fc:	1007883a 	mov	r3,r2
   15600:	e0bffd17 	ldw	r2,-12(fp)
   15604:	1884703a 	and	r2,r3,r2
   15608:	1004c03a 	cmpne	r2,r2,zero
   1560c:	10803fcc 	andi	r2,r2,255
}
   15610:	e037883a 	mov	sp,fp
   15614:	df000017 	ldw	fp,0(sp)
   15618:	dec00104 	addi	sp,sp,4
   1561c:	f800283a 	ret

00015620 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   15620:	defff504 	addi	sp,sp,-44
   15624:	dfc00a15 	stw	ra,40(sp)
   15628:	df000915 	stw	fp,36(sp)
   1562c:	df000904 	addi	fp,sp,36
   15630:	e13ffc15 	stw	r4,-16(fp)
   15634:	e17ffd15 	stw	r5,-12(fp)
   15638:	e1bffe15 	stw	r6,-8(fp)
   1563c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   15640:	00bffa84 	movi	r2,-22
   15644:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   15648:	e0bffd17 	ldw	r2,-12(fp)
   1564c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   15650:	e0bff817 	ldw	r2,-32(fp)
   15654:	10800808 	cmpgei	r2,r2,32
   15658:	1000271e 	bne	r2,zero,156f8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1565c:	0005303a 	rdctl	r2,status
   15660:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15664:	e0fffb17 	ldw	r3,-20(fp)
   15668:	00bfff84 	movi	r2,-2
   1566c:	1884703a 	and	r2,r3,r2
   15670:	1001703a 	wrctl	status,r2
  
  return context;
   15674:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   15678:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   1567c:	008000b4 	movhi	r2,2
   15680:	10a6b404 	addi	r2,r2,-25904
   15684:	e0fff817 	ldw	r3,-32(fp)
   15688:	180690fa 	slli	r3,r3,3
   1568c:	10c5883a 	add	r2,r2,r3
   15690:	e0fffe17 	ldw	r3,-8(fp)
   15694:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   15698:	008000b4 	movhi	r2,2
   1569c:	10a6b404 	addi	r2,r2,-25904
   156a0:	e0fff817 	ldw	r3,-32(fp)
   156a4:	180690fa 	slli	r3,r3,3
   156a8:	10c5883a 	add	r2,r2,r3
   156ac:	10800104 	addi	r2,r2,4
   156b0:	e0ffff17 	ldw	r3,-4(fp)
   156b4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   156b8:	e0bffe17 	ldw	r2,-8(fp)
   156bc:	10000526 	beq	r2,zero,156d4 <alt_iic_isr_register+0xb4>
   156c0:	e0bff817 	ldw	r2,-32(fp)
   156c4:	100b883a 	mov	r5,r2
   156c8:	e13ffc17 	ldw	r4,-16(fp)
   156cc:	00154c00 	call	154c0 <alt_ic_irq_enable>
   156d0:	00000406 	br	156e4 <alt_iic_isr_register+0xc4>
   156d4:	e0bff817 	ldw	r2,-32(fp)
   156d8:	100b883a 	mov	r5,r2
   156dc:	e13ffc17 	ldw	r4,-16(fp)
   156e0:	00155480 	call	15548 <alt_ic_irq_disable>
   156e4:	e0bff715 	stw	r2,-36(fp)
   156e8:	e0bffa17 	ldw	r2,-24(fp)
   156ec:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   156f0:	e0bff917 	ldw	r2,-28(fp)
   156f4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   156f8:	e0bff717 	ldw	r2,-36(fp)
}
   156fc:	e037883a 	mov	sp,fp
   15700:	dfc00117 	ldw	ra,4(sp)
   15704:	df000017 	ldw	fp,0(sp)
   15708:	dec00204 	addi	sp,sp,8
   1570c:	f800283a 	ret

00015710 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   15710:	defff804 	addi	sp,sp,-32
   15714:	dfc00715 	stw	ra,28(sp)
   15718:	df000615 	stw	fp,24(sp)
   1571c:	dc000515 	stw	r16,20(sp)
   15720:	df000604 	addi	fp,sp,24
   15724:	e13ffb15 	stw	r4,-20(fp)
   15728:	e17ffc15 	stw	r5,-16(fp)
   1572c:	e1bffd15 	stw	r6,-12(fp)
   15730:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   15734:	e1bffe17 	ldw	r6,-8(fp)
   15738:	e17ffd17 	ldw	r5,-12(fp)
   1573c:	e13ffc17 	ldw	r4,-16(fp)
   15740:	00159980 	call	15998 <open>
   15744:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   15748:	e0bffa17 	ldw	r2,-24(fp)
   1574c:	10002216 	blt	r2,zero,157d8 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   15750:	04000074 	movhi	r16,1
   15754:	841b3804 	addi	r16,r16,27872
   15758:	e0bffa17 	ldw	r2,-24(fp)
   1575c:	01400304 	movi	r5,12
   15760:	1009883a 	mov	r4,r2
   15764:	0013c500 	call	13c50 <__mulsi3>
   15768:	8085883a 	add	r2,r16,r2
   1576c:	10c00017 	ldw	r3,0(r2)
   15770:	e0bffb17 	ldw	r2,-20(fp)
   15774:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   15778:	04000074 	movhi	r16,1
   1577c:	841b3804 	addi	r16,r16,27872
   15780:	e0bffa17 	ldw	r2,-24(fp)
   15784:	01400304 	movi	r5,12
   15788:	1009883a 	mov	r4,r2
   1578c:	0013c500 	call	13c50 <__mulsi3>
   15790:	8085883a 	add	r2,r16,r2
   15794:	10800104 	addi	r2,r2,4
   15798:	10c00017 	ldw	r3,0(r2)
   1579c:	e0bffb17 	ldw	r2,-20(fp)
   157a0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   157a4:	04000074 	movhi	r16,1
   157a8:	841b3804 	addi	r16,r16,27872
   157ac:	e0bffa17 	ldw	r2,-24(fp)
   157b0:	01400304 	movi	r5,12
   157b4:	1009883a 	mov	r4,r2
   157b8:	0013c500 	call	13c50 <__mulsi3>
   157bc:	8085883a 	add	r2,r16,r2
   157c0:	10800204 	addi	r2,r2,8
   157c4:	10c00017 	ldw	r3,0(r2)
   157c8:	e0bffb17 	ldw	r2,-20(fp)
   157cc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   157d0:	e13ffa17 	ldw	r4,-24(fp)
   157d4:	00143d80 	call	143d8 <alt_release_fd>
  }
} 
   157d8:	0001883a 	nop
   157dc:	e6ffff04 	addi	sp,fp,-4
   157e0:	dfc00217 	ldw	ra,8(sp)
   157e4:	df000117 	ldw	fp,4(sp)
   157e8:	dc000017 	ldw	r16,0(sp)
   157ec:	dec00304 	addi	sp,sp,12
   157f0:	f800283a 	ret

000157f4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   157f4:	defffb04 	addi	sp,sp,-20
   157f8:	dfc00415 	stw	ra,16(sp)
   157fc:	df000315 	stw	fp,12(sp)
   15800:	df000304 	addi	fp,sp,12
   15804:	e13ffd15 	stw	r4,-12(fp)
   15808:	e17ffe15 	stw	r5,-8(fp)
   1580c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   15810:	01c07fc4 	movi	r7,511
   15814:	01800044 	movi	r6,1
   15818:	e17ffd17 	ldw	r5,-12(fp)
   1581c:	01000074 	movhi	r4,1
   15820:	211b3b04 	addi	r4,r4,27884
   15824:	00157100 	call	15710 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   15828:	01c07fc4 	movi	r7,511
   1582c:	000d883a 	mov	r6,zero
   15830:	e17ffe17 	ldw	r5,-8(fp)
   15834:	01000074 	movhi	r4,1
   15838:	211b3804 	addi	r4,r4,27872
   1583c:	00157100 	call	15710 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   15840:	01c07fc4 	movi	r7,511
   15844:	01800044 	movi	r6,1
   15848:	e17fff17 	ldw	r5,-4(fp)
   1584c:	01000074 	movhi	r4,1
   15850:	211b3e04 	addi	r4,r4,27896
   15854:	00157100 	call	15710 <alt_open_fd>
}  
   15858:	0001883a 	nop
   1585c:	e037883a 	mov	sp,fp
   15860:	dfc00117 	ldw	ra,4(sp)
   15864:	df000017 	ldw	fp,0(sp)
   15868:	dec00204 	addi	sp,sp,8
   1586c:	f800283a 	ret

00015870 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   15870:	defffe04 	addi	sp,sp,-8
   15874:	dfc00115 	stw	ra,4(sp)
   15878:	df000015 	stw	fp,0(sp)
   1587c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   15880:	d0a00a17 	ldw	r2,-32728(gp)
   15884:	10000326 	beq	r2,zero,15894 <alt_get_errno+0x24>
   15888:	d0a00a17 	ldw	r2,-32728(gp)
   1588c:	103ee83a 	callr	r2
   15890:	00000106 	br	15898 <alt_get_errno+0x28>
   15894:	d0a6be04 	addi	r2,gp,-25864
}
   15898:	e037883a 	mov	sp,fp
   1589c:	dfc00117 	ldw	ra,4(sp)
   158a0:	df000017 	ldw	fp,0(sp)
   158a4:	dec00204 	addi	sp,sp,8
   158a8:	f800283a 	ret

000158ac <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   158ac:	defffb04 	addi	sp,sp,-20
   158b0:	dfc00415 	stw	ra,16(sp)
   158b4:	df000315 	stw	fp,12(sp)
   158b8:	dc000215 	stw	r16,8(sp)
   158bc:	df000304 	addi	fp,sp,12
   158c0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   158c4:	e0bffe17 	ldw	r2,-8(fp)
   158c8:	10800217 	ldw	r2,8(r2)
   158cc:	10d00034 	orhi	r3,r2,16384
   158d0:	e0bffe17 	ldw	r2,-8(fp)
   158d4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   158d8:	e03ffd15 	stw	zero,-12(fp)
   158dc:	00002306 	br	1596c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   158e0:	04000074 	movhi	r16,1
   158e4:	841b3804 	addi	r16,r16,27872
   158e8:	e0bffd17 	ldw	r2,-12(fp)
   158ec:	01400304 	movi	r5,12
   158f0:	1009883a 	mov	r4,r2
   158f4:	0013c500 	call	13c50 <__mulsi3>
   158f8:	8085883a 	add	r2,r16,r2
   158fc:	10c00017 	ldw	r3,0(r2)
   15900:	e0bffe17 	ldw	r2,-8(fp)
   15904:	10800017 	ldw	r2,0(r2)
   15908:	1880151e 	bne	r3,r2,15960 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1590c:	04000074 	movhi	r16,1
   15910:	841b3804 	addi	r16,r16,27872
   15914:	e0bffd17 	ldw	r2,-12(fp)
   15918:	01400304 	movi	r5,12
   1591c:	1009883a 	mov	r4,r2
   15920:	0013c500 	call	13c50 <__mulsi3>
   15924:	8085883a 	add	r2,r16,r2
   15928:	10800204 	addi	r2,r2,8
   1592c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   15930:	10000b0e 	bge	r2,zero,15960 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   15934:	01400304 	movi	r5,12
   15938:	e13ffd17 	ldw	r4,-12(fp)
   1593c:	0013c500 	call	13c50 <__mulsi3>
   15940:	1007883a 	mov	r3,r2
   15944:	00800074 	movhi	r2,1
   15948:	109b3804 	addi	r2,r2,27872
   1594c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   15950:	e0bffe17 	ldw	r2,-8(fp)
   15954:	18800226 	beq	r3,r2,15960 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   15958:	00bffcc4 	movi	r2,-13
   1595c:	00000806 	br	15980 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   15960:	e0bffd17 	ldw	r2,-12(fp)
   15964:	10800044 	addi	r2,r2,1
   15968:	e0bffd15 	stw	r2,-12(fp)
   1596c:	d0a00917 	ldw	r2,-32732(gp)
   15970:	1007883a 	mov	r3,r2
   15974:	e0bffd17 	ldw	r2,-12(fp)
   15978:	18bfd92e 	bgeu	r3,r2,158e0 <__alt_data_end+0xffff58e0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   1597c:	0005883a 	mov	r2,zero
}
   15980:	e6ffff04 	addi	sp,fp,-4
   15984:	dfc00217 	ldw	ra,8(sp)
   15988:	df000117 	ldw	fp,4(sp)
   1598c:	dc000017 	ldw	r16,0(sp)
   15990:	dec00304 	addi	sp,sp,12
   15994:	f800283a 	ret

00015998 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   15998:	defff604 	addi	sp,sp,-40
   1599c:	dfc00915 	stw	ra,36(sp)
   159a0:	df000815 	stw	fp,32(sp)
   159a4:	df000804 	addi	fp,sp,32
   159a8:	e13ffd15 	stw	r4,-12(fp)
   159ac:	e17ffe15 	stw	r5,-8(fp)
   159b0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   159b4:	00bfffc4 	movi	r2,-1
   159b8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   159bc:	00bffb44 	movi	r2,-19
   159c0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   159c4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   159c8:	d1600704 	addi	r5,gp,-32740
   159cc:	e13ffd17 	ldw	r4,-12(fp)
   159d0:	0015cbc0 	call	15cbc <alt_find_dev>
   159d4:	e0bff815 	stw	r2,-32(fp)
   159d8:	e0bff817 	ldw	r2,-32(fp)
   159dc:	1000051e 	bne	r2,zero,159f4 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   159e0:	e13ffd17 	ldw	r4,-12(fp)
   159e4:	0015d4c0 	call	15d4c <alt_find_file>
   159e8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   159ec:	00800044 	movi	r2,1
   159f0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   159f4:	e0bff817 	ldw	r2,-32(fp)
   159f8:	10002b26 	beq	r2,zero,15aa8 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   159fc:	e13ff817 	ldw	r4,-32(fp)
   15a00:	0015e540 	call	15e54 <alt_get_fd>
   15a04:	e0bff915 	stw	r2,-28(fp)
   15a08:	e0bff917 	ldw	r2,-28(fp)
   15a0c:	1000030e 	bge	r2,zero,15a1c <open+0x84>
    {
      status = index;
   15a10:	e0bff917 	ldw	r2,-28(fp)
   15a14:	e0bffa15 	stw	r2,-24(fp)
   15a18:	00002506 	br	15ab0 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   15a1c:	01400304 	movi	r5,12
   15a20:	e13ff917 	ldw	r4,-28(fp)
   15a24:	0013c500 	call	13c50 <__mulsi3>
   15a28:	1007883a 	mov	r3,r2
   15a2c:	00800074 	movhi	r2,1
   15a30:	109b3804 	addi	r2,r2,27872
   15a34:	1885883a 	add	r2,r3,r2
   15a38:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   15a3c:	e0fffe17 	ldw	r3,-8(fp)
   15a40:	00900034 	movhi	r2,16384
   15a44:	10bfffc4 	addi	r2,r2,-1
   15a48:	1886703a 	and	r3,r3,r2
   15a4c:	e0bffc17 	ldw	r2,-16(fp)
   15a50:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   15a54:	e0bffb17 	ldw	r2,-20(fp)
   15a58:	1000051e 	bne	r2,zero,15a70 <open+0xd8>
   15a5c:	e13ffc17 	ldw	r4,-16(fp)
   15a60:	00158ac0 	call	158ac <alt_file_locked>
   15a64:	e0bffa15 	stw	r2,-24(fp)
   15a68:	e0bffa17 	ldw	r2,-24(fp)
   15a6c:	10001016 	blt	r2,zero,15ab0 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   15a70:	e0bff817 	ldw	r2,-32(fp)
   15a74:	10800317 	ldw	r2,12(r2)
   15a78:	10000826 	beq	r2,zero,15a9c <open+0x104>
   15a7c:	e0bff817 	ldw	r2,-32(fp)
   15a80:	10800317 	ldw	r2,12(r2)
   15a84:	e1ffff17 	ldw	r7,-4(fp)
   15a88:	e1bffe17 	ldw	r6,-8(fp)
   15a8c:	e17ffd17 	ldw	r5,-12(fp)
   15a90:	e13ffc17 	ldw	r4,-16(fp)
   15a94:	103ee83a 	callr	r2
   15a98:	00000106 	br	15aa0 <open+0x108>
   15a9c:	0005883a 	mov	r2,zero
   15aa0:	e0bffa15 	stw	r2,-24(fp)
   15aa4:	00000206 	br	15ab0 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   15aa8:	00bffb44 	movi	r2,-19
   15aac:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   15ab0:	e0bffa17 	ldw	r2,-24(fp)
   15ab4:	1000090e 	bge	r2,zero,15adc <open+0x144>
  {
    alt_release_fd (index);  
   15ab8:	e13ff917 	ldw	r4,-28(fp)
   15abc:	00143d80 	call	143d8 <alt_release_fd>
    ALT_ERRNO = -status;
   15ac0:	00158700 	call	15870 <alt_get_errno>
   15ac4:	1007883a 	mov	r3,r2
   15ac8:	e0bffa17 	ldw	r2,-24(fp)
   15acc:	0085c83a 	sub	r2,zero,r2
   15ad0:	18800015 	stw	r2,0(r3)
    return -1;
   15ad4:	00bfffc4 	movi	r2,-1
   15ad8:	00000106 	br	15ae0 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   15adc:	e0bff917 	ldw	r2,-28(fp)
}
   15ae0:	e037883a 	mov	sp,fp
   15ae4:	dfc00117 	ldw	ra,4(sp)
   15ae8:	df000017 	ldw	fp,0(sp)
   15aec:	dec00204 	addi	sp,sp,8
   15af0:	f800283a 	ret

00015af4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   15af4:	defffa04 	addi	sp,sp,-24
   15af8:	df000515 	stw	fp,20(sp)
   15afc:	df000504 	addi	fp,sp,20
   15b00:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15b04:	0005303a 	rdctl	r2,status
   15b08:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15b0c:	e0fffc17 	ldw	r3,-16(fp)
   15b10:	00bfff84 	movi	r2,-2
   15b14:	1884703a 	and	r2,r3,r2
   15b18:	1001703a 	wrctl	status,r2
  
  return context;
   15b1c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   15b20:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   15b24:	e0bfff17 	ldw	r2,-4(fp)
   15b28:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   15b2c:	e0bffd17 	ldw	r2,-12(fp)
   15b30:	10800017 	ldw	r2,0(r2)
   15b34:	e0fffd17 	ldw	r3,-12(fp)
   15b38:	18c00117 	ldw	r3,4(r3)
   15b3c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   15b40:	e0bffd17 	ldw	r2,-12(fp)
   15b44:	10800117 	ldw	r2,4(r2)
   15b48:	e0fffd17 	ldw	r3,-12(fp)
   15b4c:	18c00017 	ldw	r3,0(r3)
   15b50:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   15b54:	e0bffd17 	ldw	r2,-12(fp)
   15b58:	e0fffd17 	ldw	r3,-12(fp)
   15b5c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   15b60:	e0bffd17 	ldw	r2,-12(fp)
   15b64:	e0fffd17 	ldw	r3,-12(fp)
   15b68:	10c00015 	stw	r3,0(r2)
   15b6c:	e0bffb17 	ldw	r2,-20(fp)
   15b70:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15b74:	e0bffe17 	ldw	r2,-8(fp)
   15b78:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   15b7c:	0001883a 	nop
   15b80:	e037883a 	mov	sp,fp
   15b84:	df000017 	ldw	fp,0(sp)
   15b88:	dec00104 	addi	sp,sp,4
   15b8c:	f800283a 	ret

00015b90 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   15b90:	defffb04 	addi	sp,sp,-20
   15b94:	dfc00415 	stw	ra,16(sp)
   15b98:	df000315 	stw	fp,12(sp)
   15b9c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   15ba0:	d0a00d17 	ldw	r2,-32716(gp)
   15ba4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   15ba8:	d0a6c417 	ldw	r2,-25840(gp)
   15bac:	10800044 	addi	r2,r2,1
   15bb0:	d0a6c415 	stw	r2,-25840(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   15bb4:	00002e06 	br	15c70 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   15bb8:	e0bffd17 	ldw	r2,-12(fp)
   15bbc:	10800017 	ldw	r2,0(r2)
   15bc0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   15bc4:	e0bffd17 	ldw	r2,-12(fp)
   15bc8:	10800403 	ldbu	r2,16(r2)
   15bcc:	10803fcc 	andi	r2,r2,255
   15bd0:	10000426 	beq	r2,zero,15be4 <alt_tick+0x54>
   15bd4:	d0a6c417 	ldw	r2,-25840(gp)
   15bd8:	1000021e 	bne	r2,zero,15be4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   15bdc:	e0bffd17 	ldw	r2,-12(fp)
   15be0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   15be4:	e0bffd17 	ldw	r2,-12(fp)
   15be8:	10800217 	ldw	r2,8(r2)
   15bec:	d0e6c417 	ldw	r3,-25840(gp)
   15bf0:	18801d36 	bltu	r3,r2,15c68 <alt_tick+0xd8>
   15bf4:	e0bffd17 	ldw	r2,-12(fp)
   15bf8:	10800403 	ldbu	r2,16(r2)
   15bfc:	10803fcc 	andi	r2,r2,255
   15c00:	1000191e 	bne	r2,zero,15c68 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   15c04:	e0bffd17 	ldw	r2,-12(fp)
   15c08:	10800317 	ldw	r2,12(r2)
   15c0c:	e0fffd17 	ldw	r3,-12(fp)
   15c10:	18c00517 	ldw	r3,20(r3)
   15c14:	1809883a 	mov	r4,r3
   15c18:	103ee83a 	callr	r2
   15c1c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   15c20:	e0bfff17 	ldw	r2,-4(fp)
   15c24:	1000031e 	bne	r2,zero,15c34 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   15c28:	e13ffd17 	ldw	r4,-12(fp)
   15c2c:	0015af40 	call	15af4 <alt_alarm_stop>
   15c30:	00000d06 	br	15c68 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   15c34:	e0bffd17 	ldw	r2,-12(fp)
   15c38:	10c00217 	ldw	r3,8(r2)
   15c3c:	e0bfff17 	ldw	r2,-4(fp)
   15c40:	1887883a 	add	r3,r3,r2
   15c44:	e0bffd17 	ldw	r2,-12(fp)
   15c48:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   15c4c:	e0bffd17 	ldw	r2,-12(fp)
   15c50:	10c00217 	ldw	r3,8(r2)
   15c54:	d0a6c417 	ldw	r2,-25840(gp)
   15c58:	1880032e 	bgeu	r3,r2,15c68 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   15c5c:	e0bffd17 	ldw	r2,-12(fp)
   15c60:	00c00044 	movi	r3,1
   15c64:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   15c68:	e0bffe17 	ldw	r2,-8(fp)
   15c6c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   15c70:	e0fffd17 	ldw	r3,-12(fp)
   15c74:	d0a00d04 	addi	r2,gp,-32716
   15c78:	18bfcf1e 	bne	r3,r2,15bb8 <__alt_data_end+0xffff5bb8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   15c7c:	0001883a 	nop
}
   15c80:	0001883a 	nop
   15c84:	e037883a 	mov	sp,fp
   15c88:	dfc00117 	ldw	ra,4(sp)
   15c8c:	df000017 	ldw	fp,0(sp)
   15c90:	dec00204 	addi	sp,sp,8
   15c94:	f800283a 	ret

00015c98 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   15c98:	deffff04 	addi	sp,sp,-4
   15c9c:	df000015 	stw	fp,0(sp)
   15ca0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   15ca4:	000170fa 	wrctl	ienable,zero
}
   15ca8:	0001883a 	nop
   15cac:	e037883a 	mov	sp,fp
   15cb0:	df000017 	ldw	fp,0(sp)
   15cb4:	dec00104 	addi	sp,sp,4
   15cb8:	f800283a 	ret

00015cbc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   15cbc:	defffa04 	addi	sp,sp,-24
   15cc0:	dfc00515 	stw	ra,20(sp)
   15cc4:	df000415 	stw	fp,16(sp)
   15cc8:	df000404 	addi	fp,sp,16
   15ccc:	e13ffe15 	stw	r4,-8(fp)
   15cd0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   15cd4:	e0bfff17 	ldw	r2,-4(fp)
   15cd8:	10800017 	ldw	r2,0(r2)
   15cdc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   15ce0:	e13ffe17 	ldw	r4,-8(fp)
   15ce4:	0010f980 	call	10f98 <strlen>
   15ce8:	10800044 	addi	r2,r2,1
   15cec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   15cf0:	00000d06 	br	15d28 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   15cf4:	e0bffc17 	ldw	r2,-16(fp)
   15cf8:	10800217 	ldw	r2,8(r2)
   15cfc:	e0fffd17 	ldw	r3,-12(fp)
   15d00:	180d883a 	mov	r6,r3
   15d04:	e17ffe17 	ldw	r5,-8(fp)
   15d08:	1009883a 	mov	r4,r2
   15d0c:	00160b40 	call	160b4 <memcmp>
   15d10:	1000021e 	bne	r2,zero,15d1c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   15d14:	e0bffc17 	ldw	r2,-16(fp)
   15d18:	00000706 	br	15d38 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   15d1c:	e0bffc17 	ldw	r2,-16(fp)
   15d20:	10800017 	ldw	r2,0(r2)
   15d24:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   15d28:	e0fffc17 	ldw	r3,-16(fp)
   15d2c:	e0bfff17 	ldw	r2,-4(fp)
   15d30:	18bff01e 	bne	r3,r2,15cf4 <__alt_data_end+0xffff5cf4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   15d34:	0005883a 	mov	r2,zero
}
   15d38:	e037883a 	mov	sp,fp
   15d3c:	dfc00117 	ldw	ra,4(sp)
   15d40:	df000017 	ldw	fp,0(sp)
   15d44:	dec00204 	addi	sp,sp,8
   15d48:	f800283a 	ret

00015d4c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   15d4c:	defffb04 	addi	sp,sp,-20
   15d50:	dfc00415 	stw	ra,16(sp)
   15d54:	df000315 	stw	fp,12(sp)
   15d58:	df000304 	addi	fp,sp,12
   15d5c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   15d60:	d0a00517 	ldw	r2,-32748(gp)
   15d64:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   15d68:	00003106 	br	15e30 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   15d6c:	e0bffd17 	ldw	r2,-12(fp)
   15d70:	10800217 	ldw	r2,8(r2)
   15d74:	1009883a 	mov	r4,r2
   15d78:	0010f980 	call	10f98 <strlen>
   15d7c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   15d80:	e0bffd17 	ldw	r2,-12(fp)
   15d84:	10c00217 	ldw	r3,8(r2)
   15d88:	e0bffe17 	ldw	r2,-8(fp)
   15d8c:	10bfffc4 	addi	r2,r2,-1
   15d90:	1885883a 	add	r2,r3,r2
   15d94:	10800003 	ldbu	r2,0(r2)
   15d98:	10803fcc 	andi	r2,r2,255
   15d9c:	1080201c 	xori	r2,r2,128
   15da0:	10bfe004 	addi	r2,r2,-128
   15da4:	10800bd8 	cmpnei	r2,r2,47
   15da8:	1000031e 	bne	r2,zero,15db8 <alt_find_file+0x6c>
    {
      len -= 1;
   15dac:	e0bffe17 	ldw	r2,-8(fp)
   15db0:	10bfffc4 	addi	r2,r2,-1
   15db4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   15db8:	e0bffe17 	ldw	r2,-8(fp)
   15dbc:	e0ffff17 	ldw	r3,-4(fp)
   15dc0:	1885883a 	add	r2,r3,r2
   15dc4:	10800003 	ldbu	r2,0(r2)
   15dc8:	10803fcc 	andi	r2,r2,255
   15dcc:	1080201c 	xori	r2,r2,128
   15dd0:	10bfe004 	addi	r2,r2,-128
   15dd4:	10800be0 	cmpeqi	r2,r2,47
   15dd8:	1000081e 	bne	r2,zero,15dfc <alt_find_file+0xb0>
   15ddc:	e0bffe17 	ldw	r2,-8(fp)
   15de0:	e0ffff17 	ldw	r3,-4(fp)
   15de4:	1885883a 	add	r2,r3,r2
   15de8:	10800003 	ldbu	r2,0(r2)
   15dec:	10803fcc 	andi	r2,r2,255
   15df0:	1080201c 	xori	r2,r2,128
   15df4:	10bfe004 	addi	r2,r2,-128
   15df8:	10000a1e 	bne	r2,zero,15e24 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   15dfc:	e0bffd17 	ldw	r2,-12(fp)
   15e00:	10800217 	ldw	r2,8(r2)
   15e04:	e0fffe17 	ldw	r3,-8(fp)
   15e08:	180d883a 	mov	r6,r3
   15e0c:	e17fff17 	ldw	r5,-4(fp)
   15e10:	1009883a 	mov	r4,r2
   15e14:	00160b40 	call	160b4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   15e18:	1000021e 	bne	r2,zero,15e24 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   15e1c:	e0bffd17 	ldw	r2,-12(fp)
   15e20:	00000706 	br	15e40 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   15e24:	e0bffd17 	ldw	r2,-12(fp)
   15e28:	10800017 	ldw	r2,0(r2)
   15e2c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   15e30:	e0fffd17 	ldw	r3,-12(fp)
   15e34:	d0a00504 	addi	r2,gp,-32748
   15e38:	18bfcc1e 	bne	r3,r2,15d6c <__alt_data_end+0xffff5d6c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   15e3c:	0005883a 	mov	r2,zero
}
   15e40:	e037883a 	mov	sp,fp
   15e44:	dfc00117 	ldw	ra,4(sp)
   15e48:	df000017 	ldw	fp,0(sp)
   15e4c:	dec00204 	addi	sp,sp,8
   15e50:	f800283a 	ret

00015e54 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   15e54:	defffa04 	addi	sp,sp,-24
   15e58:	dfc00515 	stw	ra,20(sp)
   15e5c:	df000415 	stw	fp,16(sp)
   15e60:	dc000315 	stw	r16,12(sp)
   15e64:	df000404 	addi	fp,sp,16
   15e68:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   15e6c:	00bffa04 	movi	r2,-24
   15e70:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   15e74:	e03ffc15 	stw	zero,-16(fp)
   15e78:	00001d06 	br	15ef0 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   15e7c:	04000074 	movhi	r16,1
   15e80:	841b3804 	addi	r16,r16,27872
   15e84:	e0bffc17 	ldw	r2,-16(fp)
   15e88:	01400304 	movi	r5,12
   15e8c:	1009883a 	mov	r4,r2
   15e90:	0013c500 	call	13c50 <__mulsi3>
   15e94:	8085883a 	add	r2,r16,r2
   15e98:	10800017 	ldw	r2,0(r2)
   15e9c:	1000111e 	bne	r2,zero,15ee4 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   15ea0:	04000074 	movhi	r16,1
   15ea4:	841b3804 	addi	r16,r16,27872
   15ea8:	e0bffc17 	ldw	r2,-16(fp)
   15eac:	01400304 	movi	r5,12
   15eb0:	1009883a 	mov	r4,r2
   15eb4:	0013c500 	call	13c50 <__mulsi3>
   15eb8:	8085883a 	add	r2,r16,r2
   15ebc:	e0fffe17 	ldw	r3,-8(fp)
   15ec0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   15ec4:	d0e00917 	ldw	r3,-32732(gp)
   15ec8:	e0bffc17 	ldw	r2,-16(fp)
   15ecc:	1880020e 	bge	r3,r2,15ed8 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   15ed0:	e0bffc17 	ldw	r2,-16(fp)
   15ed4:	d0a00915 	stw	r2,-32732(gp)
      }
      rc = i;
   15ed8:	e0bffc17 	ldw	r2,-16(fp)
   15edc:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   15ee0:	00000606 	br	15efc <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   15ee4:	e0bffc17 	ldw	r2,-16(fp)
   15ee8:	10800044 	addi	r2,r2,1
   15eec:	e0bffc15 	stw	r2,-16(fp)
   15ef0:	e0bffc17 	ldw	r2,-16(fp)
   15ef4:	10800810 	cmplti	r2,r2,32
   15ef8:	103fe01e 	bne	r2,zero,15e7c <__alt_data_end+0xffff5e7c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   15efc:	e0bffd17 	ldw	r2,-12(fp)
}
   15f00:	e6ffff04 	addi	sp,fp,-4
   15f04:	dfc00217 	ldw	ra,8(sp)
   15f08:	df000117 	ldw	fp,4(sp)
   15f0c:	dc000017 	ldw	r16,0(sp)
   15f10:	dec00304 	addi	sp,sp,12
   15f14:	f800283a 	ret

00015f18 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   15f18:	defffe04 	addi	sp,sp,-8
   15f1c:	df000115 	stw	fp,4(sp)
   15f20:	df000104 	addi	fp,sp,4
   15f24:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   15f28:	e0bfff17 	ldw	r2,-4(fp)
   15f2c:	10bffe84 	addi	r2,r2,-6
   15f30:	10c00428 	cmpgeui	r3,r2,16
   15f34:	18001a1e 	bne	r3,zero,15fa0 <alt_exception_cause_generated_bad_addr+0x88>
   15f38:	100690ba 	slli	r3,r2,2
   15f3c:	00800074 	movhi	r2,1
   15f40:	1097d404 	addi	r2,r2,24400
   15f44:	1885883a 	add	r2,r3,r2
   15f48:	10800017 	ldw	r2,0(r2)
   15f4c:	1000683a 	jmp	r2
   15f50:	00015f90 	cmplti	zero,zero,1406
   15f54:	00015f90 	cmplti	zero,zero,1406
   15f58:	00015fa0 	cmpeqi	zero,zero,1406
   15f5c:	00015fa0 	cmpeqi	zero,zero,1406
   15f60:	00015fa0 	cmpeqi	zero,zero,1406
   15f64:	00015f90 	cmplti	zero,zero,1406
   15f68:	00015f98 	cmpnei	zero,zero,1406
   15f6c:	00015fa0 	cmpeqi	zero,zero,1406
   15f70:	00015f90 	cmplti	zero,zero,1406
   15f74:	00015f90 	cmplti	zero,zero,1406
   15f78:	00015fa0 	cmpeqi	zero,zero,1406
   15f7c:	00015f90 	cmplti	zero,zero,1406
   15f80:	00015f98 	cmpnei	zero,zero,1406
   15f84:	00015fa0 	cmpeqi	zero,zero,1406
   15f88:	00015fa0 	cmpeqi	zero,zero,1406
   15f8c:	00015f90 	cmplti	zero,zero,1406
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   15f90:	00800044 	movi	r2,1
   15f94:	00000306 	br	15fa4 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   15f98:	0005883a 	mov	r2,zero
   15f9c:	00000106 	br	15fa4 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   15fa0:	0005883a 	mov	r2,zero
  }
}
   15fa4:	e037883a 	mov	sp,fp
   15fa8:	df000017 	ldw	fp,0(sp)
   15fac:	dec00104 	addi	sp,sp,4
   15fb0:	f800283a 	ret

00015fb4 <atexit>:
   15fb4:	200b883a 	mov	r5,r4
   15fb8:	000f883a 	mov	r7,zero
   15fbc:	000d883a 	mov	r6,zero
   15fc0:	0009883a 	mov	r4,zero
   15fc4:	00161301 	jmpi	16130 <__register_exitproc>

00015fc8 <exit>:
   15fc8:	defffe04 	addi	sp,sp,-8
   15fcc:	000b883a 	mov	r5,zero
   15fd0:	dc000015 	stw	r16,0(sp)
   15fd4:	dfc00115 	stw	ra,4(sp)
   15fd8:	2021883a 	mov	r16,r4
   15fdc:	00162480 	call	16248 <__call_exitprocs>
   15fe0:	00800074 	movhi	r2,1
   15fe4:	109fb104 	addi	r2,r2,32452
   15fe8:	11000017 	ldw	r4,0(r2)
   15fec:	20800f17 	ldw	r2,60(r4)
   15ff0:	10000126 	beq	r2,zero,15ff8 <exit+0x30>
   15ff4:	103ee83a 	callr	r2
   15ff8:	8009883a 	mov	r4,r16
   15ffc:	00163c80 	call	163c8 <_exit>

00016000 <_fputs_r>:
   16000:	defff804 	addi	sp,sp,-32
   16004:	dc400615 	stw	r17,24(sp)
   16008:	2023883a 	mov	r17,r4
   1600c:	2809883a 	mov	r4,r5
   16010:	dc000515 	stw	r16,20(sp)
   16014:	dfc00715 	stw	ra,28(sp)
   16018:	3021883a 	mov	r16,r6
   1601c:	d9400315 	stw	r5,12(sp)
   16020:	0010f980 	call	10f98 <strlen>
   16024:	d8800215 	stw	r2,8(sp)
   16028:	d8800415 	stw	r2,16(sp)
   1602c:	d8800304 	addi	r2,sp,12
   16030:	d8800015 	stw	r2,0(sp)
   16034:	00800044 	movi	r2,1
   16038:	d8800115 	stw	r2,4(sp)
   1603c:	88000226 	beq	r17,zero,16048 <_fputs_r+0x48>
   16040:	88800e17 	ldw	r2,56(r17)
   16044:	10001226 	beq	r2,zero,16090 <_fputs_r+0x90>
   16048:	8080030b 	ldhu	r2,12(r16)
   1604c:	10c8000c 	andi	r3,r2,8192
   16050:	1800061e 	bne	r3,zero,1606c <_fputs_r+0x6c>
   16054:	81001917 	ldw	r4,100(r16)
   16058:	00f7ffc4 	movi	r3,-8193
   1605c:	10880014 	ori	r2,r2,8192
   16060:	20c6703a 	and	r3,r4,r3
   16064:	8080030d 	sth	r2,12(r16)
   16068:	80c01915 	stw	r3,100(r16)
   1606c:	d80d883a 	mov	r6,sp
   16070:	800b883a 	mov	r5,r16
   16074:	8809883a 	mov	r4,r17
   16078:	001153c0 	call	1153c <__sfvwrite_r>
   1607c:	dfc00717 	ldw	ra,28(sp)
   16080:	dc400617 	ldw	r17,24(sp)
   16084:	dc000517 	ldw	r16,20(sp)
   16088:	dec00804 	addi	sp,sp,32
   1608c:	f800283a 	ret
   16090:	8809883a 	mov	r4,r17
   16094:	00114ec0 	call	114ec <__sinit>
   16098:	003feb06 	br	16048 <__alt_data_end+0xffff6048>

0001609c <fputs>:
   1609c:	00800074 	movhi	r2,1
   160a0:	109fb204 	addi	r2,r2,32456
   160a4:	280d883a 	mov	r6,r5
   160a8:	200b883a 	mov	r5,r4
   160ac:	11000017 	ldw	r4,0(r2)
   160b0:	00160001 	jmpi	16000 <_fputs_r>

000160b4 <memcmp>:
   160b4:	01c000c4 	movi	r7,3
   160b8:	3980192e 	bgeu	r7,r6,16120 <memcmp+0x6c>
   160bc:	2144b03a 	or	r2,r4,r5
   160c0:	11c4703a 	and	r2,r2,r7
   160c4:	10000f26 	beq	r2,zero,16104 <memcmp+0x50>
   160c8:	20800003 	ldbu	r2,0(r4)
   160cc:	28c00003 	ldbu	r3,0(r5)
   160d0:	10c0151e 	bne	r2,r3,16128 <memcmp+0x74>
   160d4:	31bfff84 	addi	r6,r6,-2
   160d8:	01ffffc4 	movi	r7,-1
   160dc:	00000406 	br	160f0 <memcmp+0x3c>
   160e0:	20800003 	ldbu	r2,0(r4)
   160e4:	28c00003 	ldbu	r3,0(r5)
   160e8:	31bfffc4 	addi	r6,r6,-1
   160ec:	10c00e1e 	bne	r2,r3,16128 <memcmp+0x74>
   160f0:	21000044 	addi	r4,r4,1
   160f4:	29400044 	addi	r5,r5,1
   160f8:	31fff91e 	bne	r6,r7,160e0 <__alt_data_end+0xffff60e0>
   160fc:	0005883a 	mov	r2,zero
   16100:	f800283a 	ret
   16104:	20c00017 	ldw	r3,0(r4)
   16108:	28800017 	ldw	r2,0(r5)
   1610c:	18bfee1e 	bne	r3,r2,160c8 <__alt_data_end+0xffff60c8>
   16110:	31bfff04 	addi	r6,r6,-4
   16114:	21000104 	addi	r4,r4,4
   16118:	29400104 	addi	r5,r5,4
   1611c:	39bff936 	bltu	r7,r6,16104 <__alt_data_end+0xffff6104>
   16120:	303fe91e 	bne	r6,zero,160c8 <__alt_data_end+0xffff60c8>
   16124:	003ff506 	br	160fc <__alt_data_end+0xffff60fc>
   16128:	10c5c83a 	sub	r2,r2,r3
   1612c:	f800283a 	ret

00016130 <__register_exitproc>:
   16130:	defffa04 	addi	sp,sp,-24
   16134:	dc000315 	stw	r16,12(sp)
   16138:	04000074 	movhi	r16,1
   1613c:	841fb104 	addi	r16,r16,32452
   16140:	80c00017 	ldw	r3,0(r16)
   16144:	dc400415 	stw	r17,16(sp)
   16148:	dfc00515 	stw	ra,20(sp)
   1614c:	18805217 	ldw	r2,328(r3)
   16150:	2023883a 	mov	r17,r4
   16154:	10003726 	beq	r2,zero,16234 <__register_exitproc+0x104>
   16158:	10c00117 	ldw	r3,4(r2)
   1615c:	010007c4 	movi	r4,31
   16160:	20c00e16 	blt	r4,r3,1619c <__register_exitproc+0x6c>
   16164:	1a000044 	addi	r8,r3,1
   16168:	8800221e 	bne	r17,zero,161f4 <__register_exitproc+0xc4>
   1616c:	18c00084 	addi	r3,r3,2
   16170:	18c7883a 	add	r3,r3,r3
   16174:	18c7883a 	add	r3,r3,r3
   16178:	12000115 	stw	r8,4(r2)
   1617c:	10c7883a 	add	r3,r2,r3
   16180:	19400015 	stw	r5,0(r3)
   16184:	0005883a 	mov	r2,zero
   16188:	dfc00517 	ldw	ra,20(sp)
   1618c:	dc400417 	ldw	r17,16(sp)
   16190:	dc000317 	ldw	r16,12(sp)
   16194:	dec00604 	addi	sp,sp,24
   16198:	f800283a 	ret
   1619c:	00800034 	movhi	r2,0
   161a0:	10800004 	addi	r2,r2,0
   161a4:	10002626 	beq	r2,zero,16240 <__register_exitproc+0x110>
   161a8:	01006404 	movi	r4,400
   161ac:	d9400015 	stw	r5,0(sp)
   161b0:	d9800115 	stw	r6,4(sp)
   161b4:	d9c00215 	stw	r7,8(sp)
   161b8:	00000000 	call	0 <__alt_mem_onchip_ram-0x10000>
   161bc:	d9400017 	ldw	r5,0(sp)
   161c0:	d9800117 	ldw	r6,4(sp)
   161c4:	d9c00217 	ldw	r7,8(sp)
   161c8:	10001d26 	beq	r2,zero,16240 <__register_exitproc+0x110>
   161cc:	81000017 	ldw	r4,0(r16)
   161d0:	10000115 	stw	zero,4(r2)
   161d4:	02000044 	movi	r8,1
   161d8:	22405217 	ldw	r9,328(r4)
   161dc:	0007883a 	mov	r3,zero
   161e0:	12400015 	stw	r9,0(r2)
   161e4:	20805215 	stw	r2,328(r4)
   161e8:	10006215 	stw	zero,392(r2)
   161ec:	10006315 	stw	zero,396(r2)
   161f0:	883fde26 	beq	r17,zero,1616c <__alt_data_end+0xffff616c>
   161f4:	18c9883a 	add	r4,r3,r3
   161f8:	2109883a 	add	r4,r4,r4
   161fc:	1109883a 	add	r4,r2,r4
   16200:	21802215 	stw	r6,136(r4)
   16204:	01800044 	movi	r6,1
   16208:	12406217 	ldw	r9,392(r2)
   1620c:	30cc983a 	sll	r6,r6,r3
   16210:	4992b03a 	or	r9,r9,r6
   16214:	12406215 	stw	r9,392(r2)
   16218:	21c04215 	stw	r7,264(r4)
   1621c:	01000084 	movi	r4,2
   16220:	893fd21e 	bne	r17,r4,1616c <__alt_data_end+0xffff616c>
   16224:	11006317 	ldw	r4,396(r2)
   16228:	218cb03a 	or	r6,r4,r6
   1622c:	11806315 	stw	r6,396(r2)
   16230:	003fce06 	br	1616c <__alt_data_end+0xffff616c>
   16234:	18805304 	addi	r2,r3,332
   16238:	18805215 	stw	r2,328(r3)
   1623c:	003fc606 	br	16158 <__alt_data_end+0xffff6158>
   16240:	00bfffc4 	movi	r2,-1
   16244:	003fd006 	br	16188 <__alt_data_end+0xffff6188>

00016248 <__call_exitprocs>:
   16248:	defff504 	addi	sp,sp,-44
   1624c:	df000915 	stw	fp,36(sp)
   16250:	dd400615 	stw	r21,24(sp)
   16254:	dc800315 	stw	r18,12(sp)
   16258:	dfc00a15 	stw	ra,40(sp)
   1625c:	ddc00815 	stw	r23,32(sp)
   16260:	dd800715 	stw	r22,28(sp)
   16264:	dd000515 	stw	r20,20(sp)
   16268:	dcc00415 	stw	r19,16(sp)
   1626c:	dc400215 	stw	r17,8(sp)
   16270:	dc000115 	stw	r16,4(sp)
   16274:	d9000015 	stw	r4,0(sp)
   16278:	2839883a 	mov	fp,r5
   1627c:	04800044 	movi	r18,1
   16280:	057fffc4 	movi	r21,-1
   16284:	00800074 	movhi	r2,1
   16288:	109fb104 	addi	r2,r2,32452
   1628c:	12000017 	ldw	r8,0(r2)
   16290:	45005217 	ldw	r20,328(r8)
   16294:	44c05204 	addi	r19,r8,328
   16298:	a0001c26 	beq	r20,zero,1630c <__call_exitprocs+0xc4>
   1629c:	a0800117 	ldw	r2,4(r20)
   162a0:	15ffffc4 	addi	r23,r2,-1
   162a4:	b8000d16 	blt	r23,zero,162dc <__call_exitprocs+0x94>
   162a8:	14000044 	addi	r16,r2,1
   162ac:	8421883a 	add	r16,r16,r16
   162b0:	8421883a 	add	r16,r16,r16
   162b4:	84402004 	addi	r17,r16,128
   162b8:	a463883a 	add	r17,r20,r17
   162bc:	a421883a 	add	r16,r20,r16
   162c0:	e0001e26 	beq	fp,zero,1633c <__call_exitprocs+0xf4>
   162c4:	80804017 	ldw	r2,256(r16)
   162c8:	e0801c26 	beq	fp,r2,1633c <__call_exitprocs+0xf4>
   162cc:	bdffffc4 	addi	r23,r23,-1
   162d0:	843fff04 	addi	r16,r16,-4
   162d4:	8c7fff04 	addi	r17,r17,-4
   162d8:	bd7ff91e 	bne	r23,r21,162c0 <__alt_data_end+0xffff62c0>
   162dc:	00800034 	movhi	r2,0
   162e0:	10800004 	addi	r2,r2,0
   162e4:	10000926 	beq	r2,zero,1630c <__call_exitprocs+0xc4>
   162e8:	a0800117 	ldw	r2,4(r20)
   162ec:	1000301e 	bne	r2,zero,163b0 <__call_exitprocs+0x168>
   162f0:	a0800017 	ldw	r2,0(r20)
   162f4:	10003226 	beq	r2,zero,163c0 <__call_exitprocs+0x178>
   162f8:	a009883a 	mov	r4,r20
   162fc:	98800015 	stw	r2,0(r19)
   16300:	00000000 	call	0 <__alt_mem_onchip_ram-0x10000>
   16304:	9d000017 	ldw	r20,0(r19)
   16308:	a03fe41e 	bne	r20,zero,1629c <__alt_data_end+0xffff629c>
   1630c:	dfc00a17 	ldw	ra,40(sp)
   16310:	df000917 	ldw	fp,36(sp)
   16314:	ddc00817 	ldw	r23,32(sp)
   16318:	dd800717 	ldw	r22,28(sp)
   1631c:	dd400617 	ldw	r21,24(sp)
   16320:	dd000517 	ldw	r20,20(sp)
   16324:	dcc00417 	ldw	r19,16(sp)
   16328:	dc800317 	ldw	r18,12(sp)
   1632c:	dc400217 	ldw	r17,8(sp)
   16330:	dc000117 	ldw	r16,4(sp)
   16334:	dec00b04 	addi	sp,sp,44
   16338:	f800283a 	ret
   1633c:	a0800117 	ldw	r2,4(r20)
   16340:	80c00017 	ldw	r3,0(r16)
   16344:	10bfffc4 	addi	r2,r2,-1
   16348:	15c01426 	beq	r2,r23,1639c <__call_exitprocs+0x154>
   1634c:	80000015 	stw	zero,0(r16)
   16350:	183fde26 	beq	r3,zero,162cc <__alt_data_end+0xffff62cc>
   16354:	95c8983a 	sll	r4,r18,r23
   16358:	a0806217 	ldw	r2,392(r20)
   1635c:	a5800117 	ldw	r22,4(r20)
   16360:	2084703a 	and	r2,r4,r2
   16364:	10000b26 	beq	r2,zero,16394 <__call_exitprocs+0x14c>
   16368:	a0806317 	ldw	r2,396(r20)
   1636c:	2088703a 	and	r4,r4,r2
   16370:	20000c1e 	bne	r4,zero,163a4 <__call_exitprocs+0x15c>
   16374:	89400017 	ldw	r5,0(r17)
   16378:	d9000017 	ldw	r4,0(sp)
   1637c:	183ee83a 	callr	r3
   16380:	a0800117 	ldw	r2,4(r20)
   16384:	15bfbf1e 	bne	r2,r22,16284 <__alt_data_end+0xffff6284>
   16388:	98800017 	ldw	r2,0(r19)
   1638c:	153fcf26 	beq	r2,r20,162cc <__alt_data_end+0xffff62cc>
   16390:	003fbc06 	br	16284 <__alt_data_end+0xffff6284>
   16394:	183ee83a 	callr	r3
   16398:	003ff906 	br	16380 <__alt_data_end+0xffff6380>
   1639c:	a5c00115 	stw	r23,4(r20)
   163a0:	003feb06 	br	16350 <__alt_data_end+0xffff6350>
   163a4:	89000017 	ldw	r4,0(r17)
   163a8:	183ee83a 	callr	r3
   163ac:	003ff406 	br	16380 <__alt_data_end+0xffff6380>
   163b0:	a0800017 	ldw	r2,0(r20)
   163b4:	a027883a 	mov	r19,r20
   163b8:	1029883a 	mov	r20,r2
   163bc:	003fb606 	br	16298 <__alt_data_end+0xffff6298>
   163c0:	0005883a 	mov	r2,zero
   163c4:	003ffb06 	br	163b4 <__alt_data_end+0xffff63b4>

000163c8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   163c8:	defffd04 	addi	sp,sp,-12
   163cc:	df000215 	stw	fp,8(sp)
   163d0:	df000204 	addi	fp,sp,8
   163d4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   163d8:	0001883a 	nop
   163dc:	e0bfff17 	ldw	r2,-4(fp)
   163e0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   163e4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   163e8:	10000226 	beq	r2,zero,163f4 <_exit+0x2c>
    ALT_SIM_FAIL();
   163ec:	002af070 	cmpltui	zero,zero,43969
   163f0:	00000106 	br	163f8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   163f4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   163f8:	003fff06 	br	163f8 <__alt_data_end+0xffff63f8>
