
blinky-sw.elf:     file format elf32-littlenios2
blinky-sw.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010230

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00005f6c memsz 0x00005f6c flags r-x
    LOAD off    0x00006f8c vaddr 0x00015f8c paddr 0x00017a30 align 2**12
         filesz 0x00001aa4 memsz 0x00001aa4 flags rw-
    LOAD off    0x000094d4 vaddr 0x000194d4 paddr 0x000194d4 align 2**12
         filesz 0x00000000 memsz 0x00000230 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005d04  00010230  00010230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000058  00015f34  00015f34  00006f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aa4  00015f8c  00017a30  00006f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000230  000194d4  000194d4  000094d4  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_ram   00000000  00019704  00019704  00008a30  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00008a30  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000a58  00000000  00000000  00008a58  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000179db  00000000  00000000  000094b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000064a1  00000000  00000000  00020e8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006c5c  00000000  00000000  0002732c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001984  00000000  00000000  0002df88  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002988  00000000  00000000  0002f90c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004c00  00000000  00000000  00032294  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00036e94  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000006b0  00000000  00000000  00036ea8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00039dbe  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00039dc1  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00039dc4  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00039dc5  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  00039dc6  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  00039dcf  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  00039dd8  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000006  00000000  00000000  00039de1  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000033  00000000  00000000  00039de7  2**0
                  CONTENTS, READONLY
 26 .jdi          00004428  00000000  00000000  00039e1a  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0007d354  00000000  00000000  0003e242  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010230 l    d  .text	00000000 .text
00015f34 l    d  .rodata	00000000 .rodata
00015f8c l    d  .rwdata	00000000 .rwdata
000194d4 l    d  .bss	00000000 .bss
00019704 l    d  .onchip_ram	00000000 .onchip_ram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../blinky-sw_bsp//obj/HAL/src/crt0.o
00010268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 blinky.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
00010cc4 l     F .text	00000008 __fp_unlock
00010cd8 l     F .text	0000019c __sinit.part.1
00010e74 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00015fc0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
000137b0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
000138c4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000138f0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
000139e4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00013acc l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00013bb8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_read.c
00013dd0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00017a20 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00014044 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00014180 l     F .text	00000034 alt_dev_reg
00016994 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00014458 l     F .text	0000020c altera_avalon_jtag_uart_irq
00014664 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00014de8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00015248 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000153a8 l     F .text	0000003c alt_get_errno
000153e4 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00019508 g     O .bss	00000004 alt_instruction_exception_handler
00010694 g     F .text	0000003c dealerBust
00013734 g     F .text	00000054 _isatty_r
00013cd0 g     F .text	0000007c alt_main
00010444 g     F .text	00000020 dispInstructions
00010b58 g     F .text	000000c0 _puts_r
000103cc g     F .text	00000020 init_Keys
00019604 g     O .bss	00000100 alt_irq
0001345c g     F .text	00000060 _lseek_r
00017a30 g       *ABS*	00000000 __flash_rwdata_start
00019704 g       *ABS*	00000000 __alt_heap_start
00012a10 g     F .text	0000005c __sseek
00011024 g     F .text	00000010 __sinit
00010e7c g     F .text	00000078 __sfmoreglue
00013d70 g     F .text	00000024 __malloc_unlock
000120fc g     F .text	0000015c memmove
00010358 g     F .text	00000034 update_RLED
0001100c g     F .text	00000018 _cleanup
000104d8 g     F .text	00000140 dealInitialCards
00015f8c g     O .rwdata	00000034 cardValues
0001040c g     F .text	00000020 readSwitches
00013d94 g     F .text	0000003c alt_putstr
000157d0 g     F .text	00000024 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
000136d8 g     F .text	0000005c _fstat_r
000194ec g     O .bss	00000004 errno
0001298c g     F .text	00000008 __seofread
000194dc g     O .bss	00000004 gamesPlayed
000108bc g     F .text	00000024 displayResult
000107b8 g     F .text	0000005c resetDeck
000194f4 g     O .bss	00000004 alt_argv
0001f9f4 g       *ABS*	00000000 _gp
00016814 g     O .rwdata	00000180 alt_fd_list
000157f4 g     F .text	00000090 alt_find_dev
00011fb4 g     F .text	00000148 memcpy
00010984 g     F .text	00000020 stay
00010ccc g     F .text	0000000c _cleanup_r
00010874 g     F .text	00000024 displayPlayerSum
0001532c g     F .text	0000007c alt_io_redirect
00015f34 g       *ABS*	00000000 __DTOR_END__
00010c18 g     F .text	00000014 puts
00015a50 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0001485c g     F .text	0000021c altera_avalon_jtag_uart_read
00010a9c g     F .text	00000064 .hidden __udivsi3
00013a20 g     F .text	000000ac isatty
000194e8 g     O .bss	00000004 __malloc_top_pad
00011074 g     F .text	000004c8 __sfvwrite_r
000103ec g     F .text	00000020 init_LCD
000128e4 g     F .text	00000054 _sbrk_r
00013678 g     F .text	00000060 _read_r
000106d0 g     F .text	00000058 updateBankroll
00017a18 g     O .rwdata	00000004 alt_max_fd
00012c7c g     F .text	000000f0 _fclose_r
00012ff8 g     F .text	00000030 fflush
000194e4 g     O .bss	00000004 __malloc_max_sbrked_mem
00010484 g     F .text	00000034 gameInitialization
00013bf4 g     F .text	000000dc lseek
000179f8 g     O .rwdata	00000004 _global_impure_ptr
00012380 g     F .text	00000564 _realloc_r
00019704 g       *ABS*	00000000 __bss_end
00015158 g     F .text	000000f0 alt_iic_isr_register
000156c8 g     F .text	00000108 alt_tick
00011044 g     F .text	00000018 __fp_lock_all
0001510c g     F .text	0000004c alt_ic_irq_enabled
00010774 g     F .text	00000044 updateDeck
0001562c g     F .text	0000009c alt_alarm_stop
000194fc g     O .bss	00000004 alt_irq_active
000100fc g     F .exceptions	000000d4 alt_irq_handler
000167ec g     O .rwdata	00000028 alt_dev_null
00010638 g     F .text	0000003c playerBust
00014dc8 g     F .text	00000020 alt_dcache_flush_all
0001950c g     O .bss	000000d0 cardDeck
00017a30 g       *ABS*	00000000 __ram_rwdata_end
00017a10 g     O .rwdata	00000008 alt_dev_list
00014080 g     F .text	00000100 write
00015f8c g       *ABS*	00000000 __ram_rodata_end
0001392c g     F .text	000000b8 fstat
00010814 g     F .text	00000060 translateCardValue
00010674 g     F .text	00000020 dealerTurn
00010b00 g     F .text	00000058 .hidden __umodsi3
00019704 g       *ABS*	00000000 end
00014398 g     F .text	000000c0 altera_avalon_jtag_uart_init
000101d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00015f34 g       *ABS*	00000000 __CTOR_LIST__
00020000 g       *ABS*	00000000 __alt_stack_pointer
00014a78 g     F .text	00000224 altera_avalon_jtag_uart_write
00011034 g     F .text	00000004 __sfp_lock_acquire
00011ed0 g     F .text	000000e4 memchr
000194d4 g     O .bss	00000004 dealerSum
0001314c g     F .text	00000310 _free_r
00015d80 g     F .text	00000180 __call_exitprocs
00017a00 g     O .rwdata	00000004 __malloc_sbrk_base
00010230 g     F .text	0000003c _start
00019500 g     O .bss	00000004 _alt_tick_rate
00019504 g     O .bss	00000004 _alt_nticks
0001042c g     F .text	00000018 play
00013e0c g     F .text	00000104 read
000103ac g     F .text	00000020 init_Switches
000141ec g     F .text	00000048 alt_sys_init
00015c68 g     F .text	00000118 __register_exitproc
00014704 g     F .text	00000068 altera_avalon_jtag_uart_close
00013788 g     F .text	00000028 .hidden __mulsi3
00015f8c g       *ABS*	00000000 __ram_rwdata_start
00015f34 g       *ABS*	00000000 __ram_rodata_start
000195dc g     O .bss	00000028 __malloc_current_mallinfo
00014234 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0001598c g     F .text	000000c4 alt_get_fd
00010464 g     F .text	00000020 dispBankroll
00012c28 g     F .text	00000054 _close_r
00015bec g     F .text	0000007c memcmp
000142f4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00019704 g       *ABS*	00000000 __alt_stack_base
00014344 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00012ad4 g     F .text	00000154 __swsetup_r
00010ef4 g     F .text	00000118 __sfp
000163e4 g     O .rwdata	00000408 __malloc_av_
00011040 g     F .text	00000004 __sinit_lock_release
00012938 g     F .text	00000054 __sread
00015884 g     F .text	00000108 alt_find_file
00014e24 g     F .text	000000a4 alt_dev_llist_insert
00013d4c g     F .text	00000024 __malloc_lock
00013f94 g     F .text	000000b0 sbrk
00012f9c g     F .text	0000005c _fflush_r
000194d4 g       *ABS*	00000000 __bss_start
00012258 g     F .text	00000128 memset
0001026c g     F .text	00000058 main
000194f8 g     O .bss	00000004 alt_envp
000194e0 g     O .bss	00000004 __malloc_max_total_mem
00014294 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00012a6c g     F .text	00000008 __sclose
00020000 g       *ABS*	00000000 __alt_heap_limit
00012d6c g     F .text	00000014 fclose
000116c4 g     F .text	0000080c _malloc_r
00017a1c g     O .rwdata	00000004 alt_errno
000104b8 g     F .text	00000020 playerBet
0001153c g     F .text	000000c4 _fwalk
000109a4 g     F .text	00000084 .hidden __divsi3
00013028 g     F .text	00000124 _malloc_trim_r
00015f34 g       *ABS*	00000000 __CTOR_END__
000108e0 g     F .text	000000a4 hit
00015f34 g       *ABS*	00000000 __flash_rodata_start
00015f34 g       *ABS*	00000000 __DTOR_LIST__
00010898 g     F .text	00000024 displayDealerSum
000141b4 g     F .text	00000038 alt_irq_init
00013f10 g     F .text	00000084 alt_release_fd
00015aec g     F .text	00000014 atexit
00012a74 g     F .text	00000060 _write_r
000194d8 g     O .bss	00000004 playerSum
000179fc g     O .rwdata	00000004 _impure_ptr
000194f0 g     O .bss	00000004 alt_argc
00012d80 g     F .text	0000021c __sflush_r
00014f28 g     F .text	00000060 _do_dtors
0001038c g     F .text	00000020 init_SevenSeg
00010020 g       .exceptions	00000000 alt_irq_entry
0001105c g     F .text	00000018 __fp_unlock_all
00017a08 g     O .rwdata	00000008 alt_fs_list
000179f4 g     O .rwdata	00000004 bankRoll
00010020 g       *ABS*	00000000 __ram_exceptions_start
00014fa8 g     F .text	00000050 alt_ic_isr_register
00017a30 g       *ABS*	00000000 _edata
00019704 g       *ABS*	00000000 _end
00010618 g     F .text	00000020 playerTurn
00010230 g       *ABS*	00000000 __ram_exceptions_end
0001476c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00015b38 g     F .text	0000009c _fputs_r
00015080 g     F .text	0000008c alt_ic_irq_disable
00012994 g     F .text	0000007c __swrite
00017a04 g     O .rwdata	00000004 __malloc_trim_threshold
00015b00 g     F .text	00000038 exit
00011600 g     F .text	000000c4 _fwalk_reent
00010a28 g     F .text	00000074 .hidden __modsi3
00020000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00011038 g     F .text	00000004 __sfp_lock_release
000102c4 g     F .text	00000094 update_GLED
00010728 g     F .text	0000004c generateRandomCard
00010000 g       *ABS*	00000000 __alt_mem_onchip_ram
00015f00 g     F .text	00000034 _exit
00014c9c g     F .text	0000012c alt_alarm_start
000134bc g     F .text	000001bc __smakebuf_r
00010c2c g     F .text	00000098 strlen
000154d0 g     F .text	0000015c open
00014f88 g     F .text	00000020 alt_icache_flush_all
00015bd4 g     F .text	00000018 fputs
00017a24 g     O .rwdata	00000004 alt_priority_mask
00014ff8 g     F .text	00000088 alt_ic_irq_enable
00017a28 g     O .rwdata	00000008 alt_alarm_list
00014ec8 g     F .text	00000060 _do_ctors
000137ec g     F .text	000000d8 close
00013b34 g     F .text	00000084 alt_load
0001103c g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08408c14 	ori	at,at,560
    jmp r1
   10008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	00101d00 	call	101d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defff904 	addi	sp,sp,-28
   10100:	dfc00615 	stw	ra,24(sp)
   10104:	df000515 	stw	fp,20(sp)
   10108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   1010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10110:	0005313a 	rdctl	r2,ipending
   10114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   10118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   1011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   10120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10124:	00800044 	movi	r2,1
   10128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1012c:	e0fffb17 	ldw	r3,-20(fp)
   10130:	e0bffc17 	ldw	r2,-16(fp)
   10134:	1884703a 	and	r2,r3,r2
   10138:	10001426 	beq	r2,zero,1018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1013c:	008000b4 	movhi	r2,2
   10140:	10a58104 	addi	r2,r2,-27132
   10144:	e0fffd17 	ldw	r3,-12(fp)
   10148:	180690fa 	slli	r3,r3,3
   1014c:	10c5883a 	add	r2,r2,r3
   10150:	10c00017 	ldw	r3,0(r2)
   10154:	008000b4 	movhi	r2,2
   10158:	10a58104 	addi	r2,r2,-27132
   1015c:	e13ffd17 	ldw	r4,-12(fp)
   10160:	200890fa 	slli	r4,r4,3
   10164:	1105883a 	add	r2,r2,r4
   10168:	10800104 	addi	r2,r2,4
   1016c:	10800017 	ldw	r2,0(r2)
   10170:	1009883a 	mov	r4,r2
   10174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   10178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   1017c:	0005313a 	rdctl	r2,ipending
   10180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   10184:	e0bfff17 	ldw	r2,-4(fp)
   10188:	00000706 	br	101a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   1018c:	e0bffc17 	ldw	r2,-16(fp)
   10190:	1085883a 	add	r2,r2,r2
   10194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   10198:	e0bffd17 	ldw	r2,-12(fp)
   1019c:	10800044 	addi	r2,r2,1
   101a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   101a4:	003fe106 	br	1012c <__alt_data_end+0xffff012c>

    active = alt_irq_pending ();
   101a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   101ac:	e0bffb17 	ldw	r2,-20(fp)
   101b0:	103fdb1e 	bne	r2,zero,10120 <__alt_data_end+0xffff0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   101b4:	0001883a 	nop
}
   101b8:	0001883a 	nop
   101bc:	e037883a 	mov	sp,fp
   101c0:	dfc00117 	ldw	ra,4(sp)
   101c4:	df000017 	ldw	fp,0(sp)
   101c8:	dec00204 	addi	sp,sp,8
   101cc:	f800283a 	ret

000101d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   101d0:	defffb04 	addi	sp,sp,-20
   101d4:	dfc00415 	stw	ra,16(sp)
   101d8:	df000315 	stw	fp,12(sp)
   101dc:	df000304 	addi	fp,sp,12
   101e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   101e4:	00bfffc4 	movi	r2,-1
   101e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   101ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   101f0:	d0a6c517 	ldw	r2,-25836(gp)
   101f4:	10000726 	beq	r2,zero,10214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   101f8:	d0a6c517 	ldw	r2,-25836(gp)
   101fc:	e0fffd17 	ldw	r3,-12(fp)
   10200:	e1bffe17 	ldw	r6,-8(fp)
   10204:	e17fff17 	ldw	r5,-4(fp)
   10208:	1809883a 	mov	r4,r3
   1020c:	103ee83a 	callr	r2
   10210:	00000206 	br	1021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   10218:	0005883a 	mov	r2,zero
}
   1021c:	e037883a 	mov	sp,fp
   10220:	dfc00117 	ldw	ra,4(sp)
   10224:	df000017 	ldw	fp,0(sp)
   10228:	dec00204 	addi	sp,sp,8
   1022c:	f800283a 	ret

Disassembly of section .text:

00010230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10230:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   10234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   10238:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1023c:	d6be7d14 	ori	gp,gp,63988
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10240:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10244:	10a53514 	ori	r2,r2,38100

    movhi r3, %hi(__bss_end)
   10248:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1024c:	18e5c114 	ori	r3,r3,38660

    beq r2, r3, 1f
   10250:	10c00326 	beq	r2,r3,10260 <_start+0x30>

0:
    stw zero, (r2)
   10254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   1025c:	10fffd36 	bltu	r2,r3,10254 <__alt_data_end+0xffff0254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10260:	0013b340 	call	13b34 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10264:	0013cd00 	call	13cd0 <alt_main>

00010268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10268:	003fff06 	br	10268 <__alt_data_end+0xffff0268>

0001026c <main>:
void hit(void); // KEY3
void stay(void); // KEY2


int main()
{
   1026c:	defffd04 	addi	sp,sp,-12
   10270:	dfc00215 	stw	ra,8(sp)
   10274:	df000115 	stw	fp,4(sp)
   10278:	df000104 	addi	fp,sp,4
	int switch_data;
	int key_data;
	int delay;
	int led_pattern=0x0;
   1027c:	e03fff15 	stw	zero,-4(fp)
	alt_putstr("Ciao from Nios II!\n");
   10280:	01000074 	movhi	r4,1
   10284:	2117cd04 	addi	r4,r4,24372
   10288:	0013d940 	call	13d94 <alt_putstr>
	int card_val;
	printf("start program\n");
   1028c:	01000074 	movhi	r4,1
   10290:	2117d204 	addi	r4,r4,24392
   10294:	0010c180 	call	10c18 <puts>
//			alt_putstr(msg);
//			alt_putstr("\n");



		update_GLED(IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE));
   10298:	008000b4 	movhi	r2,2
   1029c:	10840004 	addi	r2,r2,4096
   102a0:	10800037 	ldwio	r2,0(r2)
   102a4:	1009883a 	mov	r4,r2
   102a8:	00102c40 	call	102c4 <update_GLED>
		update_RLED(IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE));
   102ac:	008000b4 	movhi	r2,2
   102b0:	10843004 	addi	r2,r2,4288
   102b4:	10800037 	ldwio	r2,0(r2)
   102b8:	1009883a 	mov	r4,r2
   102bc:	00103580 	call	10358 <update_RLED>





	}
   102c0:	003ff506 	br	10298 <__alt_data_end+0xffff0298>

000102c4 <update_GLED>:
 Hardware Initialization and Updating
*************************************************************/ 

//key_data input is directly from reading
//Example function call: update_GLED(IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE));
void update_GLED(int key_data){
   102c4:	defffe04 	addi	sp,sp,-8
   102c8:	df000115 	stw	fp,4(sp)
   102cc:	df000104 	addi	fp,sp,4
   102d0:	e13fff15 	stw	r4,-4(fp)
	if(key_data == 3){
   102d4:	e0bfff17 	ldw	r2,-4(fp)
   102d8:	108000d8 	cmpnei	r2,r2,3
   102dc:	1000051e 	bne	r2,zero,102f4 <update_GLED+0x30>
		IOWR_ALTERA_AVALON_PIO_DATA(GRN_LEDS_BASE, 0x40);
   102e0:	00c01004 	movi	r3,64
   102e4:	008000b4 	movhi	r2,2
   102e8:	10840804 	addi	r2,r2,4128
   102ec:	10c00035 	stwio	r3,0(r2)
	}
	else{
		IOWR_ALTERA_AVALON_PIO_DATA(GRN_LEDS_BASE, 0x00);
	}

	return;
   102f0:	00001506 	br	10348 <update_GLED+0x84>
//Example function call: update_GLED(IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE));
void update_GLED(int key_data){
	if(key_data == 3){
		IOWR_ALTERA_AVALON_PIO_DATA(GRN_LEDS_BASE, 0x40);
	}
	else if(key_data == 5){
   102f4:	e0bfff17 	ldw	r2,-4(fp)
   102f8:	10800158 	cmpnei	r2,r2,5
   102fc:	1000051e 	bne	r2,zero,10314 <update_GLED+0x50>
		IOWR_ALTERA_AVALON_PIO_DATA(GRN_LEDS_BASE, 0x10);
   10300:	00c00404 	movi	r3,16
   10304:	008000b4 	movhi	r2,2
   10308:	10840804 	addi	r2,r2,4128
   1030c:	10c00035 	stwio	r3,0(r2)
	}
	else{
		IOWR_ALTERA_AVALON_PIO_DATA(GRN_LEDS_BASE, 0x00);
	}

	return;
   10310:	00000d06 	br	10348 <update_GLED+0x84>
		IOWR_ALTERA_AVALON_PIO_DATA(GRN_LEDS_BASE, 0x40);
	}
	else if(key_data == 5){
		IOWR_ALTERA_AVALON_PIO_DATA(GRN_LEDS_BASE, 0x10);
	}
	else if(key_data == 6){
   10314:	e0bfff17 	ldw	r2,-4(fp)
   10318:	10800198 	cmpnei	r2,r2,6
   1031c:	1000051e 	bne	r2,zero,10334 <update_GLED+0x70>
		IOWR_ALTERA_AVALON_PIO_DATA(GRN_LEDS_BASE, 0x4);
   10320:	00c00104 	movi	r3,4
   10324:	008000b4 	movhi	r2,2
   10328:	10840804 	addi	r2,r2,4128
   1032c:	10c00035 	stwio	r3,0(r2)
	}
	else{
		IOWR_ALTERA_AVALON_PIO_DATA(GRN_LEDS_BASE, 0x00);
	}

	return;
   10330:	00000506 	br	10348 <update_GLED+0x84>
	}
	else if(key_data == 6){
		IOWR_ALTERA_AVALON_PIO_DATA(GRN_LEDS_BASE, 0x4);
	}
	else{
		IOWR_ALTERA_AVALON_PIO_DATA(GRN_LEDS_BASE, 0x00);
   10334:	0007883a 	mov	r3,zero
   10338:	008000b4 	movhi	r2,2
   1033c:	10840804 	addi	r2,r2,4128
   10340:	10c00035 	stwio	r3,0(r2)
	}

	return;
   10344:	0001883a 	nop
} 
   10348:	e037883a 	mov	sp,fp
   1034c:	df000017 	ldw	fp,0(sp)
   10350:	dec00104 	addi	sp,sp,4
   10354:	f800283a 	ret

00010358 <update_RLED>:

//update the red leds with the switch states, pass in raw switch reading
//Example function call: update_RLED(IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE));
void update_RLED(int switch_data) {
   10358:	defffe04 	addi	sp,sp,-8
   1035c:	df000115 	stw	fp,4(sp)
   10360:	df000104 	addi	fp,sp,4
   10364:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(RED_LEDS_BASE, switch_data);
   10368:	008000b4 	movhi	r2,2
   1036c:	10840404 	addi	r2,r2,4112
   10370:	e0ffff17 	ldw	r3,-4(fp)
   10374:	10c00035 	stwio	r3,0(r2)
	return;
   10378:	0001883a 	nop
}
   1037c:	e037883a 	mov	sp,fp
   10380:	df000017 	ldw	fp,0(sp)
   10384:	dec00104 	addi	sp,sp,4
   10388:	f800283a 	ret

0001038c <init_SevenSeg>:
void init_SevenSeg(void) {
   1038c:	deffff04 	addi	sp,sp,-4
   10390:	df000015 	stw	fp,0(sp)
   10394:	d839883a 	mov	fp,sp
	return;
   10398:	0001883a 	nop
} 
   1039c:	e037883a 	mov	sp,fp
   103a0:	df000017 	ldw	fp,0(sp)
   103a4:	dec00104 	addi	sp,sp,4
   103a8:	f800283a 	ret

000103ac <init_Switches>:
void init_Switches(void) {
   103ac:	deffff04 	addi	sp,sp,-4
   103b0:	df000015 	stw	fp,0(sp)
   103b4:	d839883a 	mov	fp,sp
	return;
   103b8:	0001883a 	nop
}
   103bc:	e037883a 	mov	sp,fp
   103c0:	df000017 	ldw	fp,0(sp)
   103c4:	dec00104 	addi	sp,sp,4
   103c8:	f800283a 	ret

000103cc <init_Keys>:
void init_Keys(void) {
   103cc:	deffff04 	addi	sp,sp,-4
   103d0:	df000015 	stw	fp,0(sp)
   103d4:	d839883a 	mov	fp,sp
	return;
   103d8:	0001883a 	nop
}
   103dc:	e037883a 	mov	sp,fp
   103e0:	df000017 	ldw	fp,0(sp)
   103e4:	dec00104 	addi	sp,sp,4
   103e8:	f800283a 	ret

000103ec <init_LCD>:
void init_LCD(void) {
   103ec:	deffff04 	addi	sp,sp,-4
   103f0:	df000015 	stw	fp,0(sp)
   103f4:	d839883a 	mov	fp,sp
	return;
   103f8:	0001883a 	nop
}
   103fc:	e037883a 	mov	sp,fp
   10400:	df000017 	ldw	fp,0(sp)
   10404:	dec00104 	addi	sp,sp,4
   10408:	f800283a 	ret

0001040c <readSwitches>:


/************************************************************
 Game State
*************************************************************/ 
void readSwitches(void) {
   1040c:	deffff04 	addi	sp,sp,-4
   10410:	df000015 	stw	fp,0(sp)
   10414:	d839883a 	mov	fp,sp
	// play if SW0 = 1
	// display instructions if SW1 = 1 
	// display bankroll if SW2 = 1
	return;
   10418:	0001883a 	nop
}
   1041c:	e037883a 	mov	sp,fp
   10420:	df000017 	ldw	fp,0(sp)
   10424:	dec00104 	addi	sp,sp,4
   10428:	f800283a 	ret

0001042c <play>:
void play(void) {
   1042c:	defffe04 	addi	sp,sp,-8
   10430:	dfc00115 	stw	ra,4(sp)
   10434:	df000015 	stw	fp,0(sp)
   10438:	d839883a 	mov	fp,sp
	gameInitialization(); 
   1043c:	00104840 	call	10484 <gameInitialization>
		// Player Turn
		// Player Bust or Dealer Turn
		// Dealer Bust or Compare Sums
		// Update Bankroll
		// Reset Deck or Begin Next Round
	}
   10440:	003fff06 	br	10440 <__alt_data_end+0xffff0440>

00010444 <dispInstructions>:
} 
void dispInstructions(void) {
   10444:	deffff04 	addi	sp,sp,-4
   10448:	df000015 	stw	fp,0(sp)
   1044c:	d839883a 	mov	fp,sp
	return;
   10450:	0001883a 	nop
} 
   10454:	e037883a 	mov	sp,fp
   10458:	df000017 	ldw	fp,0(sp)
   1045c:	dec00104 	addi	sp,sp,4
   10460:	f800283a 	ret

00010464 <dispBankroll>:
void dispBankroll(void) {
   10464:	deffff04 	addi	sp,sp,-4
   10468:	df000015 	stw	fp,0(sp)
   1046c:	d839883a 	mov	fp,sp
	return;
   10470:	0001883a 	nop
} 
   10474:	e037883a 	mov	sp,fp
   10478:	df000017 	ldw	fp,0(sp)
   1047c:	dec00104 	addi	sp,sp,4
   10480:	f800283a 	ret

00010484 <gameInitialization>:


/************************************************************
 Game Flow
*************************************************************/ 
void gameInitialization(void) {
   10484:	deffff04 	addi	sp,sp,-4
   10488:	df000015 	stw	fp,0(sp)
   1048c:	d839883a 	mov	fp,sp
	bankRoll = 1000;
   10490:	0080fa04 	movi	r2,1000
   10494:	d0a00015 	stw	r2,-32768(gp)
	dealerSum = 0; 
   10498:	d026b815 	stw	zero,-25888(gp)
	playerSum = 0; 
   1049c:	d026b915 	stw	zero,-25884(gp)
	gamesPlayed = 0;  
   104a0:	d026ba15 	stw	zero,-25880(gp)
}  
   104a4:	0001883a 	nop
   104a8:	e037883a 	mov	sp,fp
   104ac:	df000017 	ldw	fp,0(sp)
   104b0:	dec00104 	addi	sp,sp,4
   104b4:	f800283a 	ret

000104b8 <playerBet>:
void playerBet(void) {
   104b8:	deffff04 	addi	sp,sp,-4
   104bc:	df000015 	stw	fp,0(sp)
   104c0:	d839883a 	mov	fp,sp
	// Wait for KEY0 to be pressed
	// Read Values on Switch
	// Translate Values to DEC.
	return;
   104c4:	0001883a 	nop
} 
   104c8:	e037883a 	mov	sp,fp
   104cc:	df000017 	ldw	fp,0(sp)
   104d0:	dec00104 	addi	sp,sp,4
   104d4:	f800283a 	ret

000104d8 <dealInitialCards>:
void dealInitialCards(void) {
   104d8:	defffb04 	addi	sp,sp,-20
   104dc:	dfc00415 	stw	ra,16(sp)
   104e0:	df000315 	stw	fp,12(sp)
   104e4:	df000304 	addi	fp,sp,12
	// Dealer First Card Shown
	int tempCard = generateRandomCard(); 
   104e8:	00107280 	call	10728 <generateRandomCard>
   104ec:	e0bffd15 	stw	r2,-12(fp)
	while(cardDeck[tempCard] == 1) {
   104f0:	00000206 	br	104fc <dealInitialCards+0x24>
		tempCard = generateRandomCard(); 
   104f4:	00107280 	call	10728 <generateRandomCard>
   104f8:	e0bffd15 	stw	r2,-12(fp)
	return;
} 
void dealInitialCards(void) {
	// Dealer First Card Shown
	int tempCard = generateRandomCard(); 
	while(cardDeck[tempCard] == 1) {
   104fc:	008000b4 	movhi	r2,2
   10500:	10a54304 	addi	r2,r2,-27380
   10504:	e0fffd17 	ldw	r3,-12(fp)
   10508:	18c7883a 	add	r3,r3,r3
   1050c:	18c7883a 	add	r3,r3,r3
   10510:	10c5883a 	add	r2,r2,r3
   10514:	10800017 	ldw	r2,0(r2)
   10518:	10800060 	cmpeqi	r2,r2,1
   1051c:	103ff51e 	bne	r2,zero,104f4 <__alt_data_end+0xffff04f4>
		tempCard = generateRandomCard(); 
	}
	updateDeck(tempCard);
   10520:	e13ffd17 	ldw	r4,-12(fp)
   10524:	00107740 	call	10774 <updateDeck>
	int cardValue = translateCardValue(cardValues[tempCard]);
   10528:	00800074 	movhi	r2,1
   1052c:	1097e304 	addi	r2,r2,24460
   10530:	e0fffd17 	ldw	r3,-12(fp)
   10534:	10c5883a 	add	r2,r2,r3
   10538:	10800003 	ldbu	r2,0(r2)
   1053c:	10803fcc 	andi	r2,r2,255
   10540:	1080201c 	xori	r2,r2,128
   10544:	10bfe004 	addi	r2,r2,-128
   10548:	1009883a 	mov	r4,r2
   1054c:	00108140 	call	10814 <translateCardValue>
   10550:	e0bfff15 	stw	r2,-4(fp)
	dealerSum = dealerSum + cardValue; 
   10554:	d0e6b817 	ldw	r3,-25888(gp)
   10558:	e0bfff17 	ldw	r2,-4(fp)
   1055c:	1885883a 	add	r2,r3,r2
   10560:	d0a6b815 	stw	r2,-25888(gp)

	// Player First Two Cards
	for (int i = 0; i < 2; i++) {
   10564:	e03ffe15 	stw	zero,-8(fp)
   10568:	00002206 	br	105f4 <dealInitialCards+0x11c>
		tempCard = generateRandomCard(); 
   1056c:	00107280 	call	10728 <generateRandomCard>
   10570:	e0bffd15 	stw	r2,-12(fp)
		while(cardDeck[tempCard] == 1) {
   10574:	00000206 	br	10580 <dealInitialCards+0xa8>
			tempCard = generateRandomCard(); 
   10578:	00107280 	call	10728 <generateRandomCard>
   1057c:	e0bffd15 	stw	r2,-12(fp)
	dealerSum = dealerSum + cardValue; 

	// Player First Two Cards
	for (int i = 0; i < 2; i++) {
		tempCard = generateRandomCard(); 
		while(cardDeck[tempCard] == 1) {
   10580:	008000b4 	movhi	r2,2
   10584:	10a54304 	addi	r2,r2,-27380
   10588:	e0fffd17 	ldw	r3,-12(fp)
   1058c:	18c7883a 	add	r3,r3,r3
   10590:	18c7883a 	add	r3,r3,r3
   10594:	10c5883a 	add	r2,r2,r3
   10598:	10800017 	ldw	r2,0(r2)
   1059c:	10800060 	cmpeqi	r2,r2,1
   105a0:	103ff51e 	bne	r2,zero,10578 <__alt_data_end+0xffff0578>
			tempCard = generateRandomCard(); 
		}
		updateDeck(tempCard);
   105a4:	e13ffd17 	ldw	r4,-12(fp)
   105a8:	00107740 	call	10774 <updateDeck>
		cardValue = translateCardValue(cardValues[tempCard]);
   105ac:	00800074 	movhi	r2,1
   105b0:	1097e304 	addi	r2,r2,24460
   105b4:	e0fffd17 	ldw	r3,-12(fp)
   105b8:	10c5883a 	add	r2,r2,r3
   105bc:	10800003 	ldbu	r2,0(r2)
   105c0:	10803fcc 	andi	r2,r2,255
   105c4:	1080201c 	xori	r2,r2,128
   105c8:	10bfe004 	addi	r2,r2,-128
   105cc:	1009883a 	mov	r4,r2
   105d0:	00108140 	call	10814 <translateCardValue>
   105d4:	e0bfff15 	stw	r2,-4(fp)
		playerSum = dealerSum + cardValue;
   105d8:	d0e6b817 	ldw	r3,-25888(gp)
   105dc:	e0bfff17 	ldw	r2,-4(fp)
   105e0:	1885883a 	add	r2,r3,r2
   105e4:	d0a6b915 	stw	r2,-25884(gp)
	updateDeck(tempCard);
	int cardValue = translateCardValue(cardValues[tempCard]);
	dealerSum = dealerSum + cardValue; 

	// Player First Two Cards
	for (int i = 0; i < 2; i++) {
   105e8:	e0bffe17 	ldw	r2,-8(fp)
   105ec:	10800044 	addi	r2,r2,1
   105f0:	e0bffe15 	stw	r2,-8(fp)
   105f4:	e0bffe17 	ldw	r2,-8(fp)
   105f8:	10800090 	cmplti	r2,r2,2
   105fc:	103fdb1e 	bne	r2,zero,1056c <__alt_data_end+0xffff056c>
		}
		updateDeck(tempCard);
		cardValue = translateCardValue(cardValues[tempCard]);
		playerSum = dealerSum + cardValue;
	}
	return;
   10600:	0001883a 	nop
} 
   10604:	e037883a 	mov	sp,fp
   10608:	dfc00117 	ldw	ra,4(sp)
   1060c:	df000017 	ldw	fp,0(sp)
   10610:	dec00204 	addi	sp,sp,8
   10614:	f800283a 	ret

00010618 <playerTurn>:
void playerTurn(void) {
   10618:	deffff04 	addi	sp,sp,-4
   1061c:	df000015 	stw	fp,0(sp)
   10620:	d839883a 	mov	fp,sp
	// Wait for Key Press (hit or stay)
	// Calculate
	// Bust?
	// Wait for Key Press...
	return;
   10624:	0001883a 	nop
} 
   10628:	e037883a 	mov	sp,fp
   1062c:	df000017 	ldw	fp,0(sp)
   10630:	dec00104 	addi	sp,sp,4
   10634:	f800283a 	ret

00010638 <playerBust>:
int playerBust(int playerSum) {
   10638:	defffd04 	addi	sp,sp,-12
   1063c:	df000215 	stw	fp,8(sp)
   10640:	df000204 	addi	fp,sp,8
   10644:	e13fff15 	stw	r4,-4(fp)
	// Check if Player sum <= 21
	int busted = 0;
   10648:	e03ffe15 	stw	zero,-8(fp)
	if (playerSum > 21) {
   1064c:	e0bfff17 	ldw	r2,-4(fp)
   10650:	10800590 	cmplti	r2,r2,22
   10654:	1000021e 	bne	r2,zero,10660 <playerBust+0x28>
		busted = 1; 
   10658:	00800044 	movi	r2,1
   1065c:	e0bffe15 	stw	r2,-8(fp)
	}
	return busted;
   10660:	e0bffe17 	ldw	r2,-8(fp)
} 
   10664:	e037883a 	mov	sp,fp
   10668:	df000017 	ldw	fp,0(sp)
   1066c:	dec00104 	addi	sp,sp,4
   10670:	f800283a 	ret

00010674 <dealerTurn>:
void dealerTurn(void) {
   10674:	deffff04 	addi	sp,sp,-4
   10678:	df000015 	stw	fp,0(sp)
   1067c:	d839883a 	mov	fp,sp
	// Automatic cycle
	// Implement wait time for each card
	return; 
   10680:	0001883a 	nop
} 
   10684:	e037883a 	mov	sp,fp
   10688:	df000017 	ldw	fp,0(sp)
   1068c:	dec00104 	addi	sp,sp,4
   10690:	f800283a 	ret

00010694 <dealerBust>:
int dealerBust(int dealerSum) {
   10694:	defffd04 	addi	sp,sp,-12
   10698:	df000215 	stw	fp,8(sp)
   1069c:	df000204 	addi	fp,sp,8
   106a0:	e13fff15 	stw	r4,-4(fp)
	// Check if Dealer sum <= 21
	int busted = 0;
   106a4:	e03ffe15 	stw	zero,-8(fp)
	if (dealerSum > 21) {
   106a8:	e0bfff17 	ldw	r2,-4(fp)
   106ac:	10800590 	cmplti	r2,r2,22
   106b0:	1000021e 	bne	r2,zero,106bc <dealerBust+0x28>
		busted = 1; 
   106b4:	00800044 	movi	r2,1
   106b8:	e0bffe15 	stw	r2,-8(fp)
	}
	return busted;
   106bc:	e0bffe17 	ldw	r2,-8(fp)
} 
   106c0:	e037883a 	mov	sp,fp
   106c4:	df000017 	ldw	fp,0(sp)
   106c8:	dec00104 	addi	sp,sp,4
   106cc:	f800283a 	ret

000106d0 <updateBankroll>:
void updateBankroll(int busted, int playerBet) {
   106d0:	defffd04 	addi	sp,sp,-12
   106d4:	df000215 	stw	fp,8(sp)
   106d8:	df000204 	addi	fp,sp,8
   106dc:	e13ffe15 	stw	r4,-8(fp)
   106e0:	e17fff15 	stw	r5,-4(fp)
	if (busted == 1) {
   106e4:	e0bffe17 	ldw	r2,-8(fp)
   106e8:	10800058 	cmpnei	r2,r2,1
   106ec:	1000051e 	bne	r2,zero,10704 <updateBankroll+0x34>
		if (playerBet >= bankRoll) {
			// TODO: GAME OVERRRRRRRRRRRRR
		}
		bankRoll = bankRoll - playerBet; 
   106f0:	d0e00017 	ldw	r3,-32768(gp)
   106f4:	e0bfff17 	ldw	r2,-4(fp)
   106f8:	1885c83a 	sub	r2,r3,r2
   106fc:	d0a00015 	stw	r2,-32768(gp)
	}
	else {
		bankRoll = bankRoll + playerBet; 
	}
	return; 
   10700:	00000506 	br	10718 <updateBankroll+0x48>
			// TODO: GAME OVERRRRRRRRRRRRR
		}
		bankRoll = bankRoll - playerBet; 
	}
	else {
		bankRoll = bankRoll + playerBet; 
   10704:	d0e00017 	ldw	r3,-32768(gp)
   10708:	e0bfff17 	ldw	r2,-4(fp)
   1070c:	1885883a 	add	r2,r3,r2
   10710:	d0a00015 	stw	r2,-32768(gp)
	}
	return; 
   10714:	0001883a 	nop
} 
   10718:	e037883a 	mov	sp,fp
   1071c:	df000017 	ldw	fp,0(sp)
   10720:	dec00104 	addi	sp,sp,4
   10724:	f800283a 	ret

00010728 <generateRandomCard>:


/************************************************************
 Game Functionality
*************************************************************/ 
int generateRandomCard(void) {
   10728:	defffd04 	addi	sp,sp,-12
   1072c:	dfc00215 	stw	ra,8(sp)
   10730:	df000115 	stw	fp,4(sp)
   10734:	df000104 	addi	fp,sp,4
	int random_num = IORD_ALTERA_AVALON_PIO_DATA(RANDOMS_BASE);
   10738:	008000b4 	movhi	r2,2
   1073c:	10842804 	addi	r2,r2,4256
   10740:	10800037 	ldwio	r2,0(r2)
   10744:	e0bfff15 	stw	r2,-4(fp)
	return abs(random_num %52);
   10748:	e0bfff17 	ldw	r2,-4(fp)
   1074c:	01400d04 	movi	r5,52
   10750:	1009883a 	mov	r4,r2
   10754:	0010a280 	call	10a28 <__modsi3>
   10758:	1000010e 	bge	r2,zero,10760 <generateRandomCard+0x38>
   1075c:	0085c83a 	sub	r2,zero,r2
} 
   10760:	e037883a 	mov	sp,fp
   10764:	dfc00117 	ldw	ra,4(sp)
   10768:	df000017 	ldw	fp,0(sp)
   1076c:	dec00204 	addi	sp,sp,8
   10770:	f800283a 	ret

00010774 <updateDeck>:
void updateDeck(int cardIdx) {
   10774:	defffe04 	addi	sp,sp,-8
   10778:	df000115 	stw	fp,4(sp)
   1077c:	df000104 	addi	fp,sp,4
   10780:	e13fff15 	stw	r4,-4(fp)
	// set 0 -> 1 in cardDeck array
	cardDeck[cardIdx] = 1; 
   10784:	008000b4 	movhi	r2,2
   10788:	10a54304 	addi	r2,r2,-27380
   1078c:	e0ffff17 	ldw	r3,-4(fp)
   10790:	18c7883a 	add	r3,r3,r3
   10794:	18c7883a 	add	r3,r3,r3
   10798:	10c5883a 	add	r2,r2,r3
   1079c:	00c00044 	movi	r3,1
   107a0:	10c00015 	stw	r3,0(r2)
	return;
   107a4:	0001883a 	nop
} 
   107a8:	e037883a 	mov	sp,fp
   107ac:	df000017 	ldw	fp,0(sp)
   107b0:	dec00104 	addi	sp,sp,4
   107b4:	f800283a 	ret

000107b8 <resetDeck>:
void resetDeck(void) {
   107b8:	defffe04 	addi	sp,sp,-8
   107bc:	df000115 	stw	fp,4(sp)
   107c0:	df000104 	addi	fp,sp,4
	// set all indicies of cardDeck array back to 0
	for (int i = 0; i < 52; i++) {
   107c4:	e03fff15 	stw	zero,-4(fp)
   107c8:	00000a06 	br	107f4 <resetDeck+0x3c>
		cardDeck[i] = 0; 
   107cc:	008000b4 	movhi	r2,2
   107d0:	10a54304 	addi	r2,r2,-27380
   107d4:	e0ffff17 	ldw	r3,-4(fp)
   107d8:	18c7883a 	add	r3,r3,r3
   107dc:	18c7883a 	add	r3,r3,r3
   107e0:	10c5883a 	add	r2,r2,r3
   107e4:	10000015 	stw	zero,0(r2)
	cardDeck[cardIdx] = 1; 
	return;
} 
void resetDeck(void) {
	// set all indicies of cardDeck array back to 0
	for (int i = 0; i < 52; i++) {
   107e8:	e0bfff17 	ldw	r2,-4(fp)
   107ec:	10800044 	addi	r2,r2,1
   107f0:	e0bfff15 	stw	r2,-4(fp)
   107f4:	e0bfff17 	ldw	r2,-4(fp)
   107f8:	10800d10 	cmplti	r2,r2,52
   107fc:	103ff31e 	bne	r2,zero,107cc <__alt_data_end+0xffff07cc>
		cardDeck[i] = 0; 
	}
	return;
   10800:	0001883a 	nop
} 
   10804:	e037883a 	mov	sp,fp
   10808:	df000017 	ldw	fp,0(sp)
   1080c:	dec00104 	addi	sp,sp,4
   10810:	f800283a 	ret

00010814 <translateCardValue>:
int translateCardValue(int cardIdx) {
   10814:	defffd04 	addi	sp,sp,-12
   10818:	df000215 	stw	fp,8(sp)
   1081c:	df000204 	addi	fp,sp,8
   10820:	e13fff15 	stw	r4,-4(fp)
	int cardValue = (int)(cardValues[cardIdx] - '0'); 
   10824:	00800074 	movhi	r2,1
   10828:	1097e304 	addi	r2,r2,24460
   1082c:	e0ffff17 	ldw	r3,-4(fp)
   10830:	10c5883a 	add	r2,r2,r3
   10834:	10800003 	ldbu	r2,0(r2)
   10838:	10803fcc 	andi	r2,r2,255
   1083c:	1080201c 	xori	r2,r2,128
   10840:	10bfe004 	addi	r2,r2,-128
   10844:	10bff404 	addi	r2,r2,-48
   10848:	e0bffe15 	stw	r2,-8(fp)
	if (cardValue > 11) {
   1084c:	e0bffe17 	ldw	r2,-8(fp)
   10850:	10800310 	cmplti	r2,r2,12
   10854:	1000021e 	bne	r2,zero,10860 <translateCardValue+0x4c>
		cardValue = 10; 
   10858:	00800284 	movi	r2,10
   1085c:	e0bffe15 	stw	r2,-8(fp)
	}
	return cardValue; 
   10860:	e0bffe17 	ldw	r2,-8(fp)
}
   10864:	e037883a 	mov	sp,fp
   10868:	df000017 	ldw	fp,0(sp)
   1086c:	dec00104 	addi	sp,sp,4
   10870:	f800283a 	ret

00010874 <displayPlayerSum>:
void displayPlayerSum(int playerSum) {
   10874:	defffe04 	addi	sp,sp,-8
   10878:	df000115 	stw	fp,4(sp)
   1087c:	df000104 	addi	fp,sp,4
   10880:	e13fff15 	stw	r4,-4(fp)
	// display sum to HEX7 and HEX6 on seven seg display
	return;
   10884:	0001883a 	nop
} 
   10888:	e037883a 	mov	sp,fp
   1088c:	df000017 	ldw	fp,0(sp)
   10890:	dec00104 	addi	sp,sp,4
   10894:	f800283a 	ret

00010898 <displayDealerSum>:
void displayDealerSum(int dealerSum) {
   10898:	defffe04 	addi	sp,sp,-8
   1089c:	df000115 	stw	fp,4(sp)
   108a0:	df000104 	addi	fp,sp,4
   108a4:	e13fff15 	stw	r4,-4(fp)
	// display sum to HEX5 and HEX4 on seven seg display
	return;
   108a8:	0001883a 	nop
} 
   108ac:	e037883a 	mov	sp,fp
   108b0:	df000017 	ldw	fp,0(sp)
   108b4:	dec00104 	addi	sp,sp,4
   108b8:	f800283a 	ret

000108bc <displayResult>:
void displayResult(int result) {
   108bc:	defffe04 	addi	sp,sp,-8
   108c0:	df000115 	stw	fp,4(sp)
   108c4:	df000104 	addi	fp,sp,4
   108c8:	e13fff15 	stw	r4,-4(fp)
	// display message on LCD
	if (result == 1) { // WIN
		return; 
	}
	else { // LOSE
		return; 
   108cc:	0001883a 	nop
	}
	return;
}
   108d0:	e037883a 	mov	sp,fp
   108d4:	df000017 	ldw	fp,0(sp)
   108d8:	dec00104 	addi	sp,sp,4
   108dc:	f800283a 	ret

000108e0 <hit>:


/************************************************************
 Player Actions
*************************************************************/ 
void hit(void) {
   108e0:	defffc04 	addi	sp,sp,-16
   108e4:	dfc00315 	stw	ra,12(sp)
   108e8:	df000215 	stw	fp,8(sp)
   108ec:	df000204 	addi	fp,sp,8
	// Generate Random Card
	int card = generateRandomCard(); 
   108f0:	00107280 	call	10728 <generateRandomCard>
   108f4:	e0bffe15 	stw	r2,-8(fp)

	// Check and Update Deck
	while(cardDeck[card] == 1) {
   108f8:	00000206 	br	10904 <hit+0x24>
		card = generateRandomCard(); 
   108fc:	00107280 	call	10728 <generateRandomCard>
   10900:	e0bffe15 	stw	r2,-8(fp)
void hit(void) {
	// Generate Random Card
	int card = generateRandomCard(); 

	// Check and Update Deck
	while(cardDeck[card] == 1) {
   10904:	008000b4 	movhi	r2,2
   10908:	10a54304 	addi	r2,r2,-27380
   1090c:	e0fffe17 	ldw	r3,-8(fp)
   10910:	18c7883a 	add	r3,r3,r3
   10914:	18c7883a 	add	r3,r3,r3
   10918:	10c5883a 	add	r2,r2,r3
   1091c:	10800017 	ldw	r2,0(r2)
   10920:	10800060 	cmpeqi	r2,r2,1
   10924:	103ff51e 	bne	r2,zero,108fc <__alt_data_end+0xffff08fc>
		card = generateRandomCard(); 
	}
	updateDeck(card);
   10928:	e13ffe17 	ldw	r4,-8(fp)
   1092c:	00107740 	call	10774 <updateDeck>

	// Char to Int
	int cardValue = translateCardValue(cardValues[card]);
   10930:	00800074 	movhi	r2,1
   10934:	1097e304 	addi	r2,r2,24460
   10938:	e0fffe17 	ldw	r3,-8(fp)
   1093c:	10c5883a 	add	r2,r2,r3
   10940:	10800003 	ldbu	r2,0(r2)
   10944:	10803fcc 	andi	r2,r2,255
   10948:	1080201c 	xori	r2,r2,128
   1094c:	10bfe004 	addi	r2,r2,-128
   10950:	1009883a 	mov	r4,r2
   10954:	00108140 	call	10814 <translateCardValue>
   10958:	e0bfff15 	stw	r2,-4(fp)

	// Update playerSum
	playerSum = playerSum + cardValue;
   1095c:	d0e6b917 	ldw	r3,-25884(gp)
   10960:	e0bfff17 	ldw	r2,-4(fp)
   10964:	1885883a 	add	r2,r3,r2
   10968:	d0a6b915 	stw	r2,-25884(gp)
	return;
   1096c:	0001883a 	nop
} 
   10970:	e037883a 	mov	sp,fp
   10974:	dfc00117 	ldw	ra,4(sp)
   10978:	df000017 	ldw	fp,0(sp)
   1097c:	dec00204 	addi	sp,sp,8
   10980:	f800283a 	ret

00010984 <stay>:
void stay(void) { // Nothing Happens
   10984:	deffff04 	addi	sp,sp,-4
   10988:	df000015 	stw	fp,0(sp)
   1098c:	d839883a 	mov	fp,sp
	return;
   10990:	0001883a 	nop
}
   10994:	e037883a 	mov	sp,fp
   10998:	df000017 	ldw	fp,0(sp)
   1099c:	dec00104 	addi	sp,sp,4
   109a0:	f800283a 	ret

000109a4 <__divsi3>:
   109a4:	20001b16 	blt	r4,zero,10a14 <__divsi3+0x70>
   109a8:	000f883a 	mov	r7,zero
   109ac:	28001616 	blt	r5,zero,10a08 <__divsi3+0x64>
   109b0:	200d883a 	mov	r6,r4
   109b4:	29001a2e 	bgeu	r5,r4,10a20 <__divsi3+0x7c>
   109b8:	00800804 	movi	r2,32
   109bc:	00c00044 	movi	r3,1
   109c0:	00000106 	br	109c8 <__divsi3+0x24>
   109c4:	10000d26 	beq	r2,zero,109fc <__divsi3+0x58>
   109c8:	294b883a 	add	r5,r5,r5
   109cc:	10bfffc4 	addi	r2,r2,-1
   109d0:	18c7883a 	add	r3,r3,r3
   109d4:	293ffb36 	bltu	r5,r4,109c4 <__alt_data_end+0xffff09c4>
   109d8:	0005883a 	mov	r2,zero
   109dc:	18000726 	beq	r3,zero,109fc <__divsi3+0x58>
   109e0:	0005883a 	mov	r2,zero
   109e4:	31400236 	bltu	r6,r5,109f0 <__divsi3+0x4c>
   109e8:	314dc83a 	sub	r6,r6,r5
   109ec:	10c4b03a 	or	r2,r2,r3
   109f0:	1806d07a 	srli	r3,r3,1
   109f4:	280ad07a 	srli	r5,r5,1
   109f8:	183ffa1e 	bne	r3,zero,109e4 <__alt_data_end+0xffff09e4>
   109fc:	38000126 	beq	r7,zero,10a04 <__divsi3+0x60>
   10a00:	0085c83a 	sub	r2,zero,r2
   10a04:	f800283a 	ret
   10a08:	014bc83a 	sub	r5,zero,r5
   10a0c:	39c0005c 	xori	r7,r7,1
   10a10:	003fe706 	br	109b0 <__alt_data_end+0xffff09b0>
   10a14:	0109c83a 	sub	r4,zero,r4
   10a18:	01c00044 	movi	r7,1
   10a1c:	003fe306 	br	109ac <__alt_data_end+0xffff09ac>
   10a20:	00c00044 	movi	r3,1
   10a24:	003fee06 	br	109e0 <__alt_data_end+0xffff09e0>

00010a28 <__modsi3>:
   10a28:	20001716 	blt	r4,zero,10a88 <__modsi3+0x60>
   10a2c:	000f883a 	mov	r7,zero
   10a30:	2005883a 	mov	r2,r4
   10a34:	28001216 	blt	r5,zero,10a80 <__modsi3+0x58>
   10a38:	2900162e 	bgeu	r5,r4,10a94 <__modsi3+0x6c>
   10a3c:	01800804 	movi	r6,32
   10a40:	00c00044 	movi	r3,1
   10a44:	00000106 	br	10a4c <__modsi3+0x24>
   10a48:	30000a26 	beq	r6,zero,10a74 <__modsi3+0x4c>
   10a4c:	294b883a 	add	r5,r5,r5
   10a50:	31bfffc4 	addi	r6,r6,-1
   10a54:	18c7883a 	add	r3,r3,r3
   10a58:	293ffb36 	bltu	r5,r4,10a48 <__alt_data_end+0xffff0a48>
   10a5c:	18000526 	beq	r3,zero,10a74 <__modsi3+0x4c>
   10a60:	1806d07a 	srli	r3,r3,1
   10a64:	11400136 	bltu	r2,r5,10a6c <__modsi3+0x44>
   10a68:	1145c83a 	sub	r2,r2,r5
   10a6c:	280ad07a 	srli	r5,r5,1
   10a70:	183ffb1e 	bne	r3,zero,10a60 <__alt_data_end+0xffff0a60>
   10a74:	38000126 	beq	r7,zero,10a7c <__modsi3+0x54>
   10a78:	0085c83a 	sub	r2,zero,r2
   10a7c:	f800283a 	ret
   10a80:	014bc83a 	sub	r5,zero,r5
   10a84:	003fec06 	br	10a38 <__alt_data_end+0xffff0a38>
   10a88:	0109c83a 	sub	r4,zero,r4
   10a8c:	01c00044 	movi	r7,1
   10a90:	003fe706 	br	10a30 <__alt_data_end+0xffff0a30>
   10a94:	00c00044 	movi	r3,1
   10a98:	003ff106 	br	10a60 <__alt_data_end+0xffff0a60>

00010a9c <__udivsi3>:
   10a9c:	200d883a 	mov	r6,r4
   10aa0:	2900152e 	bgeu	r5,r4,10af8 <__udivsi3+0x5c>
   10aa4:	28001416 	blt	r5,zero,10af8 <__udivsi3+0x5c>
   10aa8:	00800804 	movi	r2,32
   10aac:	00c00044 	movi	r3,1
   10ab0:	00000206 	br	10abc <__udivsi3+0x20>
   10ab4:	10000e26 	beq	r2,zero,10af0 <__udivsi3+0x54>
   10ab8:	28000516 	blt	r5,zero,10ad0 <__udivsi3+0x34>
   10abc:	294b883a 	add	r5,r5,r5
   10ac0:	10bfffc4 	addi	r2,r2,-1
   10ac4:	18c7883a 	add	r3,r3,r3
   10ac8:	293ffa36 	bltu	r5,r4,10ab4 <__alt_data_end+0xffff0ab4>
   10acc:	18000826 	beq	r3,zero,10af0 <__udivsi3+0x54>
   10ad0:	0005883a 	mov	r2,zero
   10ad4:	31400236 	bltu	r6,r5,10ae0 <__udivsi3+0x44>
   10ad8:	314dc83a 	sub	r6,r6,r5
   10adc:	10c4b03a 	or	r2,r2,r3
   10ae0:	1806d07a 	srli	r3,r3,1
   10ae4:	280ad07a 	srli	r5,r5,1
   10ae8:	183ffa1e 	bne	r3,zero,10ad4 <__alt_data_end+0xffff0ad4>
   10aec:	f800283a 	ret
   10af0:	0005883a 	mov	r2,zero
   10af4:	f800283a 	ret
   10af8:	00c00044 	movi	r3,1
   10afc:	003ff406 	br	10ad0 <__alt_data_end+0xffff0ad0>

00010b00 <__umodsi3>:
   10b00:	2005883a 	mov	r2,r4
   10b04:	2900122e 	bgeu	r5,r4,10b50 <__umodsi3+0x50>
   10b08:	28001116 	blt	r5,zero,10b50 <__umodsi3+0x50>
   10b0c:	01800804 	movi	r6,32
   10b10:	00c00044 	movi	r3,1
   10b14:	00000206 	br	10b20 <__umodsi3+0x20>
   10b18:	30000c26 	beq	r6,zero,10b4c <__umodsi3+0x4c>
   10b1c:	28000516 	blt	r5,zero,10b34 <__umodsi3+0x34>
   10b20:	294b883a 	add	r5,r5,r5
   10b24:	31bfffc4 	addi	r6,r6,-1
   10b28:	18c7883a 	add	r3,r3,r3
   10b2c:	293ffa36 	bltu	r5,r4,10b18 <__alt_data_end+0xffff0b18>
   10b30:	18000626 	beq	r3,zero,10b4c <__umodsi3+0x4c>
   10b34:	1806d07a 	srli	r3,r3,1
   10b38:	11400136 	bltu	r2,r5,10b40 <__umodsi3+0x40>
   10b3c:	1145c83a 	sub	r2,r2,r5
   10b40:	280ad07a 	srli	r5,r5,1
   10b44:	183ffb1e 	bne	r3,zero,10b34 <__alt_data_end+0xffff0b34>
   10b48:	f800283a 	ret
   10b4c:	f800283a 	ret
   10b50:	00c00044 	movi	r3,1
   10b54:	003ff706 	br	10b34 <__alt_data_end+0xffff0b34>

00010b58 <_puts_r>:
   10b58:	defff604 	addi	sp,sp,-40
   10b5c:	dc000715 	stw	r16,28(sp)
   10b60:	2021883a 	mov	r16,r4
   10b64:	2809883a 	mov	r4,r5
   10b68:	dc400815 	stw	r17,32(sp)
   10b6c:	dfc00915 	stw	ra,36(sp)
   10b70:	2823883a 	mov	r17,r5
   10b74:	0010c2c0 	call	10c2c <strlen>
   10b78:	10c00044 	addi	r3,r2,1
   10b7c:	d8800115 	stw	r2,4(sp)
   10b80:	00800074 	movhi	r2,1
   10b84:	1097d604 	addi	r2,r2,24408
   10b88:	d8800215 	stw	r2,8(sp)
   10b8c:	00800044 	movi	r2,1
   10b90:	d8800315 	stw	r2,12(sp)
   10b94:	00800084 	movi	r2,2
   10b98:	dc400015 	stw	r17,0(sp)
   10b9c:	d8c00615 	stw	r3,24(sp)
   10ba0:	dec00415 	stw	sp,16(sp)
   10ba4:	d8800515 	stw	r2,20(sp)
   10ba8:	80000226 	beq	r16,zero,10bb4 <_puts_r+0x5c>
   10bac:	80800e17 	ldw	r2,56(r16)
   10bb0:	10001426 	beq	r2,zero,10c04 <_puts_r+0xac>
   10bb4:	81400217 	ldw	r5,8(r16)
   10bb8:	2880030b 	ldhu	r2,12(r5)
   10bbc:	10c8000c 	andi	r3,r2,8192
   10bc0:	1800061e 	bne	r3,zero,10bdc <_puts_r+0x84>
   10bc4:	29001917 	ldw	r4,100(r5)
   10bc8:	00f7ffc4 	movi	r3,-8193
   10bcc:	10880014 	ori	r2,r2,8192
   10bd0:	20c6703a 	and	r3,r4,r3
   10bd4:	2880030d 	sth	r2,12(r5)
   10bd8:	28c01915 	stw	r3,100(r5)
   10bdc:	d9800404 	addi	r6,sp,16
   10be0:	8009883a 	mov	r4,r16
   10be4:	00110740 	call	11074 <__sfvwrite_r>
   10be8:	1000091e 	bne	r2,zero,10c10 <_puts_r+0xb8>
   10bec:	00800284 	movi	r2,10
   10bf0:	dfc00917 	ldw	ra,36(sp)
   10bf4:	dc400817 	ldw	r17,32(sp)
   10bf8:	dc000717 	ldw	r16,28(sp)
   10bfc:	dec00a04 	addi	sp,sp,40
   10c00:	f800283a 	ret
   10c04:	8009883a 	mov	r4,r16
   10c08:	00110240 	call	11024 <__sinit>
   10c0c:	003fe906 	br	10bb4 <__alt_data_end+0xffff0bb4>
   10c10:	00bfffc4 	movi	r2,-1
   10c14:	003ff606 	br	10bf0 <__alt_data_end+0xffff0bf0>

00010c18 <puts>:
   10c18:	00800074 	movhi	r2,1
   10c1c:	109e7f04 	addi	r2,r2,31228
   10c20:	200b883a 	mov	r5,r4
   10c24:	11000017 	ldw	r4,0(r2)
   10c28:	0010b581 	jmpi	10b58 <_puts_r>

00010c2c <strlen>:
   10c2c:	208000cc 	andi	r2,r4,3
   10c30:	10002026 	beq	r2,zero,10cb4 <strlen+0x88>
   10c34:	20800007 	ldb	r2,0(r4)
   10c38:	10002026 	beq	r2,zero,10cbc <strlen+0x90>
   10c3c:	2005883a 	mov	r2,r4
   10c40:	00000206 	br	10c4c <strlen+0x20>
   10c44:	10c00007 	ldb	r3,0(r2)
   10c48:	18001826 	beq	r3,zero,10cac <strlen+0x80>
   10c4c:	10800044 	addi	r2,r2,1
   10c50:	10c000cc 	andi	r3,r2,3
   10c54:	183ffb1e 	bne	r3,zero,10c44 <__alt_data_end+0xffff0c44>
   10c58:	10c00017 	ldw	r3,0(r2)
   10c5c:	01ffbff4 	movhi	r7,65279
   10c60:	39ffbfc4 	addi	r7,r7,-257
   10c64:	00ca303a 	nor	r5,zero,r3
   10c68:	01a02074 	movhi	r6,32897
   10c6c:	19c7883a 	add	r3,r3,r7
   10c70:	31a02004 	addi	r6,r6,-32640
   10c74:	1946703a 	and	r3,r3,r5
   10c78:	1986703a 	and	r3,r3,r6
   10c7c:	1800091e 	bne	r3,zero,10ca4 <strlen+0x78>
   10c80:	10800104 	addi	r2,r2,4
   10c84:	10c00017 	ldw	r3,0(r2)
   10c88:	19cb883a 	add	r5,r3,r7
   10c8c:	00c6303a 	nor	r3,zero,r3
   10c90:	28c6703a 	and	r3,r5,r3
   10c94:	1986703a 	and	r3,r3,r6
   10c98:	183ff926 	beq	r3,zero,10c80 <__alt_data_end+0xffff0c80>
   10c9c:	00000106 	br	10ca4 <strlen+0x78>
   10ca0:	10800044 	addi	r2,r2,1
   10ca4:	10c00007 	ldb	r3,0(r2)
   10ca8:	183ffd1e 	bne	r3,zero,10ca0 <__alt_data_end+0xffff0ca0>
   10cac:	1105c83a 	sub	r2,r2,r4
   10cb0:	f800283a 	ret
   10cb4:	2005883a 	mov	r2,r4
   10cb8:	003fe706 	br	10c58 <__alt_data_end+0xffff0c58>
   10cbc:	0005883a 	mov	r2,zero
   10cc0:	f800283a 	ret

00010cc4 <__fp_unlock>:
   10cc4:	0005883a 	mov	r2,zero
   10cc8:	f800283a 	ret

00010ccc <_cleanup_r>:
   10ccc:	01400074 	movhi	r5,1
   10cd0:	294b1f04 	addi	r5,r5,11388
   10cd4:	00116001 	jmpi	11600 <_fwalk_reent>

00010cd8 <__sinit.part.1>:
   10cd8:	defff704 	addi	sp,sp,-36
   10cdc:	00c00074 	movhi	r3,1
   10ce0:	dfc00815 	stw	ra,32(sp)
   10ce4:	ddc00715 	stw	r23,28(sp)
   10ce8:	dd800615 	stw	r22,24(sp)
   10cec:	dd400515 	stw	r21,20(sp)
   10cf0:	dd000415 	stw	r20,16(sp)
   10cf4:	dcc00315 	stw	r19,12(sp)
   10cf8:	dc800215 	stw	r18,8(sp)
   10cfc:	dc400115 	stw	r17,4(sp)
   10d00:	dc000015 	stw	r16,0(sp)
   10d04:	18c33304 	addi	r3,r3,3276
   10d08:	24000117 	ldw	r16,4(r4)
   10d0c:	20c00f15 	stw	r3,60(r4)
   10d10:	2080bb04 	addi	r2,r4,748
   10d14:	00c000c4 	movi	r3,3
   10d18:	20c0b915 	stw	r3,740(r4)
   10d1c:	2080ba15 	stw	r2,744(r4)
   10d20:	2000b815 	stw	zero,736(r4)
   10d24:	05c00204 	movi	r23,8
   10d28:	00800104 	movi	r2,4
   10d2c:	2025883a 	mov	r18,r4
   10d30:	b80d883a 	mov	r6,r23
   10d34:	81001704 	addi	r4,r16,92
   10d38:	000b883a 	mov	r5,zero
   10d3c:	80000015 	stw	zero,0(r16)
   10d40:	80000115 	stw	zero,4(r16)
   10d44:	80000215 	stw	zero,8(r16)
   10d48:	8080030d 	sth	r2,12(r16)
   10d4c:	80001915 	stw	zero,100(r16)
   10d50:	8000038d 	sth	zero,14(r16)
   10d54:	80000415 	stw	zero,16(r16)
   10d58:	80000515 	stw	zero,20(r16)
   10d5c:	80000615 	stw	zero,24(r16)
   10d60:	00122580 	call	12258 <memset>
   10d64:	05800074 	movhi	r22,1
   10d68:	94400217 	ldw	r17,8(r18)
   10d6c:	05400074 	movhi	r21,1
   10d70:	05000074 	movhi	r20,1
   10d74:	04c00074 	movhi	r19,1
   10d78:	b58a4e04 	addi	r22,r22,10552
   10d7c:	ad4a6504 	addi	r21,r21,10644
   10d80:	a50a8404 	addi	r20,r20,10768
   10d84:	9cca9b04 	addi	r19,r19,10860
   10d88:	85800815 	stw	r22,32(r16)
   10d8c:	85400915 	stw	r21,36(r16)
   10d90:	85000a15 	stw	r20,40(r16)
   10d94:	84c00b15 	stw	r19,44(r16)
   10d98:	84000715 	stw	r16,28(r16)
   10d9c:	00800284 	movi	r2,10
   10da0:	8880030d 	sth	r2,12(r17)
   10da4:	00800044 	movi	r2,1
   10da8:	b80d883a 	mov	r6,r23
   10dac:	89001704 	addi	r4,r17,92
   10db0:	000b883a 	mov	r5,zero
   10db4:	88000015 	stw	zero,0(r17)
   10db8:	88000115 	stw	zero,4(r17)
   10dbc:	88000215 	stw	zero,8(r17)
   10dc0:	88001915 	stw	zero,100(r17)
   10dc4:	8880038d 	sth	r2,14(r17)
   10dc8:	88000415 	stw	zero,16(r17)
   10dcc:	88000515 	stw	zero,20(r17)
   10dd0:	88000615 	stw	zero,24(r17)
   10dd4:	00122580 	call	12258 <memset>
   10dd8:	94000317 	ldw	r16,12(r18)
   10ddc:	00800484 	movi	r2,18
   10de0:	8c400715 	stw	r17,28(r17)
   10de4:	8d800815 	stw	r22,32(r17)
   10de8:	8d400915 	stw	r21,36(r17)
   10dec:	8d000a15 	stw	r20,40(r17)
   10df0:	8cc00b15 	stw	r19,44(r17)
   10df4:	8080030d 	sth	r2,12(r16)
   10df8:	00800084 	movi	r2,2
   10dfc:	80000015 	stw	zero,0(r16)
   10e00:	80000115 	stw	zero,4(r16)
   10e04:	80000215 	stw	zero,8(r16)
   10e08:	80001915 	stw	zero,100(r16)
   10e0c:	8080038d 	sth	r2,14(r16)
   10e10:	80000415 	stw	zero,16(r16)
   10e14:	80000515 	stw	zero,20(r16)
   10e18:	80000615 	stw	zero,24(r16)
   10e1c:	b80d883a 	mov	r6,r23
   10e20:	000b883a 	mov	r5,zero
   10e24:	81001704 	addi	r4,r16,92
   10e28:	00122580 	call	12258 <memset>
   10e2c:	00800044 	movi	r2,1
   10e30:	84000715 	stw	r16,28(r16)
   10e34:	85800815 	stw	r22,32(r16)
   10e38:	85400915 	stw	r21,36(r16)
   10e3c:	85000a15 	stw	r20,40(r16)
   10e40:	84c00b15 	stw	r19,44(r16)
   10e44:	90800e15 	stw	r2,56(r18)
   10e48:	dfc00817 	ldw	ra,32(sp)
   10e4c:	ddc00717 	ldw	r23,28(sp)
   10e50:	dd800617 	ldw	r22,24(sp)
   10e54:	dd400517 	ldw	r21,20(sp)
   10e58:	dd000417 	ldw	r20,16(sp)
   10e5c:	dcc00317 	ldw	r19,12(sp)
   10e60:	dc800217 	ldw	r18,8(sp)
   10e64:	dc400117 	ldw	r17,4(sp)
   10e68:	dc000017 	ldw	r16,0(sp)
   10e6c:	dec00904 	addi	sp,sp,36
   10e70:	f800283a 	ret

00010e74 <__fp_lock>:
   10e74:	0005883a 	mov	r2,zero
   10e78:	f800283a 	ret

00010e7c <__sfmoreglue>:
   10e7c:	defffc04 	addi	sp,sp,-16
   10e80:	dc800215 	stw	r18,8(sp)
   10e84:	2825883a 	mov	r18,r5
   10e88:	dc000015 	stw	r16,0(sp)
   10e8c:	01401a04 	movi	r5,104
   10e90:	2021883a 	mov	r16,r4
   10e94:	913fffc4 	addi	r4,r18,-1
   10e98:	dfc00315 	stw	ra,12(sp)
   10e9c:	dc400115 	stw	r17,4(sp)
   10ea0:	00137880 	call	13788 <__mulsi3>
   10ea4:	8009883a 	mov	r4,r16
   10ea8:	11401d04 	addi	r5,r2,116
   10eac:	1023883a 	mov	r17,r2
   10eb0:	00116c40 	call	116c4 <_malloc_r>
   10eb4:	1021883a 	mov	r16,r2
   10eb8:	10000726 	beq	r2,zero,10ed8 <__sfmoreglue+0x5c>
   10ebc:	11000304 	addi	r4,r2,12
   10ec0:	10000015 	stw	zero,0(r2)
   10ec4:	14800115 	stw	r18,4(r2)
   10ec8:	11000215 	stw	r4,8(r2)
   10ecc:	89801a04 	addi	r6,r17,104
   10ed0:	000b883a 	mov	r5,zero
   10ed4:	00122580 	call	12258 <memset>
   10ed8:	8005883a 	mov	r2,r16
   10edc:	dfc00317 	ldw	ra,12(sp)
   10ee0:	dc800217 	ldw	r18,8(sp)
   10ee4:	dc400117 	ldw	r17,4(sp)
   10ee8:	dc000017 	ldw	r16,0(sp)
   10eec:	dec00404 	addi	sp,sp,16
   10ef0:	f800283a 	ret

00010ef4 <__sfp>:
   10ef4:	defffb04 	addi	sp,sp,-20
   10ef8:	dc000015 	stw	r16,0(sp)
   10efc:	04000074 	movhi	r16,1
   10f00:	841e7e04 	addi	r16,r16,31224
   10f04:	dcc00315 	stw	r19,12(sp)
   10f08:	2027883a 	mov	r19,r4
   10f0c:	81000017 	ldw	r4,0(r16)
   10f10:	dfc00415 	stw	ra,16(sp)
   10f14:	dc800215 	stw	r18,8(sp)
   10f18:	20800e17 	ldw	r2,56(r4)
   10f1c:	dc400115 	stw	r17,4(sp)
   10f20:	1000021e 	bne	r2,zero,10f2c <__sfp+0x38>
   10f24:	0010cd80 	call	10cd8 <__sinit.part.1>
   10f28:	81000017 	ldw	r4,0(r16)
   10f2c:	2480b804 	addi	r18,r4,736
   10f30:	047fffc4 	movi	r17,-1
   10f34:	91000117 	ldw	r4,4(r18)
   10f38:	94000217 	ldw	r16,8(r18)
   10f3c:	213fffc4 	addi	r4,r4,-1
   10f40:	20000a16 	blt	r4,zero,10f6c <__sfp+0x78>
   10f44:	8080030f 	ldh	r2,12(r16)
   10f48:	10000c26 	beq	r2,zero,10f7c <__sfp+0x88>
   10f4c:	80c01d04 	addi	r3,r16,116
   10f50:	00000206 	br	10f5c <__sfp+0x68>
   10f54:	18bfe60f 	ldh	r2,-104(r3)
   10f58:	10000826 	beq	r2,zero,10f7c <__sfp+0x88>
   10f5c:	213fffc4 	addi	r4,r4,-1
   10f60:	1c3ffd04 	addi	r16,r3,-12
   10f64:	18c01a04 	addi	r3,r3,104
   10f68:	247ffa1e 	bne	r4,r17,10f54 <__alt_data_end+0xffff0f54>
   10f6c:	90800017 	ldw	r2,0(r18)
   10f70:	10001d26 	beq	r2,zero,10fe8 <__sfp+0xf4>
   10f74:	1025883a 	mov	r18,r2
   10f78:	003fee06 	br	10f34 <__alt_data_end+0xffff0f34>
   10f7c:	00bfffc4 	movi	r2,-1
   10f80:	8080038d 	sth	r2,14(r16)
   10f84:	00800044 	movi	r2,1
   10f88:	8080030d 	sth	r2,12(r16)
   10f8c:	80001915 	stw	zero,100(r16)
   10f90:	80000015 	stw	zero,0(r16)
   10f94:	80000215 	stw	zero,8(r16)
   10f98:	80000115 	stw	zero,4(r16)
   10f9c:	80000415 	stw	zero,16(r16)
   10fa0:	80000515 	stw	zero,20(r16)
   10fa4:	80000615 	stw	zero,24(r16)
   10fa8:	01800204 	movi	r6,8
   10fac:	000b883a 	mov	r5,zero
   10fb0:	81001704 	addi	r4,r16,92
   10fb4:	00122580 	call	12258 <memset>
   10fb8:	8005883a 	mov	r2,r16
   10fbc:	80000c15 	stw	zero,48(r16)
   10fc0:	80000d15 	stw	zero,52(r16)
   10fc4:	80001115 	stw	zero,68(r16)
   10fc8:	80001215 	stw	zero,72(r16)
   10fcc:	dfc00417 	ldw	ra,16(sp)
   10fd0:	dcc00317 	ldw	r19,12(sp)
   10fd4:	dc800217 	ldw	r18,8(sp)
   10fd8:	dc400117 	ldw	r17,4(sp)
   10fdc:	dc000017 	ldw	r16,0(sp)
   10fe0:	dec00504 	addi	sp,sp,20
   10fe4:	f800283a 	ret
   10fe8:	01400104 	movi	r5,4
   10fec:	9809883a 	mov	r4,r19
   10ff0:	0010e7c0 	call	10e7c <__sfmoreglue>
   10ff4:	90800015 	stw	r2,0(r18)
   10ff8:	103fde1e 	bne	r2,zero,10f74 <__alt_data_end+0xffff0f74>
   10ffc:	00800304 	movi	r2,12
   11000:	98800015 	stw	r2,0(r19)
   11004:	0005883a 	mov	r2,zero
   11008:	003ff006 	br	10fcc <__alt_data_end+0xffff0fcc>

0001100c <_cleanup>:
   1100c:	00800074 	movhi	r2,1
   11010:	109e7e04 	addi	r2,r2,31224
   11014:	11000017 	ldw	r4,0(r2)
   11018:	01400074 	movhi	r5,1
   1101c:	294b1f04 	addi	r5,r5,11388
   11020:	00116001 	jmpi	11600 <_fwalk_reent>

00011024 <__sinit>:
   11024:	20800e17 	ldw	r2,56(r4)
   11028:	10000126 	beq	r2,zero,11030 <__sinit+0xc>
   1102c:	f800283a 	ret
   11030:	0010cd81 	jmpi	10cd8 <__sinit.part.1>

00011034 <__sfp_lock_acquire>:
   11034:	f800283a 	ret

00011038 <__sfp_lock_release>:
   11038:	f800283a 	ret

0001103c <__sinit_lock_acquire>:
   1103c:	f800283a 	ret

00011040 <__sinit_lock_release>:
   11040:	f800283a 	ret

00011044 <__fp_lock_all>:
   11044:	00800074 	movhi	r2,1
   11048:	109e7f04 	addi	r2,r2,31228
   1104c:	11000017 	ldw	r4,0(r2)
   11050:	01400074 	movhi	r5,1
   11054:	29439d04 	addi	r5,r5,3700
   11058:	001153c1 	jmpi	1153c <_fwalk>

0001105c <__fp_unlock_all>:
   1105c:	00800074 	movhi	r2,1
   11060:	109e7f04 	addi	r2,r2,31228
   11064:	11000017 	ldw	r4,0(r2)
   11068:	01400074 	movhi	r5,1
   1106c:	29433104 	addi	r5,r5,3268
   11070:	001153c1 	jmpi	1153c <_fwalk>

00011074 <__sfvwrite_r>:
   11074:	30800217 	ldw	r2,8(r6)
   11078:	10006726 	beq	r2,zero,11218 <__sfvwrite_r+0x1a4>
   1107c:	28c0030b 	ldhu	r3,12(r5)
   11080:	defff404 	addi	sp,sp,-48
   11084:	dd400715 	stw	r21,28(sp)
   11088:	dd000615 	stw	r20,24(sp)
   1108c:	dc000215 	stw	r16,8(sp)
   11090:	dfc00b15 	stw	ra,44(sp)
   11094:	df000a15 	stw	fp,40(sp)
   11098:	ddc00915 	stw	r23,36(sp)
   1109c:	dd800815 	stw	r22,32(sp)
   110a0:	dcc00515 	stw	r19,20(sp)
   110a4:	dc800415 	stw	r18,16(sp)
   110a8:	dc400315 	stw	r17,12(sp)
   110ac:	1880020c 	andi	r2,r3,8
   110b0:	2821883a 	mov	r16,r5
   110b4:	202b883a 	mov	r21,r4
   110b8:	3029883a 	mov	r20,r6
   110bc:	10002726 	beq	r2,zero,1115c <__sfvwrite_r+0xe8>
   110c0:	28800417 	ldw	r2,16(r5)
   110c4:	10002526 	beq	r2,zero,1115c <__sfvwrite_r+0xe8>
   110c8:	1880008c 	andi	r2,r3,2
   110cc:	a4400017 	ldw	r17,0(r20)
   110d0:	10002a26 	beq	r2,zero,1117c <__sfvwrite_r+0x108>
   110d4:	05a00034 	movhi	r22,32768
   110d8:	0027883a 	mov	r19,zero
   110dc:	0025883a 	mov	r18,zero
   110e0:	b5bf0004 	addi	r22,r22,-1024
   110e4:	980d883a 	mov	r6,r19
   110e8:	a809883a 	mov	r4,r21
   110ec:	90004626 	beq	r18,zero,11208 <__sfvwrite_r+0x194>
   110f0:	900f883a 	mov	r7,r18
   110f4:	b480022e 	bgeu	r22,r18,11100 <__sfvwrite_r+0x8c>
   110f8:	01e00034 	movhi	r7,32768
   110fc:	39ff0004 	addi	r7,r7,-1024
   11100:	80800917 	ldw	r2,36(r16)
   11104:	81400717 	ldw	r5,28(r16)
   11108:	103ee83a 	callr	r2
   1110c:	00805a0e 	bge	zero,r2,11278 <__sfvwrite_r+0x204>
   11110:	a0c00217 	ldw	r3,8(r20)
   11114:	98a7883a 	add	r19,r19,r2
   11118:	90a5c83a 	sub	r18,r18,r2
   1111c:	1885c83a 	sub	r2,r3,r2
   11120:	a0800215 	stw	r2,8(r20)
   11124:	103fef1e 	bne	r2,zero,110e4 <__alt_data_end+0xffff10e4>
   11128:	0005883a 	mov	r2,zero
   1112c:	dfc00b17 	ldw	ra,44(sp)
   11130:	df000a17 	ldw	fp,40(sp)
   11134:	ddc00917 	ldw	r23,36(sp)
   11138:	dd800817 	ldw	r22,32(sp)
   1113c:	dd400717 	ldw	r21,28(sp)
   11140:	dd000617 	ldw	r20,24(sp)
   11144:	dcc00517 	ldw	r19,20(sp)
   11148:	dc800417 	ldw	r18,16(sp)
   1114c:	dc400317 	ldw	r17,12(sp)
   11150:	dc000217 	ldw	r16,8(sp)
   11154:	dec00c04 	addi	sp,sp,48
   11158:	f800283a 	ret
   1115c:	800b883a 	mov	r5,r16
   11160:	a809883a 	mov	r4,r21
   11164:	0012ad40 	call	12ad4 <__swsetup_r>
   11168:	1000ee1e 	bne	r2,zero,11524 <__sfvwrite_r+0x4b0>
   1116c:	80c0030b 	ldhu	r3,12(r16)
   11170:	a4400017 	ldw	r17,0(r20)
   11174:	1880008c 	andi	r2,r3,2
   11178:	103fd61e 	bne	r2,zero,110d4 <__alt_data_end+0xffff10d4>
   1117c:	1880004c 	andi	r2,r3,1
   11180:	1000421e 	bne	r2,zero,1128c <__sfvwrite_r+0x218>
   11184:	0039883a 	mov	fp,zero
   11188:	0025883a 	mov	r18,zero
   1118c:	90001a26 	beq	r18,zero,111f8 <__sfvwrite_r+0x184>
   11190:	1880800c 	andi	r2,r3,512
   11194:	84c00217 	ldw	r19,8(r16)
   11198:	10002126 	beq	r2,zero,11220 <__sfvwrite_r+0x1ac>
   1119c:	982f883a 	mov	r23,r19
   111a0:	94c09636 	bltu	r18,r19,113fc <__sfvwrite_r+0x388>
   111a4:	1881200c 	andi	r2,r3,1152
   111a8:	1000a11e 	bne	r2,zero,11430 <__sfvwrite_r+0x3bc>
   111ac:	81000017 	ldw	r4,0(r16)
   111b0:	b80d883a 	mov	r6,r23
   111b4:	e00b883a 	mov	r5,fp
   111b8:	00120fc0 	call	120fc <memmove>
   111bc:	80c00217 	ldw	r3,8(r16)
   111c0:	81000017 	ldw	r4,0(r16)
   111c4:	9005883a 	mov	r2,r18
   111c8:	1ce7c83a 	sub	r19,r3,r19
   111cc:	25cf883a 	add	r7,r4,r23
   111d0:	84c00215 	stw	r19,8(r16)
   111d4:	81c00015 	stw	r7,0(r16)
   111d8:	a0c00217 	ldw	r3,8(r20)
   111dc:	e0b9883a 	add	fp,fp,r2
   111e0:	90a5c83a 	sub	r18,r18,r2
   111e4:	18a7c83a 	sub	r19,r3,r2
   111e8:	a4c00215 	stw	r19,8(r20)
   111ec:	983fce26 	beq	r19,zero,11128 <__alt_data_end+0xffff1128>
   111f0:	80c0030b 	ldhu	r3,12(r16)
   111f4:	903fe61e 	bne	r18,zero,11190 <__alt_data_end+0xffff1190>
   111f8:	8f000017 	ldw	fp,0(r17)
   111fc:	8c800117 	ldw	r18,4(r17)
   11200:	8c400204 	addi	r17,r17,8
   11204:	003fe106 	br	1118c <__alt_data_end+0xffff118c>
   11208:	8cc00017 	ldw	r19,0(r17)
   1120c:	8c800117 	ldw	r18,4(r17)
   11210:	8c400204 	addi	r17,r17,8
   11214:	003fb306 	br	110e4 <__alt_data_end+0xffff10e4>
   11218:	0005883a 	mov	r2,zero
   1121c:	f800283a 	ret
   11220:	81000017 	ldw	r4,0(r16)
   11224:	80800417 	ldw	r2,16(r16)
   11228:	11005a36 	bltu	r2,r4,11394 <__sfvwrite_r+0x320>
   1122c:	85c00517 	ldw	r23,20(r16)
   11230:	95c05836 	bltu	r18,r23,11394 <__sfvwrite_r+0x320>
   11234:	00a00034 	movhi	r2,32768
   11238:	10bfffc4 	addi	r2,r2,-1
   1123c:	9009883a 	mov	r4,r18
   11240:	1480012e 	bgeu	r2,r18,11248 <__sfvwrite_r+0x1d4>
   11244:	1009883a 	mov	r4,r2
   11248:	b80b883a 	mov	r5,r23
   1124c:	00109a40 	call	109a4 <__divsi3>
   11250:	b80b883a 	mov	r5,r23
   11254:	1009883a 	mov	r4,r2
   11258:	00137880 	call	13788 <__mulsi3>
   1125c:	81400717 	ldw	r5,28(r16)
   11260:	80c00917 	ldw	r3,36(r16)
   11264:	100f883a 	mov	r7,r2
   11268:	e00d883a 	mov	r6,fp
   1126c:	a809883a 	mov	r4,r21
   11270:	183ee83a 	callr	r3
   11274:	00bfd816 	blt	zero,r2,111d8 <__alt_data_end+0xffff11d8>
   11278:	8080030b 	ldhu	r2,12(r16)
   1127c:	10801014 	ori	r2,r2,64
   11280:	8080030d 	sth	r2,12(r16)
   11284:	00bfffc4 	movi	r2,-1
   11288:	003fa806 	br	1112c <__alt_data_end+0xffff112c>
   1128c:	0027883a 	mov	r19,zero
   11290:	0011883a 	mov	r8,zero
   11294:	0039883a 	mov	fp,zero
   11298:	0025883a 	mov	r18,zero
   1129c:	90001f26 	beq	r18,zero,1131c <__sfvwrite_r+0x2a8>
   112a0:	40005a26 	beq	r8,zero,1140c <__sfvwrite_r+0x398>
   112a4:	982d883a 	mov	r22,r19
   112a8:	94c0012e 	bgeu	r18,r19,112b0 <__sfvwrite_r+0x23c>
   112ac:	902d883a 	mov	r22,r18
   112b0:	81000017 	ldw	r4,0(r16)
   112b4:	80800417 	ldw	r2,16(r16)
   112b8:	b02f883a 	mov	r23,r22
   112bc:	81c00517 	ldw	r7,20(r16)
   112c0:	1100032e 	bgeu	r2,r4,112d0 <__sfvwrite_r+0x25c>
   112c4:	80c00217 	ldw	r3,8(r16)
   112c8:	38c7883a 	add	r3,r7,r3
   112cc:	1d801816 	blt	r3,r22,11330 <__sfvwrite_r+0x2bc>
   112d0:	b1c03e16 	blt	r22,r7,113cc <__sfvwrite_r+0x358>
   112d4:	80800917 	ldw	r2,36(r16)
   112d8:	81400717 	ldw	r5,28(r16)
   112dc:	e00d883a 	mov	r6,fp
   112e0:	da000115 	stw	r8,4(sp)
   112e4:	a809883a 	mov	r4,r21
   112e8:	103ee83a 	callr	r2
   112ec:	102f883a 	mov	r23,r2
   112f0:	da000117 	ldw	r8,4(sp)
   112f4:	00bfe00e 	bge	zero,r2,11278 <__alt_data_end+0xffff1278>
   112f8:	9de7c83a 	sub	r19,r19,r23
   112fc:	98001f26 	beq	r19,zero,1137c <__sfvwrite_r+0x308>
   11300:	a0800217 	ldw	r2,8(r20)
   11304:	e5f9883a 	add	fp,fp,r23
   11308:	95e5c83a 	sub	r18,r18,r23
   1130c:	15efc83a 	sub	r23,r2,r23
   11310:	a5c00215 	stw	r23,8(r20)
   11314:	b83f8426 	beq	r23,zero,11128 <__alt_data_end+0xffff1128>
   11318:	903fe11e 	bne	r18,zero,112a0 <__alt_data_end+0xffff12a0>
   1131c:	8f000017 	ldw	fp,0(r17)
   11320:	8c800117 	ldw	r18,4(r17)
   11324:	0011883a 	mov	r8,zero
   11328:	8c400204 	addi	r17,r17,8
   1132c:	003fdb06 	br	1129c <__alt_data_end+0xffff129c>
   11330:	180d883a 	mov	r6,r3
   11334:	e00b883a 	mov	r5,fp
   11338:	da000115 	stw	r8,4(sp)
   1133c:	d8c00015 	stw	r3,0(sp)
   11340:	00120fc0 	call	120fc <memmove>
   11344:	d8c00017 	ldw	r3,0(sp)
   11348:	80800017 	ldw	r2,0(r16)
   1134c:	800b883a 	mov	r5,r16
   11350:	a809883a 	mov	r4,r21
   11354:	10c5883a 	add	r2,r2,r3
   11358:	80800015 	stw	r2,0(r16)
   1135c:	d8c00015 	stw	r3,0(sp)
   11360:	0012f9c0 	call	12f9c <_fflush_r>
   11364:	d8c00017 	ldw	r3,0(sp)
   11368:	da000117 	ldw	r8,4(sp)
   1136c:	103fc21e 	bne	r2,zero,11278 <__alt_data_end+0xffff1278>
   11370:	182f883a 	mov	r23,r3
   11374:	9de7c83a 	sub	r19,r19,r23
   11378:	983fe11e 	bne	r19,zero,11300 <__alt_data_end+0xffff1300>
   1137c:	800b883a 	mov	r5,r16
   11380:	a809883a 	mov	r4,r21
   11384:	0012f9c0 	call	12f9c <_fflush_r>
   11388:	103fbb1e 	bne	r2,zero,11278 <__alt_data_end+0xffff1278>
   1138c:	0011883a 	mov	r8,zero
   11390:	003fdb06 	br	11300 <__alt_data_end+0xffff1300>
   11394:	94c0012e 	bgeu	r18,r19,1139c <__sfvwrite_r+0x328>
   11398:	9027883a 	mov	r19,r18
   1139c:	980d883a 	mov	r6,r19
   113a0:	e00b883a 	mov	r5,fp
   113a4:	00120fc0 	call	120fc <memmove>
   113a8:	80800217 	ldw	r2,8(r16)
   113ac:	80c00017 	ldw	r3,0(r16)
   113b0:	14c5c83a 	sub	r2,r2,r19
   113b4:	1cc7883a 	add	r3,r3,r19
   113b8:	80800215 	stw	r2,8(r16)
   113bc:	80c00015 	stw	r3,0(r16)
   113c0:	10004326 	beq	r2,zero,114d0 <__sfvwrite_r+0x45c>
   113c4:	9805883a 	mov	r2,r19
   113c8:	003f8306 	br	111d8 <__alt_data_end+0xffff11d8>
   113cc:	b00d883a 	mov	r6,r22
   113d0:	e00b883a 	mov	r5,fp
   113d4:	da000115 	stw	r8,4(sp)
   113d8:	00120fc0 	call	120fc <memmove>
   113dc:	80800217 	ldw	r2,8(r16)
   113e0:	80c00017 	ldw	r3,0(r16)
   113e4:	da000117 	ldw	r8,4(sp)
   113e8:	1585c83a 	sub	r2,r2,r22
   113ec:	1dad883a 	add	r22,r3,r22
   113f0:	80800215 	stw	r2,8(r16)
   113f4:	85800015 	stw	r22,0(r16)
   113f8:	003fbf06 	br	112f8 <__alt_data_end+0xffff12f8>
   113fc:	81000017 	ldw	r4,0(r16)
   11400:	9027883a 	mov	r19,r18
   11404:	902f883a 	mov	r23,r18
   11408:	003f6906 	br	111b0 <__alt_data_end+0xffff11b0>
   1140c:	900d883a 	mov	r6,r18
   11410:	01400284 	movi	r5,10
   11414:	e009883a 	mov	r4,fp
   11418:	0011ed00 	call	11ed0 <memchr>
   1141c:	10003e26 	beq	r2,zero,11518 <__sfvwrite_r+0x4a4>
   11420:	10800044 	addi	r2,r2,1
   11424:	1727c83a 	sub	r19,r2,fp
   11428:	02000044 	movi	r8,1
   1142c:	003f9d06 	br	112a4 <__alt_data_end+0xffff12a4>
   11430:	80800517 	ldw	r2,20(r16)
   11434:	81400417 	ldw	r5,16(r16)
   11438:	81c00017 	ldw	r7,0(r16)
   1143c:	10a7883a 	add	r19,r2,r2
   11440:	9885883a 	add	r2,r19,r2
   11444:	1026d7fa 	srli	r19,r2,31
   11448:	396dc83a 	sub	r22,r7,r5
   1144c:	b1000044 	addi	r4,r22,1
   11450:	9885883a 	add	r2,r19,r2
   11454:	1027d07a 	srai	r19,r2,1
   11458:	2485883a 	add	r2,r4,r18
   1145c:	980d883a 	mov	r6,r19
   11460:	9880022e 	bgeu	r19,r2,1146c <__sfvwrite_r+0x3f8>
   11464:	1027883a 	mov	r19,r2
   11468:	100d883a 	mov	r6,r2
   1146c:	18c1000c 	andi	r3,r3,1024
   11470:	18001c26 	beq	r3,zero,114e4 <__sfvwrite_r+0x470>
   11474:	300b883a 	mov	r5,r6
   11478:	a809883a 	mov	r4,r21
   1147c:	00116c40 	call	116c4 <_malloc_r>
   11480:	102f883a 	mov	r23,r2
   11484:	10002926 	beq	r2,zero,1152c <__sfvwrite_r+0x4b8>
   11488:	81400417 	ldw	r5,16(r16)
   1148c:	b00d883a 	mov	r6,r22
   11490:	1009883a 	mov	r4,r2
   11494:	0011fb40 	call	11fb4 <memcpy>
   11498:	8080030b 	ldhu	r2,12(r16)
   1149c:	00fedfc4 	movi	r3,-1153
   114a0:	10c4703a 	and	r2,r2,r3
   114a4:	10802014 	ori	r2,r2,128
   114a8:	8080030d 	sth	r2,12(r16)
   114ac:	bd89883a 	add	r4,r23,r22
   114b0:	9d8fc83a 	sub	r7,r19,r22
   114b4:	85c00415 	stw	r23,16(r16)
   114b8:	84c00515 	stw	r19,20(r16)
   114bc:	81000015 	stw	r4,0(r16)
   114c0:	9027883a 	mov	r19,r18
   114c4:	81c00215 	stw	r7,8(r16)
   114c8:	902f883a 	mov	r23,r18
   114cc:	003f3806 	br	111b0 <__alt_data_end+0xffff11b0>
   114d0:	800b883a 	mov	r5,r16
   114d4:	a809883a 	mov	r4,r21
   114d8:	0012f9c0 	call	12f9c <_fflush_r>
   114dc:	103fb926 	beq	r2,zero,113c4 <__alt_data_end+0xffff13c4>
   114e0:	003f6506 	br	11278 <__alt_data_end+0xffff1278>
   114e4:	a809883a 	mov	r4,r21
   114e8:	00123800 	call	12380 <_realloc_r>
   114ec:	102f883a 	mov	r23,r2
   114f0:	103fee1e 	bne	r2,zero,114ac <__alt_data_end+0xffff14ac>
   114f4:	81400417 	ldw	r5,16(r16)
   114f8:	a809883a 	mov	r4,r21
   114fc:	001314c0 	call	1314c <_free_r>
   11500:	8080030b 	ldhu	r2,12(r16)
   11504:	00ffdfc4 	movi	r3,-129
   11508:	1884703a 	and	r2,r3,r2
   1150c:	00c00304 	movi	r3,12
   11510:	a8c00015 	stw	r3,0(r21)
   11514:	003f5906 	br	1127c <__alt_data_end+0xffff127c>
   11518:	94c00044 	addi	r19,r18,1
   1151c:	02000044 	movi	r8,1
   11520:	003f6006 	br	112a4 <__alt_data_end+0xffff12a4>
   11524:	00bfffc4 	movi	r2,-1
   11528:	003f0006 	br	1112c <__alt_data_end+0xffff112c>
   1152c:	00800304 	movi	r2,12
   11530:	a8800015 	stw	r2,0(r21)
   11534:	8080030b 	ldhu	r2,12(r16)
   11538:	003f5006 	br	1127c <__alt_data_end+0xffff127c>

0001153c <_fwalk>:
   1153c:	defff704 	addi	sp,sp,-36
   11540:	dd000415 	stw	r20,16(sp)
   11544:	dfc00815 	stw	ra,32(sp)
   11548:	ddc00715 	stw	r23,28(sp)
   1154c:	dd800615 	stw	r22,24(sp)
   11550:	dd400515 	stw	r21,20(sp)
   11554:	dcc00315 	stw	r19,12(sp)
   11558:	dc800215 	stw	r18,8(sp)
   1155c:	dc400115 	stw	r17,4(sp)
   11560:	dc000015 	stw	r16,0(sp)
   11564:	2500b804 	addi	r20,r4,736
   11568:	a0002326 	beq	r20,zero,115f8 <_fwalk+0xbc>
   1156c:	282b883a 	mov	r21,r5
   11570:	002f883a 	mov	r23,zero
   11574:	05800044 	movi	r22,1
   11578:	04ffffc4 	movi	r19,-1
   1157c:	a4400117 	ldw	r17,4(r20)
   11580:	a4800217 	ldw	r18,8(r20)
   11584:	8c7fffc4 	addi	r17,r17,-1
   11588:	88000d16 	blt	r17,zero,115c0 <_fwalk+0x84>
   1158c:	94000304 	addi	r16,r18,12
   11590:	94800384 	addi	r18,r18,14
   11594:	8080000b 	ldhu	r2,0(r16)
   11598:	8c7fffc4 	addi	r17,r17,-1
   1159c:	813ffd04 	addi	r4,r16,-12
   115a0:	b080042e 	bgeu	r22,r2,115b4 <_fwalk+0x78>
   115a4:	9080000f 	ldh	r2,0(r18)
   115a8:	14c00226 	beq	r2,r19,115b4 <_fwalk+0x78>
   115ac:	a83ee83a 	callr	r21
   115b0:	b8aeb03a 	or	r23,r23,r2
   115b4:	84001a04 	addi	r16,r16,104
   115b8:	94801a04 	addi	r18,r18,104
   115bc:	8cfff51e 	bne	r17,r19,11594 <__alt_data_end+0xffff1594>
   115c0:	a5000017 	ldw	r20,0(r20)
   115c4:	a03fed1e 	bne	r20,zero,1157c <__alt_data_end+0xffff157c>
   115c8:	b805883a 	mov	r2,r23
   115cc:	dfc00817 	ldw	ra,32(sp)
   115d0:	ddc00717 	ldw	r23,28(sp)
   115d4:	dd800617 	ldw	r22,24(sp)
   115d8:	dd400517 	ldw	r21,20(sp)
   115dc:	dd000417 	ldw	r20,16(sp)
   115e0:	dcc00317 	ldw	r19,12(sp)
   115e4:	dc800217 	ldw	r18,8(sp)
   115e8:	dc400117 	ldw	r17,4(sp)
   115ec:	dc000017 	ldw	r16,0(sp)
   115f0:	dec00904 	addi	sp,sp,36
   115f4:	f800283a 	ret
   115f8:	002f883a 	mov	r23,zero
   115fc:	003ff206 	br	115c8 <__alt_data_end+0xffff15c8>

00011600 <_fwalk_reent>:
   11600:	defff704 	addi	sp,sp,-36
   11604:	dd000415 	stw	r20,16(sp)
   11608:	dfc00815 	stw	ra,32(sp)
   1160c:	ddc00715 	stw	r23,28(sp)
   11610:	dd800615 	stw	r22,24(sp)
   11614:	dd400515 	stw	r21,20(sp)
   11618:	dcc00315 	stw	r19,12(sp)
   1161c:	dc800215 	stw	r18,8(sp)
   11620:	dc400115 	stw	r17,4(sp)
   11624:	dc000015 	stw	r16,0(sp)
   11628:	2500b804 	addi	r20,r4,736
   1162c:	a0002326 	beq	r20,zero,116bc <_fwalk_reent+0xbc>
   11630:	282b883a 	mov	r21,r5
   11634:	2027883a 	mov	r19,r4
   11638:	002f883a 	mov	r23,zero
   1163c:	05800044 	movi	r22,1
   11640:	04bfffc4 	movi	r18,-1
   11644:	a4400117 	ldw	r17,4(r20)
   11648:	a4000217 	ldw	r16,8(r20)
   1164c:	8c7fffc4 	addi	r17,r17,-1
   11650:	88000c16 	blt	r17,zero,11684 <_fwalk_reent+0x84>
   11654:	84000304 	addi	r16,r16,12
   11658:	8080000b 	ldhu	r2,0(r16)
   1165c:	8c7fffc4 	addi	r17,r17,-1
   11660:	817ffd04 	addi	r5,r16,-12
   11664:	b080052e 	bgeu	r22,r2,1167c <_fwalk_reent+0x7c>
   11668:	8080008f 	ldh	r2,2(r16)
   1166c:	9809883a 	mov	r4,r19
   11670:	14800226 	beq	r2,r18,1167c <_fwalk_reent+0x7c>
   11674:	a83ee83a 	callr	r21
   11678:	b8aeb03a 	or	r23,r23,r2
   1167c:	84001a04 	addi	r16,r16,104
   11680:	8cbff51e 	bne	r17,r18,11658 <__alt_data_end+0xffff1658>
   11684:	a5000017 	ldw	r20,0(r20)
   11688:	a03fee1e 	bne	r20,zero,11644 <__alt_data_end+0xffff1644>
   1168c:	b805883a 	mov	r2,r23
   11690:	dfc00817 	ldw	ra,32(sp)
   11694:	ddc00717 	ldw	r23,28(sp)
   11698:	dd800617 	ldw	r22,24(sp)
   1169c:	dd400517 	ldw	r21,20(sp)
   116a0:	dd000417 	ldw	r20,16(sp)
   116a4:	dcc00317 	ldw	r19,12(sp)
   116a8:	dc800217 	ldw	r18,8(sp)
   116ac:	dc400117 	ldw	r17,4(sp)
   116b0:	dc000017 	ldw	r16,0(sp)
   116b4:	dec00904 	addi	sp,sp,36
   116b8:	f800283a 	ret
   116bc:	002f883a 	mov	r23,zero
   116c0:	003ff206 	br	1168c <__alt_data_end+0xffff168c>

000116c4 <_malloc_r>:
   116c4:	defff504 	addi	sp,sp,-44
   116c8:	dc800315 	stw	r18,12(sp)
   116cc:	dfc00a15 	stw	ra,40(sp)
   116d0:	df000915 	stw	fp,36(sp)
   116d4:	ddc00815 	stw	r23,32(sp)
   116d8:	dd800715 	stw	r22,28(sp)
   116dc:	dd400615 	stw	r21,24(sp)
   116e0:	dd000515 	stw	r20,20(sp)
   116e4:	dcc00415 	stw	r19,16(sp)
   116e8:	dc400215 	stw	r17,8(sp)
   116ec:	dc000115 	stw	r16,4(sp)
   116f0:	288002c4 	addi	r2,r5,11
   116f4:	00c00584 	movi	r3,22
   116f8:	2025883a 	mov	r18,r4
   116fc:	18807f2e 	bgeu	r3,r2,118fc <_malloc_r+0x238>
   11700:	047ffe04 	movi	r17,-8
   11704:	1462703a 	and	r17,r2,r17
   11708:	8800a316 	blt	r17,zero,11998 <_malloc_r+0x2d4>
   1170c:	8940a236 	bltu	r17,r5,11998 <_malloc_r+0x2d4>
   11710:	0013d4c0 	call	13d4c <__malloc_lock>
   11714:	00807dc4 	movi	r2,503
   11718:	1441e92e 	bgeu	r2,r17,11ec0 <_malloc_r+0x7fc>
   1171c:	8804d27a 	srli	r2,r17,9
   11720:	1000a126 	beq	r2,zero,119a8 <_malloc_r+0x2e4>
   11724:	00c00104 	movi	r3,4
   11728:	18811e36 	bltu	r3,r2,11ba4 <_malloc_r+0x4e0>
   1172c:	8804d1ba 	srli	r2,r17,6
   11730:	12000e44 	addi	r8,r2,57
   11734:	11c00e04 	addi	r7,r2,56
   11738:	4209883a 	add	r4,r8,r8
   1173c:	04c00074 	movhi	r19,1
   11740:	2109883a 	add	r4,r4,r4
   11744:	9cd8f904 	addi	r19,r19,25572
   11748:	2109883a 	add	r4,r4,r4
   1174c:	9909883a 	add	r4,r19,r4
   11750:	24000117 	ldw	r16,4(r4)
   11754:	213ffe04 	addi	r4,r4,-8
   11758:	24009726 	beq	r4,r16,119b8 <_malloc_r+0x2f4>
   1175c:	80800117 	ldw	r2,4(r16)
   11760:	01bfff04 	movi	r6,-4
   11764:	014003c4 	movi	r5,15
   11768:	1184703a 	and	r2,r2,r6
   1176c:	1447c83a 	sub	r3,r2,r17
   11770:	28c00716 	blt	r5,r3,11790 <_malloc_r+0xcc>
   11774:	1800920e 	bge	r3,zero,119c0 <_malloc_r+0x2fc>
   11778:	84000317 	ldw	r16,12(r16)
   1177c:	24008e26 	beq	r4,r16,119b8 <_malloc_r+0x2f4>
   11780:	80800117 	ldw	r2,4(r16)
   11784:	1184703a 	and	r2,r2,r6
   11788:	1447c83a 	sub	r3,r2,r17
   1178c:	28fff90e 	bge	r5,r3,11774 <__alt_data_end+0xffff1774>
   11790:	3809883a 	mov	r4,r7
   11794:	01800074 	movhi	r6,1
   11798:	9c000417 	ldw	r16,16(r19)
   1179c:	3198f904 	addi	r6,r6,25572
   117a0:	32000204 	addi	r8,r6,8
   117a4:	82013426 	beq	r16,r8,11c78 <_malloc_r+0x5b4>
   117a8:	80c00117 	ldw	r3,4(r16)
   117ac:	00bfff04 	movi	r2,-4
   117b0:	188e703a 	and	r7,r3,r2
   117b4:	3c45c83a 	sub	r2,r7,r17
   117b8:	00c003c4 	movi	r3,15
   117bc:	18811f16 	blt	r3,r2,11c3c <_malloc_r+0x578>
   117c0:	32000515 	stw	r8,20(r6)
   117c4:	32000415 	stw	r8,16(r6)
   117c8:	10007f0e 	bge	r2,zero,119c8 <_malloc_r+0x304>
   117cc:	00807fc4 	movi	r2,511
   117d0:	11c0fd36 	bltu	r2,r7,11bc8 <_malloc_r+0x504>
   117d4:	3806d0fa 	srli	r3,r7,3
   117d8:	01c00044 	movi	r7,1
   117dc:	30800117 	ldw	r2,4(r6)
   117e0:	19400044 	addi	r5,r3,1
   117e4:	294b883a 	add	r5,r5,r5
   117e8:	1807d0ba 	srai	r3,r3,2
   117ec:	294b883a 	add	r5,r5,r5
   117f0:	294b883a 	add	r5,r5,r5
   117f4:	298b883a 	add	r5,r5,r6
   117f8:	38c6983a 	sll	r3,r7,r3
   117fc:	29c00017 	ldw	r7,0(r5)
   11800:	2a7ffe04 	addi	r9,r5,-8
   11804:	1886b03a 	or	r3,r3,r2
   11808:	82400315 	stw	r9,12(r16)
   1180c:	81c00215 	stw	r7,8(r16)
   11810:	30c00115 	stw	r3,4(r6)
   11814:	2c000015 	stw	r16,0(r5)
   11818:	3c000315 	stw	r16,12(r7)
   1181c:	2005d0ba 	srai	r2,r4,2
   11820:	01400044 	movi	r5,1
   11824:	288a983a 	sll	r5,r5,r2
   11828:	19406f36 	bltu	r3,r5,119e8 <_malloc_r+0x324>
   1182c:	28c4703a 	and	r2,r5,r3
   11830:	10000a1e 	bne	r2,zero,1185c <_malloc_r+0x198>
   11834:	00bfff04 	movi	r2,-4
   11838:	294b883a 	add	r5,r5,r5
   1183c:	2088703a 	and	r4,r4,r2
   11840:	28c4703a 	and	r2,r5,r3
   11844:	21000104 	addi	r4,r4,4
   11848:	1000041e 	bne	r2,zero,1185c <_malloc_r+0x198>
   1184c:	294b883a 	add	r5,r5,r5
   11850:	28c4703a 	and	r2,r5,r3
   11854:	21000104 	addi	r4,r4,4
   11858:	103ffc26 	beq	r2,zero,1184c <__alt_data_end+0xffff184c>
   1185c:	02bfff04 	movi	r10,-4
   11860:	024003c4 	movi	r9,15
   11864:	21800044 	addi	r6,r4,1
   11868:	318d883a 	add	r6,r6,r6
   1186c:	318d883a 	add	r6,r6,r6
   11870:	318d883a 	add	r6,r6,r6
   11874:	998d883a 	add	r6,r19,r6
   11878:	333ffe04 	addi	r12,r6,-8
   1187c:	2017883a 	mov	r11,r4
   11880:	31800104 	addi	r6,r6,4
   11884:	34000017 	ldw	r16,0(r6)
   11888:	31fffd04 	addi	r7,r6,-12
   1188c:	81c0041e 	bne	r16,r7,118a0 <_malloc_r+0x1dc>
   11890:	0000fb06 	br	11c80 <_malloc_r+0x5bc>
   11894:	1801030e 	bge	r3,zero,11ca4 <_malloc_r+0x5e0>
   11898:	84000317 	ldw	r16,12(r16)
   1189c:	81c0f826 	beq	r16,r7,11c80 <_malloc_r+0x5bc>
   118a0:	80800117 	ldw	r2,4(r16)
   118a4:	1284703a 	and	r2,r2,r10
   118a8:	1447c83a 	sub	r3,r2,r17
   118ac:	48fff90e 	bge	r9,r3,11894 <__alt_data_end+0xffff1894>
   118b0:	80800317 	ldw	r2,12(r16)
   118b4:	81000217 	ldw	r4,8(r16)
   118b8:	89400054 	ori	r5,r17,1
   118bc:	81400115 	stw	r5,4(r16)
   118c0:	20800315 	stw	r2,12(r4)
   118c4:	11000215 	stw	r4,8(r2)
   118c8:	8463883a 	add	r17,r16,r17
   118cc:	9c400515 	stw	r17,20(r19)
   118d0:	9c400415 	stw	r17,16(r19)
   118d4:	18800054 	ori	r2,r3,1
   118d8:	88800115 	stw	r2,4(r17)
   118dc:	8a000315 	stw	r8,12(r17)
   118e0:	8a000215 	stw	r8,8(r17)
   118e4:	88e3883a 	add	r17,r17,r3
   118e8:	88c00015 	stw	r3,0(r17)
   118ec:	9009883a 	mov	r4,r18
   118f0:	0013d700 	call	13d70 <__malloc_unlock>
   118f4:	80800204 	addi	r2,r16,8
   118f8:	00001b06 	br	11968 <_malloc_r+0x2a4>
   118fc:	04400404 	movi	r17,16
   11900:	89402536 	bltu	r17,r5,11998 <_malloc_r+0x2d4>
   11904:	0013d4c0 	call	13d4c <__malloc_lock>
   11908:	00800184 	movi	r2,6
   1190c:	01000084 	movi	r4,2
   11910:	04c00074 	movhi	r19,1
   11914:	1085883a 	add	r2,r2,r2
   11918:	9cd8f904 	addi	r19,r19,25572
   1191c:	1085883a 	add	r2,r2,r2
   11920:	9885883a 	add	r2,r19,r2
   11924:	14000117 	ldw	r16,4(r2)
   11928:	10fffe04 	addi	r3,r2,-8
   1192c:	80c0d926 	beq	r16,r3,11c94 <_malloc_r+0x5d0>
   11930:	80c00117 	ldw	r3,4(r16)
   11934:	81000317 	ldw	r4,12(r16)
   11938:	00bfff04 	movi	r2,-4
   1193c:	1884703a 	and	r2,r3,r2
   11940:	81400217 	ldw	r5,8(r16)
   11944:	8085883a 	add	r2,r16,r2
   11948:	10c00117 	ldw	r3,4(r2)
   1194c:	29000315 	stw	r4,12(r5)
   11950:	21400215 	stw	r5,8(r4)
   11954:	18c00054 	ori	r3,r3,1
   11958:	10c00115 	stw	r3,4(r2)
   1195c:	9009883a 	mov	r4,r18
   11960:	0013d700 	call	13d70 <__malloc_unlock>
   11964:	80800204 	addi	r2,r16,8
   11968:	dfc00a17 	ldw	ra,40(sp)
   1196c:	df000917 	ldw	fp,36(sp)
   11970:	ddc00817 	ldw	r23,32(sp)
   11974:	dd800717 	ldw	r22,28(sp)
   11978:	dd400617 	ldw	r21,24(sp)
   1197c:	dd000517 	ldw	r20,20(sp)
   11980:	dcc00417 	ldw	r19,16(sp)
   11984:	dc800317 	ldw	r18,12(sp)
   11988:	dc400217 	ldw	r17,8(sp)
   1198c:	dc000117 	ldw	r16,4(sp)
   11990:	dec00b04 	addi	sp,sp,44
   11994:	f800283a 	ret
   11998:	00800304 	movi	r2,12
   1199c:	90800015 	stw	r2,0(r18)
   119a0:	0005883a 	mov	r2,zero
   119a4:	003ff006 	br	11968 <__alt_data_end+0xffff1968>
   119a8:	01002004 	movi	r4,128
   119ac:	02001004 	movi	r8,64
   119b0:	01c00fc4 	movi	r7,63
   119b4:	003f6106 	br	1173c <__alt_data_end+0xffff173c>
   119b8:	4009883a 	mov	r4,r8
   119bc:	003f7506 	br	11794 <__alt_data_end+0xffff1794>
   119c0:	81000317 	ldw	r4,12(r16)
   119c4:	003fde06 	br	11940 <__alt_data_end+0xffff1940>
   119c8:	81c5883a 	add	r2,r16,r7
   119cc:	11400117 	ldw	r5,4(r2)
   119d0:	9009883a 	mov	r4,r18
   119d4:	29400054 	ori	r5,r5,1
   119d8:	11400115 	stw	r5,4(r2)
   119dc:	0013d700 	call	13d70 <__malloc_unlock>
   119e0:	80800204 	addi	r2,r16,8
   119e4:	003fe006 	br	11968 <__alt_data_end+0xffff1968>
   119e8:	9c000217 	ldw	r16,8(r19)
   119ec:	00bfff04 	movi	r2,-4
   119f0:	85800117 	ldw	r22,4(r16)
   119f4:	b0ac703a 	and	r22,r22,r2
   119f8:	b4400336 	bltu	r22,r17,11a08 <_malloc_r+0x344>
   119fc:	b445c83a 	sub	r2,r22,r17
   11a00:	00c003c4 	movi	r3,15
   11a04:	18805d16 	blt	r3,r2,11b7c <_malloc_r+0x4b8>
   11a08:	05c00074 	movhi	r23,1
   11a0c:	008000b4 	movhi	r2,2
   11a10:	10a53a04 	addi	r2,r2,-27416
   11a14:	bdde8004 	addi	r23,r23,31232
   11a18:	15400017 	ldw	r21,0(r2)
   11a1c:	b8c00017 	ldw	r3,0(r23)
   11a20:	00bfffc4 	movi	r2,-1
   11a24:	858d883a 	add	r6,r16,r22
   11a28:	8d6b883a 	add	r21,r17,r21
   11a2c:	1880ea26 	beq	r3,r2,11dd8 <_malloc_r+0x714>
   11a30:	ad4403c4 	addi	r21,r21,4111
   11a34:	00bc0004 	movi	r2,-4096
   11a38:	a8aa703a 	and	r21,r21,r2
   11a3c:	a80b883a 	mov	r5,r21
   11a40:	9009883a 	mov	r4,r18
   11a44:	d9800015 	stw	r6,0(sp)
   11a48:	00128e40 	call	128e4 <_sbrk_r>
   11a4c:	1029883a 	mov	r20,r2
   11a50:	00bfffc4 	movi	r2,-1
   11a54:	d9800017 	ldw	r6,0(sp)
   11a58:	a080e826 	beq	r20,r2,11dfc <_malloc_r+0x738>
   11a5c:	a180a636 	bltu	r20,r6,11cf8 <_malloc_r+0x634>
   11a60:	070000b4 	movhi	fp,2
   11a64:	e7257704 	addi	fp,fp,-27172
   11a68:	e0800017 	ldw	r2,0(fp)
   11a6c:	a887883a 	add	r3,r21,r2
   11a70:	e0c00015 	stw	r3,0(fp)
   11a74:	3500e626 	beq	r6,r20,11e10 <_malloc_r+0x74c>
   11a78:	b9000017 	ldw	r4,0(r23)
   11a7c:	00bfffc4 	movi	r2,-1
   11a80:	2080ee26 	beq	r4,r2,11e3c <_malloc_r+0x778>
   11a84:	a185c83a 	sub	r2,r20,r6
   11a88:	10c5883a 	add	r2,r2,r3
   11a8c:	e0800015 	stw	r2,0(fp)
   11a90:	a0c001cc 	andi	r3,r20,7
   11a94:	1800bc26 	beq	r3,zero,11d88 <_malloc_r+0x6c4>
   11a98:	a0e9c83a 	sub	r20,r20,r3
   11a9c:	00840204 	movi	r2,4104
   11aa0:	a5000204 	addi	r20,r20,8
   11aa4:	10c7c83a 	sub	r3,r2,r3
   11aa8:	a545883a 	add	r2,r20,r21
   11aac:	1083ffcc 	andi	r2,r2,4095
   11ab0:	18abc83a 	sub	r21,r3,r2
   11ab4:	a80b883a 	mov	r5,r21
   11ab8:	9009883a 	mov	r4,r18
   11abc:	00128e40 	call	128e4 <_sbrk_r>
   11ac0:	00ffffc4 	movi	r3,-1
   11ac4:	10c0e126 	beq	r2,r3,11e4c <_malloc_r+0x788>
   11ac8:	1505c83a 	sub	r2,r2,r20
   11acc:	1545883a 	add	r2,r2,r21
   11ad0:	10800054 	ori	r2,r2,1
   11ad4:	e0c00017 	ldw	r3,0(fp)
   11ad8:	9d000215 	stw	r20,8(r19)
   11adc:	a0800115 	stw	r2,4(r20)
   11ae0:	a8c7883a 	add	r3,r21,r3
   11ae4:	e0c00015 	stw	r3,0(fp)
   11ae8:	84c00e26 	beq	r16,r19,11b24 <_malloc_r+0x460>
   11aec:	018003c4 	movi	r6,15
   11af0:	3580a72e 	bgeu	r6,r22,11d90 <_malloc_r+0x6cc>
   11af4:	81400117 	ldw	r5,4(r16)
   11af8:	013ffe04 	movi	r4,-8
   11afc:	b0bffd04 	addi	r2,r22,-12
   11b00:	1104703a 	and	r2,r2,r4
   11b04:	2900004c 	andi	r4,r5,1
   11b08:	2088b03a 	or	r4,r4,r2
   11b0c:	81000115 	stw	r4,4(r16)
   11b10:	01400144 	movi	r5,5
   11b14:	8089883a 	add	r4,r16,r2
   11b18:	21400115 	stw	r5,4(r4)
   11b1c:	21400215 	stw	r5,8(r4)
   11b20:	3080cd36 	bltu	r6,r2,11e58 <_malloc_r+0x794>
   11b24:	008000b4 	movhi	r2,2
   11b28:	10a53904 	addi	r2,r2,-27420
   11b2c:	11000017 	ldw	r4,0(r2)
   11b30:	20c0012e 	bgeu	r4,r3,11b38 <_malloc_r+0x474>
   11b34:	10c00015 	stw	r3,0(r2)
   11b38:	008000b4 	movhi	r2,2
   11b3c:	10a53804 	addi	r2,r2,-27424
   11b40:	11000017 	ldw	r4,0(r2)
   11b44:	9c000217 	ldw	r16,8(r19)
   11b48:	20c0012e 	bgeu	r4,r3,11b50 <_malloc_r+0x48c>
   11b4c:	10c00015 	stw	r3,0(r2)
   11b50:	80c00117 	ldw	r3,4(r16)
   11b54:	00bfff04 	movi	r2,-4
   11b58:	1886703a 	and	r3,r3,r2
   11b5c:	1c45c83a 	sub	r2,r3,r17
   11b60:	1c400236 	bltu	r3,r17,11b6c <_malloc_r+0x4a8>
   11b64:	00c003c4 	movi	r3,15
   11b68:	18800416 	blt	r3,r2,11b7c <_malloc_r+0x4b8>
   11b6c:	9009883a 	mov	r4,r18
   11b70:	0013d700 	call	13d70 <__malloc_unlock>
   11b74:	0005883a 	mov	r2,zero
   11b78:	003f7b06 	br	11968 <__alt_data_end+0xffff1968>
   11b7c:	88c00054 	ori	r3,r17,1
   11b80:	80c00115 	stw	r3,4(r16)
   11b84:	8463883a 	add	r17,r16,r17
   11b88:	10800054 	ori	r2,r2,1
   11b8c:	9c400215 	stw	r17,8(r19)
   11b90:	88800115 	stw	r2,4(r17)
   11b94:	9009883a 	mov	r4,r18
   11b98:	0013d700 	call	13d70 <__malloc_unlock>
   11b9c:	80800204 	addi	r2,r16,8
   11ba0:	003f7106 	br	11968 <__alt_data_end+0xffff1968>
   11ba4:	00c00504 	movi	r3,20
   11ba8:	18804a2e 	bgeu	r3,r2,11cd4 <_malloc_r+0x610>
   11bac:	00c01504 	movi	r3,84
   11bb0:	18806e36 	bltu	r3,r2,11d6c <_malloc_r+0x6a8>
   11bb4:	8804d33a 	srli	r2,r17,12
   11bb8:	12001bc4 	addi	r8,r2,111
   11bbc:	11c01b84 	addi	r7,r2,110
   11bc0:	4209883a 	add	r4,r8,r8
   11bc4:	003edd06 	br	1173c <__alt_data_end+0xffff173c>
   11bc8:	3804d27a 	srli	r2,r7,9
   11bcc:	00c00104 	movi	r3,4
   11bd0:	1880442e 	bgeu	r3,r2,11ce4 <_malloc_r+0x620>
   11bd4:	00c00504 	movi	r3,20
   11bd8:	18808136 	bltu	r3,r2,11de0 <_malloc_r+0x71c>
   11bdc:	11401704 	addi	r5,r2,92
   11be0:	10c016c4 	addi	r3,r2,91
   11be4:	294b883a 	add	r5,r5,r5
   11be8:	294b883a 	add	r5,r5,r5
   11bec:	294b883a 	add	r5,r5,r5
   11bf0:	994b883a 	add	r5,r19,r5
   11bf4:	28800017 	ldw	r2,0(r5)
   11bf8:	01800074 	movhi	r6,1
   11bfc:	297ffe04 	addi	r5,r5,-8
   11c00:	3198f904 	addi	r6,r6,25572
   11c04:	28806526 	beq	r5,r2,11d9c <_malloc_r+0x6d8>
   11c08:	01bfff04 	movi	r6,-4
   11c0c:	10c00117 	ldw	r3,4(r2)
   11c10:	1986703a 	and	r3,r3,r6
   11c14:	38c0022e 	bgeu	r7,r3,11c20 <_malloc_r+0x55c>
   11c18:	10800217 	ldw	r2,8(r2)
   11c1c:	28bffb1e 	bne	r5,r2,11c0c <__alt_data_end+0xffff1c0c>
   11c20:	11400317 	ldw	r5,12(r2)
   11c24:	98c00117 	ldw	r3,4(r19)
   11c28:	81400315 	stw	r5,12(r16)
   11c2c:	80800215 	stw	r2,8(r16)
   11c30:	2c000215 	stw	r16,8(r5)
   11c34:	14000315 	stw	r16,12(r2)
   11c38:	003ef806 	br	1181c <__alt_data_end+0xffff181c>
   11c3c:	88c00054 	ori	r3,r17,1
   11c40:	80c00115 	stw	r3,4(r16)
   11c44:	8463883a 	add	r17,r16,r17
   11c48:	34400515 	stw	r17,20(r6)
   11c4c:	34400415 	stw	r17,16(r6)
   11c50:	10c00054 	ori	r3,r2,1
   11c54:	8a000315 	stw	r8,12(r17)
   11c58:	8a000215 	stw	r8,8(r17)
   11c5c:	88c00115 	stw	r3,4(r17)
   11c60:	88a3883a 	add	r17,r17,r2
   11c64:	88800015 	stw	r2,0(r17)
   11c68:	9009883a 	mov	r4,r18
   11c6c:	0013d700 	call	13d70 <__malloc_unlock>
   11c70:	80800204 	addi	r2,r16,8
   11c74:	003f3c06 	br	11968 <__alt_data_end+0xffff1968>
   11c78:	30c00117 	ldw	r3,4(r6)
   11c7c:	003ee706 	br	1181c <__alt_data_end+0xffff181c>
   11c80:	5ac00044 	addi	r11,r11,1
   11c84:	588000cc 	andi	r2,r11,3
   11c88:	31800204 	addi	r6,r6,8
   11c8c:	103efd1e 	bne	r2,zero,11884 <__alt_data_end+0xffff1884>
   11c90:	00002406 	br	11d24 <_malloc_r+0x660>
   11c94:	14000317 	ldw	r16,12(r2)
   11c98:	143f251e 	bne	r2,r16,11930 <__alt_data_end+0xffff1930>
   11c9c:	21000084 	addi	r4,r4,2
   11ca0:	003ebc06 	br	11794 <__alt_data_end+0xffff1794>
   11ca4:	8085883a 	add	r2,r16,r2
   11ca8:	10c00117 	ldw	r3,4(r2)
   11cac:	81000317 	ldw	r4,12(r16)
   11cb0:	81400217 	ldw	r5,8(r16)
   11cb4:	18c00054 	ori	r3,r3,1
   11cb8:	10c00115 	stw	r3,4(r2)
   11cbc:	29000315 	stw	r4,12(r5)
   11cc0:	21400215 	stw	r5,8(r4)
   11cc4:	9009883a 	mov	r4,r18
   11cc8:	0013d700 	call	13d70 <__malloc_unlock>
   11ccc:	80800204 	addi	r2,r16,8
   11cd0:	003f2506 	br	11968 <__alt_data_end+0xffff1968>
   11cd4:	12001704 	addi	r8,r2,92
   11cd8:	11c016c4 	addi	r7,r2,91
   11cdc:	4209883a 	add	r4,r8,r8
   11ce0:	003e9606 	br	1173c <__alt_data_end+0xffff173c>
   11ce4:	3804d1ba 	srli	r2,r7,6
   11ce8:	11400e44 	addi	r5,r2,57
   11cec:	10c00e04 	addi	r3,r2,56
   11cf0:	294b883a 	add	r5,r5,r5
   11cf4:	003fbc06 	br	11be8 <__alt_data_end+0xffff1be8>
   11cf8:	84ff5926 	beq	r16,r19,11a60 <__alt_data_end+0xffff1a60>
   11cfc:	00800074 	movhi	r2,1
   11d00:	1098f904 	addi	r2,r2,25572
   11d04:	14000217 	ldw	r16,8(r2)
   11d08:	00bfff04 	movi	r2,-4
   11d0c:	80c00117 	ldw	r3,4(r16)
   11d10:	1886703a 	and	r3,r3,r2
   11d14:	003f9106 	br	11b5c <__alt_data_end+0xffff1b5c>
   11d18:	60800217 	ldw	r2,8(r12)
   11d1c:	213fffc4 	addi	r4,r4,-1
   11d20:	1300651e 	bne	r2,r12,11eb8 <_malloc_r+0x7f4>
   11d24:	208000cc 	andi	r2,r4,3
   11d28:	633ffe04 	addi	r12,r12,-8
   11d2c:	103ffa1e 	bne	r2,zero,11d18 <__alt_data_end+0xffff1d18>
   11d30:	98800117 	ldw	r2,4(r19)
   11d34:	0146303a 	nor	r3,zero,r5
   11d38:	1884703a 	and	r2,r3,r2
   11d3c:	98800115 	stw	r2,4(r19)
   11d40:	294b883a 	add	r5,r5,r5
   11d44:	117f2836 	bltu	r2,r5,119e8 <__alt_data_end+0xffff19e8>
   11d48:	283f2726 	beq	r5,zero,119e8 <__alt_data_end+0xffff19e8>
   11d4c:	2886703a 	and	r3,r5,r2
   11d50:	5809883a 	mov	r4,r11
   11d54:	183ec31e 	bne	r3,zero,11864 <__alt_data_end+0xffff1864>
   11d58:	294b883a 	add	r5,r5,r5
   11d5c:	2886703a 	and	r3,r5,r2
   11d60:	21000104 	addi	r4,r4,4
   11d64:	183ffc26 	beq	r3,zero,11d58 <__alt_data_end+0xffff1d58>
   11d68:	003ebe06 	br	11864 <__alt_data_end+0xffff1864>
   11d6c:	00c05504 	movi	r3,340
   11d70:	18801236 	bltu	r3,r2,11dbc <_malloc_r+0x6f8>
   11d74:	8804d3fa 	srli	r2,r17,15
   11d78:	12001e04 	addi	r8,r2,120
   11d7c:	11c01dc4 	addi	r7,r2,119
   11d80:	4209883a 	add	r4,r8,r8
   11d84:	003e6d06 	br	1173c <__alt_data_end+0xffff173c>
   11d88:	00c40004 	movi	r3,4096
   11d8c:	003f4606 	br	11aa8 <__alt_data_end+0xffff1aa8>
   11d90:	00800044 	movi	r2,1
   11d94:	a0800115 	stw	r2,4(r20)
   11d98:	003f7406 	br	11b6c <__alt_data_end+0xffff1b6c>
   11d9c:	1805d0ba 	srai	r2,r3,2
   11da0:	01c00044 	movi	r7,1
   11da4:	30c00117 	ldw	r3,4(r6)
   11da8:	388e983a 	sll	r7,r7,r2
   11dac:	2805883a 	mov	r2,r5
   11db0:	38c6b03a 	or	r3,r7,r3
   11db4:	30c00115 	stw	r3,4(r6)
   11db8:	003f9b06 	br	11c28 <__alt_data_end+0xffff1c28>
   11dbc:	00c15504 	movi	r3,1364
   11dc0:	18801a36 	bltu	r3,r2,11e2c <_malloc_r+0x768>
   11dc4:	8804d4ba 	srli	r2,r17,18
   11dc8:	12001f44 	addi	r8,r2,125
   11dcc:	11c01f04 	addi	r7,r2,124
   11dd0:	4209883a 	add	r4,r8,r8
   11dd4:	003e5906 	br	1173c <__alt_data_end+0xffff173c>
   11dd8:	ad400404 	addi	r21,r21,16
   11ddc:	003f1706 	br	11a3c <__alt_data_end+0xffff1a3c>
   11de0:	00c01504 	movi	r3,84
   11de4:	18802336 	bltu	r3,r2,11e74 <_malloc_r+0x7b0>
   11de8:	3804d33a 	srli	r2,r7,12
   11dec:	11401bc4 	addi	r5,r2,111
   11df0:	10c01b84 	addi	r3,r2,110
   11df4:	294b883a 	add	r5,r5,r5
   11df8:	003f7b06 	br	11be8 <__alt_data_end+0xffff1be8>
   11dfc:	9c000217 	ldw	r16,8(r19)
   11e00:	00bfff04 	movi	r2,-4
   11e04:	80c00117 	ldw	r3,4(r16)
   11e08:	1886703a 	and	r3,r3,r2
   11e0c:	003f5306 	br	11b5c <__alt_data_end+0xffff1b5c>
   11e10:	3083ffcc 	andi	r2,r6,4095
   11e14:	103f181e 	bne	r2,zero,11a78 <__alt_data_end+0xffff1a78>
   11e18:	99000217 	ldw	r4,8(r19)
   11e1c:	b545883a 	add	r2,r22,r21
   11e20:	10800054 	ori	r2,r2,1
   11e24:	20800115 	stw	r2,4(r4)
   11e28:	003f3e06 	br	11b24 <__alt_data_end+0xffff1b24>
   11e2c:	01003f84 	movi	r4,254
   11e30:	02001fc4 	movi	r8,127
   11e34:	01c01f84 	movi	r7,126
   11e38:	003e4006 	br	1173c <__alt_data_end+0xffff173c>
   11e3c:	00800074 	movhi	r2,1
   11e40:	109e8004 	addi	r2,r2,31232
   11e44:	15000015 	stw	r20,0(r2)
   11e48:	003f1106 	br	11a90 <__alt_data_end+0xffff1a90>
   11e4c:	00800044 	movi	r2,1
   11e50:	002b883a 	mov	r21,zero
   11e54:	003f1f06 	br	11ad4 <__alt_data_end+0xffff1ad4>
   11e58:	81400204 	addi	r5,r16,8
   11e5c:	9009883a 	mov	r4,r18
   11e60:	001314c0 	call	1314c <_free_r>
   11e64:	008000b4 	movhi	r2,2
   11e68:	10a57704 	addi	r2,r2,-27172
   11e6c:	10c00017 	ldw	r3,0(r2)
   11e70:	003f2c06 	br	11b24 <__alt_data_end+0xffff1b24>
   11e74:	00c05504 	movi	r3,340
   11e78:	18800536 	bltu	r3,r2,11e90 <_malloc_r+0x7cc>
   11e7c:	3804d3fa 	srli	r2,r7,15
   11e80:	11401e04 	addi	r5,r2,120
   11e84:	10c01dc4 	addi	r3,r2,119
   11e88:	294b883a 	add	r5,r5,r5
   11e8c:	003f5606 	br	11be8 <__alt_data_end+0xffff1be8>
   11e90:	00c15504 	movi	r3,1364
   11e94:	18800536 	bltu	r3,r2,11eac <_malloc_r+0x7e8>
   11e98:	3804d4ba 	srli	r2,r7,18
   11e9c:	11401f44 	addi	r5,r2,125
   11ea0:	10c01f04 	addi	r3,r2,124
   11ea4:	294b883a 	add	r5,r5,r5
   11ea8:	003f4f06 	br	11be8 <__alt_data_end+0xffff1be8>
   11eac:	01403f84 	movi	r5,254
   11eb0:	00c01f84 	movi	r3,126
   11eb4:	003f4c06 	br	11be8 <__alt_data_end+0xffff1be8>
   11eb8:	98800117 	ldw	r2,4(r19)
   11ebc:	003fa006 	br	11d40 <__alt_data_end+0xffff1d40>
   11ec0:	8808d0fa 	srli	r4,r17,3
   11ec4:	20800044 	addi	r2,r4,1
   11ec8:	1085883a 	add	r2,r2,r2
   11ecc:	003e9006 	br	11910 <__alt_data_end+0xffff1910>

00011ed0 <memchr>:
   11ed0:	208000cc 	andi	r2,r4,3
   11ed4:	280f883a 	mov	r7,r5
   11ed8:	10003426 	beq	r2,zero,11fac <memchr+0xdc>
   11edc:	30bfffc4 	addi	r2,r6,-1
   11ee0:	30001a26 	beq	r6,zero,11f4c <memchr+0x7c>
   11ee4:	20c00003 	ldbu	r3,0(r4)
   11ee8:	29803fcc 	andi	r6,r5,255
   11eec:	30c0051e 	bne	r6,r3,11f04 <memchr+0x34>
   11ef0:	00001806 	br	11f54 <memchr+0x84>
   11ef4:	10001526 	beq	r2,zero,11f4c <memchr+0x7c>
   11ef8:	20c00003 	ldbu	r3,0(r4)
   11efc:	10bfffc4 	addi	r2,r2,-1
   11f00:	30c01426 	beq	r6,r3,11f54 <memchr+0x84>
   11f04:	21000044 	addi	r4,r4,1
   11f08:	20c000cc 	andi	r3,r4,3
   11f0c:	183ff91e 	bne	r3,zero,11ef4 <__alt_data_end+0xffff1ef4>
   11f10:	020000c4 	movi	r8,3
   11f14:	40801136 	bltu	r8,r2,11f5c <memchr+0x8c>
   11f18:	10000c26 	beq	r2,zero,11f4c <memchr+0x7c>
   11f1c:	20c00003 	ldbu	r3,0(r4)
   11f20:	29403fcc 	andi	r5,r5,255
   11f24:	28c00b26 	beq	r5,r3,11f54 <memchr+0x84>
   11f28:	20c00044 	addi	r3,r4,1
   11f2c:	39803fcc 	andi	r6,r7,255
   11f30:	2089883a 	add	r4,r4,r2
   11f34:	00000306 	br	11f44 <memchr+0x74>
   11f38:	18c00044 	addi	r3,r3,1
   11f3c:	197fffc3 	ldbu	r5,-1(r3)
   11f40:	31400526 	beq	r6,r5,11f58 <memchr+0x88>
   11f44:	1805883a 	mov	r2,r3
   11f48:	20fffb1e 	bne	r4,r3,11f38 <__alt_data_end+0xffff1f38>
   11f4c:	0005883a 	mov	r2,zero
   11f50:	f800283a 	ret
   11f54:	2005883a 	mov	r2,r4
   11f58:	f800283a 	ret
   11f5c:	28c03fcc 	andi	r3,r5,255
   11f60:	1812923a 	slli	r9,r3,8
   11f64:	02ffbff4 	movhi	r11,65279
   11f68:	02a02074 	movhi	r10,32897
   11f6c:	48d2b03a 	or	r9,r9,r3
   11f70:	4806943a 	slli	r3,r9,16
   11f74:	5affbfc4 	addi	r11,r11,-257
   11f78:	52a02004 	addi	r10,r10,-32640
   11f7c:	48d2b03a 	or	r9,r9,r3
   11f80:	20c00017 	ldw	r3,0(r4)
   11f84:	48c6f03a 	xor	r3,r9,r3
   11f88:	1acd883a 	add	r6,r3,r11
   11f8c:	00c6303a 	nor	r3,zero,r3
   11f90:	30c6703a 	and	r3,r6,r3
   11f94:	1a86703a 	and	r3,r3,r10
   11f98:	183fe01e 	bne	r3,zero,11f1c <__alt_data_end+0xffff1f1c>
   11f9c:	10bfff04 	addi	r2,r2,-4
   11fa0:	21000104 	addi	r4,r4,4
   11fa4:	40bff636 	bltu	r8,r2,11f80 <__alt_data_end+0xffff1f80>
   11fa8:	003fdb06 	br	11f18 <__alt_data_end+0xffff1f18>
   11fac:	3005883a 	mov	r2,r6
   11fb0:	003fd706 	br	11f10 <__alt_data_end+0xffff1f10>

00011fb4 <memcpy>:
   11fb4:	defffd04 	addi	sp,sp,-12
   11fb8:	dfc00215 	stw	ra,8(sp)
   11fbc:	dc400115 	stw	r17,4(sp)
   11fc0:	dc000015 	stw	r16,0(sp)
   11fc4:	00c003c4 	movi	r3,15
   11fc8:	2005883a 	mov	r2,r4
   11fcc:	1980452e 	bgeu	r3,r6,120e4 <memcpy+0x130>
   11fd0:	2906b03a 	or	r3,r5,r4
   11fd4:	18c000cc 	andi	r3,r3,3
   11fd8:	1800441e 	bne	r3,zero,120ec <memcpy+0x138>
   11fdc:	347ffc04 	addi	r17,r6,-16
   11fe0:	8822d13a 	srli	r17,r17,4
   11fe4:	28c00104 	addi	r3,r5,4
   11fe8:	23400104 	addi	r13,r4,4
   11fec:	8820913a 	slli	r16,r17,4
   11ff0:	2b000204 	addi	r12,r5,8
   11ff4:	22c00204 	addi	r11,r4,8
   11ff8:	84000504 	addi	r16,r16,20
   11ffc:	2a800304 	addi	r10,r5,12
   12000:	22400304 	addi	r9,r4,12
   12004:	2c21883a 	add	r16,r5,r16
   12008:	2811883a 	mov	r8,r5
   1200c:	200f883a 	mov	r7,r4
   12010:	41000017 	ldw	r4,0(r8)
   12014:	1fc00017 	ldw	ra,0(r3)
   12018:	63c00017 	ldw	r15,0(r12)
   1201c:	39000015 	stw	r4,0(r7)
   12020:	53800017 	ldw	r14,0(r10)
   12024:	6fc00015 	stw	ra,0(r13)
   12028:	5bc00015 	stw	r15,0(r11)
   1202c:	4b800015 	stw	r14,0(r9)
   12030:	18c00404 	addi	r3,r3,16
   12034:	39c00404 	addi	r7,r7,16
   12038:	42000404 	addi	r8,r8,16
   1203c:	6b400404 	addi	r13,r13,16
   12040:	63000404 	addi	r12,r12,16
   12044:	5ac00404 	addi	r11,r11,16
   12048:	52800404 	addi	r10,r10,16
   1204c:	4a400404 	addi	r9,r9,16
   12050:	1c3fef1e 	bne	r3,r16,12010 <__alt_data_end+0xffff2010>
   12054:	89c00044 	addi	r7,r17,1
   12058:	380e913a 	slli	r7,r7,4
   1205c:	310003cc 	andi	r4,r6,15
   12060:	02c000c4 	movi	r11,3
   12064:	11c7883a 	add	r3,r2,r7
   12068:	29cb883a 	add	r5,r5,r7
   1206c:	5900212e 	bgeu	r11,r4,120f4 <memcpy+0x140>
   12070:	1813883a 	mov	r9,r3
   12074:	2811883a 	mov	r8,r5
   12078:	200f883a 	mov	r7,r4
   1207c:	42800017 	ldw	r10,0(r8)
   12080:	4a400104 	addi	r9,r9,4
   12084:	39ffff04 	addi	r7,r7,-4
   12088:	4abfff15 	stw	r10,-4(r9)
   1208c:	42000104 	addi	r8,r8,4
   12090:	59fffa36 	bltu	r11,r7,1207c <__alt_data_end+0xffff207c>
   12094:	213fff04 	addi	r4,r4,-4
   12098:	2008d0ba 	srli	r4,r4,2
   1209c:	318000cc 	andi	r6,r6,3
   120a0:	21000044 	addi	r4,r4,1
   120a4:	2109883a 	add	r4,r4,r4
   120a8:	2109883a 	add	r4,r4,r4
   120ac:	1907883a 	add	r3,r3,r4
   120b0:	290b883a 	add	r5,r5,r4
   120b4:	30000626 	beq	r6,zero,120d0 <memcpy+0x11c>
   120b8:	198d883a 	add	r6,r3,r6
   120bc:	29c00003 	ldbu	r7,0(r5)
   120c0:	18c00044 	addi	r3,r3,1
   120c4:	29400044 	addi	r5,r5,1
   120c8:	19ffffc5 	stb	r7,-1(r3)
   120cc:	19bffb1e 	bne	r3,r6,120bc <__alt_data_end+0xffff20bc>
   120d0:	dfc00217 	ldw	ra,8(sp)
   120d4:	dc400117 	ldw	r17,4(sp)
   120d8:	dc000017 	ldw	r16,0(sp)
   120dc:	dec00304 	addi	sp,sp,12
   120e0:	f800283a 	ret
   120e4:	2007883a 	mov	r3,r4
   120e8:	003ff206 	br	120b4 <__alt_data_end+0xffff20b4>
   120ec:	2007883a 	mov	r3,r4
   120f0:	003ff106 	br	120b8 <__alt_data_end+0xffff20b8>
   120f4:	200d883a 	mov	r6,r4
   120f8:	003fee06 	br	120b4 <__alt_data_end+0xffff20b4>

000120fc <memmove>:
   120fc:	2005883a 	mov	r2,r4
   12100:	29000b2e 	bgeu	r5,r4,12130 <memmove+0x34>
   12104:	298f883a 	add	r7,r5,r6
   12108:	21c0092e 	bgeu	r4,r7,12130 <memmove+0x34>
   1210c:	2187883a 	add	r3,r4,r6
   12110:	198bc83a 	sub	r5,r3,r6
   12114:	30004826 	beq	r6,zero,12238 <memmove+0x13c>
   12118:	39ffffc4 	addi	r7,r7,-1
   1211c:	39000003 	ldbu	r4,0(r7)
   12120:	18ffffc4 	addi	r3,r3,-1
   12124:	19000005 	stb	r4,0(r3)
   12128:	28fffb1e 	bne	r5,r3,12118 <__alt_data_end+0xffff2118>
   1212c:	f800283a 	ret
   12130:	00c003c4 	movi	r3,15
   12134:	1980412e 	bgeu	r3,r6,1223c <memmove+0x140>
   12138:	2886b03a 	or	r3,r5,r2
   1213c:	18c000cc 	andi	r3,r3,3
   12140:	1800401e 	bne	r3,zero,12244 <memmove+0x148>
   12144:	33fffc04 	addi	r15,r6,-16
   12148:	781ed13a 	srli	r15,r15,4
   1214c:	28c00104 	addi	r3,r5,4
   12150:	13400104 	addi	r13,r2,4
   12154:	781c913a 	slli	r14,r15,4
   12158:	2b000204 	addi	r12,r5,8
   1215c:	12c00204 	addi	r11,r2,8
   12160:	73800504 	addi	r14,r14,20
   12164:	2a800304 	addi	r10,r5,12
   12168:	12400304 	addi	r9,r2,12
   1216c:	2b9d883a 	add	r14,r5,r14
   12170:	2811883a 	mov	r8,r5
   12174:	100f883a 	mov	r7,r2
   12178:	41000017 	ldw	r4,0(r8)
   1217c:	39c00404 	addi	r7,r7,16
   12180:	18c00404 	addi	r3,r3,16
   12184:	393ffc15 	stw	r4,-16(r7)
   12188:	193ffc17 	ldw	r4,-16(r3)
   1218c:	6b400404 	addi	r13,r13,16
   12190:	5ac00404 	addi	r11,r11,16
   12194:	693ffc15 	stw	r4,-16(r13)
   12198:	61000017 	ldw	r4,0(r12)
   1219c:	4a400404 	addi	r9,r9,16
   121a0:	42000404 	addi	r8,r8,16
   121a4:	593ffc15 	stw	r4,-16(r11)
   121a8:	51000017 	ldw	r4,0(r10)
   121ac:	63000404 	addi	r12,r12,16
   121b0:	52800404 	addi	r10,r10,16
   121b4:	493ffc15 	stw	r4,-16(r9)
   121b8:	1bbfef1e 	bne	r3,r14,12178 <__alt_data_end+0xffff2178>
   121bc:	79000044 	addi	r4,r15,1
   121c0:	2008913a 	slli	r4,r4,4
   121c4:	328003cc 	andi	r10,r6,15
   121c8:	02c000c4 	movi	r11,3
   121cc:	1107883a 	add	r3,r2,r4
   121d0:	290b883a 	add	r5,r5,r4
   121d4:	5a801e2e 	bgeu	r11,r10,12250 <memmove+0x154>
   121d8:	1813883a 	mov	r9,r3
   121dc:	2811883a 	mov	r8,r5
   121e0:	500f883a 	mov	r7,r10
   121e4:	41000017 	ldw	r4,0(r8)
   121e8:	4a400104 	addi	r9,r9,4
   121ec:	39ffff04 	addi	r7,r7,-4
   121f0:	493fff15 	stw	r4,-4(r9)
   121f4:	42000104 	addi	r8,r8,4
   121f8:	59fffa36 	bltu	r11,r7,121e4 <__alt_data_end+0xffff21e4>
   121fc:	513fff04 	addi	r4,r10,-4
   12200:	2008d0ba 	srli	r4,r4,2
   12204:	318000cc 	andi	r6,r6,3
   12208:	21000044 	addi	r4,r4,1
   1220c:	2109883a 	add	r4,r4,r4
   12210:	2109883a 	add	r4,r4,r4
   12214:	1907883a 	add	r3,r3,r4
   12218:	290b883a 	add	r5,r5,r4
   1221c:	30000b26 	beq	r6,zero,1224c <memmove+0x150>
   12220:	198d883a 	add	r6,r3,r6
   12224:	29c00003 	ldbu	r7,0(r5)
   12228:	18c00044 	addi	r3,r3,1
   1222c:	29400044 	addi	r5,r5,1
   12230:	19ffffc5 	stb	r7,-1(r3)
   12234:	19bffb1e 	bne	r3,r6,12224 <__alt_data_end+0xffff2224>
   12238:	f800283a 	ret
   1223c:	1007883a 	mov	r3,r2
   12240:	003ff606 	br	1221c <__alt_data_end+0xffff221c>
   12244:	1007883a 	mov	r3,r2
   12248:	003ff506 	br	12220 <__alt_data_end+0xffff2220>
   1224c:	f800283a 	ret
   12250:	500d883a 	mov	r6,r10
   12254:	003ff106 	br	1221c <__alt_data_end+0xffff221c>

00012258 <memset>:
   12258:	20c000cc 	andi	r3,r4,3
   1225c:	2005883a 	mov	r2,r4
   12260:	18004426 	beq	r3,zero,12374 <memset+0x11c>
   12264:	31ffffc4 	addi	r7,r6,-1
   12268:	30004026 	beq	r6,zero,1236c <memset+0x114>
   1226c:	2813883a 	mov	r9,r5
   12270:	200d883a 	mov	r6,r4
   12274:	2007883a 	mov	r3,r4
   12278:	00000406 	br	1228c <memset+0x34>
   1227c:	3a3fffc4 	addi	r8,r7,-1
   12280:	31800044 	addi	r6,r6,1
   12284:	38003926 	beq	r7,zero,1236c <memset+0x114>
   12288:	400f883a 	mov	r7,r8
   1228c:	18c00044 	addi	r3,r3,1
   12290:	32400005 	stb	r9,0(r6)
   12294:	1a0000cc 	andi	r8,r3,3
   12298:	403ff81e 	bne	r8,zero,1227c <__alt_data_end+0xffff227c>
   1229c:	010000c4 	movi	r4,3
   122a0:	21c02d2e 	bgeu	r4,r7,12358 <memset+0x100>
   122a4:	29003fcc 	andi	r4,r5,255
   122a8:	200c923a 	slli	r6,r4,8
   122ac:	3108b03a 	or	r4,r6,r4
   122b0:	200c943a 	slli	r6,r4,16
   122b4:	218cb03a 	or	r6,r4,r6
   122b8:	010003c4 	movi	r4,15
   122bc:	21c0182e 	bgeu	r4,r7,12320 <memset+0xc8>
   122c0:	3b3ffc04 	addi	r12,r7,-16
   122c4:	6018d13a 	srli	r12,r12,4
   122c8:	1a000104 	addi	r8,r3,4
   122cc:	1ac00204 	addi	r11,r3,8
   122d0:	6008913a 	slli	r4,r12,4
   122d4:	1a800304 	addi	r10,r3,12
   122d8:	1813883a 	mov	r9,r3
   122dc:	21000504 	addi	r4,r4,20
   122e0:	1909883a 	add	r4,r3,r4
   122e4:	49800015 	stw	r6,0(r9)
   122e8:	41800015 	stw	r6,0(r8)
   122ec:	59800015 	stw	r6,0(r11)
   122f0:	51800015 	stw	r6,0(r10)
   122f4:	42000404 	addi	r8,r8,16
   122f8:	4a400404 	addi	r9,r9,16
   122fc:	5ac00404 	addi	r11,r11,16
   12300:	52800404 	addi	r10,r10,16
   12304:	413ff71e 	bne	r8,r4,122e4 <__alt_data_end+0xffff22e4>
   12308:	63000044 	addi	r12,r12,1
   1230c:	6018913a 	slli	r12,r12,4
   12310:	39c003cc 	andi	r7,r7,15
   12314:	010000c4 	movi	r4,3
   12318:	1b07883a 	add	r3,r3,r12
   1231c:	21c00e2e 	bgeu	r4,r7,12358 <memset+0x100>
   12320:	1813883a 	mov	r9,r3
   12324:	3811883a 	mov	r8,r7
   12328:	010000c4 	movi	r4,3
   1232c:	49800015 	stw	r6,0(r9)
   12330:	423fff04 	addi	r8,r8,-4
   12334:	4a400104 	addi	r9,r9,4
   12338:	223ffc36 	bltu	r4,r8,1232c <__alt_data_end+0xffff232c>
   1233c:	393fff04 	addi	r4,r7,-4
   12340:	2008d0ba 	srli	r4,r4,2
   12344:	39c000cc 	andi	r7,r7,3
   12348:	21000044 	addi	r4,r4,1
   1234c:	2109883a 	add	r4,r4,r4
   12350:	2109883a 	add	r4,r4,r4
   12354:	1907883a 	add	r3,r3,r4
   12358:	38000526 	beq	r7,zero,12370 <memset+0x118>
   1235c:	19cf883a 	add	r7,r3,r7
   12360:	19400005 	stb	r5,0(r3)
   12364:	18c00044 	addi	r3,r3,1
   12368:	38fffd1e 	bne	r7,r3,12360 <__alt_data_end+0xffff2360>
   1236c:	f800283a 	ret
   12370:	f800283a 	ret
   12374:	2007883a 	mov	r3,r4
   12378:	300f883a 	mov	r7,r6
   1237c:	003fc706 	br	1229c <__alt_data_end+0xffff229c>

00012380 <_realloc_r>:
   12380:	defff604 	addi	sp,sp,-40
   12384:	dc800215 	stw	r18,8(sp)
   12388:	dfc00915 	stw	ra,36(sp)
   1238c:	df000815 	stw	fp,32(sp)
   12390:	ddc00715 	stw	r23,28(sp)
   12394:	dd800615 	stw	r22,24(sp)
   12398:	dd400515 	stw	r21,20(sp)
   1239c:	dd000415 	stw	r20,16(sp)
   123a0:	dcc00315 	stw	r19,12(sp)
   123a4:	dc400115 	stw	r17,4(sp)
   123a8:	dc000015 	stw	r16,0(sp)
   123ac:	3025883a 	mov	r18,r6
   123b0:	2800b726 	beq	r5,zero,12690 <_realloc_r+0x310>
   123b4:	282b883a 	mov	r21,r5
   123b8:	2029883a 	mov	r20,r4
   123bc:	0013d4c0 	call	13d4c <__malloc_lock>
   123c0:	a8bfff17 	ldw	r2,-4(r21)
   123c4:	043fff04 	movi	r16,-4
   123c8:	90c002c4 	addi	r3,r18,11
   123cc:	01000584 	movi	r4,22
   123d0:	acfffe04 	addi	r19,r21,-8
   123d4:	1420703a 	and	r16,r2,r16
   123d8:	20c0332e 	bgeu	r4,r3,124a8 <_realloc_r+0x128>
   123dc:	047ffe04 	movi	r17,-8
   123e0:	1c62703a 	and	r17,r3,r17
   123e4:	8807883a 	mov	r3,r17
   123e8:	88005816 	blt	r17,zero,1254c <_realloc_r+0x1cc>
   123ec:	8c805736 	bltu	r17,r18,1254c <_realloc_r+0x1cc>
   123f0:	80c0300e 	bge	r16,r3,124b4 <_realloc_r+0x134>
   123f4:	07000074 	movhi	fp,1
   123f8:	e718f904 	addi	fp,fp,25572
   123fc:	e1c00217 	ldw	r7,8(fp)
   12400:	9c09883a 	add	r4,r19,r16
   12404:	22000117 	ldw	r8,4(r4)
   12408:	21c06326 	beq	r4,r7,12598 <_realloc_r+0x218>
   1240c:	017fff84 	movi	r5,-2
   12410:	414a703a 	and	r5,r8,r5
   12414:	214b883a 	add	r5,r4,r5
   12418:	29800117 	ldw	r6,4(r5)
   1241c:	3180004c 	andi	r6,r6,1
   12420:	30003f26 	beq	r6,zero,12520 <_realloc_r+0x1a0>
   12424:	1080004c 	andi	r2,r2,1
   12428:	10008326 	beq	r2,zero,12638 <_realloc_r+0x2b8>
   1242c:	900b883a 	mov	r5,r18
   12430:	a009883a 	mov	r4,r20
   12434:	00116c40 	call	116c4 <_malloc_r>
   12438:	1025883a 	mov	r18,r2
   1243c:	10011e26 	beq	r2,zero,128b8 <_realloc_r+0x538>
   12440:	a93fff17 	ldw	r4,-4(r21)
   12444:	10fffe04 	addi	r3,r2,-8
   12448:	00bfff84 	movi	r2,-2
   1244c:	2084703a 	and	r2,r4,r2
   12450:	9885883a 	add	r2,r19,r2
   12454:	1880ee26 	beq	r3,r2,12810 <_realloc_r+0x490>
   12458:	81bfff04 	addi	r6,r16,-4
   1245c:	00800904 	movi	r2,36
   12460:	1180b836 	bltu	r2,r6,12744 <_realloc_r+0x3c4>
   12464:	00c004c4 	movi	r3,19
   12468:	19809636 	bltu	r3,r6,126c4 <_realloc_r+0x344>
   1246c:	9005883a 	mov	r2,r18
   12470:	a807883a 	mov	r3,r21
   12474:	19000017 	ldw	r4,0(r3)
   12478:	11000015 	stw	r4,0(r2)
   1247c:	19000117 	ldw	r4,4(r3)
   12480:	11000115 	stw	r4,4(r2)
   12484:	18c00217 	ldw	r3,8(r3)
   12488:	10c00215 	stw	r3,8(r2)
   1248c:	a80b883a 	mov	r5,r21
   12490:	a009883a 	mov	r4,r20
   12494:	001314c0 	call	1314c <_free_r>
   12498:	a009883a 	mov	r4,r20
   1249c:	0013d700 	call	13d70 <__malloc_unlock>
   124a0:	9005883a 	mov	r2,r18
   124a4:	00001206 	br	124f0 <_realloc_r+0x170>
   124a8:	00c00404 	movi	r3,16
   124ac:	1823883a 	mov	r17,r3
   124b0:	003fce06 	br	123ec <__alt_data_end+0xffff23ec>
   124b4:	a825883a 	mov	r18,r21
   124b8:	8445c83a 	sub	r2,r16,r17
   124bc:	00c003c4 	movi	r3,15
   124c0:	18802636 	bltu	r3,r2,1255c <_realloc_r+0x1dc>
   124c4:	99800117 	ldw	r6,4(r19)
   124c8:	9c07883a 	add	r3,r19,r16
   124cc:	3180004c 	andi	r6,r6,1
   124d0:	3420b03a 	or	r16,r6,r16
   124d4:	9c000115 	stw	r16,4(r19)
   124d8:	18800117 	ldw	r2,4(r3)
   124dc:	10800054 	ori	r2,r2,1
   124e0:	18800115 	stw	r2,4(r3)
   124e4:	a009883a 	mov	r4,r20
   124e8:	0013d700 	call	13d70 <__malloc_unlock>
   124ec:	9005883a 	mov	r2,r18
   124f0:	dfc00917 	ldw	ra,36(sp)
   124f4:	df000817 	ldw	fp,32(sp)
   124f8:	ddc00717 	ldw	r23,28(sp)
   124fc:	dd800617 	ldw	r22,24(sp)
   12500:	dd400517 	ldw	r21,20(sp)
   12504:	dd000417 	ldw	r20,16(sp)
   12508:	dcc00317 	ldw	r19,12(sp)
   1250c:	dc800217 	ldw	r18,8(sp)
   12510:	dc400117 	ldw	r17,4(sp)
   12514:	dc000017 	ldw	r16,0(sp)
   12518:	dec00a04 	addi	sp,sp,40
   1251c:	f800283a 	ret
   12520:	017fff04 	movi	r5,-4
   12524:	414a703a 	and	r5,r8,r5
   12528:	814d883a 	add	r6,r16,r5
   1252c:	30c01f16 	blt	r6,r3,125ac <_realloc_r+0x22c>
   12530:	20800317 	ldw	r2,12(r4)
   12534:	20c00217 	ldw	r3,8(r4)
   12538:	a825883a 	mov	r18,r21
   1253c:	3021883a 	mov	r16,r6
   12540:	18800315 	stw	r2,12(r3)
   12544:	10c00215 	stw	r3,8(r2)
   12548:	003fdb06 	br	124b8 <__alt_data_end+0xffff24b8>
   1254c:	00800304 	movi	r2,12
   12550:	a0800015 	stw	r2,0(r20)
   12554:	0005883a 	mov	r2,zero
   12558:	003fe506 	br	124f0 <__alt_data_end+0xffff24f0>
   1255c:	98c00117 	ldw	r3,4(r19)
   12560:	9c4b883a 	add	r5,r19,r17
   12564:	11000054 	ori	r4,r2,1
   12568:	18c0004c 	andi	r3,r3,1
   1256c:	1c62b03a 	or	r17,r3,r17
   12570:	9c400115 	stw	r17,4(r19)
   12574:	29000115 	stw	r4,4(r5)
   12578:	2885883a 	add	r2,r5,r2
   1257c:	10c00117 	ldw	r3,4(r2)
   12580:	29400204 	addi	r5,r5,8
   12584:	a009883a 	mov	r4,r20
   12588:	18c00054 	ori	r3,r3,1
   1258c:	10c00115 	stw	r3,4(r2)
   12590:	001314c0 	call	1314c <_free_r>
   12594:	003fd306 	br	124e4 <__alt_data_end+0xffff24e4>
   12598:	017fff04 	movi	r5,-4
   1259c:	414a703a 	and	r5,r8,r5
   125a0:	89800404 	addi	r6,r17,16
   125a4:	8151883a 	add	r8,r16,r5
   125a8:	4180590e 	bge	r8,r6,12710 <_realloc_r+0x390>
   125ac:	1080004c 	andi	r2,r2,1
   125b0:	103f9e1e 	bne	r2,zero,1242c <__alt_data_end+0xffff242c>
   125b4:	adbffe17 	ldw	r22,-8(r21)
   125b8:	00bfff04 	movi	r2,-4
   125bc:	9dadc83a 	sub	r22,r19,r22
   125c0:	b1800117 	ldw	r6,4(r22)
   125c4:	3084703a 	and	r2,r6,r2
   125c8:	20002026 	beq	r4,zero,1264c <_realloc_r+0x2cc>
   125cc:	80af883a 	add	r23,r16,r2
   125d0:	b96f883a 	add	r23,r23,r5
   125d4:	21c05f26 	beq	r4,r7,12754 <_realloc_r+0x3d4>
   125d8:	b8c01c16 	blt	r23,r3,1264c <_realloc_r+0x2cc>
   125dc:	20800317 	ldw	r2,12(r4)
   125e0:	20c00217 	ldw	r3,8(r4)
   125e4:	81bfff04 	addi	r6,r16,-4
   125e8:	01000904 	movi	r4,36
   125ec:	18800315 	stw	r2,12(r3)
   125f0:	10c00215 	stw	r3,8(r2)
   125f4:	b0c00217 	ldw	r3,8(r22)
   125f8:	b0800317 	ldw	r2,12(r22)
   125fc:	b4800204 	addi	r18,r22,8
   12600:	18800315 	stw	r2,12(r3)
   12604:	10c00215 	stw	r3,8(r2)
   12608:	21801b36 	bltu	r4,r6,12678 <_realloc_r+0x2f8>
   1260c:	008004c4 	movi	r2,19
   12610:	1180352e 	bgeu	r2,r6,126e8 <_realloc_r+0x368>
   12614:	a8800017 	ldw	r2,0(r21)
   12618:	b0800215 	stw	r2,8(r22)
   1261c:	a8800117 	ldw	r2,4(r21)
   12620:	b0800315 	stw	r2,12(r22)
   12624:	008006c4 	movi	r2,27
   12628:	11807f36 	bltu	r2,r6,12828 <_realloc_r+0x4a8>
   1262c:	b0800404 	addi	r2,r22,16
   12630:	ad400204 	addi	r21,r21,8
   12634:	00002d06 	br	126ec <_realloc_r+0x36c>
   12638:	adbffe17 	ldw	r22,-8(r21)
   1263c:	00bfff04 	movi	r2,-4
   12640:	9dadc83a 	sub	r22,r19,r22
   12644:	b1000117 	ldw	r4,4(r22)
   12648:	2084703a 	and	r2,r4,r2
   1264c:	b03f7726 	beq	r22,zero,1242c <__alt_data_end+0xffff242c>
   12650:	80af883a 	add	r23,r16,r2
   12654:	b8ff7516 	blt	r23,r3,1242c <__alt_data_end+0xffff242c>
   12658:	b0800317 	ldw	r2,12(r22)
   1265c:	b0c00217 	ldw	r3,8(r22)
   12660:	81bfff04 	addi	r6,r16,-4
   12664:	01000904 	movi	r4,36
   12668:	18800315 	stw	r2,12(r3)
   1266c:	10c00215 	stw	r3,8(r2)
   12670:	b4800204 	addi	r18,r22,8
   12674:	21bfe52e 	bgeu	r4,r6,1260c <__alt_data_end+0xffff260c>
   12678:	a80b883a 	mov	r5,r21
   1267c:	9009883a 	mov	r4,r18
   12680:	00120fc0 	call	120fc <memmove>
   12684:	b821883a 	mov	r16,r23
   12688:	b027883a 	mov	r19,r22
   1268c:	003f8a06 	br	124b8 <__alt_data_end+0xffff24b8>
   12690:	300b883a 	mov	r5,r6
   12694:	dfc00917 	ldw	ra,36(sp)
   12698:	df000817 	ldw	fp,32(sp)
   1269c:	ddc00717 	ldw	r23,28(sp)
   126a0:	dd800617 	ldw	r22,24(sp)
   126a4:	dd400517 	ldw	r21,20(sp)
   126a8:	dd000417 	ldw	r20,16(sp)
   126ac:	dcc00317 	ldw	r19,12(sp)
   126b0:	dc800217 	ldw	r18,8(sp)
   126b4:	dc400117 	ldw	r17,4(sp)
   126b8:	dc000017 	ldw	r16,0(sp)
   126bc:	dec00a04 	addi	sp,sp,40
   126c0:	00116c41 	jmpi	116c4 <_malloc_r>
   126c4:	a8c00017 	ldw	r3,0(r21)
   126c8:	90c00015 	stw	r3,0(r18)
   126cc:	a8c00117 	ldw	r3,4(r21)
   126d0:	90c00115 	stw	r3,4(r18)
   126d4:	00c006c4 	movi	r3,27
   126d8:	19804536 	bltu	r3,r6,127f0 <_realloc_r+0x470>
   126dc:	90800204 	addi	r2,r18,8
   126e0:	a8c00204 	addi	r3,r21,8
   126e4:	003f6306 	br	12474 <__alt_data_end+0xffff2474>
   126e8:	9005883a 	mov	r2,r18
   126ec:	a8c00017 	ldw	r3,0(r21)
   126f0:	b821883a 	mov	r16,r23
   126f4:	b027883a 	mov	r19,r22
   126f8:	10c00015 	stw	r3,0(r2)
   126fc:	a8c00117 	ldw	r3,4(r21)
   12700:	10c00115 	stw	r3,4(r2)
   12704:	a8c00217 	ldw	r3,8(r21)
   12708:	10c00215 	stw	r3,8(r2)
   1270c:	003f6a06 	br	124b8 <__alt_data_end+0xffff24b8>
   12710:	9c67883a 	add	r19,r19,r17
   12714:	4445c83a 	sub	r2,r8,r17
   12718:	e4c00215 	stw	r19,8(fp)
   1271c:	10800054 	ori	r2,r2,1
   12720:	98800115 	stw	r2,4(r19)
   12724:	a8bfff17 	ldw	r2,-4(r21)
   12728:	a009883a 	mov	r4,r20
   1272c:	1080004c 	andi	r2,r2,1
   12730:	1462b03a 	or	r17,r2,r17
   12734:	ac7fff15 	stw	r17,-4(r21)
   12738:	0013d700 	call	13d70 <__malloc_unlock>
   1273c:	a805883a 	mov	r2,r21
   12740:	003f6b06 	br	124f0 <__alt_data_end+0xffff24f0>
   12744:	a80b883a 	mov	r5,r21
   12748:	9009883a 	mov	r4,r18
   1274c:	00120fc0 	call	120fc <memmove>
   12750:	003f4e06 	br	1248c <__alt_data_end+0xffff248c>
   12754:	89000404 	addi	r4,r17,16
   12758:	b93fbc16 	blt	r23,r4,1264c <__alt_data_end+0xffff264c>
   1275c:	b0800317 	ldw	r2,12(r22)
   12760:	b0c00217 	ldw	r3,8(r22)
   12764:	81bfff04 	addi	r6,r16,-4
   12768:	01000904 	movi	r4,36
   1276c:	18800315 	stw	r2,12(r3)
   12770:	10c00215 	stw	r3,8(r2)
   12774:	b4800204 	addi	r18,r22,8
   12778:	21804336 	bltu	r4,r6,12888 <_realloc_r+0x508>
   1277c:	008004c4 	movi	r2,19
   12780:	11803f2e 	bgeu	r2,r6,12880 <_realloc_r+0x500>
   12784:	a8800017 	ldw	r2,0(r21)
   12788:	b0800215 	stw	r2,8(r22)
   1278c:	a8800117 	ldw	r2,4(r21)
   12790:	b0800315 	stw	r2,12(r22)
   12794:	008006c4 	movi	r2,27
   12798:	11803f36 	bltu	r2,r6,12898 <_realloc_r+0x518>
   1279c:	b0800404 	addi	r2,r22,16
   127a0:	ad400204 	addi	r21,r21,8
   127a4:	a8c00017 	ldw	r3,0(r21)
   127a8:	10c00015 	stw	r3,0(r2)
   127ac:	a8c00117 	ldw	r3,4(r21)
   127b0:	10c00115 	stw	r3,4(r2)
   127b4:	a8c00217 	ldw	r3,8(r21)
   127b8:	10c00215 	stw	r3,8(r2)
   127bc:	b447883a 	add	r3,r22,r17
   127c0:	bc45c83a 	sub	r2,r23,r17
   127c4:	e0c00215 	stw	r3,8(fp)
   127c8:	10800054 	ori	r2,r2,1
   127cc:	18800115 	stw	r2,4(r3)
   127d0:	b0800117 	ldw	r2,4(r22)
   127d4:	a009883a 	mov	r4,r20
   127d8:	1080004c 	andi	r2,r2,1
   127dc:	1462b03a 	or	r17,r2,r17
   127e0:	b4400115 	stw	r17,4(r22)
   127e4:	0013d700 	call	13d70 <__malloc_unlock>
   127e8:	9005883a 	mov	r2,r18
   127ec:	003f4006 	br	124f0 <__alt_data_end+0xffff24f0>
   127f0:	a8c00217 	ldw	r3,8(r21)
   127f4:	90c00215 	stw	r3,8(r18)
   127f8:	a8c00317 	ldw	r3,12(r21)
   127fc:	90c00315 	stw	r3,12(r18)
   12800:	30801126 	beq	r6,r2,12848 <_realloc_r+0x4c8>
   12804:	90800404 	addi	r2,r18,16
   12808:	a8c00404 	addi	r3,r21,16
   1280c:	003f1906 	br	12474 <__alt_data_end+0xffff2474>
   12810:	90ffff17 	ldw	r3,-4(r18)
   12814:	00bfff04 	movi	r2,-4
   12818:	a825883a 	mov	r18,r21
   1281c:	1884703a 	and	r2,r3,r2
   12820:	80a1883a 	add	r16,r16,r2
   12824:	003f2406 	br	124b8 <__alt_data_end+0xffff24b8>
   12828:	a8800217 	ldw	r2,8(r21)
   1282c:	b0800415 	stw	r2,16(r22)
   12830:	a8800317 	ldw	r2,12(r21)
   12834:	b0800515 	stw	r2,20(r22)
   12838:	31000a26 	beq	r6,r4,12864 <_realloc_r+0x4e4>
   1283c:	b0800604 	addi	r2,r22,24
   12840:	ad400404 	addi	r21,r21,16
   12844:	003fa906 	br	126ec <__alt_data_end+0xffff26ec>
   12848:	a9000417 	ldw	r4,16(r21)
   1284c:	90800604 	addi	r2,r18,24
   12850:	a8c00604 	addi	r3,r21,24
   12854:	91000415 	stw	r4,16(r18)
   12858:	a9000517 	ldw	r4,20(r21)
   1285c:	91000515 	stw	r4,20(r18)
   12860:	003f0406 	br	12474 <__alt_data_end+0xffff2474>
   12864:	a8c00417 	ldw	r3,16(r21)
   12868:	ad400604 	addi	r21,r21,24
   1286c:	b0800804 	addi	r2,r22,32
   12870:	b0c00615 	stw	r3,24(r22)
   12874:	a8ffff17 	ldw	r3,-4(r21)
   12878:	b0c00715 	stw	r3,28(r22)
   1287c:	003f9b06 	br	126ec <__alt_data_end+0xffff26ec>
   12880:	9005883a 	mov	r2,r18
   12884:	003fc706 	br	127a4 <__alt_data_end+0xffff27a4>
   12888:	a80b883a 	mov	r5,r21
   1288c:	9009883a 	mov	r4,r18
   12890:	00120fc0 	call	120fc <memmove>
   12894:	003fc906 	br	127bc <__alt_data_end+0xffff27bc>
   12898:	a8800217 	ldw	r2,8(r21)
   1289c:	b0800415 	stw	r2,16(r22)
   128a0:	a8800317 	ldw	r2,12(r21)
   128a4:	b0800515 	stw	r2,20(r22)
   128a8:	31000726 	beq	r6,r4,128c8 <_realloc_r+0x548>
   128ac:	b0800604 	addi	r2,r22,24
   128b0:	ad400404 	addi	r21,r21,16
   128b4:	003fbb06 	br	127a4 <__alt_data_end+0xffff27a4>
   128b8:	a009883a 	mov	r4,r20
   128bc:	0013d700 	call	13d70 <__malloc_unlock>
   128c0:	0005883a 	mov	r2,zero
   128c4:	003f0a06 	br	124f0 <__alt_data_end+0xffff24f0>
   128c8:	a8c00417 	ldw	r3,16(r21)
   128cc:	ad400604 	addi	r21,r21,24
   128d0:	b0800804 	addi	r2,r22,32
   128d4:	b0c00615 	stw	r3,24(r22)
   128d8:	a8ffff17 	ldw	r3,-4(r21)
   128dc:	b0c00715 	stw	r3,28(r22)
   128e0:	003fb006 	br	127a4 <__alt_data_end+0xffff27a4>

000128e4 <_sbrk_r>:
   128e4:	defffd04 	addi	sp,sp,-12
   128e8:	dc000015 	stw	r16,0(sp)
   128ec:	040000b4 	movhi	r16,2
   128f0:	dc400115 	stw	r17,4(sp)
   128f4:	84253b04 	addi	r16,r16,-27412
   128f8:	2023883a 	mov	r17,r4
   128fc:	2809883a 	mov	r4,r5
   12900:	dfc00215 	stw	ra,8(sp)
   12904:	80000015 	stw	zero,0(r16)
   12908:	0013f940 	call	13f94 <sbrk>
   1290c:	00ffffc4 	movi	r3,-1
   12910:	10c00526 	beq	r2,r3,12928 <_sbrk_r+0x44>
   12914:	dfc00217 	ldw	ra,8(sp)
   12918:	dc400117 	ldw	r17,4(sp)
   1291c:	dc000017 	ldw	r16,0(sp)
   12920:	dec00304 	addi	sp,sp,12
   12924:	f800283a 	ret
   12928:	80c00017 	ldw	r3,0(r16)
   1292c:	183ff926 	beq	r3,zero,12914 <__alt_data_end+0xffff2914>
   12930:	88c00015 	stw	r3,0(r17)
   12934:	003ff706 	br	12914 <__alt_data_end+0xffff2914>

00012938 <__sread>:
   12938:	defffe04 	addi	sp,sp,-8
   1293c:	dc000015 	stw	r16,0(sp)
   12940:	2821883a 	mov	r16,r5
   12944:	2940038f 	ldh	r5,14(r5)
   12948:	dfc00115 	stw	ra,4(sp)
   1294c:	00136780 	call	13678 <_read_r>
   12950:	10000716 	blt	r2,zero,12970 <__sread+0x38>
   12954:	80c01417 	ldw	r3,80(r16)
   12958:	1887883a 	add	r3,r3,r2
   1295c:	80c01415 	stw	r3,80(r16)
   12960:	dfc00117 	ldw	ra,4(sp)
   12964:	dc000017 	ldw	r16,0(sp)
   12968:	dec00204 	addi	sp,sp,8
   1296c:	f800283a 	ret
   12970:	80c0030b 	ldhu	r3,12(r16)
   12974:	18fbffcc 	andi	r3,r3,61439
   12978:	80c0030d 	sth	r3,12(r16)
   1297c:	dfc00117 	ldw	ra,4(sp)
   12980:	dc000017 	ldw	r16,0(sp)
   12984:	dec00204 	addi	sp,sp,8
   12988:	f800283a 	ret

0001298c <__seofread>:
   1298c:	0005883a 	mov	r2,zero
   12990:	f800283a 	ret

00012994 <__swrite>:
   12994:	2880030b 	ldhu	r2,12(r5)
   12998:	defffb04 	addi	sp,sp,-20
   1299c:	dcc00315 	stw	r19,12(sp)
   129a0:	dc800215 	stw	r18,8(sp)
   129a4:	dc400115 	stw	r17,4(sp)
   129a8:	dc000015 	stw	r16,0(sp)
   129ac:	dfc00415 	stw	ra,16(sp)
   129b0:	10c0400c 	andi	r3,r2,256
   129b4:	2821883a 	mov	r16,r5
   129b8:	2023883a 	mov	r17,r4
   129bc:	3025883a 	mov	r18,r6
   129c0:	3827883a 	mov	r19,r7
   129c4:	18000526 	beq	r3,zero,129dc <__swrite+0x48>
   129c8:	2940038f 	ldh	r5,14(r5)
   129cc:	01c00084 	movi	r7,2
   129d0:	000d883a 	mov	r6,zero
   129d4:	001345c0 	call	1345c <_lseek_r>
   129d8:	8080030b 	ldhu	r2,12(r16)
   129dc:	8140038f 	ldh	r5,14(r16)
   129e0:	10bbffcc 	andi	r2,r2,61439
   129e4:	980f883a 	mov	r7,r19
   129e8:	900d883a 	mov	r6,r18
   129ec:	8809883a 	mov	r4,r17
   129f0:	8080030d 	sth	r2,12(r16)
   129f4:	dfc00417 	ldw	ra,16(sp)
   129f8:	dcc00317 	ldw	r19,12(sp)
   129fc:	dc800217 	ldw	r18,8(sp)
   12a00:	dc400117 	ldw	r17,4(sp)
   12a04:	dc000017 	ldw	r16,0(sp)
   12a08:	dec00504 	addi	sp,sp,20
   12a0c:	0012a741 	jmpi	12a74 <_write_r>

00012a10 <__sseek>:
   12a10:	defffe04 	addi	sp,sp,-8
   12a14:	dc000015 	stw	r16,0(sp)
   12a18:	2821883a 	mov	r16,r5
   12a1c:	2940038f 	ldh	r5,14(r5)
   12a20:	dfc00115 	stw	ra,4(sp)
   12a24:	001345c0 	call	1345c <_lseek_r>
   12a28:	00ffffc4 	movi	r3,-1
   12a2c:	10c00826 	beq	r2,r3,12a50 <__sseek+0x40>
   12a30:	80c0030b 	ldhu	r3,12(r16)
   12a34:	80801415 	stw	r2,80(r16)
   12a38:	18c40014 	ori	r3,r3,4096
   12a3c:	80c0030d 	sth	r3,12(r16)
   12a40:	dfc00117 	ldw	ra,4(sp)
   12a44:	dc000017 	ldw	r16,0(sp)
   12a48:	dec00204 	addi	sp,sp,8
   12a4c:	f800283a 	ret
   12a50:	80c0030b 	ldhu	r3,12(r16)
   12a54:	18fbffcc 	andi	r3,r3,61439
   12a58:	80c0030d 	sth	r3,12(r16)
   12a5c:	dfc00117 	ldw	ra,4(sp)
   12a60:	dc000017 	ldw	r16,0(sp)
   12a64:	dec00204 	addi	sp,sp,8
   12a68:	f800283a 	ret

00012a6c <__sclose>:
   12a6c:	2940038f 	ldh	r5,14(r5)
   12a70:	0012c281 	jmpi	12c28 <_close_r>

00012a74 <_write_r>:
   12a74:	defffd04 	addi	sp,sp,-12
   12a78:	2805883a 	mov	r2,r5
   12a7c:	dc000015 	stw	r16,0(sp)
   12a80:	040000b4 	movhi	r16,2
   12a84:	dc400115 	stw	r17,4(sp)
   12a88:	300b883a 	mov	r5,r6
   12a8c:	84253b04 	addi	r16,r16,-27412
   12a90:	2023883a 	mov	r17,r4
   12a94:	380d883a 	mov	r6,r7
   12a98:	1009883a 	mov	r4,r2
   12a9c:	dfc00215 	stw	ra,8(sp)
   12aa0:	80000015 	stw	zero,0(r16)
   12aa4:	00140800 	call	14080 <write>
   12aa8:	00ffffc4 	movi	r3,-1
   12aac:	10c00526 	beq	r2,r3,12ac4 <_write_r+0x50>
   12ab0:	dfc00217 	ldw	ra,8(sp)
   12ab4:	dc400117 	ldw	r17,4(sp)
   12ab8:	dc000017 	ldw	r16,0(sp)
   12abc:	dec00304 	addi	sp,sp,12
   12ac0:	f800283a 	ret
   12ac4:	80c00017 	ldw	r3,0(r16)
   12ac8:	183ff926 	beq	r3,zero,12ab0 <__alt_data_end+0xffff2ab0>
   12acc:	88c00015 	stw	r3,0(r17)
   12ad0:	003ff706 	br	12ab0 <__alt_data_end+0xffff2ab0>

00012ad4 <__swsetup_r>:
   12ad4:	00800074 	movhi	r2,1
   12ad8:	defffd04 	addi	sp,sp,-12
   12adc:	109e7f04 	addi	r2,r2,31228
   12ae0:	dc400115 	stw	r17,4(sp)
   12ae4:	2023883a 	mov	r17,r4
   12ae8:	11000017 	ldw	r4,0(r2)
   12aec:	dc000015 	stw	r16,0(sp)
   12af0:	dfc00215 	stw	ra,8(sp)
   12af4:	2821883a 	mov	r16,r5
   12af8:	20000226 	beq	r4,zero,12b04 <__swsetup_r+0x30>
   12afc:	20800e17 	ldw	r2,56(r4)
   12b00:	10003126 	beq	r2,zero,12bc8 <__swsetup_r+0xf4>
   12b04:	8080030b 	ldhu	r2,12(r16)
   12b08:	10c0020c 	andi	r3,r2,8
   12b0c:	1009883a 	mov	r4,r2
   12b10:	18000f26 	beq	r3,zero,12b50 <__swsetup_r+0x7c>
   12b14:	80c00417 	ldw	r3,16(r16)
   12b18:	18001526 	beq	r3,zero,12b70 <__swsetup_r+0x9c>
   12b1c:	1100004c 	andi	r4,r2,1
   12b20:	20001c1e 	bne	r4,zero,12b94 <__swsetup_r+0xc0>
   12b24:	1080008c 	andi	r2,r2,2
   12b28:	1000291e 	bne	r2,zero,12bd0 <__swsetup_r+0xfc>
   12b2c:	80800517 	ldw	r2,20(r16)
   12b30:	80800215 	stw	r2,8(r16)
   12b34:	18001c26 	beq	r3,zero,12ba8 <__swsetup_r+0xd4>
   12b38:	0005883a 	mov	r2,zero
   12b3c:	dfc00217 	ldw	ra,8(sp)
   12b40:	dc400117 	ldw	r17,4(sp)
   12b44:	dc000017 	ldw	r16,0(sp)
   12b48:	dec00304 	addi	sp,sp,12
   12b4c:	f800283a 	ret
   12b50:	2080040c 	andi	r2,r4,16
   12b54:	10002e26 	beq	r2,zero,12c10 <__swsetup_r+0x13c>
   12b58:	2080010c 	andi	r2,r4,4
   12b5c:	10001e1e 	bne	r2,zero,12bd8 <__swsetup_r+0x104>
   12b60:	80c00417 	ldw	r3,16(r16)
   12b64:	20800214 	ori	r2,r4,8
   12b68:	8080030d 	sth	r2,12(r16)
   12b6c:	183feb1e 	bne	r3,zero,12b1c <__alt_data_end+0xffff2b1c>
   12b70:	1100a00c 	andi	r4,r2,640
   12b74:	01408004 	movi	r5,512
   12b78:	217fe826 	beq	r4,r5,12b1c <__alt_data_end+0xffff2b1c>
   12b7c:	800b883a 	mov	r5,r16
   12b80:	8809883a 	mov	r4,r17
   12b84:	00134bc0 	call	134bc <__smakebuf_r>
   12b88:	8080030b 	ldhu	r2,12(r16)
   12b8c:	80c00417 	ldw	r3,16(r16)
   12b90:	003fe206 	br	12b1c <__alt_data_end+0xffff2b1c>
   12b94:	80800517 	ldw	r2,20(r16)
   12b98:	80000215 	stw	zero,8(r16)
   12b9c:	0085c83a 	sub	r2,zero,r2
   12ba0:	80800615 	stw	r2,24(r16)
   12ba4:	183fe41e 	bne	r3,zero,12b38 <__alt_data_end+0xffff2b38>
   12ba8:	80c0030b 	ldhu	r3,12(r16)
   12bac:	0005883a 	mov	r2,zero
   12bb0:	1900200c 	andi	r4,r3,128
   12bb4:	203fe126 	beq	r4,zero,12b3c <__alt_data_end+0xffff2b3c>
   12bb8:	18c01014 	ori	r3,r3,64
   12bbc:	80c0030d 	sth	r3,12(r16)
   12bc0:	00bfffc4 	movi	r2,-1
   12bc4:	003fdd06 	br	12b3c <__alt_data_end+0xffff2b3c>
   12bc8:	00110240 	call	11024 <__sinit>
   12bcc:	003fcd06 	br	12b04 <__alt_data_end+0xffff2b04>
   12bd0:	0005883a 	mov	r2,zero
   12bd4:	003fd606 	br	12b30 <__alt_data_end+0xffff2b30>
   12bd8:	81400c17 	ldw	r5,48(r16)
   12bdc:	28000626 	beq	r5,zero,12bf8 <__swsetup_r+0x124>
   12be0:	80801004 	addi	r2,r16,64
   12be4:	28800326 	beq	r5,r2,12bf4 <__swsetup_r+0x120>
   12be8:	8809883a 	mov	r4,r17
   12bec:	001314c0 	call	1314c <_free_r>
   12bf0:	8100030b 	ldhu	r4,12(r16)
   12bf4:	80000c15 	stw	zero,48(r16)
   12bf8:	80c00417 	ldw	r3,16(r16)
   12bfc:	00bff6c4 	movi	r2,-37
   12c00:	1108703a 	and	r4,r2,r4
   12c04:	80000115 	stw	zero,4(r16)
   12c08:	80c00015 	stw	r3,0(r16)
   12c0c:	003fd506 	br	12b64 <__alt_data_end+0xffff2b64>
   12c10:	00800244 	movi	r2,9
   12c14:	88800015 	stw	r2,0(r17)
   12c18:	20801014 	ori	r2,r4,64
   12c1c:	8080030d 	sth	r2,12(r16)
   12c20:	00bfffc4 	movi	r2,-1
   12c24:	003fc506 	br	12b3c <__alt_data_end+0xffff2b3c>

00012c28 <_close_r>:
   12c28:	defffd04 	addi	sp,sp,-12
   12c2c:	dc000015 	stw	r16,0(sp)
   12c30:	040000b4 	movhi	r16,2
   12c34:	dc400115 	stw	r17,4(sp)
   12c38:	84253b04 	addi	r16,r16,-27412
   12c3c:	2023883a 	mov	r17,r4
   12c40:	2809883a 	mov	r4,r5
   12c44:	dfc00215 	stw	ra,8(sp)
   12c48:	80000015 	stw	zero,0(r16)
   12c4c:	00137ec0 	call	137ec <close>
   12c50:	00ffffc4 	movi	r3,-1
   12c54:	10c00526 	beq	r2,r3,12c6c <_close_r+0x44>
   12c58:	dfc00217 	ldw	ra,8(sp)
   12c5c:	dc400117 	ldw	r17,4(sp)
   12c60:	dc000017 	ldw	r16,0(sp)
   12c64:	dec00304 	addi	sp,sp,12
   12c68:	f800283a 	ret
   12c6c:	80c00017 	ldw	r3,0(r16)
   12c70:	183ff926 	beq	r3,zero,12c58 <__alt_data_end+0xffff2c58>
   12c74:	88c00015 	stw	r3,0(r17)
   12c78:	003ff706 	br	12c58 <__alt_data_end+0xffff2c58>

00012c7c <_fclose_r>:
   12c7c:	28003926 	beq	r5,zero,12d64 <_fclose_r+0xe8>
   12c80:	defffc04 	addi	sp,sp,-16
   12c84:	dc400115 	stw	r17,4(sp)
   12c88:	dc000015 	stw	r16,0(sp)
   12c8c:	dfc00315 	stw	ra,12(sp)
   12c90:	dc800215 	stw	r18,8(sp)
   12c94:	2023883a 	mov	r17,r4
   12c98:	2821883a 	mov	r16,r5
   12c9c:	20000226 	beq	r4,zero,12ca8 <_fclose_r+0x2c>
   12ca0:	20800e17 	ldw	r2,56(r4)
   12ca4:	10002726 	beq	r2,zero,12d44 <_fclose_r+0xc8>
   12ca8:	8080030f 	ldh	r2,12(r16)
   12cac:	1000071e 	bne	r2,zero,12ccc <_fclose_r+0x50>
   12cb0:	0005883a 	mov	r2,zero
   12cb4:	dfc00317 	ldw	ra,12(sp)
   12cb8:	dc800217 	ldw	r18,8(sp)
   12cbc:	dc400117 	ldw	r17,4(sp)
   12cc0:	dc000017 	ldw	r16,0(sp)
   12cc4:	dec00404 	addi	sp,sp,16
   12cc8:	f800283a 	ret
   12ccc:	800b883a 	mov	r5,r16
   12cd0:	8809883a 	mov	r4,r17
   12cd4:	0012d800 	call	12d80 <__sflush_r>
   12cd8:	1025883a 	mov	r18,r2
   12cdc:	80800b17 	ldw	r2,44(r16)
   12ce0:	10000426 	beq	r2,zero,12cf4 <_fclose_r+0x78>
   12ce4:	81400717 	ldw	r5,28(r16)
   12ce8:	8809883a 	mov	r4,r17
   12cec:	103ee83a 	callr	r2
   12cf0:	10001616 	blt	r2,zero,12d4c <_fclose_r+0xd0>
   12cf4:	8080030b 	ldhu	r2,12(r16)
   12cf8:	1080200c 	andi	r2,r2,128
   12cfc:	1000151e 	bne	r2,zero,12d54 <_fclose_r+0xd8>
   12d00:	81400c17 	ldw	r5,48(r16)
   12d04:	28000526 	beq	r5,zero,12d1c <_fclose_r+0xa0>
   12d08:	80801004 	addi	r2,r16,64
   12d0c:	28800226 	beq	r5,r2,12d18 <_fclose_r+0x9c>
   12d10:	8809883a 	mov	r4,r17
   12d14:	001314c0 	call	1314c <_free_r>
   12d18:	80000c15 	stw	zero,48(r16)
   12d1c:	81401117 	ldw	r5,68(r16)
   12d20:	28000326 	beq	r5,zero,12d30 <_fclose_r+0xb4>
   12d24:	8809883a 	mov	r4,r17
   12d28:	001314c0 	call	1314c <_free_r>
   12d2c:	80001115 	stw	zero,68(r16)
   12d30:	00110340 	call	11034 <__sfp_lock_acquire>
   12d34:	8000030d 	sth	zero,12(r16)
   12d38:	00110380 	call	11038 <__sfp_lock_release>
   12d3c:	9005883a 	mov	r2,r18
   12d40:	003fdc06 	br	12cb4 <__alt_data_end+0xffff2cb4>
   12d44:	00110240 	call	11024 <__sinit>
   12d48:	003fd706 	br	12ca8 <__alt_data_end+0xffff2ca8>
   12d4c:	04bfffc4 	movi	r18,-1
   12d50:	003fe806 	br	12cf4 <__alt_data_end+0xffff2cf4>
   12d54:	81400417 	ldw	r5,16(r16)
   12d58:	8809883a 	mov	r4,r17
   12d5c:	001314c0 	call	1314c <_free_r>
   12d60:	003fe706 	br	12d00 <__alt_data_end+0xffff2d00>
   12d64:	0005883a 	mov	r2,zero
   12d68:	f800283a 	ret

00012d6c <fclose>:
   12d6c:	00800074 	movhi	r2,1
   12d70:	109e7f04 	addi	r2,r2,31228
   12d74:	200b883a 	mov	r5,r4
   12d78:	11000017 	ldw	r4,0(r2)
   12d7c:	0012c7c1 	jmpi	12c7c <_fclose_r>

00012d80 <__sflush_r>:
   12d80:	2880030b 	ldhu	r2,12(r5)
   12d84:	defffb04 	addi	sp,sp,-20
   12d88:	dcc00315 	stw	r19,12(sp)
   12d8c:	dc400115 	stw	r17,4(sp)
   12d90:	dfc00415 	stw	ra,16(sp)
   12d94:	dc800215 	stw	r18,8(sp)
   12d98:	dc000015 	stw	r16,0(sp)
   12d9c:	10c0020c 	andi	r3,r2,8
   12da0:	2823883a 	mov	r17,r5
   12da4:	2027883a 	mov	r19,r4
   12da8:	1800311e 	bne	r3,zero,12e70 <__sflush_r+0xf0>
   12dac:	28c00117 	ldw	r3,4(r5)
   12db0:	10820014 	ori	r2,r2,2048
   12db4:	2880030d 	sth	r2,12(r5)
   12db8:	00c04b0e 	bge	zero,r3,12ee8 <__sflush_r+0x168>
   12dbc:	8a000a17 	ldw	r8,40(r17)
   12dc0:	40002326 	beq	r8,zero,12e50 <__sflush_r+0xd0>
   12dc4:	9c000017 	ldw	r16,0(r19)
   12dc8:	10c4000c 	andi	r3,r2,4096
   12dcc:	98000015 	stw	zero,0(r19)
   12dd0:	18004826 	beq	r3,zero,12ef4 <__sflush_r+0x174>
   12dd4:	89801417 	ldw	r6,80(r17)
   12dd8:	10c0010c 	andi	r3,r2,4
   12ddc:	18000626 	beq	r3,zero,12df8 <__sflush_r+0x78>
   12de0:	88c00117 	ldw	r3,4(r17)
   12de4:	88800c17 	ldw	r2,48(r17)
   12de8:	30cdc83a 	sub	r6,r6,r3
   12dec:	10000226 	beq	r2,zero,12df8 <__sflush_r+0x78>
   12df0:	88800f17 	ldw	r2,60(r17)
   12df4:	308dc83a 	sub	r6,r6,r2
   12df8:	89400717 	ldw	r5,28(r17)
   12dfc:	000f883a 	mov	r7,zero
   12e00:	9809883a 	mov	r4,r19
   12e04:	403ee83a 	callr	r8
   12e08:	00ffffc4 	movi	r3,-1
   12e0c:	10c04426 	beq	r2,r3,12f20 <__sflush_r+0x1a0>
   12e10:	88c0030b 	ldhu	r3,12(r17)
   12e14:	89000417 	ldw	r4,16(r17)
   12e18:	88000115 	stw	zero,4(r17)
   12e1c:	197dffcc 	andi	r5,r3,63487
   12e20:	8940030d 	sth	r5,12(r17)
   12e24:	89000015 	stw	r4,0(r17)
   12e28:	18c4000c 	andi	r3,r3,4096
   12e2c:	18002c1e 	bne	r3,zero,12ee0 <__sflush_r+0x160>
   12e30:	89400c17 	ldw	r5,48(r17)
   12e34:	9c000015 	stw	r16,0(r19)
   12e38:	28000526 	beq	r5,zero,12e50 <__sflush_r+0xd0>
   12e3c:	88801004 	addi	r2,r17,64
   12e40:	28800226 	beq	r5,r2,12e4c <__sflush_r+0xcc>
   12e44:	9809883a 	mov	r4,r19
   12e48:	001314c0 	call	1314c <_free_r>
   12e4c:	88000c15 	stw	zero,48(r17)
   12e50:	0005883a 	mov	r2,zero
   12e54:	dfc00417 	ldw	ra,16(sp)
   12e58:	dcc00317 	ldw	r19,12(sp)
   12e5c:	dc800217 	ldw	r18,8(sp)
   12e60:	dc400117 	ldw	r17,4(sp)
   12e64:	dc000017 	ldw	r16,0(sp)
   12e68:	dec00504 	addi	sp,sp,20
   12e6c:	f800283a 	ret
   12e70:	2c800417 	ldw	r18,16(r5)
   12e74:	903ff626 	beq	r18,zero,12e50 <__alt_data_end+0xffff2e50>
   12e78:	2c000017 	ldw	r16,0(r5)
   12e7c:	108000cc 	andi	r2,r2,3
   12e80:	2c800015 	stw	r18,0(r5)
   12e84:	84a1c83a 	sub	r16,r16,r18
   12e88:	1000131e 	bne	r2,zero,12ed8 <__sflush_r+0x158>
   12e8c:	28800517 	ldw	r2,20(r5)
   12e90:	88800215 	stw	r2,8(r17)
   12e94:	04000316 	blt	zero,r16,12ea4 <__sflush_r+0x124>
   12e98:	003fed06 	br	12e50 <__alt_data_end+0xffff2e50>
   12e9c:	90a5883a 	add	r18,r18,r2
   12ea0:	043feb0e 	bge	zero,r16,12e50 <__alt_data_end+0xffff2e50>
   12ea4:	88800917 	ldw	r2,36(r17)
   12ea8:	89400717 	ldw	r5,28(r17)
   12eac:	800f883a 	mov	r7,r16
   12eb0:	900d883a 	mov	r6,r18
   12eb4:	9809883a 	mov	r4,r19
   12eb8:	103ee83a 	callr	r2
   12ebc:	80a1c83a 	sub	r16,r16,r2
   12ec0:	00bff616 	blt	zero,r2,12e9c <__alt_data_end+0xffff2e9c>
   12ec4:	88c0030b 	ldhu	r3,12(r17)
   12ec8:	00bfffc4 	movi	r2,-1
   12ecc:	18c01014 	ori	r3,r3,64
   12ed0:	88c0030d 	sth	r3,12(r17)
   12ed4:	003fdf06 	br	12e54 <__alt_data_end+0xffff2e54>
   12ed8:	0005883a 	mov	r2,zero
   12edc:	003fec06 	br	12e90 <__alt_data_end+0xffff2e90>
   12ee0:	88801415 	stw	r2,80(r17)
   12ee4:	003fd206 	br	12e30 <__alt_data_end+0xffff2e30>
   12ee8:	28c00f17 	ldw	r3,60(r5)
   12eec:	00ffb316 	blt	zero,r3,12dbc <__alt_data_end+0xffff2dbc>
   12ef0:	003fd706 	br	12e50 <__alt_data_end+0xffff2e50>
   12ef4:	89400717 	ldw	r5,28(r17)
   12ef8:	000d883a 	mov	r6,zero
   12efc:	01c00044 	movi	r7,1
   12f00:	9809883a 	mov	r4,r19
   12f04:	403ee83a 	callr	r8
   12f08:	100d883a 	mov	r6,r2
   12f0c:	00bfffc4 	movi	r2,-1
   12f10:	30801426 	beq	r6,r2,12f64 <__sflush_r+0x1e4>
   12f14:	8880030b 	ldhu	r2,12(r17)
   12f18:	8a000a17 	ldw	r8,40(r17)
   12f1c:	003fae06 	br	12dd8 <__alt_data_end+0xffff2dd8>
   12f20:	98c00017 	ldw	r3,0(r19)
   12f24:	183fba26 	beq	r3,zero,12e10 <__alt_data_end+0xffff2e10>
   12f28:	01000744 	movi	r4,29
   12f2c:	19000626 	beq	r3,r4,12f48 <__sflush_r+0x1c8>
   12f30:	01000584 	movi	r4,22
   12f34:	19000426 	beq	r3,r4,12f48 <__sflush_r+0x1c8>
   12f38:	88c0030b 	ldhu	r3,12(r17)
   12f3c:	18c01014 	ori	r3,r3,64
   12f40:	88c0030d 	sth	r3,12(r17)
   12f44:	003fc306 	br	12e54 <__alt_data_end+0xffff2e54>
   12f48:	8880030b 	ldhu	r2,12(r17)
   12f4c:	88c00417 	ldw	r3,16(r17)
   12f50:	88000115 	stw	zero,4(r17)
   12f54:	10bdffcc 	andi	r2,r2,63487
   12f58:	8880030d 	sth	r2,12(r17)
   12f5c:	88c00015 	stw	r3,0(r17)
   12f60:	003fb306 	br	12e30 <__alt_data_end+0xffff2e30>
   12f64:	98800017 	ldw	r2,0(r19)
   12f68:	103fea26 	beq	r2,zero,12f14 <__alt_data_end+0xffff2f14>
   12f6c:	00c00744 	movi	r3,29
   12f70:	10c00226 	beq	r2,r3,12f7c <__sflush_r+0x1fc>
   12f74:	00c00584 	movi	r3,22
   12f78:	10c0031e 	bne	r2,r3,12f88 <__sflush_r+0x208>
   12f7c:	9c000015 	stw	r16,0(r19)
   12f80:	0005883a 	mov	r2,zero
   12f84:	003fb306 	br	12e54 <__alt_data_end+0xffff2e54>
   12f88:	88c0030b 	ldhu	r3,12(r17)
   12f8c:	3005883a 	mov	r2,r6
   12f90:	18c01014 	ori	r3,r3,64
   12f94:	88c0030d 	sth	r3,12(r17)
   12f98:	003fae06 	br	12e54 <__alt_data_end+0xffff2e54>

00012f9c <_fflush_r>:
   12f9c:	defffd04 	addi	sp,sp,-12
   12fa0:	dc000115 	stw	r16,4(sp)
   12fa4:	dfc00215 	stw	ra,8(sp)
   12fa8:	2021883a 	mov	r16,r4
   12fac:	20000226 	beq	r4,zero,12fb8 <_fflush_r+0x1c>
   12fb0:	20800e17 	ldw	r2,56(r4)
   12fb4:	10000c26 	beq	r2,zero,12fe8 <_fflush_r+0x4c>
   12fb8:	2880030f 	ldh	r2,12(r5)
   12fbc:	1000051e 	bne	r2,zero,12fd4 <_fflush_r+0x38>
   12fc0:	0005883a 	mov	r2,zero
   12fc4:	dfc00217 	ldw	ra,8(sp)
   12fc8:	dc000117 	ldw	r16,4(sp)
   12fcc:	dec00304 	addi	sp,sp,12
   12fd0:	f800283a 	ret
   12fd4:	8009883a 	mov	r4,r16
   12fd8:	dfc00217 	ldw	ra,8(sp)
   12fdc:	dc000117 	ldw	r16,4(sp)
   12fe0:	dec00304 	addi	sp,sp,12
   12fe4:	0012d801 	jmpi	12d80 <__sflush_r>
   12fe8:	d9400015 	stw	r5,0(sp)
   12fec:	00110240 	call	11024 <__sinit>
   12ff0:	d9400017 	ldw	r5,0(sp)
   12ff4:	003ff006 	br	12fb8 <__alt_data_end+0xffff2fb8>

00012ff8 <fflush>:
   12ff8:	20000526 	beq	r4,zero,13010 <fflush+0x18>
   12ffc:	00800074 	movhi	r2,1
   13000:	109e7f04 	addi	r2,r2,31228
   13004:	200b883a 	mov	r5,r4
   13008:	11000017 	ldw	r4,0(r2)
   1300c:	0012f9c1 	jmpi	12f9c <_fflush_r>
   13010:	00800074 	movhi	r2,1
   13014:	109e7e04 	addi	r2,r2,31224
   13018:	11000017 	ldw	r4,0(r2)
   1301c:	01400074 	movhi	r5,1
   13020:	294be704 	addi	r5,r5,12188
   13024:	00116001 	jmpi	11600 <_fwalk_reent>

00013028 <_malloc_trim_r>:
   13028:	defffb04 	addi	sp,sp,-20
   1302c:	dcc00315 	stw	r19,12(sp)
   13030:	04c00074 	movhi	r19,1
   13034:	dc800215 	stw	r18,8(sp)
   13038:	dc400115 	stw	r17,4(sp)
   1303c:	dc000015 	stw	r16,0(sp)
   13040:	dfc00415 	stw	ra,16(sp)
   13044:	2821883a 	mov	r16,r5
   13048:	9cd8f904 	addi	r19,r19,25572
   1304c:	2025883a 	mov	r18,r4
   13050:	0013d4c0 	call	13d4c <__malloc_lock>
   13054:	98800217 	ldw	r2,8(r19)
   13058:	14400117 	ldw	r17,4(r2)
   1305c:	00bfff04 	movi	r2,-4
   13060:	88a2703a 	and	r17,r17,r2
   13064:	8c21c83a 	sub	r16,r17,r16
   13068:	8403fbc4 	addi	r16,r16,4079
   1306c:	8020d33a 	srli	r16,r16,12
   13070:	0083ffc4 	movi	r2,4095
   13074:	843fffc4 	addi	r16,r16,-1
   13078:	8020933a 	slli	r16,r16,12
   1307c:	1400060e 	bge	r2,r16,13098 <_malloc_trim_r+0x70>
   13080:	000b883a 	mov	r5,zero
   13084:	9009883a 	mov	r4,r18
   13088:	00128e40 	call	128e4 <_sbrk_r>
   1308c:	98c00217 	ldw	r3,8(r19)
   13090:	1c47883a 	add	r3,r3,r17
   13094:	10c00a26 	beq	r2,r3,130c0 <_malloc_trim_r+0x98>
   13098:	9009883a 	mov	r4,r18
   1309c:	0013d700 	call	13d70 <__malloc_unlock>
   130a0:	0005883a 	mov	r2,zero
   130a4:	dfc00417 	ldw	ra,16(sp)
   130a8:	dcc00317 	ldw	r19,12(sp)
   130ac:	dc800217 	ldw	r18,8(sp)
   130b0:	dc400117 	ldw	r17,4(sp)
   130b4:	dc000017 	ldw	r16,0(sp)
   130b8:	dec00504 	addi	sp,sp,20
   130bc:	f800283a 	ret
   130c0:	040bc83a 	sub	r5,zero,r16
   130c4:	9009883a 	mov	r4,r18
   130c8:	00128e40 	call	128e4 <_sbrk_r>
   130cc:	00ffffc4 	movi	r3,-1
   130d0:	10c00d26 	beq	r2,r3,13108 <_malloc_trim_r+0xe0>
   130d4:	00c000b4 	movhi	r3,2
   130d8:	18e57704 	addi	r3,r3,-27172
   130dc:	18800017 	ldw	r2,0(r3)
   130e0:	99000217 	ldw	r4,8(r19)
   130e4:	8c23c83a 	sub	r17,r17,r16
   130e8:	8c400054 	ori	r17,r17,1
   130ec:	1421c83a 	sub	r16,r2,r16
   130f0:	24400115 	stw	r17,4(r4)
   130f4:	9009883a 	mov	r4,r18
   130f8:	1c000015 	stw	r16,0(r3)
   130fc:	0013d700 	call	13d70 <__malloc_unlock>
   13100:	00800044 	movi	r2,1
   13104:	003fe706 	br	130a4 <__alt_data_end+0xffff30a4>
   13108:	000b883a 	mov	r5,zero
   1310c:	9009883a 	mov	r4,r18
   13110:	00128e40 	call	128e4 <_sbrk_r>
   13114:	99000217 	ldw	r4,8(r19)
   13118:	014003c4 	movi	r5,15
   1311c:	1107c83a 	sub	r3,r2,r4
   13120:	28ffdd0e 	bge	r5,r3,13098 <__alt_data_end+0xffff3098>
   13124:	01400074 	movhi	r5,1
   13128:	295e8004 	addi	r5,r5,31232
   1312c:	29400017 	ldw	r5,0(r5)
   13130:	18c00054 	ori	r3,r3,1
   13134:	20c00115 	stw	r3,4(r4)
   13138:	00c000b4 	movhi	r3,2
   1313c:	1145c83a 	sub	r2,r2,r5
   13140:	18e57704 	addi	r3,r3,-27172
   13144:	18800015 	stw	r2,0(r3)
   13148:	003fd306 	br	13098 <__alt_data_end+0xffff3098>

0001314c <_free_r>:
   1314c:	28004126 	beq	r5,zero,13254 <_free_r+0x108>
   13150:	defffd04 	addi	sp,sp,-12
   13154:	dc400115 	stw	r17,4(sp)
   13158:	dc000015 	stw	r16,0(sp)
   1315c:	2023883a 	mov	r17,r4
   13160:	2821883a 	mov	r16,r5
   13164:	dfc00215 	stw	ra,8(sp)
   13168:	0013d4c0 	call	13d4c <__malloc_lock>
   1316c:	81ffff17 	ldw	r7,-4(r16)
   13170:	00bfff84 	movi	r2,-2
   13174:	01000074 	movhi	r4,1
   13178:	81bffe04 	addi	r6,r16,-8
   1317c:	3884703a 	and	r2,r7,r2
   13180:	2118f904 	addi	r4,r4,25572
   13184:	308b883a 	add	r5,r6,r2
   13188:	2a400117 	ldw	r9,4(r5)
   1318c:	22000217 	ldw	r8,8(r4)
   13190:	00ffff04 	movi	r3,-4
   13194:	48c6703a 	and	r3,r9,r3
   13198:	2a005726 	beq	r5,r8,132f8 <_free_r+0x1ac>
   1319c:	28c00115 	stw	r3,4(r5)
   131a0:	39c0004c 	andi	r7,r7,1
   131a4:	3800091e 	bne	r7,zero,131cc <_free_r+0x80>
   131a8:	823ffe17 	ldw	r8,-8(r16)
   131ac:	22400204 	addi	r9,r4,8
   131b0:	320dc83a 	sub	r6,r6,r8
   131b4:	31c00217 	ldw	r7,8(r6)
   131b8:	1205883a 	add	r2,r2,r8
   131bc:	3a406526 	beq	r7,r9,13354 <_free_r+0x208>
   131c0:	32000317 	ldw	r8,12(r6)
   131c4:	3a000315 	stw	r8,12(r7)
   131c8:	41c00215 	stw	r7,8(r8)
   131cc:	28cf883a 	add	r7,r5,r3
   131d0:	39c00117 	ldw	r7,4(r7)
   131d4:	39c0004c 	andi	r7,r7,1
   131d8:	38003a26 	beq	r7,zero,132c4 <_free_r+0x178>
   131dc:	10c00054 	ori	r3,r2,1
   131e0:	30c00115 	stw	r3,4(r6)
   131e4:	3087883a 	add	r3,r6,r2
   131e8:	18800015 	stw	r2,0(r3)
   131ec:	00c07fc4 	movi	r3,511
   131f0:	18801936 	bltu	r3,r2,13258 <_free_r+0x10c>
   131f4:	1004d0fa 	srli	r2,r2,3
   131f8:	01c00044 	movi	r7,1
   131fc:	21400117 	ldw	r5,4(r4)
   13200:	10c00044 	addi	r3,r2,1
   13204:	18c7883a 	add	r3,r3,r3
   13208:	1005d0ba 	srai	r2,r2,2
   1320c:	18c7883a 	add	r3,r3,r3
   13210:	18c7883a 	add	r3,r3,r3
   13214:	1907883a 	add	r3,r3,r4
   13218:	3884983a 	sll	r2,r7,r2
   1321c:	19c00017 	ldw	r7,0(r3)
   13220:	1a3ffe04 	addi	r8,r3,-8
   13224:	1144b03a 	or	r2,r2,r5
   13228:	32000315 	stw	r8,12(r6)
   1322c:	31c00215 	stw	r7,8(r6)
   13230:	20800115 	stw	r2,4(r4)
   13234:	19800015 	stw	r6,0(r3)
   13238:	39800315 	stw	r6,12(r7)
   1323c:	8809883a 	mov	r4,r17
   13240:	dfc00217 	ldw	ra,8(sp)
   13244:	dc400117 	ldw	r17,4(sp)
   13248:	dc000017 	ldw	r16,0(sp)
   1324c:	dec00304 	addi	sp,sp,12
   13250:	0013d701 	jmpi	13d70 <__malloc_unlock>
   13254:	f800283a 	ret
   13258:	100ad27a 	srli	r5,r2,9
   1325c:	00c00104 	movi	r3,4
   13260:	19404a36 	bltu	r3,r5,1338c <_free_r+0x240>
   13264:	100ad1ba 	srli	r5,r2,6
   13268:	28c00e44 	addi	r3,r5,57
   1326c:	18c7883a 	add	r3,r3,r3
   13270:	29400e04 	addi	r5,r5,56
   13274:	18c7883a 	add	r3,r3,r3
   13278:	18c7883a 	add	r3,r3,r3
   1327c:	1909883a 	add	r4,r3,r4
   13280:	20c00017 	ldw	r3,0(r4)
   13284:	01c00074 	movhi	r7,1
   13288:	213ffe04 	addi	r4,r4,-8
   1328c:	39d8f904 	addi	r7,r7,25572
   13290:	20c04426 	beq	r4,r3,133a4 <_free_r+0x258>
   13294:	01ffff04 	movi	r7,-4
   13298:	19400117 	ldw	r5,4(r3)
   1329c:	29ca703a 	and	r5,r5,r7
   132a0:	1140022e 	bgeu	r2,r5,132ac <_free_r+0x160>
   132a4:	18c00217 	ldw	r3,8(r3)
   132a8:	20fffb1e 	bne	r4,r3,13298 <__alt_data_end+0xffff3298>
   132ac:	19000317 	ldw	r4,12(r3)
   132b0:	31000315 	stw	r4,12(r6)
   132b4:	30c00215 	stw	r3,8(r6)
   132b8:	21800215 	stw	r6,8(r4)
   132bc:	19800315 	stw	r6,12(r3)
   132c0:	003fde06 	br	1323c <__alt_data_end+0xffff323c>
   132c4:	29c00217 	ldw	r7,8(r5)
   132c8:	10c5883a 	add	r2,r2,r3
   132cc:	00c00074 	movhi	r3,1
   132d0:	18d8fb04 	addi	r3,r3,25580
   132d4:	38c03b26 	beq	r7,r3,133c4 <_free_r+0x278>
   132d8:	2a000317 	ldw	r8,12(r5)
   132dc:	11400054 	ori	r5,r2,1
   132e0:	3087883a 	add	r3,r6,r2
   132e4:	3a000315 	stw	r8,12(r7)
   132e8:	41c00215 	stw	r7,8(r8)
   132ec:	31400115 	stw	r5,4(r6)
   132f0:	18800015 	stw	r2,0(r3)
   132f4:	003fbd06 	br	131ec <__alt_data_end+0xffff31ec>
   132f8:	39c0004c 	andi	r7,r7,1
   132fc:	10c5883a 	add	r2,r2,r3
   13300:	3800071e 	bne	r7,zero,13320 <_free_r+0x1d4>
   13304:	81fffe17 	ldw	r7,-8(r16)
   13308:	31cdc83a 	sub	r6,r6,r7
   1330c:	30c00317 	ldw	r3,12(r6)
   13310:	31400217 	ldw	r5,8(r6)
   13314:	11c5883a 	add	r2,r2,r7
   13318:	28c00315 	stw	r3,12(r5)
   1331c:	19400215 	stw	r5,8(r3)
   13320:	10c00054 	ori	r3,r2,1
   13324:	30c00115 	stw	r3,4(r6)
   13328:	00c00074 	movhi	r3,1
   1332c:	18de8104 	addi	r3,r3,31236
   13330:	18c00017 	ldw	r3,0(r3)
   13334:	21800215 	stw	r6,8(r4)
   13338:	10ffc036 	bltu	r2,r3,1323c <__alt_data_end+0xffff323c>
   1333c:	008000b4 	movhi	r2,2
   13340:	10a53a04 	addi	r2,r2,-27416
   13344:	11400017 	ldw	r5,0(r2)
   13348:	8809883a 	mov	r4,r17
   1334c:	00130280 	call	13028 <_malloc_trim_r>
   13350:	003fba06 	br	1323c <__alt_data_end+0xffff323c>
   13354:	28c9883a 	add	r4,r5,r3
   13358:	21000117 	ldw	r4,4(r4)
   1335c:	2100004c 	andi	r4,r4,1
   13360:	2000391e 	bne	r4,zero,13448 <_free_r+0x2fc>
   13364:	29c00217 	ldw	r7,8(r5)
   13368:	29000317 	ldw	r4,12(r5)
   1336c:	1885883a 	add	r2,r3,r2
   13370:	10c00054 	ori	r3,r2,1
   13374:	39000315 	stw	r4,12(r7)
   13378:	21c00215 	stw	r7,8(r4)
   1337c:	30c00115 	stw	r3,4(r6)
   13380:	308d883a 	add	r6,r6,r2
   13384:	30800015 	stw	r2,0(r6)
   13388:	003fac06 	br	1323c <__alt_data_end+0xffff323c>
   1338c:	00c00504 	movi	r3,20
   13390:	19401536 	bltu	r3,r5,133e8 <_free_r+0x29c>
   13394:	28c01704 	addi	r3,r5,92
   13398:	18c7883a 	add	r3,r3,r3
   1339c:	294016c4 	addi	r5,r5,91
   133a0:	003fb406 	br	13274 <__alt_data_end+0xffff3274>
   133a4:	280bd0ba 	srai	r5,r5,2
   133a8:	00c00044 	movi	r3,1
   133ac:	38800117 	ldw	r2,4(r7)
   133b0:	194a983a 	sll	r5,r3,r5
   133b4:	2007883a 	mov	r3,r4
   133b8:	2884b03a 	or	r2,r5,r2
   133bc:	38800115 	stw	r2,4(r7)
   133c0:	003fbb06 	br	132b0 <__alt_data_end+0xffff32b0>
   133c4:	21800515 	stw	r6,20(r4)
   133c8:	21800415 	stw	r6,16(r4)
   133cc:	10c00054 	ori	r3,r2,1
   133d0:	31c00315 	stw	r7,12(r6)
   133d4:	31c00215 	stw	r7,8(r6)
   133d8:	30c00115 	stw	r3,4(r6)
   133dc:	308d883a 	add	r6,r6,r2
   133e0:	30800015 	stw	r2,0(r6)
   133e4:	003f9506 	br	1323c <__alt_data_end+0xffff323c>
   133e8:	00c01504 	movi	r3,84
   133ec:	19400536 	bltu	r3,r5,13404 <_free_r+0x2b8>
   133f0:	100ad33a 	srli	r5,r2,12
   133f4:	28c01bc4 	addi	r3,r5,111
   133f8:	18c7883a 	add	r3,r3,r3
   133fc:	29401b84 	addi	r5,r5,110
   13400:	003f9c06 	br	13274 <__alt_data_end+0xffff3274>
   13404:	00c05504 	movi	r3,340
   13408:	19400536 	bltu	r3,r5,13420 <_free_r+0x2d4>
   1340c:	100ad3fa 	srli	r5,r2,15
   13410:	28c01e04 	addi	r3,r5,120
   13414:	18c7883a 	add	r3,r3,r3
   13418:	29401dc4 	addi	r5,r5,119
   1341c:	003f9506 	br	13274 <__alt_data_end+0xffff3274>
   13420:	00c15504 	movi	r3,1364
   13424:	19400536 	bltu	r3,r5,1343c <_free_r+0x2f0>
   13428:	100ad4ba 	srli	r5,r2,18
   1342c:	28c01f44 	addi	r3,r5,125
   13430:	18c7883a 	add	r3,r3,r3
   13434:	29401f04 	addi	r5,r5,124
   13438:	003f8e06 	br	13274 <__alt_data_end+0xffff3274>
   1343c:	00c03f84 	movi	r3,254
   13440:	01401f84 	movi	r5,126
   13444:	003f8b06 	br	13274 <__alt_data_end+0xffff3274>
   13448:	10c00054 	ori	r3,r2,1
   1344c:	30c00115 	stw	r3,4(r6)
   13450:	308d883a 	add	r6,r6,r2
   13454:	30800015 	stw	r2,0(r6)
   13458:	003f7806 	br	1323c <__alt_data_end+0xffff323c>

0001345c <_lseek_r>:
   1345c:	defffd04 	addi	sp,sp,-12
   13460:	2805883a 	mov	r2,r5
   13464:	dc000015 	stw	r16,0(sp)
   13468:	040000b4 	movhi	r16,2
   1346c:	dc400115 	stw	r17,4(sp)
   13470:	300b883a 	mov	r5,r6
   13474:	84253b04 	addi	r16,r16,-27412
   13478:	2023883a 	mov	r17,r4
   1347c:	380d883a 	mov	r6,r7
   13480:	1009883a 	mov	r4,r2
   13484:	dfc00215 	stw	ra,8(sp)
   13488:	80000015 	stw	zero,0(r16)
   1348c:	0013bf40 	call	13bf4 <lseek>
   13490:	00ffffc4 	movi	r3,-1
   13494:	10c00526 	beq	r2,r3,134ac <_lseek_r+0x50>
   13498:	dfc00217 	ldw	ra,8(sp)
   1349c:	dc400117 	ldw	r17,4(sp)
   134a0:	dc000017 	ldw	r16,0(sp)
   134a4:	dec00304 	addi	sp,sp,12
   134a8:	f800283a 	ret
   134ac:	80c00017 	ldw	r3,0(r16)
   134b0:	183ff926 	beq	r3,zero,13498 <__alt_data_end+0xffff3498>
   134b4:	88c00015 	stw	r3,0(r17)
   134b8:	003ff706 	br	13498 <__alt_data_end+0xffff3498>

000134bc <__smakebuf_r>:
   134bc:	2880030b 	ldhu	r2,12(r5)
   134c0:	10c0008c 	andi	r3,r2,2
   134c4:	1800411e 	bne	r3,zero,135cc <__smakebuf_r+0x110>
   134c8:	deffec04 	addi	sp,sp,-80
   134cc:	dc000f15 	stw	r16,60(sp)
   134d0:	2821883a 	mov	r16,r5
   134d4:	2940038f 	ldh	r5,14(r5)
   134d8:	dc401015 	stw	r17,64(sp)
   134dc:	dfc01315 	stw	ra,76(sp)
   134e0:	dcc01215 	stw	r19,72(sp)
   134e4:	dc801115 	stw	r18,68(sp)
   134e8:	2023883a 	mov	r17,r4
   134ec:	28001c16 	blt	r5,zero,13560 <__smakebuf_r+0xa4>
   134f0:	d80d883a 	mov	r6,sp
   134f4:	00136d80 	call	136d8 <_fstat_r>
   134f8:	10001816 	blt	r2,zero,1355c <__smakebuf_r+0xa0>
   134fc:	d8800117 	ldw	r2,4(sp)
   13500:	00e00014 	movui	r3,32768
   13504:	10bc000c 	andi	r2,r2,61440
   13508:	14c80020 	cmpeqi	r19,r2,8192
   1350c:	10c03726 	beq	r2,r3,135ec <__smakebuf_r+0x130>
   13510:	80c0030b 	ldhu	r3,12(r16)
   13514:	18c20014 	ori	r3,r3,2048
   13518:	80c0030d 	sth	r3,12(r16)
   1351c:	00c80004 	movi	r3,8192
   13520:	10c0521e 	bne	r2,r3,1366c <__smakebuf_r+0x1b0>
   13524:	8140038f 	ldh	r5,14(r16)
   13528:	8809883a 	mov	r4,r17
   1352c:	00137340 	call	13734 <_isatty_r>
   13530:	10004c26 	beq	r2,zero,13664 <__smakebuf_r+0x1a8>
   13534:	8080030b 	ldhu	r2,12(r16)
   13538:	80c010c4 	addi	r3,r16,67
   1353c:	80c00015 	stw	r3,0(r16)
   13540:	10800054 	ori	r2,r2,1
   13544:	8080030d 	sth	r2,12(r16)
   13548:	00800044 	movi	r2,1
   1354c:	80c00415 	stw	r3,16(r16)
   13550:	80800515 	stw	r2,20(r16)
   13554:	04810004 	movi	r18,1024
   13558:	00000706 	br	13578 <__smakebuf_r+0xbc>
   1355c:	8080030b 	ldhu	r2,12(r16)
   13560:	10c0200c 	andi	r3,r2,128
   13564:	18001f1e 	bne	r3,zero,135e4 <__smakebuf_r+0x128>
   13568:	04810004 	movi	r18,1024
   1356c:	10820014 	ori	r2,r2,2048
   13570:	8080030d 	sth	r2,12(r16)
   13574:	0027883a 	mov	r19,zero
   13578:	900b883a 	mov	r5,r18
   1357c:	8809883a 	mov	r4,r17
   13580:	00116c40 	call	116c4 <_malloc_r>
   13584:	10002c26 	beq	r2,zero,13638 <__smakebuf_r+0x17c>
   13588:	80c0030b 	ldhu	r3,12(r16)
   1358c:	01000074 	movhi	r4,1
   13590:	21033304 	addi	r4,r4,3276
   13594:	89000f15 	stw	r4,60(r17)
   13598:	18c02014 	ori	r3,r3,128
   1359c:	80c0030d 	sth	r3,12(r16)
   135a0:	80800015 	stw	r2,0(r16)
   135a4:	80800415 	stw	r2,16(r16)
   135a8:	84800515 	stw	r18,20(r16)
   135ac:	98001a1e 	bne	r19,zero,13618 <__smakebuf_r+0x15c>
   135b0:	dfc01317 	ldw	ra,76(sp)
   135b4:	dcc01217 	ldw	r19,72(sp)
   135b8:	dc801117 	ldw	r18,68(sp)
   135bc:	dc401017 	ldw	r17,64(sp)
   135c0:	dc000f17 	ldw	r16,60(sp)
   135c4:	dec01404 	addi	sp,sp,80
   135c8:	f800283a 	ret
   135cc:	288010c4 	addi	r2,r5,67
   135d0:	28800015 	stw	r2,0(r5)
   135d4:	28800415 	stw	r2,16(r5)
   135d8:	00800044 	movi	r2,1
   135dc:	28800515 	stw	r2,20(r5)
   135e0:	f800283a 	ret
   135e4:	04801004 	movi	r18,64
   135e8:	003fe006 	br	1356c <__alt_data_end+0xffff356c>
   135ec:	81000a17 	ldw	r4,40(r16)
   135f0:	00c00074 	movhi	r3,1
   135f4:	18ca8404 	addi	r3,r3,10768
   135f8:	20ffc51e 	bne	r4,r3,13510 <__alt_data_end+0xffff3510>
   135fc:	8080030b 	ldhu	r2,12(r16)
   13600:	04810004 	movi	r18,1024
   13604:	84801315 	stw	r18,76(r16)
   13608:	1484b03a 	or	r2,r2,r18
   1360c:	8080030d 	sth	r2,12(r16)
   13610:	0027883a 	mov	r19,zero
   13614:	003fd806 	br	13578 <__alt_data_end+0xffff3578>
   13618:	8140038f 	ldh	r5,14(r16)
   1361c:	8809883a 	mov	r4,r17
   13620:	00137340 	call	13734 <_isatty_r>
   13624:	103fe226 	beq	r2,zero,135b0 <__alt_data_end+0xffff35b0>
   13628:	8080030b 	ldhu	r2,12(r16)
   1362c:	10800054 	ori	r2,r2,1
   13630:	8080030d 	sth	r2,12(r16)
   13634:	003fde06 	br	135b0 <__alt_data_end+0xffff35b0>
   13638:	8080030b 	ldhu	r2,12(r16)
   1363c:	10c0800c 	andi	r3,r2,512
   13640:	183fdb1e 	bne	r3,zero,135b0 <__alt_data_end+0xffff35b0>
   13644:	10800094 	ori	r2,r2,2
   13648:	80c010c4 	addi	r3,r16,67
   1364c:	8080030d 	sth	r2,12(r16)
   13650:	00800044 	movi	r2,1
   13654:	80c00015 	stw	r3,0(r16)
   13658:	80c00415 	stw	r3,16(r16)
   1365c:	80800515 	stw	r2,20(r16)
   13660:	003fd306 	br	135b0 <__alt_data_end+0xffff35b0>
   13664:	04810004 	movi	r18,1024
   13668:	003fc306 	br	13578 <__alt_data_end+0xffff3578>
   1366c:	0027883a 	mov	r19,zero
   13670:	04810004 	movi	r18,1024
   13674:	003fc006 	br	13578 <__alt_data_end+0xffff3578>

00013678 <_read_r>:
   13678:	defffd04 	addi	sp,sp,-12
   1367c:	2805883a 	mov	r2,r5
   13680:	dc000015 	stw	r16,0(sp)
   13684:	040000b4 	movhi	r16,2
   13688:	dc400115 	stw	r17,4(sp)
   1368c:	300b883a 	mov	r5,r6
   13690:	84253b04 	addi	r16,r16,-27412
   13694:	2023883a 	mov	r17,r4
   13698:	380d883a 	mov	r6,r7
   1369c:	1009883a 	mov	r4,r2
   136a0:	dfc00215 	stw	ra,8(sp)
   136a4:	80000015 	stw	zero,0(r16)
   136a8:	0013e0c0 	call	13e0c <read>
   136ac:	00ffffc4 	movi	r3,-1
   136b0:	10c00526 	beq	r2,r3,136c8 <_read_r+0x50>
   136b4:	dfc00217 	ldw	ra,8(sp)
   136b8:	dc400117 	ldw	r17,4(sp)
   136bc:	dc000017 	ldw	r16,0(sp)
   136c0:	dec00304 	addi	sp,sp,12
   136c4:	f800283a 	ret
   136c8:	80c00017 	ldw	r3,0(r16)
   136cc:	183ff926 	beq	r3,zero,136b4 <__alt_data_end+0xffff36b4>
   136d0:	88c00015 	stw	r3,0(r17)
   136d4:	003ff706 	br	136b4 <__alt_data_end+0xffff36b4>

000136d8 <_fstat_r>:
   136d8:	defffd04 	addi	sp,sp,-12
   136dc:	2805883a 	mov	r2,r5
   136e0:	dc000015 	stw	r16,0(sp)
   136e4:	040000b4 	movhi	r16,2
   136e8:	dc400115 	stw	r17,4(sp)
   136ec:	84253b04 	addi	r16,r16,-27412
   136f0:	2023883a 	mov	r17,r4
   136f4:	300b883a 	mov	r5,r6
   136f8:	1009883a 	mov	r4,r2
   136fc:	dfc00215 	stw	ra,8(sp)
   13700:	80000015 	stw	zero,0(r16)
   13704:	001392c0 	call	1392c <fstat>
   13708:	00ffffc4 	movi	r3,-1
   1370c:	10c00526 	beq	r2,r3,13724 <_fstat_r+0x4c>
   13710:	dfc00217 	ldw	ra,8(sp)
   13714:	dc400117 	ldw	r17,4(sp)
   13718:	dc000017 	ldw	r16,0(sp)
   1371c:	dec00304 	addi	sp,sp,12
   13720:	f800283a 	ret
   13724:	80c00017 	ldw	r3,0(r16)
   13728:	183ff926 	beq	r3,zero,13710 <__alt_data_end+0xffff3710>
   1372c:	88c00015 	stw	r3,0(r17)
   13730:	003ff706 	br	13710 <__alt_data_end+0xffff3710>

00013734 <_isatty_r>:
   13734:	defffd04 	addi	sp,sp,-12
   13738:	dc000015 	stw	r16,0(sp)
   1373c:	040000b4 	movhi	r16,2
   13740:	dc400115 	stw	r17,4(sp)
   13744:	84253b04 	addi	r16,r16,-27412
   13748:	2023883a 	mov	r17,r4
   1374c:	2809883a 	mov	r4,r5
   13750:	dfc00215 	stw	ra,8(sp)
   13754:	80000015 	stw	zero,0(r16)
   13758:	0013a200 	call	13a20 <isatty>
   1375c:	00ffffc4 	movi	r3,-1
   13760:	10c00526 	beq	r2,r3,13778 <_isatty_r+0x44>
   13764:	dfc00217 	ldw	ra,8(sp)
   13768:	dc400117 	ldw	r17,4(sp)
   1376c:	dc000017 	ldw	r16,0(sp)
   13770:	dec00304 	addi	sp,sp,12
   13774:	f800283a 	ret
   13778:	80c00017 	ldw	r3,0(r16)
   1377c:	183ff926 	beq	r3,zero,13764 <__alt_data_end+0xffff3764>
   13780:	88c00015 	stw	r3,0(r17)
   13784:	003ff706 	br	13764 <__alt_data_end+0xffff3764>

00013788 <__mulsi3>:
   13788:	0005883a 	mov	r2,zero
   1378c:	20000726 	beq	r4,zero,137ac <__mulsi3+0x24>
   13790:	20c0004c 	andi	r3,r4,1
   13794:	2008d07a 	srli	r4,r4,1
   13798:	18000126 	beq	r3,zero,137a0 <__mulsi3+0x18>
   1379c:	1145883a 	add	r2,r2,r5
   137a0:	294b883a 	add	r5,r5,r5
   137a4:	203ffa1e 	bne	r4,zero,13790 <__alt_data_end+0xffff3790>
   137a8:	f800283a 	ret
   137ac:	f800283a 	ret

000137b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   137b0:	defffe04 	addi	sp,sp,-8
   137b4:	dfc00115 	stw	ra,4(sp)
   137b8:	df000015 	stw	fp,0(sp)
   137bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   137c0:	d0a00a17 	ldw	r2,-32728(gp)
   137c4:	10000326 	beq	r2,zero,137d4 <alt_get_errno+0x24>
   137c8:	d0a00a17 	ldw	r2,-32728(gp)
   137cc:	103ee83a 	callr	r2
   137d0:	00000106 	br	137d8 <alt_get_errno+0x28>
   137d4:	d0a6be04 	addi	r2,gp,-25864
}
   137d8:	e037883a 	mov	sp,fp
   137dc:	dfc00117 	ldw	ra,4(sp)
   137e0:	df000017 	ldw	fp,0(sp)
   137e4:	dec00204 	addi	sp,sp,8
   137e8:	f800283a 	ret

000137ec <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   137ec:	defffb04 	addi	sp,sp,-20
   137f0:	dfc00415 	stw	ra,16(sp)
   137f4:	df000315 	stw	fp,12(sp)
   137f8:	df000304 	addi	fp,sp,12
   137fc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   13800:	e0bfff17 	ldw	r2,-4(fp)
   13804:	10000816 	blt	r2,zero,13828 <close+0x3c>
   13808:	01400304 	movi	r5,12
   1380c:	e13fff17 	ldw	r4,-4(fp)
   13810:	00137880 	call	13788 <__mulsi3>
   13814:	1007883a 	mov	r3,r2
   13818:	00800074 	movhi	r2,1
   1381c:	109a0504 	addi	r2,r2,26644
   13820:	1885883a 	add	r2,r3,r2
   13824:	00000106 	br	1382c <close+0x40>
   13828:	0005883a 	mov	r2,zero
   1382c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   13830:	e0bffd17 	ldw	r2,-12(fp)
   13834:	10001926 	beq	r2,zero,1389c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   13838:	e0bffd17 	ldw	r2,-12(fp)
   1383c:	10800017 	ldw	r2,0(r2)
   13840:	10800417 	ldw	r2,16(r2)
   13844:	10000626 	beq	r2,zero,13860 <close+0x74>
   13848:	e0bffd17 	ldw	r2,-12(fp)
   1384c:	10800017 	ldw	r2,0(r2)
   13850:	10800417 	ldw	r2,16(r2)
   13854:	e13ffd17 	ldw	r4,-12(fp)
   13858:	103ee83a 	callr	r2
   1385c:	00000106 	br	13864 <close+0x78>
   13860:	0005883a 	mov	r2,zero
   13864:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   13868:	e13fff17 	ldw	r4,-4(fp)
   1386c:	0013f100 	call	13f10 <alt_release_fd>
    if (rval < 0)
   13870:	e0bffe17 	ldw	r2,-8(fp)
   13874:	1000070e 	bge	r2,zero,13894 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   13878:	00137b00 	call	137b0 <alt_get_errno>
   1387c:	1007883a 	mov	r3,r2
   13880:	e0bffe17 	ldw	r2,-8(fp)
   13884:	0085c83a 	sub	r2,zero,r2
   13888:	18800015 	stw	r2,0(r3)
      return -1;
   1388c:	00bfffc4 	movi	r2,-1
   13890:	00000706 	br	138b0 <close+0xc4>
    }
    return 0;
   13894:	0005883a 	mov	r2,zero
   13898:	00000506 	br	138b0 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1389c:	00137b00 	call	137b0 <alt_get_errno>
   138a0:	1007883a 	mov	r3,r2
   138a4:	00801444 	movi	r2,81
   138a8:	18800015 	stw	r2,0(r3)
    return -1;
   138ac:	00bfffc4 	movi	r2,-1
  }
}
   138b0:	e037883a 	mov	sp,fp
   138b4:	dfc00117 	ldw	ra,4(sp)
   138b8:	df000017 	ldw	fp,0(sp)
   138bc:	dec00204 	addi	sp,sp,8
   138c0:	f800283a 	ret

000138c4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   138c4:	defffc04 	addi	sp,sp,-16
   138c8:	df000315 	stw	fp,12(sp)
   138cc:	df000304 	addi	fp,sp,12
   138d0:	e13ffd15 	stw	r4,-12(fp)
   138d4:	e17ffe15 	stw	r5,-8(fp)
   138d8:	e1bfff15 	stw	r6,-4(fp)
  return len;
   138dc:	e0bfff17 	ldw	r2,-4(fp)
}
   138e0:	e037883a 	mov	sp,fp
   138e4:	df000017 	ldw	fp,0(sp)
   138e8:	dec00104 	addi	sp,sp,4
   138ec:	f800283a 	ret

000138f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   138f0:	defffe04 	addi	sp,sp,-8
   138f4:	dfc00115 	stw	ra,4(sp)
   138f8:	df000015 	stw	fp,0(sp)
   138fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13900:	d0a00a17 	ldw	r2,-32728(gp)
   13904:	10000326 	beq	r2,zero,13914 <alt_get_errno+0x24>
   13908:	d0a00a17 	ldw	r2,-32728(gp)
   1390c:	103ee83a 	callr	r2
   13910:	00000106 	br	13918 <alt_get_errno+0x28>
   13914:	d0a6be04 	addi	r2,gp,-25864
}
   13918:	e037883a 	mov	sp,fp
   1391c:	dfc00117 	ldw	ra,4(sp)
   13920:	df000017 	ldw	fp,0(sp)
   13924:	dec00204 	addi	sp,sp,8
   13928:	f800283a 	ret

0001392c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   1392c:	defffb04 	addi	sp,sp,-20
   13930:	dfc00415 	stw	ra,16(sp)
   13934:	df000315 	stw	fp,12(sp)
   13938:	df000304 	addi	fp,sp,12
   1393c:	e13ffe15 	stw	r4,-8(fp)
   13940:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13944:	e0bffe17 	ldw	r2,-8(fp)
   13948:	10000816 	blt	r2,zero,1396c <fstat+0x40>
   1394c:	01400304 	movi	r5,12
   13950:	e13ffe17 	ldw	r4,-8(fp)
   13954:	00137880 	call	13788 <__mulsi3>
   13958:	1007883a 	mov	r3,r2
   1395c:	00800074 	movhi	r2,1
   13960:	109a0504 	addi	r2,r2,26644
   13964:	1885883a 	add	r2,r3,r2
   13968:	00000106 	br	13970 <fstat+0x44>
   1396c:	0005883a 	mov	r2,zero
   13970:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   13974:	e0bffd17 	ldw	r2,-12(fp)
   13978:	10001026 	beq	r2,zero,139bc <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   1397c:	e0bffd17 	ldw	r2,-12(fp)
   13980:	10800017 	ldw	r2,0(r2)
   13984:	10800817 	ldw	r2,32(r2)
   13988:	10000726 	beq	r2,zero,139a8 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   1398c:	e0bffd17 	ldw	r2,-12(fp)
   13990:	10800017 	ldw	r2,0(r2)
   13994:	10800817 	ldw	r2,32(r2)
   13998:	e17fff17 	ldw	r5,-4(fp)
   1399c:	e13ffd17 	ldw	r4,-12(fp)
   139a0:	103ee83a 	callr	r2
   139a4:	00000a06 	br	139d0 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   139a8:	e0bfff17 	ldw	r2,-4(fp)
   139ac:	00c80004 	movi	r3,8192
   139b0:	10c00115 	stw	r3,4(r2)
      return 0;
   139b4:	0005883a 	mov	r2,zero
   139b8:	00000506 	br	139d0 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   139bc:	00138f00 	call	138f0 <alt_get_errno>
   139c0:	1007883a 	mov	r3,r2
   139c4:	00801444 	movi	r2,81
   139c8:	18800015 	stw	r2,0(r3)
    return -1;
   139cc:	00bfffc4 	movi	r2,-1
  }
}
   139d0:	e037883a 	mov	sp,fp
   139d4:	dfc00117 	ldw	ra,4(sp)
   139d8:	df000017 	ldw	fp,0(sp)
   139dc:	dec00204 	addi	sp,sp,8
   139e0:	f800283a 	ret

000139e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   139e4:	defffe04 	addi	sp,sp,-8
   139e8:	dfc00115 	stw	ra,4(sp)
   139ec:	df000015 	stw	fp,0(sp)
   139f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   139f4:	d0a00a17 	ldw	r2,-32728(gp)
   139f8:	10000326 	beq	r2,zero,13a08 <alt_get_errno+0x24>
   139fc:	d0a00a17 	ldw	r2,-32728(gp)
   13a00:	103ee83a 	callr	r2
   13a04:	00000106 	br	13a0c <alt_get_errno+0x28>
   13a08:	d0a6be04 	addi	r2,gp,-25864
}
   13a0c:	e037883a 	mov	sp,fp
   13a10:	dfc00117 	ldw	ra,4(sp)
   13a14:	df000017 	ldw	fp,0(sp)
   13a18:	dec00204 	addi	sp,sp,8
   13a1c:	f800283a 	ret

00013a20 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   13a20:	deffed04 	addi	sp,sp,-76
   13a24:	dfc01215 	stw	ra,72(sp)
   13a28:	df001115 	stw	fp,68(sp)
   13a2c:	df001104 	addi	fp,sp,68
   13a30:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13a34:	e0bfff17 	ldw	r2,-4(fp)
   13a38:	10000816 	blt	r2,zero,13a5c <isatty+0x3c>
   13a3c:	01400304 	movi	r5,12
   13a40:	e13fff17 	ldw	r4,-4(fp)
   13a44:	00137880 	call	13788 <__mulsi3>
   13a48:	1007883a 	mov	r3,r2
   13a4c:	00800074 	movhi	r2,1
   13a50:	109a0504 	addi	r2,r2,26644
   13a54:	1885883a 	add	r2,r3,r2
   13a58:	00000106 	br	13a60 <isatty+0x40>
   13a5c:	0005883a 	mov	r2,zero
   13a60:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   13a64:	e0bfef17 	ldw	r2,-68(fp)
   13a68:	10000e26 	beq	r2,zero,13aa4 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   13a6c:	e0bfef17 	ldw	r2,-68(fp)
   13a70:	10800017 	ldw	r2,0(r2)
   13a74:	10800817 	ldw	r2,32(r2)
   13a78:	1000021e 	bne	r2,zero,13a84 <isatty+0x64>
    {
      return 1;
   13a7c:	00800044 	movi	r2,1
   13a80:	00000d06 	br	13ab8 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   13a84:	e0bff004 	addi	r2,fp,-64
   13a88:	100b883a 	mov	r5,r2
   13a8c:	e13fff17 	ldw	r4,-4(fp)
   13a90:	001392c0 	call	1392c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   13a94:	e0bff117 	ldw	r2,-60(fp)
   13a98:	10880020 	cmpeqi	r2,r2,8192
   13a9c:	10803fcc 	andi	r2,r2,255
   13aa0:	00000506 	br	13ab8 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   13aa4:	00139e40 	call	139e4 <alt_get_errno>
   13aa8:	1007883a 	mov	r3,r2
   13aac:	00801444 	movi	r2,81
   13ab0:	18800015 	stw	r2,0(r3)
    return 0;
   13ab4:	0005883a 	mov	r2,zero
  }
}
   13ab8:	e037883a 	mov	sp,fp
   13abc:	dfc00117 	ldw	ra,4(sp)
   13ac0:	df000017 	ldw	fp,0(sp)
   13ac4:	dec00204 	addi	sp,sp,8
   13ac8:	f800283a 	ret

00013acc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   13acc:	defffc04 	addi	sp,sp,-16
   13ad0:	df000315 	stw	fp,12(sp)
   13ad4:	df000304 	addi	fp,sp,12
   13ad8:	e13ffd15 	stw	r4,-12(fp)
   13adc:	e17ffe15 	stw	r5,-8(fp)
   13ae0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   13ae4:	e0fffe17 	ldw	r3,-8(fp)
   13ae8:	e0bffd17 	ldw	r2,-12(fp)
   13aec:	18800c26 	beq	r3,r2,13b20 <alt_load_section+0x54>
  {
    while( to != end )
   13af0:	00000806 	br	13b14 <alt_load_section+0x48>
    {
      *to++ = *from++;
   13af4:	e0bffe17 	ldw	r2,-8(fp)
   13af8:	10c00104 	addi	r3,r2,4
   13afc:	e0fffe15 	stw	r3,-8(fp)
   13b00:	e0fffd17 	ldw	r3,-12(fp)
   13b04:	19000104 	addi	r4,r3,4
   13b08:	e13ffd15 	stw	r4,-12(fp)
   13b0c:	18c00017 	ldw	r3,0(r3)
   13b10:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   13b14:	e0fffe17 	ldw	r3,-8(fp)
   13b18:	e0bfff17 	ldw	r2,-4(fp)
   13b1c:	18bff51e 	bne	r3,r2,13af4 <__alt_data_end+0xffff3af4>
    {
      *to++ = *from++;
    }
  }
}
   13b20:	0001883a 	nop
   13b24:	e037883a 	mov	sp,fp
   13b28:	df000017 	ldw	fp,0(sp)
   13b2c:	dec00104 	addi	sp,sp,4
   13b30:	f800283a 	ret

00013b34 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   13b34:	defffe04 	addi	sp,sp,-8
   13b38:	dfc00115 	stw	ra,4(sp)
   13b3c:	df000015 	stw	fp,0(sp)
   13b40:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   13b44:	01800074 	movhi	r6,1
   13b48:	319e8c04 	addi	r6,r6,31280
   13b4c:	01400074 	movhi	r5,1
   13b50:	2957e304 	addi	r5,r5,24460
   13b54:	01000074 	movhi	r4,1
   13b58:	211e8c04 	addi	r4,r4,31280
   13b5c:	0013acc0 	call	13acc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   13b60:	01800074 	movhi	r6,1
   13b64:	31808c04 	addi	r6,r6,560
   13b68:	01400074 	movhi	r5,1
   13b6c:	29400804 	addi	r5,r5,32
   13b70:	01000074 	movhi	r4,1
   13b74:	21000804 	addi	r4,r4,32
   13b78:	0013acc0 	call	13acc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   13b7c:	01800074 	movhi	r6,1
   13b80:	3197e304 	addi	r6,r6,24460
   13b84:	01400074 	movhi	r5,1
   13b88:	2957cd04 	addi	r5,r5,24372
   13b8c:	01000074 	movhi	r4,1
   13b90:	2117cd04 	addi	r4,r4,24372
   13b94:	0013acc0 	call	13acc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   13b98:	0014dc80 	call	14dc8 <alt_dcache_flush_all>
  alt_icache_flush_all();
   13b9c:	0014f880 	call	14f88 <alt_icache_flush_all>
}
   13ba0:	0001883a 	nop
   13ba4:	e037883a 	mov	sp,fp
   13ba8:	dfc00117 	ldw	ra,4(sp)
   13bac:	df000017 	ldw	fp,0(sp)
   13bb0:	dec00204 	addi	sp,sp,8
   13bb4:	f800283a 	ret

00013bb8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13bb8:	defffe04 	addi	sp,sp,-8
   13bbc:	dfc00115 	stw	ra,4(sp)
   13bc0:	df000015 	stw	fp,0(sp)
   13bc4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13bc8:	d0a00a17 	ldw	r2,-32728(gp)
   13bcc:	10000326 	beq	r2,zero,13bdc <alt_get_errno+0x24>
   13bd0:	d0a00a17 	ldw	r2,-32728(gp)
   13bd4:	103ee83a 	callr	r2
   13bd8:	00000106 	br	13be0 <alt_get_errno+0x28>
   13bdc:	d0a6be04 	addi	r2,gp,-25864
}
   13be0:	e037883a 	mov	sp,fp
   13be4:	dfc00117 	ldw	ra,4(sp)
   13be8:	df000017 	ldw	fp,0(sp)
   13bec:	dec00204 	addi	sp,sp,8
   13bf0:	f800283a 	ret

00013bf4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   13bf4:	defff904 	addi	sp,sp,-28
   13bf8:	dfc00615 	stw	ra,24(sp)
   13bfc:	df000515 	stw	fp,20(sp)
   13c00:	df000504 	addi	fp,sp,20
   13c04:	e13ffd15 	stw	r4,-12(fp)
   13c08:	e17ffe15 	stw	r5,-8(fp)
   13c0c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   13c10:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13c14:	e0bffd17 	ldw	r2,-12(fp)
   13c18:	10000816 	blt	r2,zero,13c3c <lseek+0x48>
   13c1c:	01400304 	movi	r5,12
   13c20:	e13ffd17 	ldw	r4,-12(fp)
   13c24:	00137880 	call	13788 <__mulsi3>
   13c28:	1007883a 	mov	r3,r2
   13c2c:	00800074 	movhi	r2,1
   13c30:	109a0504 	addi	r2,r2,26644
   13c34:	1885883a 	add	r2,r3,r2
   13c38:	00000106 	br	13c40 <lseek+0x4c>
   13c3c:	0005883a 	mov	r2,zero
   13c40:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   13c44:	e0bffc17 	ldw	r2,-16(fp)
   13c48:	10001026 	beq	r2,zero,13c8c <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   13c4c:	e0bffc17 	ldw	r2,-16(fp)
   13c50:	10800017 	ldw	r2,0(r2)
   13c54:	10800717 	ldw	r2,28(r2)
   13c58:	10000926 	beq	r2,zero,13c80 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   13c5c:	e0bffc17 	ldw	r2,-16(fp)
   13c60:	10800017 	ldw	r2,0(r2)
   13c64:	10800717 	ldw	r2,28(r2)
   13c68:	e1bfff17 	ldw	r6,-4(fp)
   13c6c:	e17ffe17 	ldw	r5,-8(fp)
   13c70:	e13ffc17 	ldw	r4,-16(fp)
   13c74:	103ee83a 	callr	r2
   13c78:	e0bffb15 	stw	r2,-20(fp)
   13c7c:	00000506 	br	13c94 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   13c80:	00bfde84 	movi	r2,-134
   13c84:	e0bffb15 	stw	r2,-20(fp)
   13c88:	00000206 	br	13c94 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   13c8c:	00bfebc4 	movi	r2,-81
   13c90:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   13c94:	e0bffb17 	ldw	r2,-20(fp)
   13c98:	1000070e 	bge	r2,zero,13cb8 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   13c9c:	0013bb80 	call	13bb8 <alt_get_errno>
   13ca0:	1007883a 	mov	r3,r2
   13ca4:	e0bffb17 	ldw	r2,-20(fp)
   13ca8:	0085c83a 	sub	r2,zero,r2
   13cac:	18800015 	stw	r2,0(r3)
    rc = -1;
   13cb0:	00bfffc4 	movi	r2,-1
   13cb4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   13cb8:	e0bffb17 	ldw	r2,-20(fp)
}
   13cbc:	e037883a 	mov	sp,fp
   13cc0:	dfc00117 	ldw	ra,4(sp)
   13cc4:	df000017 	ldw	fp,0(sp)
   13cc8:	dec00204 	addi	sp,sp,8
   13ccc:	f800283a 	ret

00013cd0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   13cd0:	defffd04 	addi	sp,sp,-12
   13cd4:	dfc00215 	stw	ra,8(sp)
   13cd8:	df000115 	stw	fp,4(sp)
   13cdc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   13ce0:	0009883a 	mov	r4,zero
   13ce4:	00141b40 	call	141b4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   13ce8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   13cec:	00141ec0 	call	141ec <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   13cf0:	01800074 	movhi	r6,1
   13cf4:	3197db04 	addi	r6,r6,24428
   13cf8:	01400074 	movhi	r5,1
   13cfc:	2957db04 	addi	r5,r5,24428
   13d00:	01000074 	movhi	r4,1
   13d04:	2117db04 	addi	r4,r4,24428
   13d08:	001532c0 	call	1532c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   13d0c:	0014ec80 	call	14ec8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   13d10:	01000074 	movhi	r4,1
   13d14:	2113ca04 	addi	r4,r4,20264
   13d18:	0015aec0 	call	15aec <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   13d1c:	d0a6bf17 	ldw	r2,-25860(gp)
   13d20:	d0e6c017 	ldw	r3,-25856(gp)
   13d24:	d126c117 	ldw	r4,-25852(gp)
   13d28:	200d883a 	mov	r6,r4
   13d2c:	180b883a 	mov	r5,r3
   13d30:	1009883a 	mov	r4,r2
   13d34:	001026c0 	call	1026c <main>
   13d38:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   13d3c:	01000044 	movi	r4,1
   13d40:	00137ec0 	call	137ec <close>
  exit (result);
   13d44:	e13fff17 	ldw	r4,-4(fp)
   13d48:	0015b000 	call	15b00 <exit>

00013d4c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   13d4c:	defffe04 	addi	sp,sp,-8
   13d50:	df000115 	stw	fp,4(sp)
   13d54:	df000104 	addi	fp,sp,4
   13d58:	e13fff15 	stw	r4,-4(fp)
}
   13d5c:	0001883a 	nop
   13d60:	e037883a 	mov	sp,fp
   13d64:	df000017 	ldw	fp,0(sp)
   13d68:	dec00104 	addi	sp,sp,4
   13d6c:	f800283a 	ret

00013d70 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   13d70:	defffe04 	addi	sp,sp,-8
   13d74:	df000115 	stw	fp,4(sp)
   13d78:	df000104 	addi	fp,sp,4
   13d7c:	e13fff15 	stw	r4,-4(fp)
}
   13d80:	0001883a 	nop
   13d84:	e037883a 	mov	sp,fp
   13d88:	df000017 	ldw	fp,0(sp)
   13d8c:	dec00104 	addi	sp,sp,4
   13d90:	f800283a 	ret

00013d94 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
   13d94:	defffd04 	addi	sp,sp,-12
   13d98:	dfc00215 	stw	ra,8(sp)
   13d9c:	df000115 	stw	fp,4(sp)
   13da0:	df000104 	addi	fp,sp,4
   13da4:	e13fff15 	stw	r4,-4(fp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
#else
    return fputs(str, stdout);
   13da8:	d0a00217 	ldw	r2,-32760(gp)
   13dac:	10800217 	ldw	r2,8(r2)
   13db0:	100b883a 	mov	r5,r2
   13db4:	e13fff17 	ldw	r4,-4(fp)
   13db8:	0015bd40 	call	15bd4 <fputs>
#endif
#endif
}
   13dbc:	e037883a 	mov	sp,fp
   13dc0:	dfc00117 	ldw	ra,4(sp)
   13dc4:	df000017 	ldw	fp,0(sp)
   13dc8:	dec00204 	addi	sp,sp,8
   13dcc:	f800283a 	ret

00013dd0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13dd0:	defffe04 	addi	sp,sp,-8
   13dd4:	dfc00115 	stw	ra,4(sp)
   13dd8:	df000015 	stw	fp,0(sp)
   13ddc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13de0:	d0a00a17 	ldw	r2,-32728(gp)
   13de4:	10000326 	beq	r2,zero,13df4 <alt_get_errno+0x24>
   13de8:	d0a00a17 	ldw	r2,-32728(gp)
   13dec:	103ee83a 	callr	r2
   13df0:	00000106 	br	13df8 <alt_get_errno+0x28>
   13df4:	d0a6be04 	addi	r2,gp,-25864
}
   13df8:	e037883a 	mov	sp,fp
   13dfc:	dfc00117 	ldw	ra,4(sp)
   13e00:	df000017 	ldw	fp,0(sp)
   13e04:	dec00204 	addi	sp,sp,8
   13e08:	f800283a 	ret

00013e0c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   13e0c:	defff904 	addi	sp,sp,-28
   13e10:	dfc00615 	stw	ra,24(sp)
   13e14:	df000515 	stw	fp,20(sp)
   13e18:	df000504 	addi	fp,sp,20
   13e1c:	e13ffd15 	stw	r4,-12(fp)
   13e20:	e17ffe15 	stw	r5,-8(fp)
   13e24:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13e28:	e0bffd17 	ldw	r2,-12(fp)
   13e2c:	10000816 	blt	r2,zero,13e50 <read+0x44>
   13e30:	01400304 	movi	r5,12
   13e34:	e13ffd17 	ldw	r4,-12(fp)
   13e38:	00137880 	call	13788 <__mulsi3>
   13e3c:	1007883a 	mov	r3,r2
   13e40:	00800074 	movhi	r2,1
   13e44:	109a0504 	addi	r2,r2,26644
   13e48:	1885883a 	add	r2,r3,r2
   13e4c:	00000106 	br	13e54 <read+0x48>
   13e50:	0005883a 	mov	r2,zero
   13e54:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   13e58:	e0bffb17 	ldw	r2,-20(fp)
   13e5c:	10002226 	beq	r2,zero,13ee8 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   13e60:	e0bffb17 	ldw	r2,-20(fp)
   13e64:	10800217 	ldw	r2,8(r2)
   13e68:	108000cc 	andi	r2,r2,3
   13e6c:	10800060 	cmpeqi	r2,r2,1
   13e70:	1000181e 	bne	r2,zero,13ed4 <read+0xc8>
        (fd->dev->read))
   13e74:	e0bffb17 	ldw	r2,-20(fp)
   13e78:	10800017 	ldw	r2,0(r2)
   13e7c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   13e80:	10001426 	beq	r2,zero,13ed4 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   13e84:	e0bffb17 	ldw	r2,-20(fp)
   13e88:	10800017 	ldw	r2,0(r2)
   13e8c:	10800517 	ldw	r2,20(r2)
   13e90:	e0ffff17 	ldw	r3,-4(fp)
   13e94:	180d883a 	mov	r6,r3
   13e98:	e17ffe17 	ldw	r5,-8(fp)
   13e9c:	e13ffb17 	ldw	r4,-20(fp)
   13ea0:	103ee83a 	callr	r2
   13ea4:	e0bffc15 	stw	r2,-16(fp)
   13ea8:	e0bffc17 	ldw	r2,-16(fp)
   13eac:	1000070e 	bge	r2,zero,13ecc <read+0xc0>
        {
          ALT_ERRNO = -rval;
   13eb0:	0013dd00 	call	13dd0 <alt_get_errno>
   13eb4:	1007883a 	mov	r3,r2
   13eb8:	e0bffc17 	ldw	r2,-16(fp)
   13ebc:	0085c83a 	sub	r2,zero,r2
   13ec0:	18800015 	stw	r2,0(r3)
          return -1;
   13ec4:	00bfffc4 	movi	r2,-1
   13ec8:	00000c06 	br	13efc <read+0xf0>
        }
        return rval;
   13ecc:	e0bffc17 	ldw	r2,-16(fp)
   13ed0:	00000a06 	br	13efc <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   13ed4:	0013dd00 	call	13dd0 <alt_get_errno>
   13ed8:	1007883a 	mov	r3,r2
   13edc:	00800344 	movi	r2,13
   13ee0:	18800015 	stw	r2,0(r3)
   13ee4:	00000406 	br	13ef8 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   13ee8:	0013dd00 	call	13dd0 <alt_get_errno>
   13eec:	1007883a 	mov	r3,r2
   13ef0:	00801444 	movi	r2,81
   13ef4:	18800015 	stw	r2,0(r3)
  }
  return -1;
   13ef8:	00bfffc4 	movi	r2,-1
}
   13efc:	e037883a 	mov	sp,fp
   13f00:	dfc00117 	ldw	ra,4(sp)
   13f04:	df000017 	ldw	fp,0(sp)
   13f08:	dec00204 	addi	sp,sp,8
   13f0c:	f800283a 	ret

00013f10 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   13f10:	defffc04 	addi	sp,sp,-16
   13f14:	dfc00315 	stw	ra,12(sp)
   13f18:	df000215 	stw	fp,8(sp)
   13f1c:	dc000115 	stw	r16,4(sp)
   13f20:	df000204 	addi	fp,sp,8
   13f24:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   13f28:	e0bffe17 	ldw	r2,-8(fp)
   13f2c:	108000d0 	cmplti	r2,r2,3
   13f30:	1000111e 	bne	r2,zero,13f78 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   13f34:	04000074 	movhi	r16,1
   13f38:	841a0504 	addi	r16,r16,26644
   13f3c:	e0bffe17 	ldw	r2,-8(fp)
   13f40:	01400304 	movi	r5,12
   13f44:	1009883a 	mov	r4,r2
   13f48:	00137880 	call	13788 <__mulsi3>
   13f4c:	8085883a 	add	r2,r16,r2
   13f50:	10800204 	addi	r2,r2,8
   13f54:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   13f58:	04000074 	movhi	r16,1
   13f5c:	841a0504 	addi	r16,r16,26644
   13f60:	e0bffe17 	ldw	r2,-8(fp)
   13f64:	01400304 	movi	r5,12
   13f68:	1009883a 	mov	r4,r2
   13f6c:	00137880 	call	13788 <__mulsi3>
   13f70:	8085883a 	add	r2,r16,r2
   13f74:	10000015 	stw	zero,0(r2)
  }
}
   13f78:	0001883a 	nop
   13f7c:	e6ffff04 	addi	sp,fp,-4
   13f80:	dfc00217 	ldw	ra,8(sp)
   13f84:	df000117 	ldw	fp,4(sp)
   13f88:	dc000017 	ldw	r16,0(sp)
   13f8c:	dec00304 	addi	sp,sp,12
   13f90:	f800283a 	ret

00013f94 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   13f94:	defff904 	addi	sp,sp,-28
   13f98:	df000615 	stw	fp,24(sp)
   13f9c:	df000604 	addi	fp,sp,24
   13fa0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13fa4:	0005303a 	rdctl	r2,status
   13fa8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13fac:	e0fffe17 	ldw	r3,-8(fp)
   13fb0:	00bfff84 	movi	r2,-2
   13fb4:	1884703a 	and	r2,r3,r2
   13fb8:	1001703a 	wrctl	status,r2
  
  return context;
   13fbc:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   13fc0:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   13fc4:	d0a00b17 	ldw	r2,-32724(gp)
   13fc8:	10c000c4 	addi	r3,r2,3
   13fcc:	00bfff04 	movi	r2,-4
   13fd0:	1884703a 	and	r2,r3,r2
   13fd4:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   13fd8:	d0e00b17 	ldw	r3,-32724(gp)
   13fdc:	e0bfff17 	ldw	r2,-4(fp)
   13fe0:	1887883a 	add	r3,r3,r2
   13fe4:	008000b4 	movhi	r2,2
   13fe8:	10800004 	addi	r2,r2,0
   13fec:	10c0062e 	bgeu	r2,r3,14008 <sbrk+0x74>
   13ff0:	e0bffb17 	ldw	r2,-20(fp)
   13ff4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13ff8:	e0bffa17 	ldw	r2,-24(fp)
   13ffc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   14000:	00bfffc4 	movi	r2,-1
   14004:	00000b06 	br	14034 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   14008:	d0a00b17 	ldw	r2,-32724(gp)
   1400c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   14010:	d0e00b17 	ldw	r3,-32724(gp)
   14014:	e0bfff17 	ldw	r2,-4(fp)
   14018:	1885883a 	add	r2,r3,r2
   1401c:	d0a00b15 	stw	r2,-32724(gp)
   14020:	e0bffb17 	ldw	r2,-20(fp)
   14024:	e0bffc15 	stw	r2,-16(fp)
   14028:	e0bffc17 	ldw	r2,-16(fp)
   1402c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   14030:	e0bffd17 	ldw	r2,-12(fp)
} 
   14034:	e037883a 	mov	sp,fp
   14038:	df000017 	ldw	fp,0(sp)
   1403c:	dec00104 	addi	sp,sp,4
   14040:	f800283a 	ret

00014044 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14044:	defffe04 	addi	sp,sp,-8
   14048:	dfc00115 	stw	ra,4(sp)
   1404c:	df000015 	stw	fp,0(sp)
   14050:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14054:	d0a00a17 	ldw	r2,-32728(gp)
   14058:	10000326 	beq	r2,zero,14068 <alt_get_errno+0x24>
   1405c:	d0a00a17 	ldw	r2,-32728(gp)
   14060:	103ee83a 	callr	r2
   14064:	00000106 	br	1406c <alt_get_errno+0x28>
   14068:	d0a6be04 	addi	r2,gp,-25864
}
   1406c:	e037883a 	mov	sp,fp
   14070:	dfc00117 	ldw	ra,4(sp)
   14074:	df000017 	ldw	fp,0(sp)
   14078:	dec00204 	addi	sp,sp,8
   1407c:	f800283a 	ret

00014080 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   14080:	defff904 	addi	sp,sp,-28
   14084:	dfc00615 	stw	ra,24(sp)
   14088:	df000515 	stw	fp,20(sp)
   1408c:	df000504 	addi	fp,sp,20
   14090:	e13ffd15 	stw	r4,-12(fp)
   14094:	e17ffe15 	stw	r5,-8(fp)
   14098:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1409c:	e0bffd17 	ldw	r2,-12(fp)
   140a0:	10000816 	blt	r2,zero,140c4 <write+0x44>
   140a4:	01400304 	movi	r5,12
   140a8:	e13ffd17 	ldw	r4,-12(fp)
   140ac:	00137880 	call	13788 <__mulsi3>
   140b0:	1007883a 	mov	r3,r2
   140b4:	00800074 	movhi	r2,1
   140b8:	109a0504 	addi	r2,r2,26644
   140bc:	1885883a 	add	r2,r3,r2
   140c0:	00000106 	br	140c8 <write+0x48>
   140c4:	0005883a 	mov	r2,zero
   140c8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   140cc:	e0bffb17 	ldw	r2,-20(fp)
   140d0:	10002126 	beq	r2,zero,14158 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   140d4:	e0bffb17 	ldw	r2,-20(fp)
   140d8:	10800217 	ldw	r2,8(r2)
   140dc:	108000cc 	andi	r2,r2,3
   140e0:	10001826 	beq	r2,zero,14144 <write+0xc4>
   140e4:	e0bffb17 	ldw	r2,-20(fp)
   140e8:	10800017 	ldw	r2,0(r2)
   140ec:	10800617 	ldw	r2,24(r2)
   140f0:	10001426 	beq	r2,zero,14144 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   140f4:	e0bffb17 	ldw	r2,-20(fp)
   140f8:	10800017 	ldw	r2,0(r2)
   140fc:	10800617 	ldw	r2,24(r2)
   14100:	e0ffff17 	ldw	r3,-4(fp)
   14104:	180d883a 	mov	r6,r3
   14108:	e17ffe17 	ldw	r5,-8(fp)
   1410c:	e13ffb17 	ldw	r4,-20(fp)
   14110:	103ee83a 	callr	r2
   14114:	e0bffc15 	stw	r2,-16(fp)
   14118:	e0bffc17 	ldw	r2,-16(fp)
   1411c:	1000070e 	bge	r2,zero,1413c <write+0xbc>
      {
        ALT_ERRNO = -rval;
   14120:	00140440 	call	14044 <alt_get_errno>
   14124:	1007883a 	mov	r3,r2
   14128:	e0bffc17 	ldw	r2,-16(fp)
   1412c:	0085c83a 	sub	r2,zero,r2
   14130:	18800015 	stw	r2,0(r3)
        return -1;
   14134:	00bfffc4 	movi	r2,-1
   14138:	00000c06 	br	1416c <write+0xec>
      }
      return rval;
   1413c:	e0bffc17 	ldw	r2,-16(fp)
   14140:	00000a06 	br	1416c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   14144:	00140440 	call	14044 <alt_get_errno>
   14148:	1007883a 	mov	r3,r2
   1414c:	00800344 	movi	r2,13
   14150:	18800015 	stw	r2,0(r3)
   14154:	00000406 	br	14168 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   14158:	00140440 	call	14044 <alt_get_errno>
   1415c:	1007883a 	mov	r3,r2
   14160:	00801444 	movi	r2,81
   14164:	18800015 	stw	r2,0(r3)
  }
  return -1;
   14168:	00bfffc4 	movi	r2,-1
}
   1416c:	e037883a 	mov	sp,fp
   14170:	dfc00117 	ldw	ra,4(sp)
   14174:	df000017 	ldw	fp,0(sp)
   14178:	dec00204 	addi	sp,sp,8
   1417c:	f800283a 	ret

00014180 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   14180:	defffd04 	addi	sp,sp,-12
   14184:	dfc00215 	stw	ra,8(sp)
   14188:	df000115 	stw	fp,4(sp)
   1418c:	df000104 	addi	fp,sp,4
   14190:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   14194:	d1600704 	addi	r5,gp,-32740
   14198:	e13fff17 	ldw	r4,-4(fp)
   1419c:	0014e240 	call	14e24 <alt_dev_llist_insert>
}
   141a0:	e037883a 	mov	sp,fp
   141a4:	dfc00117 	ldw	ra,4(sp)
   141a8:	df000017 	ldw	fp,0(sp)
   141ac:	dec00204 	addi	sp,sp,8
   141b0:	f800283a 	ret

000141b4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   141b4:	defffd04 	addi	sp,sp,-12
   141b8:	dfc00215 	stw	ra,8(sp)
   141bc:	df000115 	stw	fp,4(sp)
   141c0:	df000104 	addi	fp,sp,4
   141c4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   141c8:	00157d00 	call	157d0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   141cc:	00800044 	movi	r2,1
   141d0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   141d4:	0001883a 	nop
   141d8:	e037883a 	mov	sp,fp
   141dc:	dfc00117 	ldw	ra,4(sp)
   141e0:	df000017 	ldw	fp,0(sp)
   141e4:	dec00204 	addi	sp,sp,8
   141e8:	f800283a 	ret

000141ec <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   141ec:	defffe04 	addi	sp,sp,-8
   141f0:	dfc00115 	stw	ra,4(sp)
   141f4:	df000015 	stw	fp,0(sp)
   141f8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   141fc:	000d883a 	mov	r6,zero
   14200:	000b883a 	mov	r5,zero
   14204:	01000074 	movhi	r4,1
   14208:	211a6f04 	addi	r4,r4,27068
   1420c:	00143980 	call	14398 <altera_avalon_jtag_uart_init>
   14210:	01000074 	movhi	r4,1
   14214:	211a6504 	addi	r4,r4,27028
   14218:	00141800 	call	14180 <alt_dev_reg>
}
   1421c:	0001883a 	nop
   14220:	e037883a 	mov	sp,fp
   14224:	dfc00117 	ldw	ra,4(sp)
   14228:	df000017 	ldw	fp,0(sp)
   1422c:	dec00204 	addi	sp,sp,8
   14230:	f800283a 	ret

00014234 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   14234:	defffa04 	addi	sp,sp,-24
   14238:	dfc00515 	stw	ra,20(sp)
   1423c:	df000415 	stw	fp,16(sp)
   14240:	df000404 	addi	fp,sp,16
   14244:	e13ffd15 	stw	r4,-12(fp)
   14248:	e17ffe15 	stw	r5,-8(fp)
   1424c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   14250:	e0bffd17 	ldw	r2,-12(fp)
   14254:	10800017 	ldw	r2,0(r2)
   14258:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   1425c:	e0bffc17 	ldw	r2,-16(fp)
   14260:	10c00a04 	addi	r3,r2,40
   14264:	e0bffd17 	ldw	r2,-12(fp)
   14268:	10800217 	ldw	r2,8(r2)
   1426c:	100f883a 	mov	r7,r2
   14270:	e1bfff17 	ldw	r6,-4(fp)
   14274:	e17ffe17 	ldw	r5,-8(fp)
   14278:	1809883a 	mov	r4,r3
   1427c:	001485c0 	call	1485c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   14280:	e037883a 	mov	sp,fp
   14284:	dfc00117 	ldw	ra,4(sp)
   14288:	df000017 	ldw	fp,0(sp)
   1428c:	dec00204 	addi	sp,sp,8
   14290:	f800283a 	ret

00014294 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   14294:	defffa04 	addi	sp,sp,-24
   14298:	dfc00515 	stw	ra,20(sp)
   1429c:	df000415 	stw	fp,16(sp)
   142a0:	df000404 	addi	fp,sp,16
   142a4:	e13ffd15 	stw	r4,-12(fp)
   142a8:	e17ffe15 	stw	r5,-8(fp)
   142ac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   142b0:	e0bffd17 	ldw	r2,-12(fp)
   142b4:	10800017 	ldw	r2,0(r2)
   142b8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   142bc:	e0bffc17 	ldw	r2,-16(fp)
   142c0:	10c00a04 	addi	r3,r2,40
   142c4:	e0bffd17 	ldw	r2,-12(fp)
   142c8:	10800217 	ldw	r2,8(r2)
   142cc:	100f883a 	mov	r7,r2
   142d0:	e1bfff17 	ldw	r6,-4(fp)
   142d4:	e17ffe17 	ldw	r5,-8(fp)
   142d8:	1809883a 	mov	r4,r3
   142dc:	0014a780 	call	14a78 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   142e0:	e037883a 	mov	sp,fp
   142e4:	dfc00117 	ldw	ra,4(sp)
   142e8:	df000017 	ldw	fp,0(sp)
   142ec:	dec00204 	addi	sp,sp,8
   142f0:	f800283a 	ret

000142f4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   142f4:	defffc04 	addi	sp,sp,-16
   142f8:	dfc00315 	stw	ra,12(sp)
   142fc:	df000215 	stw	fp,8(sp)
   14300:	df000204 	addi	fp,sp,8
   14304:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   14308:	e0bfff17 	ldw	r2,-4(fp)
   1430c:	10800017 	ldw	r2,0(r2)
   14310:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   14314:	e0bffe17 	ldw	r2,-8(fp)
   14318:	10c00a04 	addi	r3,r2,40
   1431c:	e0bfff17 	ldw	r2,-4(fp)
   14320:	10800217 	ldw	r2,8(r2)
   14324:	100b883a 	mov	r5,r2
   14328:	1809883a 	mov	r4,r3
   1432c:	00147040 	call	14704 <altera_avalon_jtag_uart_close>
}
   14330:	e037883a 	mov	sp,fp
   14334:	dfc00117 	ldw	ra,4(sp)
   14338:	df000017 	ldw	fp,0(sp)
   1433c:	dec00204 	addi	sp,sp,8
   14340:	f800283a 	ret

00014344 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   14344:	defffa04 	addi	sp,sp,-24
   14348:	dfc00515 	stw	ra,20(sp)
   1434c:	df000415 	stw	fp,16(sp)
   14350:	df000404 	addi	fp,sp,16
   14354:	e13ffd15 	stw	r4,-12(fp)
   14358:	e17ffe15 	stw	r5,-8(fp)
   1435c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   14360:	e0bffd17 	ldw	r2,-12(fp)
   14364:	10800017 	ldw	r2,0(r2)
   14368:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   1436c:	e0bffc17 	ldw	r2,-16(fp)
   14370:	10800a04 	addi	r2,r2,40
   14374:	e1bfff17 	ldw	r6,-4(fp)
   14378:	e17ffe17 	ldw	r5,-8(fp)
   1437c:	1009883a 	mov	r4,r2
   14380:	001476c0 	call	1476c <altera_avalon_jtag_uart_ioctl>
}
   14384:	e037883a 	mov	sp,fp
   14388:	dfc00117 	ldw	ra,4(sp)
   1438c:	df000017 	ldw	fp,0(sp)
   14390:	dec00204 	addi	sp,sp,8
   14394:	f800283a 	ret

00014398 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   14398:	defffa04 	addi	sp,sp,-24
   1439c:	dfc00515 	stw	ra,20(sp)
   143a0:	df000415 	stw	fp,16(sp)
   143a4:	df000404 	addi	fp,sp,16
   143a8:	e13ffd15 	stw	r4,-12(fp)
   143ac:	e17ffe15 	stw	r5,-8(fp)
   143b0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   143b4:	e0bffd17 	ldw	r2,-12(fp)
   143b8:	00c00044 	movi	r3,1
   143bc:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   143c0:	e0bffd17 	ldw	r2,-12(fp)
   143c4:	10800017 	ldw	r2,0(r2)
   143c8:	10800104 	addi	r2,r2,4
   143cc:	1007883a 	mov	r3,r2
   143d0:	e0bffd17 	ldw	r2,-12(fp)
   143d4:	10800817 	ldw	r2,32(r2)
   143d8:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   143dc:	e0bffe17 	ldw	r2,-8(fp)
   143e0:	e0ffff17 	ldw	r3,-4(fp)
   143e4:	d8000015 	stw	zero,0(sp)
   143e8:	e1fffd17 	ldw	r7,-12(fp)
   143ec:	01800074 	movhi	r6,1
   143f0:	31911604 	addi	r6,r6,17496
   143f4:	180b883a 	mov	r5,r3
   143f8:	1009883a 	mov	r4,r2
   143fc:	0014fa80 	call	14fa8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   14400:	e0bffd17 	ldw	r2,-12(fp)
   14404:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   14408:	e0bffd17 	ldw	r2,-12(fp)
   1440c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   14410:	d0e6c317 	ldw	r3,-25844(gp)
   14414:	e1fffd17 	ldw	r7,-12(fp)
   14418:	01800074 	movhi	r6,1
   1441c:	31919904 	addi	r6,r6,18020
   14420:	180b883a 	mov	r5,r3
   14424:	1009883a 	mov	r4,r2
   14428:	0014c9c0 	call	14c9c <alt_alarm_start>
   1442c:	1000040e 	bge	r2,zero,14440 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   14430:	e0fffd17 	ldw	r3,-12(fp)
   14434:	00a00034 	movhi	r2,32768
   14438:	10bfffc4 	addi	r2,r2,-1
   1443c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   14440:	0001883a 	nop
   14444:	e037883a 	mov	sp,fp
   14448:	dfc00117 	ldw	ra,4(sp)
   1444c:	df000017 	ldw	fp,0(sp)
   14450:	dec00204 	addi	sp,sp,8
   14454:	f800283a 	ret

00014458 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   14458:	defff804 	addi	sp,sp,-32
   1445c:	df000715 	stw	fp,28(sp)
   14460:	df000704 	addi	fp,sp,28
   14464:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   14468:	e0bfff17 	ldw	r2,-4(fp)
   1446c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   14470:	e0bffb17 	ldw	r2,-20(fp)
   14474:	10800017 	ldw	r2,0(r2)
   14478:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1447c:	e0bffc17 	ldw	r2,-16(fp)
   14480:	10800104 	addi	r2,r2,4
   14484:	10800037 	ldwio	r2,0(r2)
   14488:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   1448c:	e0bffd17 	ldw	r2,-12(fp)
   14490:	1080c00c 	andi	r2,r2,768
   14494:	10006d26 	beq	r2,zero,1464c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   14498:	e0bffd17 	ldw	r2,-12(fp)
   1449c:	1080400c 	andi	r2,r2,256
   144a0:	10003526 	beq	r2,zero,14578 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   144a4:	00800074 	movhi	r2,1
   144a8:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   144ac:	e0bffb17 	ldw	r2,-20(fp)
   144b0:	10800a17 	ldw	r2,40(r2)
   144b4:	10800044 	addi	r2,r2,1
   144b8:	1081ffcc 	andi	r2,r2,2047
   144bc:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   144c0:	e0bffb17 	ldw	r2,-20(fp)
   144c4:	10c00b17 	ldw	r3,44(r2)
   144c8:	e0bffe17 	ldw	r2,-8(fp)
   144cc:	18801526 	beq	r3,r2,14524 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   144d0:	e0bffc17 	ldw	r2,-16(fp)
   144d4:	10800037 	ldwio	r2,0(r2)
   144d8:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   144dc:	e0bff917 	ldw	r2,-28(fp)
   144e0:	10a0000c 	andi	r2,r2,32768
   144e4:	10001126 	beq	r2,zero,1452c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   144e8:	e0bffb17 	ldw	r2,-20(fp)
   144ec:	10800a17 	ldw	r2,40(r2)
   144f0:	e0fff917 	ldw	r3,-28(fp)
   144f4:	1809883a 	mov	r4,r3
   144f8:	e0fffb17 	ldw	r3,-20(fp)
   144fc:	1885883a 	add	r2,r3,r2
   14500:	10800e04 	addi	r2,r2,56
   14504:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   14508:	e0bffb17 	ldw	r2,-20(fp)
   1450c:	10800a17 	ldw	r2,40(r2)
   14510:	10800044 	addi	r2,r2,1
   14514:	10c1ffcc 	andi	r3,r2,2047
   14518:	e0bffb17 	ldw	r2,-20(fp)
   1451c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   14520:	003fe206 	br	144ac <__alt_data_end+0xffff44ac>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   14524:	0001883a 	nop
   14528:	00000106 	br	14530 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   1452c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   14530:	e0bff917 	ldw	r2,-28(fp)
   14534:	10bfffec 	andhi	r2,r2,65535
   14538:	10000f26 	beq	r2,zero,14578 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1453c:	e0bffb17 	ldw	r2,-20(fp)
   14540:	10c00817 	ldw	r3,32(r2)
   14544:	00bfff84 	movi	r2,-2
   14548:	1886703a 	and	r3,r3,r2
   1454c:	e0bffb17 	ldw	r2,-20(fp)
   14550:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   14554:	e0bffc17 	ldw	r2,-16(fp)
   14558:	10800104 	addi	r2,r2,4
   1455c:	1007883a 	mov	r3,r2
   14560:	e0bffb17 	ldw	r2,-20(fp)
   14564:	10800817 	ldw	r2,32(r2)
   14568:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1456c:	e0bffc17 	ldw	r2,-16(fp)
   14570:	10800104 	addi	r2,r2,4
   14574:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   14578:	e0bffd17 	ldw	r2,-12(fp)
   1457c:	1080800c 	andi	r2,r2,512
   14580:	103fbe26 	beq	r2,zero,1447c <__alt_data_end+0xffff447c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   14584:	e0bffd17 	ldw	r2,-12(fp)
   14588:	1004d43a 	srli	r2,r2,16
   1458c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   14590:	00001406 	br	145e4 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   14594:	e0bffc17 	ldw	r2,-16(fp)
   14598:	e0fffb17 	ldw	r3,-20(fp)
   1459c:	18c00d17 	ldw	r3,52(r3)
   145a0:	e13ffb17 	ldw	r4,-20(fp)
   145a4:	20c7883a 	add	r3,r4,r3
   145a8:	18c20e04 	addi	r3,r3,2104
   145ac:	18c00003 	ldbu	r3,0(r3)
   145b0:	18c03fcc 	andi	r3,r3,255
   145b4:	18c0201c 	xori	r3,r3,128
   145b8:	18ffe004 	addi	r3,r3,-128
   145bc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   145c0:	e0bffb17 	ldw	r2,-20(fp)
   145c4:	10800d17 	ldw	r2,52(r2)
   145c8:	10800044 	addi	r2,r2,1
   145cc:	10c1ffcc 	andi	r3,r2,2047
   145d0:	e0bffb17 	ldw	r2,-20(fp)
   145d4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   145d8:	e0bffa17 	ldw	r2,-24(fp)
   145dc:	10bfffc4 	addi	r2,r2,-1
   145e0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   145e4:	e0bffa17 	ldw	r2,-24(fp)
   145e8:	10000526 	beq	r2,zero,14600 <altera_avalon_jtag_uart_irq+0x1a8>
   145ec:	e0bffb17 	ldw	r2,-20(fp)
   145f0:	10c00d17 	ldw	r3,52(r2)
   145f4:	e0bffb17 	ldw	r2,-20(fp)
   145f8:	10800c17 	ldw	r2,48(r2)
   145fc:	18bfe51e 	bne	r3,r2,14594 <__alt_data_end+0xffff4594>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   14600:	e0bffa17 	ldw	r2,-24(fp)
   14604:	103f9d26 	beq	r2,zero,1447c <__alt_data_end+0xffff447c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   14608:	e0bffb17 	ldw	r2,-20(fp)
   1460c:	10c00817 	ldw	r3,32(r2)
   14610:	00bfff44 	movi	r2,-3
   14614:	1886703a 	and	r3,r3,r2
   14618:	e0bffb17 	ldw	r2,-20(fp)
   1461c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   14620:	e0bffb17 	ldw	r2,-20(fp)
   14624:	10800017 	ldw	r2,0(r2)
   14628:	10800104 	addi	r2,r2,4
   1462c:	1007883a 	mov	r3,r2
   14630:	e0bffb17 	ldw	r2,-20(fp)
   14634:	10800817 	ldw	r2,32(r2)
   14638:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1463c:	e0bffc17 	ldw	r2,-16(fp)
   14640:	10800104 	addi	r2,r2,4
   14644:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   14648:	003f8c06 	br	1447c <__alt_data_end+0xffff447c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   1464c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   14650:	0001883a 	nop
   14654:	e037883a 	mov	sp,fp
   14658:	df000017 	ldw	fp,0(sp)
   1465c:	dec00104 	addi	sp,sp,4
   14660:	f800283a 	ret

00014664 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   14664:	defff804 	addi	sp,sp,-32
   14668:	df000715 	stw	fp,28(sp)
   1466c:	df000704 	addi	fp,sp,28
   14670:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   14674:	e0bffb17 	ldw	r2,-20(fp)
   14678:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   1467c:	e0bff917 	ldw	r2,-28(fp)
   14680:	10800017 	ldw	r2,0(r2)
   14684:	10800104 	addi	r2,r2,4
   14688:	10800037 	ldwio	r2,0(r2)
   1468c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   14690:	e0bffa17 	ldw	r2,-24(fp)
   14694:	1081000c 	andi	r2,r2,1024
   14698:	10000b26 	beq	r2,zero,146c8 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   1469c:	e0bff917 	ldw	r2,-28(fp)
   146a0:	10800017 	ldw	r2,0(r2)
   146a4:	10800104 	addi	r2,r2,4
   146a8:	1007883a 	mov	r3,r2
   146ac:	e0bff917 	ldw	r2,-28(fp)
   146b0:	10800817 	ldw	r2,32(r2)
   146b4:	10810014 	ori	r2,r2,1024
   146b8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   146bc:	e0bff917 	ldw	r2,-28(fp)
   146c0:	10000915 	stw	zero,36(r2)
   146c4:	00000a06 	br	146f0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   146c8:	e0bff917 	ldw	r2,-28(fp)
   146cc:	10c00917 	ldw	r3,36(r2)
   146d0:	00a00034 	movhi	r2,32768
   146d4:	10bfff04 	addi	r2,r2,-4
   146d8:	10c00536 	bltu	r2,r3,146f0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   146dc:	e0bff917 	ldw	r2,-28(fp)
   146e0:	10800917 	ldw	r2,36(r2)
   146e4:	10c00044 	addi	r3,r2,1
   146e8:	e0bff917 	ldw	r2,-28(fp)
   146ec:	10c00915 	stw	r3,36(r2)
   146f0:	d0a6c317 	ldw	r2,-25844(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   146f4:	e037883a 	mov	sp,fp
   146f8:	df000017 	ldw	fp,0(sp)
   146fc:	dec00104 	addi	sp,sp,4
   14700:	f800283a 	ret

00014704 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   14704:	defffd04 	addi	sp,sp,-12
   14708:	df000215 	stw	fp,8(sp)
   1470c:	df000204 	addi	fp,sp,8
   14710:	e13ffe15 	stw	r4,-8(fp)
   14714:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   14718:	00000506 	br	14730 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   1471c:	e0bfff17 	ldw	r2,-4(fp)
   14720:	1090000c 	andi	r2,r2,16384
   14724:	10000226 	beq	r2,zero,14730 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   14728:	00bffd44 	movi	r2,-11
   1472c:	00000b06 	br	1475c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   14730:	e0bffe17 	ldw	r2,-8(fp)
   14734:	10c00d17 	ldw	r3,52(r2)
   14738:	e0bffe17 	ldw	r2,-8(fp)
   1473c:	10800c17 	ldw	r2,48(r2)
   14740:	18800526 	beq	r3,r2,14758 <altera_avalon_jtag_uart_close+0x54>
   14744:	e0bffe17 	ldw	r2,-8(fp)
   14748:	10c00917 	ldw	r3,36(r2)
   1474c:	e0bffe17 	ldw	r2,-8(fp)
   14750:	10800117 	ldw	r2,4(r2)
   14754:	18bff136 	bltu	r3,r2,1471c <__alt_data_end+0xffff471c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   14758:	0005883a 	mov	r2,zero
}
   1475c:	e037883a 	mov	sp,fp
   14760:	df000017 	ldw	fp,0(sp)
   14764:	dec00104 	addi	sp,sp,4
   14768:	f800283a 	ret

0001476c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   1476c:	defffa04 	addi	sp,sp,-24
   14770:	df000515 	stw	fp,20(sp)
   14774:	df000504 	addi	fp,sp,20
   14778:	e13ffd15 	stw	r4,-12(fp)
   1477c:	e17ffe15 	stw	r5,-8(fp)
   14780:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   14784:	00bff9c4 	movi	r2,-25
   14788:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   1478c:	e0bffe17 	ldw	r2,-8(fp)
   14790:	10da8060 	cmpeqi	r3,r2,27137
   14794:	1800031e 	bne	r3,zero,147a4 <altera_avalon_jtag_uart_ioctl+0x38>
   14798:	109a80a0 	cmpeqi	r2,r2,27138
   1479c:	1000181e 	bne	r2,zero,14800 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   147a0:	00002906 	br	14848 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   147a4:	e0bffd17 	ldw	r2,-12(fp)
   147a8:	10c00117 	ldw	r3,4(r2)
   147ac:	00a00034 	movhi	r2,32768
   147b0:	10bfffc4 	addi	r2,r2,-1
   147b4:	18802126 	beq	r3,r2,1483c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   147b8:	e0bfff17 	ldw	r2,-4(fp)
   147bc:	10800017 	ldw	r2,0(r2)
   147c0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   147c4:	e0bffc17 	ldw	r2,-16(fp)
   147c8:	10800090 	cmplti	r2,r2,2
   147cc:	1000061e 	bne	r2,zero,147e8 <altera_avalon_jtag_uart_ioctl+0x7c>
   147d0:	e0fffc17 	ldw	r3,-16(fp)
   147d4:	00a00034 	movhi	r2,32768
   147d8:	10bfffc4 	addi	r2,r2,-1
   147dc:	18800226 	beq	r3,r2,147e8 <altera_avalon_jtag_uart_ioctl+0x7c>
   147e0:	e0bffc17 	ldw	r2,-16(fp)
   147e4:	00000206 	br	147f0 <altera_avalon_jtag_uart_ioctl+0x84>
   147e8:	00a00034 	movhi	r2,32768
   147ec:	10bfff84 	addi	r2,r2,-2
   147f0:	e0fffd17 	ldw	r3,-12(fp)
   147f4:	18800115 	stw	r2,4(r3)
      rc = 0;
   147f8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   147fc:	00000f06 	br	1483c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   14800:	e0bffd17 	ldw	r2,-12(fp)
   14804:	10c00117 	ldw	r3,4(r2)
   14808:	00a00034 	movhi	r2,32768
   1480c:	10bfffc4 	addi	r2,r2,-1
   14810:	18800c26 	beq	r3,r2,14844 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   14814:	e0bffd17 	ldw	r2,-12(fp)
   14818:	10c00917 	ldw	r3,36(r2)
   1481c:	e0bffd17 	ldw	r2,-12(fp)
   14820:	10800117 	ldw	r2,4(r2)
   14824:	1885803a 	cmpltu	r2,r3,r2
   14828:	10c03fcc 	andi	r3,r2,255
   1482c:	e0bfff17 	ldw	r2,-4(fp)
   14830:	10c00015 	stw	r3,0(r2)
      rc = 0;
   14834:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   14838:	00000206 	br	14844 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   1483c:	0001883a 	nop
   14840:	00000106 	br	14848 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   14844:	0001883a 	nop

  default:
    break;
  }

  return rc;
   14848:	e0bffb17 	ldw	r2,-20(fp)
}
   1484c:	e037883a 	mov	sp,fp
   14850:	df000017 	ldw	fp,0(sp)
   14854:	dec00104 	addi	sp,sp,4
   14858:	f800283a 	ret

0001485c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   1485c:	defff304 	addi	sp,sp,-52
   14860:	dfc00c15 	stw	ra,48(sp)
   14864:	df000b15 	stw	fp,44(sp)
   14868:	df000b04 	addi	fp,sp,44
   1486c:	e13ffc15 	stw	r4,-16(fp)
   14870:	e17ffd15 	stw	r5,-12(fp)
   14874:	e1bffe15 	stw	r6,-8(fp)
   14878:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   1487c:	e0bffd17 	ldw	r2,-12(fp)
   14880:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   14884:	00004706 	br	149a4 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   14888:	e0bffc17 	ldw	r2,-16(fp)
   1488c:	10800a17 	ldw	r2,40(r2)
   14890:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   14894:	e0bffc17 	ldw	r2,-16(fp)
   14898:	10800b17 	ldw	r2,44(r2)
   1489c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   148a0:	e0fff717 	ldw	r3,-36(fp)
   148a4:	e0bff817 	ldw	r2,-32(fp)
   148a8:	18800536 	bltu	r3,r2,148c0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   148ac:	e0fff717 	ldw	r3,-36(fp)
   148b0:	e0bff817 	ldw	r2,-32(fp)
   148b4:	1885c83a 	sub	r2,r3,r2
   148b8:	e0bff615 	stw	r2,-40(fp)
   148bc:	00000406 	br	148d0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   148c0:	00c20004 	movi	r3,2048
   148c4:	e0bff817 	ldw	r2,-32(fp)
   148c8:	1885c83a 	sub	r2,r3,r2
   148cc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   148d0:	e0bff617 	ldw	r2,-40(fp)
   148d4:	10001e26 	beq	r2,zero,14950 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   148d8:	e0fffe17 	ldw	r3,-8(fp)
   148dc:	e0bff617 	ldw	r2,-40(fp)
   148e0:	1880022e 	bgeu	r3,r2,148ec <altera_avalon_jtag_uart_read+0x90>
        n = space;
   148e4:	e0bffe17 	ldw	r2,-8(fp)
   148e8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   148ec:	e0bffc17 	ldw	r2,-16(fp)
   148f0:	10c00e04 	addi	r3,r2,56
   148f4:	e0bff817 	ldw	r2,-32(fp)
   148f8:	1885883a 	add	r2,r3,r2
   148fc:	e1bff617 	ldw	r6,-40(fp)
   14900:	100b883a 	mov	r5,r2
   14904:	e13ff517 	ldw	r4,-44(fp)
   14908:	0011fb40 	call	11fb4 <memcpy>
      ptr   += n;
   1490c:	e0fff517 	ldw	r3,-44(fp)
   14910:	e0bff617 	ldw	r2,-40(fp)
   14914:	1885883a 	add	r2,r3,r2
   14918:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   1491c:	e0fffe17 	ldw	r3,-8(fp)
   14920:	e0bff617 	ldw	r2,-40(fp)
   14924:	1885c83a 	sub	r2,r3,r2
   14928:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1492c:	e0fff817 	ldw	r3,-32(fp)
   14930:	e0bff617 	ldw	r2,-40(fp)
   14934:	1885883a 	add	r2,r3,r2
   14938:	10c1ffcc 	andi	r3,r2,2047
   1493c:	e0bffc17 	ldw	r2,-16(fp)
   14940:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   14944:	e0bffe17 	ldw	r2,-8(fp)
   14948:	00bfcf16 	blt	zero,r2,14888 <__alt_data_end+0xffff4888>
   1494c:	00000106 	br	14954 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   14950:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   14954:	e0fff517 	ldw	r3,-44(fp)
   14958:	e0bffd17 	ldw	r2,-12(fp)
   1495c:	1880141e 	bne	r3,r2,149b0 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   14960:	e0bfff17 	ldw	r2,-4(fp)
   14964:	1090000c 	andi	r2,r2,16384
   14968:	1000131e 	bne	r2,zero,149b8 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   1496c:	0001883a 	nop
   14970:	e0bffc17 	ldw	r2,-16(fp)
   14974:	10c00a17 	ldw	r3,40(r2)
   14978:	e0bff717 	ldw	r2,-36(fp)
   1497c:	1880051e 	bne	r3,r2,14994 <altera_avalon_jtag_uart_read+0x138>
   14980:	e0bffc17 	ldw	r2,-16(fp)
   14984:	10c00917 	ldw	r3,36(r2)
   14988:	e0bffc17 	ldw	r2,-16(fp)
   1498c:	10800117 	ldw	r2,4(r2)
   14990:	18bff736 	bltu	r3,r2,14970 <__alt_data_end+0xffff4970>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   14994:	e0bffc17 	ldw	r2,-16(fp)
   14998:	10c00a17 	ldw	r3,40(r2)
   1499c:	e0bff717 	ldw	r2,-36(fp)
   149a0:	18800726 	beq	r3,r2,149c0 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   149a4:	e0bffe17 	ldw	r2,-8(fp)
   149a8:	00bfb716 	blt	zero,r2,14888 <__alt_data_end+0xffff4888>
   149ac:	00000506 	br	149c4 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   149b0:	0001883a 	nop
   149b4:	00000306 	br	149c4 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   149b8:	0001883a 	nop
   149bc:	00000106 	br	149c4 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   149c0:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   149c4:	e0fff517 	ldw	r3,-44(fp)
   149c8:	e0bffd17 	ldw	r2,-12(fp)
   149cc:	18801826 	beq	r3,r2,14a30 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   149d0:	0005303a 	rdctl	r2,status
   149d4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   149d8:	e0fffb17 	ldw	r3,-20(fp)
   149dc:	00bfff84 	movi	r2,-2
   149e0:	1884703a 	and	r2,r3,r2
   149e4:	1001703a 	wrctl	status,r2
  
  return context;
   149e8:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   149ec:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   149f0:	e0bffc17 	ldw	r2,-16(fp)
   149f4:	10800817 	ldw	r2,32(r2)
   149f8:	10c00054 	ori	r3,r2,1
   149fc:	e0bffc17 	ldw	r2,-16(fp)
   14a00:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   14a04:	e0bffc17 	ldw	r2,-16(fp)
   14a08:	10800017 	ldw	r2,0(r2)
   14a0c:	10800104 	addi	r2,r2,4
   14a10:	1007883a 	mov	r3,r2
   14a14:	e0bffc17 	ldw	r2,-16(fp)
   14a18:	10800817 	ldw	r2,32(r2)
   14a1c:	18800035 	stwio	r2,0(r3)
   14a20:	e0bffa17 	ldw	r2,-24(fp)
   14a24:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14a28:	e0bff917 	ldw	r2,-28(fp)
   14a2c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   14a30:	e0fff517 	ldw	r3,-44(fp)
   14a34:	e0bffd17 	ldw	r2,-12(fp)
   14a38:	18800426 	beq	r3,r2,14a4c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   14a3c:	e0fff517 	ldw	r3,-44(fp)
   14a40:	e0bffd17 	ldw	r2,-12(fp)
   14a44:	1885c83a 	sub	r2,r3,r2
   14a48:	00000606 	br	14a64 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   14a4c:	e0bfff17 	ldw	r2,-4(fp)
   14a50:	1090000c 	andi	r2,r2,16384
   14a54:	10000226 	beq	r2,zero,14a60 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   14a58:	00bffd44 	movi	r2,-11
   14a5c:	00000106 	br	14a64 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   14a60:	00bffec4 	movi	r2,-5
}
   14a64:	e037883a 	mov	sp,fp
   14a68:	dfc00117 	ldw	ra,4(sp)
   14a6c:	df000017 	ldw	fp,0(sp)
   14a70:	dec00204 	addi	sp,sp,8
   14a74:	f800283a 	ret

00014a78 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   14a78:	defff304 	addi	sp,sp,-52
   14a7c:	dfc00c15 	stw	ra,48(sp)
   14a80:	df000b15 	stw	fp,44(sp)
   14a84:	df000b04 	addi	fp,sp,44
   14a88:	e13ffc15 	stw	r4,-16(fp)
   14a8c:	e17ffd15 	stw	r5,-12(fp)
   14a90:	e1bffe15 	stw	r6,-8(fp)
   14a94:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   14a98:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   14a9c:	e0bffd17 	ldw	r2,-12(fp)
   14aa0:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   14aa4:	00003706 	br	14b84 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   14aa8:	e0bffc17 	ldw	r2,-16(fp)
   14aac:	10800c17 	ldw	r2,48(r2)
   14ab0:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   14ab4:	e0bffc17 	ldw	r2,-16(fp)
   14ab8:	10800d17 	ldw	r2,52(r2)
   14abc:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   14ac0:	e0fff917 	ldw	r3,-28(fp)
   14ac4:	e0bff517 	ldw	r2,-44(fp)
   14ac8:	1880062e 	bgeu	r3,r2,14ae4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   14acc:	e0fff517 	ldw	r3,-44(fp)
   14ad0:	e0bff917 	ldw	r2,-28(fp)
   14ad4:	1885c83a 	sub	r2,r3,r2
   14ad8:	10bfffc4 	addi	r2,r2,-1
   14adc:	e0bff615 	stw	r2,-40(fp)
   14ae0:	00000b06 	br	14b10 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   14ae4:	e0bff517 	ldw	r2,-44(fp)
   14ae8:	10000526 	beq	r2,zero,14b00 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   14aec:	00c20004 	movi	r3,2048
   14af0:	e0bff917 	ldw	r2,-28(fp)
   14af4:	1885c83a 	sub	r2,r3,r2
   14af8:	e0bff615 	stw	r2,-40(fp)
   14afc:	00000406 	br	14b10 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   14b00:	00c1ffc4 	movi	r3,2047
   14b04:	e0bff917 	ldw	r2,-28(fp)
   14b08:	1885c83a 	sub	r2,r3,r2
   14b0c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   14b10:	e0bff617 	ldw	r2,-40(fp)
   14b14:	10001e26 	beq	r2,zero,14b90 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   14b18:	e0fffe17 	ldw	r3,-8(fp)
   14b1c:	e0bff617 	ldw	r2,-40(fp)
   14b20:	1880022e 	bgeu	r3,r2,14b2c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   14b24:	e0bffe17 	ldw	r2,-8(fp)
   14b28:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   14b2c:	e0bffc17 	ldw	r2,-16(fp)
   14b30:	10c20e04 	addi	r3,r2,2104
   14b34:	e0bff917 	ldw	r2,-28(fp)
   14b38:	1885883a 	add	r2,r3,r2
   14b3c:	e1bff617 	ldw	r6,-40(fp)
   14b40:	e17ffd17 	ldw	r5,-12(fp)
   14b44:	1009883a 	mov	r4,r2
   14b48:	0011fb40 	call	11fb4 <memcpy>
      ptr   += n;
   14b4c:	e0fffd17 	ldw	r3,-12(fp)
   14b50:	e0bff617 	ldw	r2,-40(fp)
   14b54:	1885883a 	add	r2,r3,r2
   14b58:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   14b5c:	e0fffe17 	ldw	r3,-8(fp)
   14b60:	e0bff617 	ldw	r2,-40(fp)
   14b64:	1885c83a 	sub	r2,r3,r2
   14b68:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   14b6c:	e0fff917 	ldw	r3,-28(fp)
   14b70:	e0bff617 	ldw	r2,-40(fp)
   14b74:	1885883a 	add	r2,r3,r2
   14b78:	10c1ffcc 	andi	r3,r2,2047
   14b7c:	e0bffc17 	ldw	r2,-16(fp)
   14b80:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   14b84:	e0bffe17 	ldw	r2,-8(fp)
   14b88:	00bfc716 	blt	zero,r2,14aa8 <__alt_data_end+0xffff4aa8>
   14b8c:	00000106 	br	14b94 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   14b90:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14b94:	0005303a 	rdctl	r2,status
   14b98:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14b9c:	e0fffb17 	ldw	r3,-20(fp)
   14ba0:	00bfff84 	movi	r2,-2
   14ba4:	1884703a 	and	r2,r3,r2
   14ba8:	1001703a 	wrctl	status,r2
  
  return context;
   14bac:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   14bb0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   14bb4:	e0bffc17 	ldw	r2,-16(fp)
   14bb8:	10800817 	ldw	r2,32(r2)
   14bbc:	10c00094 	ori	r3,r2,2
   14bc0:	e0bffc17 	ldw	r2,-16(fp)
   14bc4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   14bc8:	e0bffc17 	ldw	r2,-16(fp)
   14bcc:	10800017 	ldw	r2,0(r2)
   14bd0:	10800104 	addi	r2,r2,4
   14bd4:	1007883a 	mov	r3,r2
   14bd8:	e0bffc17 	ldw	r2,-16(fp)
   14bdc:	10800817 	ldw	r2,32(r2)
   14be0:	18800035 	stwio	r2,0(r3)
   14be4:	e0bffa17 	ldw	r2,-24(fp)
   14be8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14bec:	e0bff817 	ldw	r2,-32(fp)
   14bf0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   14bf4:	e0bffe17 	ldw	r2,-8(fp)
   14bf8:	0080100e 	bge	zero,r2,14c3c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   14bfc:	e0bfff17 	ldw	r2,-4(fp)
   14c00:	1090000c 	andi	r2,r2,16384
   14c04:	1000101e 	bne	r2,zero,14c48 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   14c08:	0001883a 	nop
   14c0c:	e0bffc17 	ldw	r2,-16(fp)
   14c10:	10c00d17 	ldw	r3,52(r2)
   14c14:	e0bff517 	ldw	r2,-44(fp)
   14c18:	1880051e 	bne	r3,r2,14c30 <altera_avalon_jtag_uart_write+0x1b8>
   14c1c:	e0bffc17 	ldw	r2,-16(fp)
   14c20:	10c00917 	ldw	r3,36(r2)
   14c24:	e0bffc17 	ldw	r2,-16(fp)
   14c28:	10800117 	ldw	r2,4(r2)
   14c2c:	18bff736 	bltu	r3,r2,14c0c <__alt_data_end+0xffff4c0c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   14c30:	e0bffc17 	ldw	r2,-16(fp)
   14c34:	10800917 	ldw	r2,36(r2)
   14c38:	1000051e 	bne	r2,zero,14c50 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   14c3c:	e0bffe17 	ldw	r2,-8(fp)
   14c40:	00bfd016 	blt	zero,r2,14b84 <__alt_data_end+0xffff4b84>
   14c44:	00000306 	br	14c54 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   14c48:	0001883a 	nop
   14c4c:	00000106 	br	14c54 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   14c50:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   14c54:	e0fffd17 	ldw	r3,-12(fp)
   14c58:	e0bff717 	ldw	r2,-36(fp)
   14c5c:	18800426 	beq	r3,r2,14c70 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   14c60:	e0fffd17 	ldw	r3,-12(fp)
   14c64:	e0bff717 	ldw	r2,-36(fp)
   14c68:	1885c83a 	sub	r2,r3,r2
   14c6c:	00000606 	br	14c88 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   14c70:	e0bfff17 	ldw	r2,-4(fp)
   14c74:	1090000c 	andi	r2,r2,16384
   14c78:	10000226 	beq	r2,zero,14c84 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   14c7c:	00bffd44 	movi	r2,-11
   14c80:	00000106 	br	14c88 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   14c84:	00bffec4 	movi	r2,-5
}
   14c88:	e037883a 	mov	sp,fp
   14c8c:	dfc00117 	ldw	ra,4(sp)
   14c90:	df000017 	ldw	fp,0(sp)
   14c94:	dec00204 	addi	sp,sp,8
   14c98:	f800283a 	ret

00014c9c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   14c9c:	defff504 	addi	sp,sp,-44
   14ca0:	df000a15 	stw	fp,40(sp)
   14ca4:	df000a04 	addi	fp,sp,40
   14ca8:	e13ffc15 	stw	r4,-16(fp)
   14cac:	e17ffd15 	stw	r5,-12(fp)
   14cb0:	e1bffe15 	stw	r6,-8(fp)
   14cb4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   14cb8:	e03ff615 	stw	zero,-40(fp)
   14cbc:	d0a6c317 	ldw	r2,-25844(gp)
  
  if (alt_ticks_per_second ())
   14cc0:	10003c26 	beq	r2,zero,14db4 <alt_alarm_start+0x118>
  {
    if (alarm)
   14cc4:	e0bffc17 	ldw	r2,-16(fp)
   14cc8:	10003826 	beq	r2,zero,14dac <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   14ccc:	e0bffc17 	ldw	r2,-16(fp)
   14cd0:	e0fffe17 	ldw	r3,-8(fp)
   14cd4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   14cd8:	e0bffc17 	ldw	r2,-16(fp)
   14cdc:	e0ffff17 	ldw	r3,-4(fp)
   14ce0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14ce4:	0005303a 	rdctl	r2,status
   14ce8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14cec:	e0fff917 	ldw	r3,-28(fp)
   14cf0:	00bfff84 	movi	r2,-2
   14cf4:	1884703a 	and	r2,r3,r2
   14cf8:	1001703a 	wrctl	status,r2
  
  return context;
   14cfc:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   14d00:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   14d04:	d0a6c417 	ldw	r2,-25840(gp)
      
      current_nticks = alt_nticks();
   14d08:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   14d0c:	e0fffd17 	ldw	r3,-12(fp)
   14d10:	e0bff617 	ldw	r2,-40(fp)
   14d14:	1885883a 	add	r2,r3,r2
   14d18:	10c00044 	addi	r3,r2,1
   14d1c:	e0bffc17 	ldw	r2,-16(fp)
   14d20:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   14d24:	e0bffc17 	ldw	r2,-16(fp)
   14d28:	10c00217 	ldw	r3,8(r2)
   14d2c:	e0bff617 	ldw	r2,-40(fp)
   14d30:	1880042e 	bgeu	r3,r2,14d44 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   14d34:	e0bffc17 	ldw	r2,-16(fp)
   14d38:	00c00044 	movi	r3,1
   14d3c:	10c00405 	stb	r3,16(r2)
   14d40:	00000206 	br	14d4c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   14d44:	e0bffc17 	ldw	r2,-16(fp)
   14d48:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   14d4c:	e0bffc17 	ldw	r2,-16(fp)
   14d50:	d0e00d04 	addi	r3,gp,-32716
   14d54:	e0fffa15 	stw	r3,-24(fp)
   14d58:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   14d5c:	e0bffb17 	ldw	r2,-20(fp)
   14d60:	e0fffa17 	ldw	r3,-24(fp)
   14d64:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   14d68:	e0bffa17 	ldw	r2,-24(fp)
   14d6c:	10c00017 	ldw	r3,0(r2)
   14d70:	e0bffb17 	ldw	r2,-20(fp)
   14d74:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   14d78:	e0bffa17 	ldw	r2,-24(fp)
   14d7c:	10800017 	ldw	r2,0(r2)
   14d80:	e0fffb17 	ldw	r3,-20(fp)
   14d84:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   14d88:	e0bffa17 	ldw	r2,-24(fp)
   14d8c:	e0fffb17 	ldw	r3,-20(fp)
   14d90:	10c00015 	stw	r3,0(r2)
   14d94:	e0bff817 	ldw	r2,-32(fp)
   14d98:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14d9c:	e0bff717 	ldw	r2,-36(fp)
   14da0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   14da4:	0005883a 	mov	r2,zero
   14da8:	00000306 	br	14db8 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   14dac:	00bffa84 	movi	r2,-22
   14db0:	00000106 	br	14db8 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   14db4:	00bfde84 	movi	r2,-134
  }
}
   14db8:	e037883a 	mov	sp,fp
   14dbc:	df000017 	ldw	fp,0(sp)
   14dc0:	dec00104 	addi	sp,sp,4
   14dc4:	f800283a 	ret

00014dc8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   14dc8:	deffff04 	addi	sp,sp,-4
   14dcc:	df000015 	stw	fp,0(sp)
   14dd0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   14dd4:	0001883a 	nop
   14dd8:	e037883a 	mov	sp,fp
   14ddc:	df000017 	ldw	fp,0(sp)
   14de0:	dec00104 	addi	sp,sp,4
   14de4:	f800283a 	ret

00014de8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14de8:	defffe04 	addi	sp,sp,-8
   14dec:	dfc00115 	stw	ra,4(sp)
   14df0:	df000015 	stw	fp,0(sp)
   14df4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14df8:	d0a00a17 	ldw	r2,-32728(gp)
   14dfc:	10000326 	beq	r2,zero,14e0c <alt_get_errno+0x24>
   14e00:	d0a00a17 	ldw	r2,-32728(gp)
   14e04:	103ee83a 	callr	r2
   14e08:	00000106 	br	14e10 <alt_get_errno+0x28>
   14e0c:	d0a6be04 	addi	r2,gp,-25864
}
   14e10:	e037883a 	mov	sp,fp
   14e14:	dfc00117 	ldw	ra,4(sp)
   14e18:	df000017 	ldw	fp,0(sp)
   14e1c:	dec00204 	addi	sp,sp,8
   14e20:	f800283a 	ret

00014e24 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   14e24:	defffa04 	addi	sp,sp,-24
   14e28:	dfc00515 	stw	ra,20(sp)
   14e2c:	df000415 	stw	fp,16(sp)
   14e30:	df000404 	addi	fp,sp,16
   14e34:	e13ffe15 	stw	r4,-8(fp)
   14e38:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   14e3c:	e0bffe17 	ldw	r2,-8(fp)
   14e40:	10000326 	beq	r2,zero,14e50 <alt_dev_llist_insert+0x2c>
   14e44:	e0bffe17 	ldw	r2,-8(fp)
   14e48:	10800217 	ldw	r2,8(r2)
   14e4c:	1000061e 	bne	r2,zero,14e68 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   14e50:	0014de80 	call	14de8 <alt_get_errno>
   14e54:	1007883a 	mov	r3,r2
   14e58:	00800584 	movi	r2,22
   14e5c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   14e60:	00bffa84 	movi	r2,-22
   14e64:	00001306 	br	14eb4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   14e68:	e0bffe17 	ldw	r2,-8(fp)
   14e6c:	e0ffff17 	ldw	r3,-4(fp)
   14e70:	e0fffc15 	stw	r3,-16(fp)
   14e74:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   14e78:	e0bffd17 	ldw	r2,-12(fp)
   14e7c:	e0fffc17 	ldw	r3,-16(fp)
   14e80:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   14e84:	e0bffc17 	ldw	r2,-16(fp)
   14e88:	10c00017 	ldw	r3,0(r2)
   14e8c:	e0bffd17 	ldw	r2,-12(fp)
   14e90:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   14e94:	e0bffc17 	ldw	r2,-16(fp)
   14e98:	10800017 	ldw	r2,0(r2)
   14e9c:	e0fffd17 	ldw	r3,-12(fp)
   14ea0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   14ea4:	e0bffc17 	ldw	r2,-16(fp)
   14ea8:	e0fffd17 	ldw	r3,-12(fp)
   14eac:	10c00015 	stw	r3,0(r2)

  return 0;  
   14eb0:	0005883a 	mov	r2,zero
}
   14eb4:	e037883a 	mov	sp,fp
   14eb8:	dfc00117 	ldw	ra,4(sp)
   14ebc:	df000017 	ldw	fp,0(sp)
   14ec0:	dec00204 	addi	sp,sp,8
   14ec4:	f800283a 	ret

00014ec8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   14ec8:	defffd04 	addi	sp,sp,-12
   14ecc:	dfc00215 	stw	ra,8(sp)
   14ed0:	df000115 	stw	fp,4(sp)
   14ed4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   14ed8:	00800074 	movhi	r2,1
   14edc:	1097cc04 	addi	r2,r2,24368
   14ee0:	e0bfff15 	stw	r2,-4(fp)
   14ee4:	00000606 	br	14f00 <_do_ctors+0x38>
        (*ctor) (); 
   14ee8:	e0bfff17 	ldw	r2,-4(fp)
   14eec:	10800017 	ldw	r2,0(r2)
   14ef0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   14ef4:	e0bfff17 	ldw	r2,-4(fp)
   14ef8:	10bfff04 	addi	r2,r2,-4
   14efc:	e0bfff15 	stw	r2,-4(fp)
   14f00:	e0ffff17 	ldw	r3,-4(fp)
   14f04:	00800074 	movhi	r2,1
   14f08:	1097cd04 	addi	r2,r2,24372
   14f0c:	18bff62e 	bgeu	r3,r2,14ee8 <__alt_data_end+0xffff4ee8>
        (*ctor) (); 
}
   14f10:	0001883a 	nop
   14f14:	e037883a 	mov	sp,fp
   14f18:	dfc00117 	ldw	ra,4(sp)
   14f1c:	df000017 	ldw	fp,0(sp)
   14f20:	dec00204 	addi	sp,sp,8
   14f24:	f800283a 	ret

00014f28 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   14f28:	defffd04 	addi	sp,sp,-12
   14f2c:	dfc00215 	stw	ra,8(sp)
   14f30:	df000115 	stw	fp,4(sp)
   14f34:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   14f38:	00800074 	movhi	r2,1
   14f3c:	1097cc04 	addi	r2,r2,24368
   14f40:	e0bfff15 	stw	r2,-4(fp)
   14f44:	00000606 	br	14f60 <_do_dtors+0x38>
        (*dtor) (); 
   14f48:	e0bfff17 	ldw	r2,-4(fp)
   14f4c:	10800017 	ldw	r2,0(r2)
   14f50:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   14f54:	e0bfff17 	ldw	r2,-4(fp)
   14f58:	10bfff04 	addi	r2,r2,-4
   14f5c:	e0bfff15 	stw	r2,-4(fp)
   14f60:	e0ffff17 	ldw	r3,-4(fp)
   14f64:	00800074 	movhi	r2,1
   14f68:	1097cd04 	addi	r2,r2,24372
   14f6c:	18bff62e 	bgeu	r3,r2,14f48 <__alt_data_end+0xffff4f48>
        (*dtor) (); 
}
   14f70:	0001883a 	nop
   14f74:	e037883a 	mov	sp,fp
   14f78:	dfc00117 	ldw	ra,4(sp)
   14f7c:	df000017 	ldw	fp,0(sp)
   14f80:	dec00204 	addi	sp,sp,8
   14f84:	f800283a 	ret

00014f88 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   14f88:	deffff04 	addi	sp,sp,-4
   14f8c:	df000015 	stw	fp,0(sp)
   14f90:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   14f94:	0001883a 	nop
   14f98:	e037883a 	mov	sp,fp
   14f9c:	df000017 	ldw	fp,0(sp)
   14fa0:	dec00104 	addi	sp,sp,4
   14fa4:	f800283a 	ret

00014fa8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   14fa8:	defff904 	addi	sp,sp,-28
   14fac:	dfc00615 	stw	ra,24(sp)
   14fb0:	df000515 	stw	fp,20(sp)
   14fb4:	df000504 	addi	fp,sp,20
   14fb8:	e13ffc15 	stw	r4,-16(fp)
   14fbc:	e17ffd15 	stw	r5,-12(fp)
   14fc0:	e1bffe15 	stw	r6,-8(fp)
   14fc4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   14fc8:	e0800217 	ldw	r2,8(fp)
   14fcc:	d8800015 	stw	r2,0(sp)
   14fd0:	e1ffff17 	ldw	r7,-4(fp)
   14fd4:	e1bffe17 	ldw	r6,-8(fp)
   14fd8:	e17ffd17 	ldw	r5,-12(fp)
   14fdc:	e13ffc17 	ldw	r4,-16(fp)
   14fe0:	00151580 	call	15158 <alt_iic_isr_register>
}  
   14fe4:	e037883a 	mov	sp,fp
   14fe8:	dfc00117 	ldw	ra,4(sp)
   14fec:	df000017 	ldw	fp,0(sp)
   14ff0:	dec00204 	addi	sp,sp,8
   14ff4:	f800283a 	ret

00014ff8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   14ff8:	defff904 	addi	sp,sp,-28
   14ffc:	df000615 	stw	fp,24(sp)
   15000:	df000604 	addi	fp,sp,24
   15004:	e13ffe15 	stw	r4,-8(fp)
   15008:	e17fff15 	stw	r5,-4(fp)
   1500c:	e0bfff17 	ldw	r2,-4(fp)
   15010:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15014:	0005303a 	rdctl	r2,status
   15018:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1501c:	e0fffb17 	ldw	r3,-20(fp)
   15020:	00bfff84 	movi	r2,-2
   15024:	1884703a 	and	r2,r3,r2
   15028:	1001703a 	wrctl	status,r2
  
  return context;
   1502c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   15030:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   15034:	00c00044 	movi	r3,1
   15038:	e0bffa17 	ldw	r2,-24(fp)
   1503c:	1884983a 	sll	r2,r3,r2
   15040:	1007883a 	mov	r3,r2
   15044:	d0a6c217 	ldw	r2,-25848(gp)
   15048:	1884b03a 	or	r2,r3,r2
   1504c:	d0a6c215 	stw	r2,-25848(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   15050:	d0a6c217 	ldw	r2,-25848(gp)
   15054:	100170fa 	wrctl	ienable,r2
   15058:	e0bffc17 	ldw	r2,-16(fp)
   1505c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15060:	e0bffd17 	ldw	r2,-12(fp)
   15064:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   15068:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   1506c:	0001883a 	nop
}
   15070:	e037883a 	mov	sp,fp
   15074:	df000017 	ldw	fp,0(sp)
   15078:	dec00104 	addi	sp,sp,4
   1507c:	f800283a 	ret

00015080 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   15080:	defff904 	addi	sp,sp,-28
   15084:	df000615 	stw	fp,24(sp)
   15088:	df000604 	addi	fp,sp,24
   1508c:	e13ffe15 	stw	r4,-8(fp)
   15090:	e17fff15 	stw	r5,-4(fp)
   15094:	e0bfff17 	ldw	r2,-4(fp)
   15098:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1509c:	0005303a 	rdctl	r2,status
   150a0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   150a4:	e0fffb17 	ldw	r3,-20(fp)
   150a8:	00bfff84 	movi	r2,-2
   150ac:	1884703a 	and	r2,r3,r2
   150b0:	1001703a 	wrctl	status,r2
  
  return context;
   150b4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   150b8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   150bc:	00c00044 	movi	r3,1
   150c0:	e0bffa17 	ldw	r2,-24(fp)
   150c4:	1884983a 	sll	r2,r3,r2
   150c8:	0084303a 	nor	r2,zero,r2
   150cc:	1007883a 	mov	r3,r2
   150d0:	d0a6c217 	ldw	r2,-25848(gp)
   150d4:	1884703a 	and	r2,r3,r2
   150d8:	d0a6c215 	stw	r2,-25848(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   150dc:	d0a6c217 	ldw	r2,-25848(gp)
   150e0:	100170fa 	wrctl	ienable,r2
   150e4:	e0bffc17 	ldw	r2,-16(fp)
   150e8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   150ec:	e0bffd17 	ldw	r2,-12(fp)
   150f0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   150f4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   150f8:	0001883a 	nop
}
   150fc:	e037883a 	mov	sp,fp
   15100:	df000017 	ldw	fp,0(sp)
   15104:	dec00104 	addi	sp,sp,4
   15108:	f800283a 	ret

0001510c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   1510c:	defffc04 	addi	sp,sp,-16
   15110:	df000315 	stw	fp,12(sp)
   15114:	df000304 	addi	fp,sp,12
   15118:	e13ffe15 	stw	r4,-8(fp)
   1511c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   15120:	000530fa 	rdctl	r2,ienable
   15124:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   15128:	00c00044 	movi	r3,1
   1512c:	e0bfff17 	ldw	r2,-4(fp)
   15130:	1884983a 	sll	r2,r3,r2
   15134:	1007883a 	mov	r3,r2
   15138:	e0bffd17 	ldw	r2,-12(fp)
   1513c:	1884703a 	and	r2,r3,r2
   15140:	1004c03a 	cmpne	r2,r2,zero
   15144:	10803fcc 	andi	r2,r2,255
}
   15148:	e037883a 	mov	sp,fp
   1514c:	df000017 	ldw	fp,0(sp)
   15150:	dec00104 	addi	sp,sp,4
   15154:	f800283a 	ret

00015158 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   15158:	defff504 	addi	sp,sp,-44
   1515c:	dfc00a15 	stw	ra,40(sp)
   15160:	df000915 	stw	fp,36(sp)
   15164:	df000904 	addi	fp,sp,36
   15168:	e13ffc15 	stw	r4,-16(fp)
   1516c:	e17ffd15 	stw	r5,-12(fp)
   15170:	e1bffe15 	stw	r6,-8(fp)
   15174:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   15178:	00bffa84 	movi	r2,-22
   1517c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   15180:	e0bffd17 	ldw	r2,-12(fp)
   15184:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   15188:	e0bff817 	ldw	r2,-32(fp)
   1518c:	10800808 	cmpgei	r2,r2,32
   15190:	1000271e 	bne	r2,zero,15230 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15194:	0005303a 	rdctl	r2,status
   15198:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1519c:	e0fffb17 	ldw	r3,-20(fp)
   151a0:	00bfff84 	movi	r2,-2
   151a4:	1884703a 	and	r2,r3,r2
   151a8:	1001703a 	wrctl	status,r2
  
  return context;
   151ac:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   151b0:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   151b4:	008000b4 	movhi	r2,2
   151b8:	10a58104 	addi	r2,r2,-27132
   151bc:	e0fff817 	ldw	r3,-32(fp)
   151c0:	180690fa 	slli	r3,r3,3
   151c4:	10c5883a 	add	r2,r2,r3
   151c8:	e0fffe17 	ldw	r3,-8(fp)
   151cc:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   151d0:	008000b4 	movhi	r2,2
   151d4:	10a58104 	addi	r2,r2,-27132
   151d8:	e0fff817 	ldw	r3,-32(fp)
   151dc:	180690fa 	slli	r3,r3,3
   151e0:	10c5883a 	add	r2,r2,r3
   151e4:	10800104 	addi	r2,r2,4
   151e8:	e0ffff17 	ldw	r3,-4(fp)
   151ec:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   151f0:	e0bffe17 	ldw	r2,-8(fp)
   151f4:	10000526 	beq	r2,zero,1520c <alt_iic_isr_register+0xb4>
   151f8:	e0bff817 	ldw	r2,-32(fp)
   151fc:	100b883a 	mov	r5,r2
   15200:	e13ffc17 	ldw	r4,-16(fp)
   15204:	0014ff80 	call	14ff8 <alt_ic_irq_enable>
   15208:	00000406 	br	1521c <alt_iic_isr_register+0xc4>
   1520c:	e0bff817 	ldw	r2,-32(fp)
   15210:	100b883a 	mov	r5,r2
   15214:	e13ffc17 	ldw	r4,-16(fp)
   15218:	00150800 	call	15080 <alt_ic_irq_disable>
   1521c:	e0bff715 	stw	r2,-36(fp)
   15220:	e0bffa17 	ldw	r2,-24(fp)
   15224:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15228:	e0bff917 	ldw	r2,-28(fp)
   1522c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   15230:	e0bff717 	ldw	r2,-36(fp)
}
   15234:	e037883a 	mov	sp,fp
   15238:	dfc00117 	ldw	ra,4(sp)
   1523c:	df000017 	ldw	fp,0(sp)
   15240:	dec00204 	addi	sp,sp,8
   15244:	f800283a 	ret

00015248 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   15248:	defff804 	addi	sp,sp,-32
   1524c:	dfc00715 	stw	ra,28(sp)
   15250:	df000615 	stw	fp,24(sp)
   15254:	dc000515 	stw	r16,20(sp)
   15258:	df000604 	addi	fp,sp,24
   1525c:	e13ffb15 	stw	r4,-20(fp)
   15260:	e17ffc15 	stw	r5,-16(fp)
   15264:	e1bffd15 	stw	r6,-12(fp)
   15268:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   1526c:	e1bffe17 	ldw	r6,-8(fp)
   15270:	e17ffd17 	ldw	r5,-12(fp)
   15274:	e13ffc17 	ldw	r4,-16(fp)
   15278:	00154d00 	call	154d0 <open>
   1527c:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   15280:	e0bffa17 	ldw	r2,-24(fp)
   15284:	10002216 	blt	r2,zero,15310 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   15288:	04000074 	movhi	r16,1
   1528c:	841a0504 	addi	r16,r16,26644
   15290:	e0bffa17 	ldw	r2,-24(fp)
   15294:	01400304 	movi	r5,12
   15298:	1009883a 	mov	r4,r2
   1529c:	00137880 	call	13788 <__mulsi3>
   152a0:	8085883a 	add	r2,r16,r2
   152a4:	10c00017 	ldw	r3,0(r2)
   152a8:	e0bffb17 	ldw	r2,-20(fp)
   152ac:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   152b0:	04000074 	movhi	r16,1
   152b4:	841a0504 	addi	r16,r16,26644
   152b8:	e0bffa17 	ldw	r2,-24(fp)
   152bc:	01400304 	movi	r5,12
   152c0:	1009883a 	mov	r4,r2
   152c4:	00137880 	call	13788 <__mulsi3>
   152c8:	8085883a 	add	r2,r16,r2
   152cc:	10800104 	addi	r2,r2,4
   152d0:	10c00017 	ldw	r3,0(r2)
   152d4:	e0bffb17 	ldw	r2,-20(fp)
   152d8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   152dc:	04000074 	movhi	r16,1
   152e0:	841a0504 	addi	r16,r16,26644
   152e4:	e0bffa17 	ldw	r2,-24(fp)
   152e8:	01400304 	movi	r5,12
   152ec:	1009883a 	mov	r4,r2
   152f0:	00137880 	call	13788 <__mulsi3>
   152f4:	8085883a 	add	r2,r16,r2
   152f8:	10800204 	addi	r2,r2,8
   152fc:	10c00017 	ldw	r3,0(r2)
   15300:	e0bffb17 	ldw	r2,-20(fp)
   15304:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   15308:	e13ffa17 	ldw	r4,-24(fp)
   1530c:	0013f100 	call	13f10 <alt_release_fd>
  }
} 
   15310:	0001883a 	nop
   15314:	e6ffff04 	addi	sp,fp,-4
   15318:	dfc00217 	ldw	ra,8(sp)
   1531c:	df000117 	ldw	fp,4(sp)
   15320:	dc000017 	ldw	r16,0(sp)
   15324:	dec00304 	addi	sp,sp,12
   15328:	f800283a 	ret

0001532c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   1532c:	defffb04 	addi	sp,sp,-20
   15330:	dfc00415 	stw	ra,16(sp)
   15334:	df000315 	stw	fp,12(sp)
   15338:	df000304 	addi	fp,sp,12
   1533c:	e13ffd15 	stw	r4,-12(fp)
   15340:	e17ffe15 	stw	r5,-8(fp)
   15344:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   15348:	01c07fc4 	movi	r7,511
   1534c:	01800044 	movi	r6,1
   15350:	e17ffd17 	ldw	r5,-12(fp)
   15354:	01000074 	movhi	r4,1
   15358:	211a0804 	addi	r4,r4,26656
   1535c:	00152480 	call	15248 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   15360:	01c07fc4 	movi	r7,511
   15364:	000d883a 	mov	r6,zero
   15368:	e17ffe17 	ldw	r5,-8(fp)
   1536c:	01000074 	movhi	r4,1
   15370:	211a0504 	addi	r4,r4,26644
   15374:	00152480 	call	15248 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   15378:	01c07fc4 	movi	r7,511
   1537c:	01800044 	movi	r6,1
   15380:	e17fff17 	ldw	r5,-4(fp)
   15384:	01000074 	movhi	r4,1
   15388:	211a0b04 	addi	r4,r4,26668
   1538c:	00152480 	call	15248 <alt_open_fd>
}  
   15390:	0001883a 	nop
   15394:	e037883a 	mov	sp,fp
   15398:	dfc00117 	ldw	ra,4(sp)
   1539c:	df000017 	ldw	fp,0(sp)
   153a0:	dec00204 	addi	sp,sp,8
   153a4:	f800283a 	ret

000153a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   153a8:	defffe04 	addi	sp,sp,-8
   153ac:	dfc00115 	stw	ra,4(sp)
   153b0:	df000015 	stw	fp,0(sp)
   153b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   153b8:	d0a00a17 	ldw	r2,-32728(gp)
   153bc:	10000326 	beq	r2,zero,153cc <alt_get_errno+0x24>
   153c0:	d0a00a17 	ldw	r2,-32728(gp)
   153c4:	103ee83a 	callr	r2
   153c8:	00000106 	br	153d0 <alt_get_errno+0x28>
   153cc:	d0a6be04 	addi	r2,gp,-25864
}
   153d0:	e037883a 	mov	sp,fp
   153d4:	dfc00117 	ldw	ra,4(sp)
   153d8:	df000017 	ldw	fp,0(sp)
   153dc:	dec00204 	addi	sp,sp,8
   153e0:	f800283a 	ret

000153e4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   153e4:	defffb04 	addi	sp,sp,-20
   153e8:	dfc00415 	stw	ra,16(sp)
   153ec:	df000315 	stw	fp,12(sp)
   153f0:	dc000215 	stw	r16,8(sp)
   153f4:	df000304 	addi	fp,sp,12
   153f8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   153fc:	e0bffe17 	ldw	r2,-8(fp)
   15400:	10800217 	ldw	r2,8(r2)
   15404:	10d00034 	orhi	r3,r2,16384
   15408:	e0bffe17 	ldw	r2,-8(fp)
   1540c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   15410:	e03ffd15 	stw	zero,-12(fp)
   15414:	00002306 	br	154a4 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   15418:	04000074 	movhi	r16,1
   1541c:	841a0504 	addi	r16,r16,26644
   15420:	e0bffd17 	ldw	r2,-12(fp)
   15424:	01400304 	movi	r5,12
   15428:	1009883a 	mov	r4,r2
   1542c:	00137880 	call	13788 <__mulsi3>
   15430:	8085883a 	add	r2,r16,r2
   15434:	10c00017 	ldw	r3,0(r2)
   15438:	e0bffe17 	ldw	r2,-8(fp)
   1543c:	10800017 	ldw	r2,0(r2)
   15440:	1880151e 	bne	r3,r2,15498 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   15444:	04000074 	movhi	r16,1
   15448:	841a0504 	addi	r16,r16,26644
   1544c:	e0bffd17 	ldw	r2,-12(fp)
   15450:	01400304 	movi	r5,12
   15454:	1009883a 	mov	r4,r2
   15458:	00137880 	call	13788 <__mulsi3>
   1545c:	8085883a 	add	r2,r16,r2
   15460:	10800204 	addi	r2,r2,8
   15464:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   15468:	10000b0e 	bge	r2,zero,15498 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   1546c:	01400304 	movi	r5,12
   15470:	e13ffd17 	ldw	r4,-12(fp)
   15474:	00137880 	call	13788 <__mulsi3>
   15478:	1007883a 	mov	r3,r2
   1547c:	00800074 	movhi	r2,1
   15480:	109a0504 	addi	r2,r2,26644
   15484:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   15488:	e0bffe17 	ldw	r2,-8(fp)
   1548c:	18800226 	beq	r3,r2,15498 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   15490:	00bffcc4 	movi	r2,-13
   15494:	00000806 	br	154b8 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   15498:	e0bffd17 	ldw	r2,-12(fp)
   1549c:	10800044 	addi	r2,r2,1
   154a0:	e0bffd15 	stw	r2,-12(fp)
   154a4:	d0a00917 	ldw	r2,-32732(gp)
   154a8:	1007883a 	mov	r3,r2
   154ac:	e0bffd17 	ldw	r2,-12(fp)
   154b0:	18bfd92e 	bgeu	r3,r2,15418 <__alt_data_end+0xffff5418>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   154b4:	0005883a 	mov	r2,zero
}
   154b8:	e6ffff04 	addi	sp,fp,-4
   154bc:	dfc00217 	ldw	ra,8(sp)
   154c0:	df000117 	ldw	fp,4(sp)
   154c4:	dc000017 	ldw	r16,0(sp)
   154c8:	dec00304 	addi	sp,sp,12
   154cc:	f800283a 	ret

000154d0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   154d0:	defff604 	addi	sp,sp,-40
   154d4:	dfc00915 	stw	ra,36(sp)
   154d8:	df000815 	stw	fp,32(sp)
   154dc:	df000804 	addi	fp,sp,32
   154e0:	e13ffd15 	stw	r4,-12(fp)
   154e4:	e17ffe15 	stw	r5,-8(fp)
   154e8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   154ec:	00bfffc4 	movi	r2,-1
   154f0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   154f4:	00bffb44 	movi	r2,-19
   154f8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   154fc:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   15500:	d1600704 	addi	r5,gp,-32740
   15504:	e13ffd17 	ldw	r4,-12(fp)
   15508:	00157f40 	call	157f4 <alt_find_dev>
   1550c:	e0bff815 	stw	r2,-32(fp)
   15510:	e0bff817 	ldw	r2,-32(fp)
   15514:	1000051e 	bne	r2,zero,1552c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   15518:	e13ffd17 	ldw	r4,-12(fp)
   1551c:	00158840 	call	15884 <alt_find_file>
   15520:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   15524:	00800044 	movi	r2,1
   15528:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   1552c:	e0bff817 	ldw	r2,-32(fp)
   15530:	10002b26 	beq	r2,zero,155e0 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   15534:	e13ff817 	ldw	r4,-32(fp)
   15538:	001598c0 	call	1598c <alt_get_fd>
   1553c:	e0bff915 	stw	r2,-28(fp)
   15540:	e0bff917 	ldw	r2,-28(fp)
   15544:	1000030e 	bge	r2,zero,15554 <open+0x84>
    {
      status = index;
   15548:	e0bff917 	ldw	r2,-28(fp)
   1554c:	e0bffa15 	stw	r2,-24(fp)
   15550:	00002506 	br	155e8 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   15554:	01400304 	movi	r5,12
   15558:	e13ff917 	ldw	r4,-28(fp)
   1555c:	00137880 	call	13788 <__mulsi3>
   15560:	1007883a 	mov	r3,r2
   15564:	00800074 	movhi	r2,1
   15568:	109a0504 	addi	r2,r2,26644
   1556c:	1885883a 	add	r2,r3,r2
   15570:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   15574:	e0fffe17 	ldw	r3,-8(fp)
   15578:	00900034 	movhi	r2,16384
   1557c:	10bfffc4 	addi	r2,r2,-1
   15580:	1886703a 	and	r3,r3,r2
   15584:	e0bffc17 	ldw	r2,-16(fp)
   15588:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   1558c:	e0bffb17 	ldw	r2,-20(fp)
   15590:	1000051e 	bne	r2,zero,155a8 <open+0xd8>
   15594:	e13ffc17 	ldw	r4,-16(fp)
   15598:	00153e40 	call	153e4 <alt_file_locked>
   1559c:	e0bffa15 	stw	r2,-24(fp)
   155a0:	e0bffa17 	ldw	r2,-24(fp)
   155a4:	10001016 	blt	r2,zero,155e8 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   155a8:	e0bff817 	ldw	r2,-32(fp)
   155ac:	10800317 	ldw	r2,12(r2)
   155b0:	10000826 	beq	r2,zero,155d4 <open+0x104>
   155b4:	e0bff817 	ldw	r2,-32(fp)
   155b8:	10800317 	ldw	r2,12(r2)
   155bc:	e1ffff17 	ldw	r7,-4(fp)
   155c0:	e1bffe17 	ldw	r6,-8(fp)
   155c4:	e17ffd17 	ldw	r5,-12(fp)
   155c8:	e13ffc17 	ldw	r4,-16(fp)
   155cc:	103ee83a 	callr	r2
   155d0:	00000106 	br	155d8 <open+0x108>
   155d4:	0005883a 	mov	r2,zero
   155d8:	e0bffa15 	stw	r2,-24(fp)
   155dc:	00000206 	br	155e8 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   155e0:	00bffb44 	movi	r2,-19
   155e4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   155e8:	e0bffa17 	ldw	r2,-24(fp)
   155ec:	1000090e 	bge	r2,zero,15614 <open+0x144>
  {
    alt_release_fd (index);  
   155f0:	e13ff917 	ldw	r4,-28(fp)
   155f4:	0013f100 	call	13f10 <alt_release_fd>
    ALT_ERRNO = -status;
   155f8:	00153a80 	call	153a8 <alt_get_errno>
   155fc:	1007883a 	mov	r3,r2
   15600:	e0bffa17 	ldw	r2,-24(fp)
   15604:	0085c83a 	sub	r2,zero,r2
   15608:	18800015 	stw	r2,0(r3)
    return -1;
   1560c:	00bfffc4 	movi	r2,-1
   15610:	00000106 	br	15618 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   15614:	e0bff917 	ldw	r2,-28(fp)
}
   15618:	e037883a 	mov	sp,fp
   1561c:	dfc00117 	ldw	ra,4(sp)
   15620:	df000017 	ldw	fp,0(sp)
   15624:	dec00204 	addi	sp,sp,8
   15628:	f800283a 	ret

0001562c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   1562c:	defffa04 	addi	sp,sp,-24
   15630:	df000515 	stw	fp,20(sp)
   15634:	df000504 	addi	fp,sp,20
   15638:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1563c:	0005303a 	rdctl	r2,status
   15640:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15644:	e0fffc17 	ldw	r3,-16(fp)
   15648:	00bfff84 	movi	r2,-2
   1564c:	1884703a 	and	r2,r3,r2
   15650:	1001703a 	wrctl	status,r2
  
  return context;
   15654:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   15658:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   1565c:	e0bfff17 	ldw	r2,-4(fp)
   15660:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   15664:	e0bffd17 	ldw	r2,-12(fp)
   15668:	10800017 	ldw	r2,0(r2)
   1566c:	e0fffd17 	ldw	r3,-12(fp)
   15670:	18c00117 	ldw	r3,4(r3)
   15674:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   15678:	e0bffd17 	ldw	r2,-12(fp)
   1567c:	10800117 	ldw	r2,4(r2)
   15680:	e0fffd17 	ldw	r3,-12(fp)
   15684:	18c00017 	ldw	r3,0(r3)
   15688:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   1568c:	e0bffd17 	ldw	r2,-12(fp)
   15690:	e0fffd17 	ldw	r3,-12(fp)
   15694:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   15698:	e0bffd17 	ldw	r2,-12(fp)
   1569c:	e0fffd17 	ldw	r3,-12(fp)
   156a0:	10c00015 	stw	r3,0(r2)
   156a4:	e0bffb17 	ldw	r2,-20(fp)
   156a8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   156ac:	e0bffe17 	ldw	r2,-8(fp)
   156b0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   156b4:	0001883a 	nop
   156b8:	e037883a 	mov	sp,fp
   156bc:	df000017 	ldw	fp,0(sp)
   156c0:	dec00104 	addi	sp,sp,4
   156c4:	f800283a 	ret

000156c8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   156c8:	defffb04 	addi	sp,sp,-20
   156cc:	dfc00415 	stw	ra,16(sp)
   156d0:	df000315 	stw	fp,12(sp)
   156d4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   156d8:	d0a00d17 	ldw	r2,-32716(gp)
   156dc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   156e0:	d0a6c417 	ldw	r2,-25840(gp)
   156e4:	10800044 	addi	r2,r2,1
   156e8:	d0a6c415 	stw	r2,-25840(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   156ec:	00002e06 	br	157a8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   156f0:	e0bffd17 	ldw	r2,-12(fp)
   156f4:	10800017 	ldw	r2,0(r2)
   156f8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   156fc:	e0bffd17 	ldw	r2,-12(fp)
   15700:	10800403 	ldbu	r2,16(r2)
   15704:	10803fcc 	andi	r2,r2,255
   15708:	10000426 	beq	r2,zero,1571c <alt_tick+0x54>
   1570c:	d0a6c417 	ldw	r2,-25840(gp)
   15710:	1000021e 	bne	r2,zero,1571c <alt_tick+0x54>
    {
      alarm->rollover = 0;
   15714:	e0bffd17 	ldw	r2,-12(fp)
   15718:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   1571c:	e0bffd17 	ldw	r2,-12(fp)
   15720:	10800217 	ldw	r2,8(r2)
   15724:	d0e6c417 	ldw	r3,-25840(gp)
   15728:	18801d36 	bltu	r3,r2,157a0 <alt_tick+0xd8>
   1572c:	e0bffd17 	ldw	r2,-12(fp)
   15730:	10800403 	ldbu	r2,16(r2)
   15734:	10803fcc 	andi	r2,r2,255
   15738:	1000191e 	bne	r2,zero,157a0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   1573c:	e0bffd17 	ldw	r2,-12(fp)
   15740:	10800317 	ldw	r2,12(r2)
   15744:	e0fffd17 	ldw	r3,-12(fp)
   15748:	18c00517 	ldw	r3,20(r3)
   1574c:	1809883a 	mov	r4,r3
   15750:	103ee83a 	callr	r2
   15754:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   15758:	e0bfff17 	ldw	r2,-4(fp)
   1575c:	1000031e 	bne	r2,zero,1576c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   15760:	e13ffd17 	ldw	r4,-12(fp)
   15764:	001562c0 	call	1562c <alt_alarm_stop>
   15768:	00000d06 	br	157a0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   1576c:	e0bffd17 	ldw	r2,-12(fp)
   15770:	10c00217 	ldw	r3,8(r2)
   15774:	e0bfff17 	ldw	r2,-4(fp)
   15778:	1887883a 	add	r3,r3,r2
   1577c:	e0bffd17 	ldw	r2,-12(fp)
   15780:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   15784:	e0bffd17 	ldw	r2,-12(fp)
   15788:	10c00217 	ldw	r3,8(r2)
   1578c:	d0a6c417 	ldw	r2,-25840(gp)
   15790:	1880032e 	bgeu	r3,r2,157a0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   15794:	e0bffd17 	ldw	r2,-12(fp)
   15798:	00c00044 	movi	r3,1
   1579c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   157a0:	e0bffe17 	ldw	r2,-8(fp)
   157a4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   157a8:	e0fffd17 	ldw	r3,-12(fp)
   157ac:	d0a00d04 	addi	r2,gp,-32716
   157b0:	18bfcf1e 	bne	r3,r2,156f0 <__alt_data_end+0xffff56f0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   157b4:	0001883a 	nop
}
   157b8:	0001883a 	nop
   157bc:	e037883a 	mov	sp,fp
   157c0:	dfc00117 	ldw	ra,4(sp)
   157c4:	df000017 	ldw	fp,0(sp)
   157c8:	dec00204 	addi	sp,sp,8
   157cc:	f800283a 	ret

000157d0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   157d0:	deffff04 	addi	sp,sp,-4
   157d4:	df000015 	stw	fp,0(sp)
   157d8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   157dc:	000170fa 	wrctl	ienable,zero
}
   157e0:	0001883a 	nop
   157e4:	e037883a 	mov	sp,fp
   157e8:	df000017 	ldw	fp,0(sp)
   157ec:	dec00104 	addi	sp,sp,4
   157f0:	f800283a 	ret

000157f4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   157f4:	defffa04 	addi	sp,sp,-24
   157f8:	dfc00515 	stw	ra,20(sp)
   157fc:	df000415 	stw	fp,16(sp)
   15800:	df000404 	addi	fp,sp,16
   15804:	e13ffe15 	stw	r4,-8(fp)
   15808:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   1580c:	e0bfff17 	ldw	r2,-4(fp)
   15810:	10800017 	ldw	r2,0(r2)
   15814:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   15818:	e13ffe17 	ldw	r4,-8(fp)
   1581c:	0010c2c0 	call	10c2c <strlen>
   15820:	10800044 	addi	r2,r2,1
   15824:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   15828:	00000d06 	br	15860 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   1582c:	e0bffc17 	ldw	r2,-16(fp)
   15830:	10800217 	ldw	r2,8(r2)
   15834:	e0fffd17 	ldw	r3,-12(fp)
   15838:	180d883a 	mov	r6,r3
   1583c:	e17ffe17 	ldw	r5,-8(fp)
   15840:	1009883a 	mov	r4,r2
   15844:	0015bec0 	call	15bec <memcmp>
   15848:	1000021e 	bne	r2,zero,15854 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   1584c:	e0bffc17 	ldw	r2,-16(fp)
   15850:	00000706 	br	15870 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   15854:	e0bffc17 	ldw	r2,-16(fp)
   15858:	10800017 	ldw	r2,0(r2)
   1585c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   15860:	e0fffc17 	ldw	r3,-16(fp)
   15864:	e0bfff17 	ldw	r2,-4(fp)
   15868:	18bff01e 	bne	r3,r2,1582c <__alt_data_end+0xffff582c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   1586c:	0005883a 	mov	r2,zero
}
   15870:	e037883a 	mov	sp,fp
   15874:	dfc00117 	ldw	ra,4(sp)
   15878:	df000017 	ldw	fp,0(sp)
   1587c:	dec00204 	addi	sp,sp,8
   15880:	f800283a 	ret

00015884 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   15884:	defffb04 	addi	sp,sp,-20
   15888:	dfc00415 	stw	ra,16(sp)
   1588c:	df000315 	stw	fp,12(sp)
   15890:	df000304 	addi	fp,sp,12
   15894:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   15898:	d0a00517 	ldw	r2,-32748(gp)
   1589c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   158a0:	00003106 	br	15968 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   158a4:	e0bffd17 	ldw	r2,-12(fp)
   158a8:	10800217 	ldw	r2,8(r2)
   158ac:	1009883a 	mov	r4,r2
   158b0:	0010c2c0 	call	10c2c <strlen>
   158b4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   158b8:	e0bffd17 	ldw	r2,-12(fp)
   158bc:	10c00217 	ldw	r3,8(r2)
   158c0:	e0bffe17 	ldw	r2,-8(fp)
   158c4:	10bfffc4 	addi	r2,r2,-1
   158c8:	1885883a 	add	r2,r3,r2
   158cc:	10800003 	ldbu	r2,0(r2)
   158d0:	10803fcc 	andi	r2,r2,255
   158d4:	1080201c 	xori	r2,r2,128
   158d8:	10bfe004 	addi	r2,r2,-128
   158dc:	10800bd8 	cmpnei	r2,r2,47
   158e0:	1000031e 	bne	r2,zero,158f0 <alt_find_file+0x6c>
    {
      len -= 1;
   158e4:	e0bffe17 	ldw	r2,-8(fp)
   158e8:	10bfffc4 	addi	r2,r2,-1
   158ec:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   158f0:	e0bffe17 	ldw	r2,-8(fp)
   158f4:	e0ffff17 	ldw	r3,-4(fp)
   158f8:	1885883a 	add	r2,r3,r2
   158fc:	10800003 	ldbu	r2,0(r2)
   15900:	10803fcc 	andi	r2,r2,255
   15904:	1080201c 	xori	r2,r2,128
   15908:	10bfe004 	addi	r2,r2,-128
   1590c:	10800be0 	cmpeqi	r2,r2,47
   15910:	1000081e 	bne	r2,zero,15934 <alt_find_file+0xb0>
   15914:	e0bffe17 	ldw	r2,-8(fp)
   15918:	e0ffff17 	ldw	r3,-4(fp)
   1591c:	1885883a 	add	r2,r3,r2
   15920:	10800003 	ldbu	r2,0(r2)
   15924:	10803fcc 	andi	r2,r2,255
   15928:	1080201c 	xori	r2,r2,128
   1592c:	10bfe004 	addi	r2,r2,-128
   15930:	10000a1e 	bne	r2,zero,1595c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   15934:	e0bffd17 	ldw	r2,-12(fp)
   15938:	10800217 	ldw	r2,8(r2)
   1593c:	e0fffe17 	ldw	r3,-8(fp)
   15940:	180d883a 	mov	r6,r3
   15944:	e17fff17 	ldw	r5,-4(fp)
   15948:	1009883a 	mov	r4,r2
   1594c:	0015bec0 	call	15bec <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   15950:	1000021e 	bne	r2,zero,1595c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   15954:	e0bffd17 	ldw	r2,-12(fp)
   15958:	00000706 	br	15978 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   1595c:	e0bffd17 	ldw	r2,-12(fp)
   15960:	10800017 	ldw	r2,0(r2)
   15964:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   15968:	e0fffd17 	ldw	r3,-12(fp)
   1596c:	d0a00504 	addi	r2,gp,-32748
   15970:	18bfcc1e 	bne	r3,r2,158a4 <__alt_data_end+0xffff58a4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   15974:	0005883a 	mov	r2,zero
}
   15978:	e037883a 	mov	sp,fp
   1597c:	dfc00117 	ldw	ra,4(sp)
   15980:	df000017 	ldw	fp,0(sp)
   15984:	dec00204 	addi	sp,sp,8
   15988:	f800283a 	ret

0001598c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   1598c:	defffa04 	addi	sp,sp,-24
   15990:	dfc00515 	stw	ra,20(sp)
   15994:	df000415 	stw	fp,16(sp)
   15998:	dc000315 	stw	r16,12(sp)
   1599c:	df000404 	addi	fp,sp,16
   159a0:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   159a4:	00bffa04 	movi	r2,-24
   159a8:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   159ac:	e03ffc15 	stw	zero,-16(fp)
   159b0:	00001d06 	br	15a28 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   159b4:	04000074 	movhi	r16,1
   159b8:	841a0504 	addi	r16,r16,26644
   159bc:	e0bffc17 	ldw	r2,-16(fp)
   159c0:	01400304 	movi	r5,12
   159c4:	1009883a 	mov	r4,r2
   159c8:	00137880 	call	13788 <__mulsi3>
   159cc:	8085883a 	add	r2,r16,r2
   159d0:	10800017 	ldw	r2,0(r2)
   159d4:	1000111e 	bne	r2,zero,15a1c <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   159d8:	04000074 	movhi	r16,1
   159dc:	841a0504 	addi	r16,r16,26644
   159e0:	e0bffc17 	ldw	r2,-16(fp)
   159e4:	01400304 	movi	r5,12
   159e8:	1009883a 	mov	r4,r2
   159ec:	00137880 	call	13788 <__mulsi3>
   159f0:	8085883a 	add	r2,r16,r2
   159f4:	e0fffe17 	ldw	r3,-8(fp)
   159f8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   159fc:	d0e00917 	ldw	r3,-32732(gp)
   15a00:	e0bffc17 	ldw	r2,-16(fp)
   15a04:	1880020e 	bge	r3,r2,15a10 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   15a08:	e0bffc17 	ldw	r2,-16(fp)
   15a0c:	d0a00915 	stw	r2,-32732(gp)
      }
      rc = i;
   15a10:	e0bffc17 	ldw	r2,-16(fp)
   15a14:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   15a18:	00000606 	br	15a34 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   15a1c:	e0bffc17 	ldw	r2,-16(fp)
   15a20:	10800044 	addi	r2,r2,1
   15a24:	e0bffc15 	stw	r2,-16(fp)
   15a28:	e0bffc17 	ldw	r2,-16(fp)
   15a2c:	10800810 	cmplti	r2,r2,32
   15a30:	103fe01e 	bne	r2,zero,159b4 <__alt_data_end+0xffff59b4>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   15a34:	e0bffd17 	ldw	r2,-12(fp)
}
   15a38:	e6ffff04 	addi	sp,fp,-4
   15a3c:	dfc00217 	ldw	ra,8(sp)
   15a40:	df000117 	ldw	fp,4(sp)
   15a44:	dc000017 	ldw	r16,0(sp)
   15a48:	dec00304 	addi	sp,sp,12
   15a4c:	f800283a 	ret

00015a50 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   15a50:	defffe04 	addi	sp,sp,-8
   15a54:	df000115 	stw	fp,4(sp)
   15a58:	df000104 	addi	fp,sp,4
   15a5c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   15a60:	e0bfff17 	ldw	r2,-4(fp)
   15a64:	10bffe84 	addi	r2,r2,-6
   15a68:	10c00428 	cmpgeui	r3,r2,16
   15a6c:	18001a1e 	bne	r3,zero,15ad8 <alt_exception_cause_generated_bad_addr+0x88>
   15a70:	100690ba 	slli	r3,r2,2
   15a74:	00800074 	movhi	r2,1
   15a78:	1096a204 	addi	r2,r2,23176
   15a7c:	1885883a 	add	r2,r3,r2
   15a80:	10800017 	ldw	r2,0(r2)
   15a84:	1000683a 	jmp	r2
   15a88:	00015ac8 	cmpgei	zero,zero,1387
   15a8c:	00015ac8 	cmpgei	zero,zero,1387
   15a90:	00015ad8 	cmpnei	zero,zero,1387
   15a94:	00015ad8 	cmpnei	zero,zero,1387
   15a98:	00015ad8 	cmpnei	zero,zero,1387
   15a9c:	00015ac8 	cmpgei	zero,zero,1387
   15aa0:	00015ad0 	cmplti	zero,zero,1387
   15aa4:	00015ad8 	cmpnei	zero,zero,1387
   15aa8:	00015ac8 	cmpgei	zero,zero,1387
   15aac:	00015ac8 	cmpgei	zero,zero,1387
   15ab0:	00015ad8 	cmpnei	zero,zero,1387
   15ab4:	00015ac8 	cmpgei	zero,zero,1387
   15ab8:	00015ad0 	cmplti	zero,zero,1387
   15abc:	00015ad8 	cmpnei	zero,zero,1387
   15ac0:	00015ad8 	cmpnei	zero,zero,1387
   15ac4:	00015ac8 	cmpgei	zero,zero,1387
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   15ac8:	00800044 	movi	r2,1
   15acc:	00000306 	br	15adc <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   15ad0:	0005883a 	mov	r2,zero
   15ad4:	00000106 	br	15adc <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   15ad8:	0005883a 	mov	r2,zero
  }
}
   15adc:	e037883a 	mov	sp,fp
   15ae0:	df000017 	ldw	fp,0(sp)
   15ae4:	dec00104 	addi	sp,sp,4
   15ae8:	f800283a 	ret

00015aec <atexit>:
   15aec:	200b883a 	mov	r5,r4
   15af0:	000f883a 	mov	r7,zero
   15af4:	000d883a 	mov	r6,zero
   15af8:	0009883a 	mov	r4,zero
   15afc:	0015c681 	jmpi	15c68 <__register_exitproc>

00015b00 <exit>:
   15b00:	defffe04 	addi	sp,sp,-8
   15b04:	000b883a 	mov	r5,zero
   15b08:	dc000015 	stw	r16,0(sp)
   15b0c:	dfc00115 	stw	ra,4(sp)
   15b10:	2021883a 	mov	r16,r4
   15b14:	0015d800 	call	15d80 <__call_exitprocs>
   15b18:	00800074 	movhi	r2,1
   15b1c:	109e7e04 	addi	r2,r2,31224
   15b20:	11000017 	ldw	r4,0(r2)
   15b24:	20800f17 	ldw	r2,60(r4)
   15b28:	10000126 	beq	r2,zero,15b30 <exit+0x30>
   15b2c:	103ee83a 	callr	r2
   15b30:	8009883a 	mov	r4,r16
   15b34:	0015f000 	call	15f00 <_exit>

00015b38 <_fputs_r>:
   15b38:	defff804 	addi	sp,sp,-32
   15b3c:	dc400615 	stw	r17,24(sp)
   15b40:	2023883a 	mov	r17,r4
   15b44:	2809883a 	mov	r4,r5
   15b48:	dc000515 	stw	r16,20(sp)
   15b4c:	dfc00715 	stw	ra,28(sp)
   15b50:	3021883a 	mov	r16,r6
   15b54:	d9400315 	stw	r5,12(sp)
   15b58:	0010c2c0 	call	10c2c <strlen>
   15b5c:	d8800215 	stw	r2,8(sp)
   15b60:	d8800415 	stw	r2,16(sp)
   15b64:	d8800304 	addi	r2,sp,12
   15b68:	d8800015 	stw	r2,0(sp)
   15b6c:	00800044 	movi	r2,1
   15b70:	d8800115 	stw	r2,4(sp)
   15b74:	88000226 	beq	r17,zero,15b80 <_fputs_r+0x48>
   15b78:	88800e17 	ldw	r2,56(r17)
   15b7c:	10001226 	beq	r2,zero,15bc8 <_fputs_r+0x90>
   15b80:	8080030b 	ldhu	r2,12(r16)
   15b84:	10c8000c 	andi	r3,r2,8192
   15b88:	1800061e 	bne	r3,zero,15ba4 <_fputs_r+0x6c>
   15b8c:	81001917 	ldw	r4,100(r16)
   15b90:	00f7ffc4 	movi	r3,-8193
   15b94:	10880014 	ori	r2,r2,8192
   15b98:	20c6703a 	and	r3,r4,r3
   15b9c:	8080030d 	sth	r2,12(r16)
   15ba0:	80c01915 	stw	r3,100(r16)
   15ba4:	d80d883a 	mov	r6,sp
   15ba8:	800b883a 	mov	r5,r16
   15bac:	8809883a 	mov	r4,r17
   15bb0:	00110740 	call	11074 <__sfvwrite_r>
   15bb4:	dfc00717 	ldw	ra,28(sp)
   15bb8:	dc400617 	ldw	r17,24(sp)
   15bbc:	dc000517 	ldw	r16,20(sp)
   15bc0:	dec00804 	addi	sp,sp,32
   15bc4:	f800283a 	ret
   15bc8:	8809883a 	mov	r4,r17
   15bcc:	00110240 	call	11024 <__sinit>
   15bd0:	003feb06 	br	15b80 <__alt_data_end+0xffff5b80>

00015bd4 <fputs>:
   15bd4:	00800074 	movhi	r2,1
   15bd8:	109e7f04 	addi	r2,r2,31228
   15bdc:	280d883a 	mov	r6,r5
   15be0:	200b883a 	mov	r5,r4
   15be4:	11000017 	ldw	r4,0(r2)
   15be8:	0015b381 	jmpi	15b38 <_fputs_r>

00015bec <memcmp>:
   15bec:	01c000c4 	movi	r7,3
   15bf0:	3980192e 	bgeu	r7,r6,15c58 <memcmp+0x6c>
   15bf4:	2144b03a 	or	r2,r4,r5
   15bf8:	11c4703a 	and	r2,r2,r7
   15bfc:	10000f26 	beq	r2,zero,15c3c <memcmp+0x50>
   15c00:	20800003 	ldbu	r2,0(r4)
   15c04:	28c00003 	ldbu	r3,0(r5)
   15c08:	10c0151e 	bne	r2,r3,15c60 <memcmp+0x74>
   15c0c:	31bfff84 	addi	r6,r6,-2
   15c10:	01ffffc4 	movi	r7,-1
   15c14:	00000406 	br	15c28 <memcmp+0x3c>
   15c18:	20800003 	ldbu	r2,0(r4)
   15c1c:	28c00003 	ldbu	r3,0(r5)
   15c20:	31bfffc4 	addi	r6,r6,-1
   15c24:	10c00e1e 	bne	r2,r3,15c60 <memcmp+0x74>
   15c28:	21000044 	addi	r4,r4,1
   15c2c:	29400044 	addi	r5,r5,1
   15c30:	31fff91e 	bne	r6,r7,15c18 <__alt_data_end+0xffff5c18>
   15c34:	0005883a 	mov	r2,zero
   15c38:	f800283a 	ret
   15c3c:	20c00017 	ldw	r3,0(r4)
   15c40:	28800017 	ldw	r2,0(r5)
   15c44:	18bfee1e 	bne	r3,r2,15c00 <__alt_data_end+0xffff5c00>
   15c48:	31bfff04 	addi	r6,r6,-4
   15c4c:	21000104 	addi	r4,r4,4
   15c50:	29400104 	addi	r5,r5,4
   15c54:	39bff936 	bltu	r7,r6,15c3c <__alt_data_end+0xffff5c3c>
   15c58:	303fe91e 	bne	r6,zero,15c00 <__alt_data_end+0xffff5c00>
   15c5c:	003ff506 	br	15c34 <__alt_data_end+0xffff5c34>
   15c60:	10c5c83a 	sub	r2,r2,r3
   15c64:	f800283a 	ret

00015c68 <__register_exitproc>:
   15c68:	defffa04 	addi	sp,sp,-24
   15c6c:	dc000315 	stw	r16,12(sp)
   15c70:	04000074 	movhi	r16,1
   15c74:	841e7e04 	addi	r16,r16,31224
   15c78:	80c00017 	ldw	r3,0(r16)
   15c7c:	dc400415 	stw	r17,16(sp)
   15c80:	dfc00515 	stw	ra,20(sp)
   15c84:	18805217 	ldw	r2,328(r3)
   15c88:	2023883a 	mov	r17,r4
   15c8c:	10003726 	beq	r2,zero,15d6c <__register_exitproc+0x104>
   15c90:	10c00117 	ldw	r3,4(r2)
   15c94:	010007c4 	movi	r4,31
   15c98:	20c00e16 	blt	r4,r3,15cd4 <__register_exitproc+0x6c>
   15c9c:	1a000044 	addi	r8,r3,1
   15ca0:	8800221e 	bne	r17,zero,15d2c <__register_exitproc+0xc4>
   15ca4:	18c00084 	addi	r3,r3,2
   15ca8:	18c7883a 	add	r3,r3,r3
   15cac:	18c7883a 	add	r3,r3,r3
   15cb0:	12000115 	stw	r8,4(r2)
   15cb4:	10c7883a 	add	r3,r2,r3
   15cb8:	19400015 	stw	r5,0(r3)
   15cbc:	0005883a 	mov	r2,zero
   15cc0:	dfc00517 	ldw	ra,20(sp)
   15cc4:	dc400417 	ldw	r17,16(sp)
   15cc8:	dc000317 	ldw	r16,12(sp)
   15ccc:	dec00604 	addi	sp,sp,24
   15cd0:	f800283a 	ret
   15cd4:	00800034 	movhi	r2,0
   15cd8:	10800004 	addi	r2,r2,0
   15cdc:	10002626 	beq	r2,zero,15d78 <__register_exitproc+0x110>
   15ce0:	01006404 	movi	r4,400
   15ce4:	d9400015 	stw	r5,0(sp)
   15ce8:	d9800115 	stw	r6,4(sp)
   15cec:	d9c00215 	stw	r7,8(sp)
   15cf0:	00000000 	call	0 <__alt_mem_onchip_ram-0x10000>
   15cf4:	d9400017 	ldw	r5,0(sp)
   15cf8:	d9800117 	ldw	r6,4(sp)
   15cfc:	d9c00217 	ldw	r7,8(sp)
   15d00:	10001d26 	beq	r2,zero,15d78 <__register_exitproc+0x110>
   15d04:	81000017 	ldw	r4,0(r16)
   15d08:	10000115 	stw	zero,4(r2)
   15d0c:	02000044 	movi	r8,1
   15d10:	22405217 	ldw	r9,328(r4)
   15d14:	0007883a 	mov	r3,zero
   15d18:	12400015 	stw	r9,0(r2)
   15d1c:	20805215 	stw	r2,328(r4)
   15d20:	10006215 	stw	zero,392(r2)
   15d24:	10006315 	stw	zero,396(r2)
   15d28:	883fde26 	beq	r17,zero,15ca4 <__alt_data_end+0xffff5ca4>
   15d2c:	18c9883a 	add	r4,r3,r3
   15d30:	2109883a 	add	r4,r4,r4
   15d34:	1109883a 	add	r4,r2,r4
   15d38:	21802215 	stw	r6,136(r4)
   15d3c:	01800044 	movi	r6,1
   15d40:	12406217 	ldw	r9,392(r2)
   15d44:	30cc983a 	sll	r6,r6,r3
   15d48:	4992b03a 	or	r9,r9,r6
   15d4c:	12406215 	stw	r9,392(r2)
   15d50:	21c04215 	stw	r7,264(r4)
   15d54:	01000084 	movi	r4,2
   15d58:	893fd21e 	bne	r17,r4,15ca4 <__alt_data_end+0xffff5ca4>
   15d5c:	11006317 	ldw	r4,396(r2)
   15d60:	218cb03a 	or	r6,r4,r6
   15d64:	11806315 	stw	r6,396(r2)
   15d68:	003fce06 	br	15ca4 <__alt_data_end+0xffff5ca4>
   15d6c:	18805304 	addi	r2,r3,332
   15d70:	18805215 	stw	r2,328(r3)
   15d74:	003fc606 	br	15c90 <__alt_data_end+0xffff5c90>
   15d78:	00bfffc4 	movi	r2,-1
   15d7c:	003fd006 	br	15cc0 <__alt_data_end+0xffff5cc0>

00015d80 <__call_exitprocs>:
   15d80:	defff504 	addi	sp,sp,-44
   15d84:	df000915 	stw	fp,36(sp)
   15d88:	dd400615 	stw	r21,24(sp)
   15d8c:	dc800315 	stw	r18,12(sp)
   15d90:	dfc00a15 	stw	ra,40(sp)
   15d94:	ddc00815 	stw	r23,32(sp)
   15d98:	dd800715 	stw	r22,28(sp)
   15d9c:	dd000515 	stw	r20,20(sp)
   15da0:	dcc00415 	stw	r19,16(sp)
   15da4:	dc400215 	stw	r17,8(sp)
   15da8:	dc000115 	stw	r16,4(sp)
   15dac:	d9000015 	stw	r4,0(sp)
   15db0:	2839883a 	mov	fp,r5
   15db4:	04800044 	movi	r18,1
   15db8:	057fffc4 	movi	r21,-1
   15dbc:	00800074 	movhi	r2,1
   15dc0:	109e7e04 	addi	r2,r2,31224
   15dc4:	12000017 	ldw	r8,0(r2)
   15dc8:	45005217 	ldw	r20,328(r8)
   15dcc:	44c05204 	addi	r19,r8,328
   15dd0:	a0001c26 	beq	r20,zero,15e44 <__call_exitprocs+0xc4>
   15dd4:	a0800117 	ldw	r2,4(r20)
   15dd8:	15ffffc4 	addi	r23,r2,-1
   15ddc:	b8000d16 	blt	r23,zero,15e14 <__call_exitprocs+0x94>
   15de0:	14000044 	addi	r16,r2,1
   15de4:	8421883a 	add	r16,r16,r16
   15de8:	8421883a 	add	r16,r16,r16
   15dec:	84402004 	addi	r17,r16,128
   15df0:	a463883a 	add	r17,r20,r17
   15df4:	a421883a 	add	r16,r20,r16
   15df8:	e0001e26 	beq	fp,zero,15e74 <__call_exitprocs+0xf4>
   15dfc:	80804017 	ldw	r2,256(r16)
   15e00:	e0801c26 	beq	fp,r2,15e74 <__call_exitprocs+0xf4>
   15e04:	bdffffc4 	addi	r23,r23,-1
   15e08:	843fff04 	addi	r16,r16,-4
   15e0c:	8c7fff04 	addi	r17,r17,-4
   15e10:	bd7ff91e 	bne	r23,r21,15df8 <__alt_data_end+0xffff5df8>
   15e14:	00800034 	movhi	r2,0
   15e18:	10800004 	addi	r2,r2,0
   15e1c:	10000926 	beq	r2,zero,15e44 <__call_exitprocs+0xc4>
   15e20:	a0800117 	ldw	r2,4(r20)
   15e24:	1000301e 	bne	r2,zero,15ee8 <__call_exitprocs+0x168>
   15e28:	a0800017 	ldw	r2,0(r20)
   15e2c:	10003226 	beq	r2,zero,15ef8 <__call_exitprocs+0x178>
   15e30:	a009883a 	mov	r4,r20
   15e34:	98800015 	stw	r2,0(r19)
   15e38:	00000000 	call	0 <__alt_mem_onchip_ram-0x10000>
   15e3c:	9d000017 	ldw	r20,0(r19)
   15e40:	a03fe41e 	bne	r20,zero,15dd4 <__alt_data_end+0xffff5dd4>
   15e44:	dfc00a17 	ldw	ra,40(sp)
   15e48:	df000917 	ldw	fp,36(sp)
   15e4c:	ddc00817 	ldw	r23,32(sp)
   15e50:	dd800717 	ldw	r22,28(sp)
   15e54:	dd400617 	ldw	r21,24(sp)
   15e58:	dd000517 	ldw	r20,20(sp)
   15e5c:	dcc00417 	ldw	r19,16(sp)
   15e60:	dc800317 	ldw	r18,12(sp)
   15e64:	dc400217 	ldw	r17,8(sp)
   15e68:	dc000117 	ldw	r16,4(sp)
   15e6c:	dec00b04 	addi	sp,sp,44
   15e70:	f800283a 	ret
   15e74:	a0800117 	ldw	r2,4(r20)
   15e78:	80c00017 	ldw	r3,0(r16)
   15e7c:	10bfffc4 	addi	r2,r2,-1
   15e80:	15c01426 	beq	r2,r23,15ed4 <__call_exitprocs+0x154>
   15e84:	80000015 	stw	zero,0(r16)
   15e88:	183fde26 	beq	r3,zero,15e04 <__alt_data_end+0xffff5e04>
   15e8c:	95c8983a 	sll	r4,r18,r23
   15e90:	a0806217 	ldw	r2,392(r20)
   15e94:	a5800117 	ldw	r22,4(r20)
   15e98:	2084703a 	and	r2,r4,r2
   15e9c:	10000b26 	beq	r2,zero,15ecc <__call_exitprocs+0x14c>
   15ea0:	a0806317 	ldw	r2,396(r20)
   15ea4:	2088703a 	and	r4,r4,r2
   15ea8:	20000c1e 	bne	r4,zero,15edc <__call_exitprocs+0x15c>
   15eac:	89400017 	ldw	r5,0(r17)
   15eb0:	d9000017 	ldw	r4,0(sp)
   15eb4:	183ee83a 	callr	r3
   15eb8:	a0800117 	ldw	r2,4(r20)
   15ebc:	15bfbf1e 	bne	r2,r22,15dbc <__alt_data_end+0xffff5dbc>
   15ec0:	98800017 	ldw	r2,0(r19)
   15ec4:	153fcf26 	beq	r2,r20,15e04 <__alt_data_end+0xffff5e04>
   15ec8:	003fbc06 	br	15dbc <__alt_data_end+0xffff5dbc>
   15ecc:	183ee83a 	callr	r3
   15ed0:	003ff906 	br	15eb8 <__alt_data_end+0xffff5eb8>
   15ed4:	a5c00115 	stw	r23,4(r20)
   15ed8:	003feb06 	br	15e88 <__alt_data_end+0xffff5e88>
   15edc:	89000017 	ldw	r4,0(r17)
   15ee0:	183ee83a 	callr	r3
   15ee4:	003ff406 	br	15eb8 <__alt_data_end+0xffff5eb8>
   15ee8:	a0800017 	ldw	r2,0(r20)
   15eec:	a027883a 	mov	r19,r20
   15ef0:	1029883a 	mov	r20,r2
   15ef4:	003fb606 	br	15dd0 <__alt_data_end+0xffff5dd0>
   15ef8:	0005883a 	mov	r2,zero
   15efc:	003ffb06 	br	15eec <__alt_data_end+0xffff5eec>

00015f00 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   15f00:	defffd04 	addi	sp,sp,-12
   15f04:	df000215 	stw	fp,8(sp)
   15f08:	df000204 	addi	fp,sp,8
   15f0c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   15f10:	0001883a 	nop
   15f14:	e0bfff17 	ldw	r2,-4(fp)
   15f18:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   15f1c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   15f20:	10000226 	beq	r2,zero,15f2c <_exit+0x2c>
    ALT_SIM_FAIL();
   15f24:	002af070 	cmpltui	zero,zero,43969
   15f28:	00000106 	br	15f30 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   15f2c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   15f30:	003fff06 	br	15f30 <__alt_data_end+0xffff5f30>
