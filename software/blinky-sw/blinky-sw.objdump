
blinky-sw.elf:     file format elf32-littlenios2
blinky-sw.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010230

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00006d44 memsz 0x00006d44 flags r-x
    LOAD off    0x00007d64 vaddr 0x00016d64 paddr 0x00018808 align 2**12
         filesz 0x00001aa4 memsz 0x00001aa4 flags rw-
    LOAD off    0x0000a2ac vaddr 0x0001a2ac paddr 0x0001a2ac align 2**12
         filesz 0x00000000 memsz 0x00000240 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00006a34  00010230  00010230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000100  00016c64  00016c64  00007c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aa4  00016d64  00018808  00007d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000240  0001a2ac  0001a2ac  0000a2ac  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_ram   00000000  0001a4ec  0001a4ec  00009808  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00009808  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000aa8  00000000  00000000  00009830  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00017f6d  00000000  00000000  0000a2d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000669a  00000000  00000000  00022245  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006fc5  00000000  00000000  000288df  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001b24  00000000  00000000  0002f8a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002ab2  00000000  00000000  000313c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004f14  00000000  00000000  00033e7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00038d90  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000006f8  00000000  00000000  00038da0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0003be6a  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0003be6d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0003be70  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0003be71  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0003be72  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0003be7b  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0003be84  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000006  00000000  00000000  0003be8d  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000022  00000000  00000000  0003be93  2**0
                  CONTENTS, READONLY
 26 .jdi          00004428  00000000  00000000  0003beb5  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0007edcf  00000000  00000000  000402dd  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010230 l    d  .text	00000000 .text
00016c64 l    d  .rodata	00000000 .rodata
00016d64 l    d  .rwdata	00000000 .rwdata
0001a2ac l    d  .bss	00000000 .bss
0001a4ec l    d  .onchip_ram	00000000 .onchip_ram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../blinky-sw_bsp//obj/HAL/src/crt0.o
00010268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 blinky.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 itoa.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 utoa.c
00000000 l    df *ABS*	00000000 findfp.c
000119f4 l     F .text	00000008 __fp_unlock
00011a08 l     F .text	0000019c __sinit.part.1
00011ba4 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00016d98 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
000144e0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
000145f4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00014620 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00014714 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000147fc l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000148e8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_read.c
00014b00 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000187f8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00014d74 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00014eb0 l     F .text	00000034 alt_dev_reg
0001776c l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00015188 l     F .text	0000020c altera_avalon_jtag_uart_irq
00015394 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00015b18 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00015f78 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000160d8 l     F .text	0000003c alt_get_errno
00016114 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0001a2f0 g     O .bss	00000004 alt_instruction_exception_handler
00010ab0 g     F .text	00000038 dealerBust
00014464 g     F .text	00000054 _isatty_r
00014a00 g     F .text	0000007c alt_main
00010598 g     F .text	00000020 dispInstructions
0001172c g     F .text	000000c0 _puts_r
0001a3ec g     O .bss	00000100 alt_irq
0001418c g     F .text	00000060 _lseek_r
00018808 g       *ABS*	00000000 __flash_rwdata_start
00010f68 g     F .text	000000f0 sevenSegmentConversion
0001a4ec g       *ABS*	00000000 __alt_heap_start
00013740 g     F .text	0000005c __sseek
00011d54 g     F .text	00000010 __sinit
00011bac g     F .text	00000078 __sfmoreglue
00014aa0 g     F .text	00000024 __malloc_unlock
00012e2c g     F .text	0000015c memmove
0001040c g     F .text	00000034 update_RLED
00011d3c g     F .text	00000018 _cleanup
0001073c g     F .text	00000198 dealInitialCards
00016d64 g     O .rwdata	00000034 cardValues
000113c4 g     F .text	000000a0 LCDWriteString
00014ac4 g     F .text	0000003c alt_putstr
00016500 g     F .text	00000024 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
00014408 g     F .text	0000005c _fstat_r
0001a2d4 g     O .bss	00000004 errno
000136bc g     F .text	00000008 __seofread
0001a2b8 g     O .bss	00000004 gamesPlayed
00010d84 g     F .text	0000005c resetDeck
0001a2dc g     O .bss	00000004 alt_argv
000207cc g       *ABS*	00000000 _gp
000111b8 g     F .text	000000a0 LCDInit
000175ec g     O .rwdata	00000180 alt_fd_list
00016524 g     F .text	00000090 alt_find_dev
00012ce4 g     F .text	00000148 memcpy
00011158 g     F .text	00000060 stay
000119fc g     F .text	0000000c _cleanup_r
00010e58 g     F .text	00000088 displayPlayerSum
0001605c g     F .text	0000007c alt_io_redirect
00016c64 g       *ABS*	00000000 __DTOR_END__
000117ec g     F .text	00000014 puts
00016780 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0001558c g     F .text	0000021c altera_avalon_jtag_uart_read
00011604 g     F .text	00000064 .hidden __udivsi3
00014750 g     F .text	000000ac isatty
0001a2d0 g     O .bss	00000004 __malloc_top_pad
00011728 g     F .text	00000004 itoa
00011da4 g     F .text	000004c8 __sfvwrite_r
000104e0 g     F .text	00000020 init_LCD
0001a2c4 g     O .bss	00000004 bits
00013614 g     F .text	00000054 _sbrk_r
000143a8 g     F .text	00000060 _read_r
000187f0 g     O .rwdata	00000004 alt_max_fd
000139ac g     F .text	000000f0 _fclose_r
00013d28 g     F .text	00000030 fflush
0001a2cc g     O .bss	00000004 __malloc_max_sbrked_mem
00011464 g     F .text	00000044 setPosition
00010614 g     F .text	0000002c gameInitialization
00014924 g     F .text	000000dc lseek
000187d0 g     O .rwdata	00000004 _global_impure_ptr
000130b0 g     F .text	00000564 _realloc_r
0001a4ec g       *ABS*	00000000 __bss_end
00015e88 g     F .text	000000f0 alt_iic_isr_register
000163f8 g     F .text	00000108 alt_tick
00011d74 g     F .text	00000018 __fp_lock_all
00015e3c g     F .text	0000004c alt_ic_irq_enabled
00010d24 g     F .text	00000060 updateDeck
0001635c g     F .text	0000009c alt_alarm_stop
0001a2e4 g     O .bss	00000004 alt_irq_active
000100fc g     F .exceptions	000000d4 alt_irq_handler
000175c4 g     O .rwdata	00000028 alt_dev_null
0001099c g     F .text	00000038 playerBust
00015af8 g     F .text	00000020 alt_dcache_flush_all
000119f0 g     F .text	00000004 utoa
0001a2f4 g     O .bss	000000d0 cardDeck
00018808 g       *ABS*	00000000 __ram_rwdata_end
000187e8 g     O .rwdata	00000008 alt_dev_list
00014db0 g     F .text	00000100 write
00016d64 g       *ABS*	00000000 __ram_rodata_end
0001465c g     F .text	000000b8 fstat
00010de0 g     F .text	00000078 translateCardValue
000109d4 g     F .text	000000dc dealerTurn
00011668 g     F .text	00000058 .hidden __umodsi3
0001a4ec g       *ABS*	00000000 end
000116c0 g     F .text	00000068 __itoa
000150c8 g     F .text	000000c0 altera_avalon_jtag_uart_init
000101d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00016c64 g       *ABS*	00000000 __CTOR_LIST__
00020000 g       *ABS*	00000000 __alt_stack_pointer
000157a8 g     F .text	00000224 altera_avalon_jtag_uart_write
00011d64 g     F .text	00000004 __sfp_lock_acquire
00012c00 g     F .text	000000e4 memchr
0001a2b0 g     O .bss	00000004 dealerSum
00013e7c g     F .text	00000310 _free_r
00016ab0 g     F .text	00000180 __call_exitprocs
000187d8 g     O .rwdata	00000004 __malloc_sbrk_base
00010230 g     F .text	0000003c _start
0001a2e8 g     O .bss	00000004 _alt_tick_rate
0001a2ec g     O .bss	00000004 _alt_nticks
00014b3c g     F .text	00000104 read
00014f1c g     F .text	00000048 alt_sys_init
00016998 g     F .text	00000118 __register_exitproc
00010ae8 g     F .text	000001a0 determineResult
0001a2ac g     O .bss	00000004 currentBet
00015434 g     F .text	00000068 altera_avalon_jtag_uart_close
000144b8 g     F .text	00000028 .hidden __mulsi3
00016d64 g       *ABS*	00000000 __ram_rwdata_start
00016c64 g       *ABS*	00000000 __ram_rodata_start
0001a3c4 g     O .bss	00000028 __malloc_current_mallinfo
00014f64 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000166bc g     F .text	000000c4 alt_get_fd
000105b8 g     F .text	0000005c dispBankroll
00013958 g     F .text	00000054 _close_r
0001691c g     F .text	0000007c memcmp
00015024 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0001a4ec g       *ABS*	00000000 __alt_stack_base
00015074 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000114a8 g     F .text	00000064 delay1ms
00013804 g     F .text	00000154 __swsetup_r
00011c24 g     F .text	00000118 __sfp
000171bc g     O .rwdata	00000408 __malloc_av_
00011d70 g     F .text	00000004 __sinit_lock_release
00013668 g     F .text	00000054 __sread
0001a2bc g     O .bss	00000004 cardsDealt
000165b4 g     F .text	00000108 alt_find_file
00015b54 g     F .text	000000a4 alt_dev_llist_insert
00014a7c g     F .text	00000024 __malloc_lock
00014cc4 g     F .text	000000b0 sbrk
00013ccc g     F .text	0000005c _fflush_r
00011898 g     F .text	00000158 __utoa
0001a2ac g       *ABS*	00000000 __bss_start
00012f88 g     F .text	00000128 memset
0001026c g     F .text	0000010c main
0001a2e0 g     O .bss	00000004 alt_envp
0001a2c8 g     O .bss	00000004 __malloc_max_total_mem
00014fc4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0001379c g     F .text	00000008 __sclose
00020000 g       *ABS*	00000000 __alt_heap_limit
00013a9c g     F .text	00000014 fclose
000123f4 g     F .text	0000080c _malloc_r
000187f4 g     O .rwdata	00000004 alt_errno
00010640 g     F .text	000000fc playerBet
0001226c g     F .text	000000c4 _fwalk
0001150c g     F .text	00000084 .hidden __divsi3
00013d58 g     F .text	00000124 _malloc_trim_r
00016c64 g       *ABS*	00000000 __CTOR_END__
00011058 g     F .text	00000100 hit
00016c64 g       *ABS*	00000000 __flash_rodata_start
00016c64 g       *ABS*	00000000 __DTOR_LIST__
00010ee0 g     F .text	00000088 displayDealerSum
00010c88 g     F .text	00000044 delay
00014ee4 g     F .text	00000038 alt_irq_init
00014c40 g     F .text	00000084 alt_release_fd
0001681c g     F .text	00000014 atexit
000137a4 g     F .text	00000060 _write_r
0001a2b4 g     O .bss	00000004 playerSum
0001a2c0 g     O .bss	00000004 charCount
000187d4 g     O .rwdata	00000004 _impure_ptr
0001a2d8 g     O .bss	00000004 alt_argc
00013ab0 g     F .text	0000021c __sflush_r
00015c58 g     F .text	00000060 _do_dtors
00010440 g     F .text	000000a0 init_SevenSeg
00010020 g       .exceptions	00000000 alt_irq_entry
00011d8c g     F .text	00000018 __fp_unlock_all
000187e0 g     O .rwdata	00000008 alt_fs_list
000187cc g     O .rwdata	00000004 bankRoll
00010020 g       *ABS*	00000000 __ram_exceptions_start
00015cd8 g     F .text	00000050 alt_ic_isr_register
00018808 g       *ABS*	00000000 _edata
0001a4ec g       *ABS*	00000000 _end
000108d4 g     F .text	000000c8 playerTurn
00011258 g     F .text	000000b4 LCDWrite
00010230 g       *ABS*	00000000 __ram_exceptions_end
0001549c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00016868 g     F .text	0000009c _fputs_r
00015db0 g     F .text	0000008c alt_ic_irq_disable
000136c4 g     F .text	0000007c __swrite
000187dc g     O .rwdata	00000004 __malloc_trim_threshold
00016830 g     F .text	00000038 exit
00012330 g     F .text	000000c4 _fwalk_reent
0001130c g     F .text	0000003c LCDClear
00011590 g     F .text	00000074 .hidden __modsi3
00020000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00011d68 g     F .text	00000004 __sfp_lock_release
00010378 g     F .text	00000094 update_GLED
00010ccc g     F .text	00000058 generateRandomCard
00010000 g       *ABS*	00000000 __alt_mem_onchip_ram
00016c30 g     F .text	00000034 _exit
000159cc g     F .text	0000012c alt_alarm_start
000141ec g     F .text	000001bc __smakebuf_r
00011800 g     F .text	00000098 strlen
00016200 g     F .text	0000015c open
00015cb8 g     F .text	00000020 alt_icache_flush_all
00016904 g     F .text	00000018 fputs
000187fc g     O .rwdata	00000004 alt_priority_mask
00015d28 g     F .text	00000088 alt_ic_irq_enable
00018800 g     O .rwdata	00000008 alt_alarm_list
00015bf8 g     F .text	00000060 _do_ctors
0001451c g     F .text	000000d8 close
00014864 g     F .text	00000084 alt_load
00011348 g     F .text	0000007c LCDWriteChar
00011d6c g     F .text	00000004 __sinit_lock_acquire
00010500 g     F .text	00000098 playRound



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08408c14 	ori	at,at,560
    jmp r1
   10008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	00101d00 	call	101d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defff904 	addi	sp,sp,-28
   10100:	dfc00615 	stw	ra,24(sp)
   10104:	df000515 	stw	fp,20(sp)
   10108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   1010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10110:	0005313a 	rdctl	r2,ipending
   10114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   10118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   1011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   10120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10124:	00800044 	movi	r2,1
   10128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1012c:	e0fffb17 	ldw	r3,-20(fp)
   10130:	e0bffc17 	ldw	r2,-16(fp)
   10134:	1884703a 	and	r2,r3,r2
   10138:	10001426 	beq	r2,zero,1018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1013c:	008000b4 	movhi	r2,2
   10140:	10a8fb04 	addi	r2,r2,-23572
   10144:	e0fffd17 	ldw	r3,-12(fp)
   10148:	180690fa 	slli	r3,r3,3
   1014c:	10c5883a 	add	r2,r2,r3
   10150:	10c00017 	ldw	r3,0(r2)
   10154:	008000b4 	movhi	r2,2
   10158:	10a8fb04 	addi	r2,r2,-23572
   1015c:	e13ffd17 	ldw	r4,-12(fp)
   10160:	200890fa 	slli	r4,r4,3
   10164:	1105883a 	add	r2,r2,r4
   10168:	10800104 	addi	r2,r2,4
   1016c:	10800017 	ldw	r2,0(r2)
   10170:	1009883a 	mov	r4,r2
   10174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   10178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   1017c:	0005313a 	rdctl	r2,ipending
   10180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   10184:	e0bfff17 	ldw	r2,-4(fp)
   10188:	00000706 	br	101a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   1018c:	e0bffc17 	ldw	r2,-16(fp)
   10190:	1085883a 	add	r2,r2,r2
   10194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   10198:	e0bffd17 	ldw	r2,-12(fp)
   1019c:	10800044 	addi	r2,r2,1
   101a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   101a4:	003fe106 	br	1012c <_gp+0xfffef960>

    active = alt_irq_pending ();
   101a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   101ac:	e0bffb17 	ldw	r2,-20(fp)
   101b0:	103fdb1e 	bne	r2,zero,10120 <_gp+0xfffef954>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   101b4:	0001883a 	nop
}
   101b8:	0001883a 	nop
   101bc:	e037883a 	mov	sp,fp
   101c0:	dfc00117 	ldw	ra,4(sp)
   101c4:	df000017 	ldw	fp,0(sp)
   101c8:	dec00204 	addi	sp,sp,8
   101cc:	f800283a 	ret

000101d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   101d0:	defffb04 	addi	sp,sp,-20
   101d4:	dfc00415 	stw	ra,16(sp)
   101d8:	df000315 	stw	fp,12(sp)
   101dc:	df000304 	addi	fp,sp,12
   101e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   101e4:	00bfffc4 	movi	r2,-1
   101e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   101ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   101f0:	d0a6c917 	ldw	r2,-25820(gp)
   101f4:	10000726 	beq	r2,zero,10214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   101f8:	d0a6c917 	ldw	r2,-25820(gp)
   101fc:	e0fffd17 	ldw	r3,-12(fp)
   10200:	e1bffe17 	ldw	r6,-8(fp)
   10204:	e17fff17 	ldw	r5,-4(fp)
   10208:	1809883a 	mov	r4,r3
   1020c:	103ee83a 	callr	r2
   10210:	00000206 	br	1021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   10218:	0005883a 	mov	r2,zero
}
   1021c:	e037883a 	mov	sp,fp
   10220:	dfc00117 	ldw	ra,4(sp)
   10224:	df000017 	ldw	fp,0(sp)
   10228:	dec00204 	addi	sp,sp,8
   1022c:	f800283a 	ret

Disassembly of section .text:

00010230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10230:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   10234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   10238:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   1023c:	d681f314 	ori	gp,gp,1996
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10240:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10244:	10a8ab14 	ori	r2,r2,41644

    movhi r3, %hi(__bss_end)
   10248:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1024c:	18e93b14 	ori	r3,r3,42220

    beq r2, r3, 1f
   10250:	10c00326 	beq	r2,r3,10260 <_start+0x30>

0:
    stw zero, (r2)
   10254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   1025c:	10fffd36 	bltu	r2,r3,10254 <_gp+0xfffefa88>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10260:	00148640 	call	14864 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10264:	0014a000 	call	14a00 <alt_main>

00010268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10268:	003fff06 	br	10268 <_gp+0xfffefa9c>

0001026c <main>:
void LCDWriteString(char *, int);
void setPosition(int);
void delay1ms(int ms);

int main()
{
   1026c:	defffc04 	addi	sp,sp,-16
   10270:	dfc00315 	stw	ra,12(sp)
   10274:	df000215 	stw	fp,8(sp)
   10278:	df000204 	addi	fp,sp,8
	alt_putstr("Ciao from Nios II!\n");
   1027c:	01000074 	movhi	r4,1
   10280:	211b1904 	addi	r4,r4,27748
   10284:	0014ac40 	call	14ac4 <alt_putstr>
	printf("start program\n");
   10288:	01000074 	movhi	r4,1
   1028c:	211b1e04 	addi	r4,r4,27768
   10290:	00117ec0 	call	117ec <puts>
	int KEY_PRESS;
	int SWITCHES;
	init_SevenSeg();
   10294:	00104400 	call	10440 <init_SevenSeg>
	LCDInit();
   10298:	00111b80 	call	111b8 <LCDInit>
	LCDWriteString("Plyr:", 5);
   1029c:	01400144 	movi	r5,5
   102a0:	01000074 	movhi	r4,1
   102a4:	211b2204 	addi	r4,r4,27784
   102a8:	00113c40 	call	113c4 <LCDWriteString>
	setPosition(0x40);
   102ac:	01001004 	movi	r4,64
   102b0:	00114640 	call	11464 <setPosition>
	LCDWriteString("Dler:", 5);
   102b4:	01400144 	movi	r5,5
   102b8:	01000074 	movhi	r4,1
   102bc:	211b2404 	addi	r4,r4,27792
   102c0:	00113c40 	call	113c4 <LCDWriteString>
	while (1)
	{
		gameInitialization();
   102c4:	00106140 	call	10614 <gameInitialization>
		KEY_PRESS = IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE);
   102c8:	008000b4 	movhi	r2,2
   102cc:	10840804 	addi	r2,r2,4128
   102d0:	10800037 	ldwio	r2,0(r2)
   102d4:	e0bfff15 	stw	r2,-4(fp)
		SWITCHES = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
   102d8:	008000b4 	movhi	r2,2
   102dc:	10843804 	addi	r2,r2,4320
   102e0:	10800037 	ldwio	r2,0(r2)
   102e4:	e0bffe15 	stw	r2,-8(fp)

		// PLAY State
		while ((SWITCHES & 0x01) == 1)
   102e8:	00001806 	br	1034c <main+0xe0>
		{
			if (bankRoll == 0)
   102ec:	d0a00017 	ldw	r2,-32768(gp)
   102f0:	10000c1e 	bne	r2,zero,10324 <main+0xb8>
			{
				alt_putstr("Game Over...\n");
   102f4:	01000074 	movhi	r4,1
   102f8:	211b2604 	addi	r4,r4,27800
   102fc:	0014ac40 	call	14ac4 <alt_putstr>
				LCDClear();
   10300:	001130c0 	call	1130c <LCDClear>
				setPosition(0x00);
   10304:	0009883a 	mov	r4,zero
   10308:	00114640 	call	11464 <setPosition>
				LCDWriteString("Game Over", 9);
   1030c:	01400244 	movi	r5,9
   10310:	01000074 	movhi	r4,1
   10314:	211b2a04 	addi	r4,r4,27816
   10318:	00113c40 	call	113c4 <LCDWriteString>
				return 0;
   1031c:	0005883a 	mov	r2,zero
   10320:	00001006 	br	10364 <main+0xf8>
			}
			else
			{
				currentBet = 0;
   10324:	d026b815 	stw	zero,-25888(gp)
				playRound();
   10328:	00105000 	call	10500 <playRound>
				delay(2100000);
   1032c:	01000834 	movhi	r4,32
   10330:	2102c804 	addi	r4,r4,2848
   10334:	0010c880 	call	10c88 <delay>
				init_SevenSeg();
   10338:	00104400 	call	10440 <init_SevenSeg>
				SWITCHES = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
   1033c:	008000b4 	movhi	r2,2
   10340:	10843804 	addi	r2,r2,4320
   10344:	10800037 	ldwio	r2,0(r2)
   10348:	e0bffe15 	stw	r2,-8(fp)
		gameInitialization();
		KEY_PRESS = IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE);
		SWITCHES = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);

		// PLAY State
		while ((SWITCHES & 0x01) == 1)
   1034c:	e0bffe17 	ldw	r2,-8(fp)
   10350:	1080004c 	andi	r2,r2,1
   10354:	103fe51e 	bne	r2,zero,102ec <_gp+0xfffefb20>
				delay(2100000);
				init_SevenSeg();
				SWITCHES = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
			}
		}
		update_GLED(KEY_PRESS); // keep to keep updating
   10358:	e13fff17 	ldw	r4,-4(fp)
   1035c:	00103780 	call	10378 <update_GLED>
	}
   10360:	003fd806 	br	102c4 <_gp+0xfffefaf8>
	return 0;
}
   10364:	e037883a 	mov	sp,fp
   10368:	dfc00117 	ldw	ra,4(sp)
   1036c:	df000017 	ldw	fp,0(sp)
   10370:	dec00204 	addi	sp,sp,8
   10374:	f800283a 	ret

00010378 <update_GLED>:
/************************************************************
 Hardware Initialization
*************************************************************/
// GREEN LEDs reflect KEY input
void update_GLED(int key_data)
{
   10378:	defffe04 	addi	sp,sp,-8
   1037c:	df000115 	stw	fp,4(sp)
   10380:	df000104 	addi	fp,sp,4
   10384:	e13fff15 	stw	r4,-4(fp)
	if (key_data == 3)
   10388:	e0bfff17 	ldw	r2,-4(fp)
   1038c:	108000d8 	cmpnei	r2,r2,3
   10390:	1000051e 	bne	r2,zero,103a8 <update_GLED+0x30>
	{
		IOWR_ALTERA_AVALON_PIO_DATA(GRN_LEDS_BASE, 0x40);
   10394:	00c01004 	movi	r3,64
   10398:	008000b4 	movhi	r2,2
   1039c:	10841004 	addi	r2,r2,4160
   103a0:	10c00035 	stwio	r3,0(r2)
	}
	else
	{
		IOWR_ALTERA_AVALON_PIO_DATA(GRN_LEDS_BASE, 0x00);
	}
	return;
   103a4:	00001506 	br	103fc <update_GLED+0x84>
{
	if (key_data == 3)
	{
		IOWR_ALTERA_AVALON_PIO_DATA(GRN_LEDS_BASE, 0x40);
	}
	else if (key_data == 5)
   103a8:	e0bfff17 	ldw	r2,-4(fp)
   103ac:	10800158 	cmpnei	r2,r2,5
   103b0:	1000051e 	bne	r2,zero,103c8 <update_GLED+0x50>
	{
		IOWR_ALTERA_AVALON_PIO_DATA(GRN_LEDS_BASE, 0x10);
   103b4:	00c00404 	movi	r3,16
   103b8:	008000b4 	movhi	r2,2
   103bc:	10841004 	addi	r2,r2,4160
   103c0:	10c00035 	stwio	r3,0(r2)
	}
	else
	{
		IOWR_ALTERA_AVALON_PIO_DATA(GRN_LEDS_BASE, 0x00);
	}
	return;
   103c4:	00000d06 	br	103fc <update_GLED+0x84>
	}
	else if (key_data == 5)
	{
		IOWR_ALTERA_AVALON_PIO_DATA(GRN_LEDS_BASE, 0x10);
	}
	else if (key_data == 6)
   103c8:	e0bfff17 	ldw	r2,-4(fp)
   103cc:	10800198 	cmpnei	r2,r2,6
   103d0:	1000051e 	bne	r2,zero,103e8 <update_GLED+0x70>
	{
		IOWR_ALTERA_AVALON_PIO_DATA(GRN_LEDS_BASE, 0x4);
   103d4:	00c00104 	movi	r3,4
   103d8:	008000b4 	movhi	r2,2
   103dc:	10841004 	addi	r2,r2,4160
   103e0:	10c00035 	stwio	r3,0(r2)
	}
	else
	{
		IOWR_ALTERA_AVALON_PIO_DATA(GRN_LEDS_BASE, 0x00);
	}
	return;
   103e4:	00000506 	br	103fc <update_GLED+0x84>
	{
		IOWR_ALTERA_AVALON_PIO_DATA(GRN_LEDS_BASE, 0x4);
	}
	else
	{
		IOWR_ALTERA_AVALON_PIO_DATA(GRN_LEDS_BASE, 0x00);
   103e8:	0007883a 	mov	r3,zero
   103ec:	008000b4 	movhi	r2,2
   103f0:	10841004 	addi	r2,r2,4160
   103f4:	10c00035 	stwio	r3,0(r2)
	}
	return;
   103f8:	0001883a 	nop
}
   103fc:	e037883a 	mov	sp,fp
   10400:	df000017 	ldw	fp,0(sp)
   10404:	dec00104 	addi	sp,sp,4
   10408:	f800283a 	ret

0001040c <update_RLED>:
// RED LEDs reflect SWITCH input
void update_RLED(int switch_data)
{
   1040c:	defffe04 	addi	sp,sp,-8
   10410:	df000115 	stw	fp,4(sp)
   10414:	df000104 	addi	fp,sp,4
   10418:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(RED_LEDS_BASE, switch_data);
   1041c:	008000b4 	movhi	r2,2
   10420:	10840c04 	addi	r2,r2,4144
   10424:	e0ffff17 	ldw	r3,-4(fp)
   10428:	10c00035 	stwio	r3,0(r2)
	return;
   1042c:	0001883a 	nop
}
   10430:	e037883a 	mov	sp,fp
   10434:	df000017 	ldw	fp,0(sp)
   10438:	dec00104 	addi	sp,sp,4
   1043c:	f800283a 	ret

00010440 <init_SevenSeg>:
void init_SevenSeg(void)
{
   10440:	deffff04 	addi	sp,sp,-4
   10444:	df000015 	stw	fp,0(sp)
   10448:	d839883a 	mov	fp,sp
	IOWR_ALTERA_AVALON_PIO_DATA(SEV_SEG_0_BASE, 191);
   1044c:	00c02fc4 	movi	r3,191
   10450:	008000b4 	movhi	r2,2
   10454:	10843404 	addi	r2,r2,4304
   10458:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(SEV_SEG_1_BASE, 191);
   1045c:	00c02fc4 	movi	r3,191
   10460:	008000b4 	movhi	r2,2
   10464:	10842c04 	addi	r2,r2,4272
   10468:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(SEV_SEG_2_BASE, 191);
   1046c:	00c02fc4 	movi	r3,191
   10470:	008000b4 	movhi	r2,2
   10474:	10842804 	addi	r2,r2,4256
   10478:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(SEV_SEG_3_BASE, 191);
   1047c:	00c02fc4 	movi	r3,191
   10480:	008000b4 	movhi	r2,2
   10484:	10842404 	addi	r2,r2,4240
   10488:	10c00035 	stwio	r3,0(r2)

	IOWR_ALTERA_AVALON_PIO_DATA(SEV_SEG_4_BASE, 0xC7);
   1048c:	00c031c4 	movi	r3,199
   10490:	008000b4 	movhi	r2,2
   10494:	10842004 	addi	r2,r2,4224
   10498:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(SEV_SEG_5_BASE, 0xA1);
   1049c:	00c02844 	movi	r3,161
   104a0:	008000b4 	movhi	r2,2
   104a4:	10841c04 	addi	r2,r2,4208
   104a8:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(SEV_SEG_6_BASE, 0xC7);
   104ac:	00c031c4 	movi	r3,199
   104b0:	008000b4 	movhi	r2,2
   104b4:	10841804 	addi	r2,r2,4192
   104b8:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(SEV_SEG_7_BASE, 0x8C);
   104bc:	00c02304 	movi	r3,140
   104c0:	008000b4 	movhi	r2,2
   104c4:	10841404 	addi	r2,r2,4176
   104c8:	10c00035 	stwio	r3,0(r2)
	return;
   104cc:	0001883a 	nop
}
   104d0:	e037883a 	mov	sp,fp
   104d4:	df000017 	ldw	fp,0(sp)
   104d8:	dec00104 	addi	sp,sp,4
   104dc:	f800283a 	ret

000104e0 <init_LCD>:
void init_LCD(void)
{
   104e0:	deffff04 	addi	sp,sp,-4
   104e4:	df000015 	stw	fp,0(sp)
   104e8:	d839883a 	mov	fp,sp
	// TBD
	return;
   104ec:	0001883a 	nop
}
   104f0:	e037883a 	mov	sp,fp
   104f4:	df000017 	ldw	fp,0(sp)
   104f8:	dec00104 	addi	sp,sp,4
   104fc:	f800283a 	ret

00010500 <playRound>:

/************************************************************
 Game State
*************************************************************/
void playRound(void)
{
   10500:	defffa04 	addi	sp,sp,-24
   10504:	dfc00515 	stw	ra,20(sp)
   10508:	df000415 	stw	fp,16(sp)
   1050c:	df000404 	addi	fp,sp,16
	int result;
	// Games Played
	gamesPlayed++;
   10510:	d0a6bb17 	ldw	r2,-25876(gp)
   10514:	10800044 	addi	r2,r2,1
   10518:	d0a6bb15 	stw	r2,-25876(gp)

	// PlayerBet
	playerBet();
   1051c:	00106400 	call	10640 <playerBet>

	// Display first three cards
	dealInitialCards();
   10520:	001073c0 	call	1073c <dealInitialCards>

	// Player Turn
	playerTurn();
   10524:	00108d40 	call	108d4 <playerTurn>

	// Player Bust or Dealer Turn
	if (playerBust() == 0)
   10528:	001099c0 	call	1099c <playerBust>
   1052c:	1000011e 	bne	r2,zero,10534 <playRound+0x34>
	{
		dealerTurn();
   10530:	00109d40 	call	109d4 <dealerTurn>
	}

	// Determine Result
	result = determineResult();
   10534:	0010ae80 	call	10ae8 <determineResult>
   10538:	e0bffc15 	stw	r2,-16(fp)
	playerSum = 0;
   1053c:	d026ba15 	stw	zero,-25880(gp)
	dealerSum = 0;
   10540:	d026b915 	stw	zero,-25884(gp)
	char msg[10];
	itoa(result, msg, 10);
   10544:	e0bffd04 	addi	r2,fp,-12
   10548:	01800284 	movi	r6,10
   1054c:	100b883a 	mov	r5,r2
   10550:	e13ffc17 	ldw	r4,-16(fp)
   10554:	00117280 	call	11728 <itoa>
	alt_putstr("\n[0=LOST; 1=WIN; 2=PUSH]\nRESULT: ");
   10558:	01000074 	movhi	r4,1
   1055c:	211b2d04 	addi	r4,r4,27828
   10560:	0014ac40 	call	14ac4 <alt_putstr>
	alt_putstr(msg);
   10564:	e0bffd04 	addi	r2,fp,-12
   10568:	1009883a 	mov	r4,r2
   1056c:	0014ac40 	call	14ac4 <alt_putstr>
	alt_putstr("\n");
   10570:	01000074 	movhi	r4,1
   10574:	211b3604 	addi	r4,r4,27864
   10578:	0014ac40 	call	14ac4 <alt_putstr>

	// Update Bankroll
	dispBankroll();
   1057c:	00105b80 	call	105b8 <dispBankroll>

	// Reset Deck every

	return;
   10580:	0001883a 	nop
}
   10584:	e037883a 	mov	sp,fp
   10588:	dfc00117 	ldw	ra,4(sp)
   1058c:	df000017 	ldw	fp,0(sp)
   10590:	dec00204 	addi	sp,sp,8
   10594:	f800283a 	ret

00010598 <dispInstructions>:
void dispInstructions(void)
{
   10598:	deffff04 	addi	sp,sp,-4
   1059c:	df000015 	stw	fp,0(sp)
   105a0:	d839883a 	mov	fp,sp
	// DISPLAY TO LCD
	return;
   105a4:	0001883a 	nop
}
   105a8:	e037883a 	mov	sp,fp
   105ac:	df000017 	ldw	fp,0(sp)
   105b0:	dec00104 	addi	sp,sp,4
   105b4:	f800283a 	ret

000105b8 <dispBankroll>:
void dispBankroll(void)
{
   105b8:	defffb04 	addi	sp,sp,-20
   105bc:	dfc00415 	stw	ra,16(sp)
   105c0:	df000315 	stw	fp,12(sp)
   105c4:	df000304 	addi	fp,sp,12
	// DISPLAY TO LCD
	char msg[10];
	itoa(bankRoll, msg, 10);
   105c8:	d0a00017 	ldw	r2,-32768(gp)
   105cc:	01800284 	movi	r6,10
   105d0:	e17ffd04 	addi	r5,fp,-12
   105d4:	1009883a 	mov	r4,r2
   105d8:	00117280 	call	11728 <itoa>
	alt_putstr("BANKROLL: ");
   105dc:	01000074 	movhi	r4,1
   105e0:	211b3704 	addi	r4,r4,27868
   105e4:	0014ac40 	call	14ac4 <alt_putstr>
	alt_putstr(msg);
   105e8:	e13ffd04 	addi	r4,fp,-12
   105ec:	0014ac40 	call	14ac4 <alt_putstr>
	alt_putstr("\n");
   105f0:	01000074 	movhi	r4,1
   105f4:	211b3604 	addi	r4,r4,27864
   105f8:	0014ac40 	call	14ac4 <alt_putstr>
	return;
   105fc:	0001883a 	nop
}
   10600:	e037883a 	mov	sp,fp
   10604:	dfc00117 	ldw	ra,4(sp)
   10608:	df000017 	ldw	fp,0(sp)
   1060c:	dec00204 	addi	sp,sp,8
   10610:	f800283a 	ret

00010614 <gameInitialization>:

/************************************************************
 Game Flow
*************************************************************/
void gameInitialization(void)
{
   10614:	deffff04 	addi	sp,sp,-4
   10618:	df000015 	stw	fp,0(sp)
   1061c:	d839883a 	mov	fp,sp
	dealerSum = 0;
   10620:	d026b915 	stw	zero,-25884(gp)
	playerSum = 0;
   10624:	d026ba15 	stw	zero,-25880(gp)
	gamesPlayed = 0;
   10628:	d026bb15 	stw	zero,-25876(gp)
}
   1062c:	0001883a 	nop
   10630:	e037883a 	mov	sp,fp
   10634:	df000017 	ldw	fp,0(sp)
   10638:	dec00104 	addi	sp,sp,4
   1063c:	f800283a 	ret

00010640 <playerBet>:
void playerBet(void)
{
   10640:	defffa04 	addi	sp,sp,-24
   10644:	dfc00515 	stw	ra,20(sp)
   10648:	df000415 	stw	fp,16(sp)
   1064c:	df000404 	addi	fp,sp,16
	int KEY_PRESS;
	alt_putstr("PLACE YOUR BET TO BEGIN!\n");
   10650:	01000074 	movhi	r4,1
   10654:	211b3a04 	addi	r4,r4,27880
   10658:	0014ac40 	call	14ac4 <alt_putstr>
	while (1)
	{
		KEY_PRESS = IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE);
   1065c:	008000b4 	movhi	r2,2
   10660:	10840804 	addi	r2,r2,4128
   10664:	10800037 	ldwio	r2,0(r2)
   10668:	e0bffc15 	stw	r2,-16(fp)
		update_RLED(IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE));
   1066c:	008000b4 	movhi	r2,2
   10670:	10843804 	addi	r2,r2,4320
   10674:	10800037 	ldwio	r2,0(r2)
   10678:	1009883a 	mov	r4,r2
   1067c:	001040c0 	call	1040c <update_RLED>
		if (KEY_PRESS == 3)
   10680:	e0bffc17 	ldw	r2,-16(fp)
   10684:	108000d8 	cmpnei	r2,r2,3
   10688:	103ff41e 	bne	r2,zero,1065c <_gp+0xfffefe90>
		{
			while (KEY_PRESS == 3)
   1068c:	00000606 	br	106a8 <playerBet+0x68>
			{
				KEY_PRESS = IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE);
   10690:	008000b4 	movhi	r2,2
   10694:	10840804 	addi	r2,r2,4128
   10698:	10800037 	ldwio	r2,0(r2)
   1069c:	e0bffc15 	stw	r2,-16(fp)
				update_GLED(KEY_PRESS);
   106a0:	e13ffc17 	ldw	r4,-16(fp)
   106a4:	00103780 	call	10378 <update_GLED>
	{
		KEY_PRESS = IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE);
		update_RLED(IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE));
		if (KEY_PRESS == 3)
		{
			while (KEY_PRESS == 3)
   106a8:	e0bffc17 	ldw	r2,-16(fp)
   106ac:	108000e0 	cmpeqi	r2,r2,3
   106b0:	103ff71e 	bne	r2,zero,10690 <_gp+0xfffefec4>
			{
				KEY_PRESS = IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE);
				update_GLED(KEY_PRESS);
			}
			update_GLED(KEY_PRESS);
   106b4:	e13ffc17 	ldw	r4,-16(fp)
   106b8:	00103780 	call	10378 <update_GLED>
			// ACCOUNT FOR SW0 being on for "PLAY" --- > change latter
			currentBet = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
   106bc:	008000b4 	movhi	r2,2
   106c0:	10843804 	addi	r2,r2,4320
   106c4:	10800037 	ldwio	r2,0(r2)
   106c8:	d0a6b815 	stw	r2,-25888(gp)

			if (currentBet > bankRoll)
   106cc:	d0a6b817 	ldw	r2,-25888(gp)
   106d0:	d0e00017 	ldw	r3,-32768(gp)
   106d4:	1880020e 	bge	r3,r2,106e0 <playerBet+0xa0>
			{
				currentBet = bankRoll;
   106d8:	d0a00017 	ldw	r2,-32768(gp)
   106dc:	d0a6b815 	stw	r2,-25888(gp)
			}

			if (currentBet != 0)
   106e0:	d0a6b817 	ldw	r2,-25888(gp)
   106e4:	103fdd26 	beq	r2,zero,1065c <_gp+0xfffefe90>
			{
				char msg[10];
				itoa(currentBet, msg, 10);
   106e8:	d0a6b817 	ldw	r2,-25888(gp)
   106ec:	e0fffd04 	addi	r3,fp,-12
   106f0:	01800284 	movi	r6,10
   106f4:	180b883a 	mov	r5,r3
   106f8:	1009883a 	mov	r4,r2
   106fc:	00117280 	call	11728 <itoa>
				alt_putstr("PLACED BET: ");
   10700:	01000074 	movhi	r4,1
   10704:	211b4104 	addi	r4,r4,27908
   10708:	0014ac40 	call	14ac4 <alt_putstr>
				alt_putstr(msg);
   1070c:	e0bffd04 	addi	r2,fp,-12
   10710:	1009883a 	mov	r4,r2
   10714:	0014ac40 	call	14ac4 <alt_putstr>
				alt_putstr("\n\n");
   10718:	01000074 	movhi	r4,1
   1071c:	211b4504 	addi	r4,r4,27924
   10720:	0014ac40 	call	14ac4 <alt_putstr>
				return;
   10724:	0001883a 	nop
			}
		}
	}
	return;
}
   10728:	e037883a 	mov	sp,fp
   1072c:	dfc00117 	ldw	ra,4(sp)
   10730:	df000017 	ldw	fp,0(sp)
   10734:	dec00204 	addi	sp,sp,8
   10738:	f800283a 	ret

0001073c <dealInitialCards>:
void dealInitialCards(void)
{
   1073c:	defff604 	addi	sp,sp,-40
   10740:	dfc00915 	stw	ra,36(sp)
   10744:	df000815 	stw	fp,32(sp)
   10748:	df000804 	addi	fp,sp,32
	int tempCard;
	int cardValue;
	// Player First Two Cards
	for (int i = 0; i < 2; i++)
   1074c:	e03ff915 	stw	zero,-28(fp)
   10750:	00003106 	br	10818 <dealInitialCards+0xdc>
	{
		tempCard = generateRandomCard();
   10754:	0010ccc0 	call	10ccc <generateRandomCard>
   10758:	e0bff815 	stw	r2,-32(fp)
		while (cardDeck[tempCard] == 1)
   1075c:	00000206 	br	10768 <dealInitialCards+0x2c>
		{
			tempCard = generateRandomCard();
   10760:	0010ccc0 	call	10ccc <generateRandomCard>
   10764:	e0bff815 	stw	r2,-32(fp)
	int cardValue;
	// Player First Two Cards
	for (int i = 0; i < 2; i++)
	{
		tempCard = generateRandomCard();
		while (cardDeck[tempCard] == 1)
   10768:	008000b4 	movhi	r2,2
   1076c:	10a8bd04 	addi	r2,r2,-23820
   10770:	e0fff817 	ldw	r3,-32(fp)
   10774:	18c7883a 	add	r3,r3,r3
   10778:	18c7883a 	add	r3,r3,r3
   1077c:	10c5883a 	add	r2,r2,r3
   10780:	10800017 	ldw	r2,0(r2)
   10784:	10800060 	cmpeqi	r2,r2,1
   10788:	103ff51e 	bne	r2,zero,10760 <_gp+0xfffeff94>
		{
			tempCard = generateRandomCard();
		}
		updateDeck(tempCard);
   1078c:	e13ff817 	ldw	r4,-32(fp)
   10790:	0010d240 	call	10d24 <updateDeck>
		cardValue = translateCardValue(tempCard);
   10794:	e13ff817 	ldw	r4,-32(fp)
   10798:	0010de00 	call	10de0 <translateCardValue>
   1079c:	e0bffa15 	stw	r2,-24(fp)

		char msg[10];
		itoa(cardValue, msg, 10);
   107a0:	e0bffd84 	addi	r2,fp,-10
   107a4:	01800284 	movi	r6,10
   107a8:	100b883a 	mov	r5,r2
   107ac:	e13ffa17 	ldw	r4,-24(fp)
   107b0:	00117280 	call	11728 <itoa>
		alt_putstr("[PLAYER] - ");
   107b4:	01000074 	movhi	r4,1
   107b8:	211b4604 	addi	r4,r4,27928
   107bc:	0014ac40 	call	14ac4 <alt_putstr>
		alt_putstr(msg);
   107c0:	e0bffd84 	addi	r2,fp,-10
   107c4:	1009883a 	mov	r4,r2
   107c8:	0014ac40 	call	14ac4 <alt_putstr>
		alt_putstr("\n");
   107cc:	01000074 	movhi	r4,1
   107d0:	211b3604 	addi	r4,r4,27864
   107d4:	0014ac40 	call	14ac4 <alt_putstr>

		playerSum = playerSum + cardValue;
   107d8:	d0e6ba17 	ldw	r3,-25880(gp)
   107dc:	e0bffa17 	ldw	r2,-24(fp)
   107e0:	1885883a 	add	r2,r3,r2
   107e4:	d0a6ba15 	stw	r2,-25880(gp)
		if (playerSum == 22)
   107e8:	d0a6ba17 	ldw	r2,-25880(gp)
   107ec:	10800598 	cmpnei	r2,r2,22
   107f0:	1000021e 	bne	r2,zero,107fc <dealInitialCards+0xc0>
		{
			playerSum = 12;
   107f4:	00800304 	movi	r2,12
   107f8:	d0a6ba15 	stw	r2,-25880(gp)
		}
		displayPlayerSum();
   107fc:	0010e580 	call	10e58 <displayPlayerSum>
		delay(1200000);
   10800:	010004b4 	movhi	r4,18
   10804:	2113e004 	addi	r4,r4,20352
   10808:	0010c880 	call	10c88 <delay>
void dealInitialCards(void)
{
	int tempCard;
	int cardValue;
	// Player First Two Cards
	for (int i = 0; i < 2; i++)
   1080c:	e0bff917 	ldw	r2,-28(fp)
   10810:	10800044 	addi	r2,r2,1
   10814:	e0bff915 	stw	r2,-28(fp)
   10818:	e0bff917 	ldw	r2,-28(fp)
   1081c:	10800090 	cmplti	r2,r2,2
   10820:	103fcc1e 	bne	r2,zero,10754 <_gp+0xfffeff88>
		displayPlayerSum();
		delay(1200000);
	}

	// Dealer First Card Shown
	tempCard = generateRandomCard();
   10824:	0010ccc0 	call	10ccc <generateRandomCard>
   10828:	e0bff815 	stw	r2,-32(fp)
	while (cardDeck[tempCard] == 1)
   1082c:	00000206 	br	10838 <dealInitialCards+0xfc>
	{
		tempCard = generateRandomCard();
   10830:	0010ccc0 	call	10ccc <generateRandomCard>
   10834:	e0bff815 	stw	r2,-32(fp)
		delay(1200000);
	}

	// Dealer First Card Shown
	tempCard = generateRandomCard();
	while (cardDeck[tempCard] == 1)
   10838:	008000b4 	movhi	r2,2
   1083c:	10a8bd04 	addi	r2,r2,-23820
   10840:	e0fff817 	ldw	r3,-32(fp)
   10844:	18c7883a 	add	r3,r3,r3
   10848:	18c7883a 	add	r3,r3,r3
   1084c:	10c5883a 	add	r2,r2,r3
   10850:	10800017 	ldw	r2,0(r2)
   10854:	10800060 	cmpeqi	r2,r2,1
   10858:	103ff51e 	bne	r2,zero,10830 <_gp+0xffff0064>
	{
		tempCard = generateRandomCard();
	}
	updateDeck(tempCard);
   1085c:	e13ff817 	ldw	r4,-32(fp)
   10860:	0010d240 	call	10d24 <updateDeck>
	cardValue = translateCardValue(tempCard);
   10864:	e13ff817 	ldw	r4,-32(fp)
   10868:	0010de00 	call	10de0 <translateCardValue>
   1086c:	e0bffa15 	stw	r2,-24(fp)

	char msg[10];
	itoa(cardValue, msg, 10);
   10870:	e0bffb04 	addi	r2,fp,-20
   10874:	01800284 	movi	r6,10
   10878:	100b883a 	mov	r5,r2
   1087c:	e13ffa17 	ldw	r4,-24(fp)
   10880:	00117280 	call	11728 <itoa>
	alt_putstr("[DEALER] - ");
   10884:	01000074 	movhi	r4,1
   10888:	211b4904 	addi	r4,r4,27940
   1088c:	0014ac40 	call	14ac4 <alt_putstr>
	alt_putstr(msg);
   10890:	e0bffb04 	addi	r2,fp,-20
   10894:	1009883a 	mov	r4,r2
   10898:	0014ac40 	call	14ac4 <alt_putstr>
	alt_putstr("\n");
   1089c:	01000074 	movhi	r4,1
   108a0:	211b3604 	addi	r4,r4,27864
   108a4:	0014ac40 	call	14ac4 <alt_putstr>

	dealerSum = dealerSum + cardValue;
   108a8:	d0e6b917 	ldw	r3,-25884(gp)
   108ac:	e0bffa17 	ldw	r2,-24(fp)
   108b0:	1885883a 	add	r2,r3,r2
   108b4:	d0a6b915 	stw	r2,-25884(gp)
	displayDealerSum();
   108b8:	0010ee00 	call	10ee0 <displayDealerSum>
	return;
   108bc:	0001883a 	nop
}
   108c0:	e037883a 	mov	sp,fp
   108c4:	dfc00117 	ldw	ra,4(sp)
   108c8:	df000017 	ldw	fp,0(sp)
   108cc:	dec00204 	addi	sp,sp,8
   108d0:	f800283a 	ret

000108d4 <playerTurn>:
void playerTurn(void)
{
   108d4:	defffd04 	addi	sp,sp,-12
   108d8:	dfc00215 	stw	ra,8(sp)
   108dc:	df000115 	stw	fp,4(sp)
   108e0:	df000104 	addi	fp,sp,4
	int KEY_PRESS;
	while (1)
	{
		KEY_PRESS = IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE);
   108e4:	008000b4 	movhi	r2,2
   108e8:	10840804 	addi	r2,r2,4128
   108ec:	10800037 	ldwio	r2,0(r2)
   108f0:	e0bfff15 	stw	r2,-4(fp)
		// HIT
		if (KEY_PRESS == 3)
   108f4:	e0bfff17 	ldw	r2,-4(fp)
   108f8:	108000d8 	cmpnei	r2,r2,3
   108fc:	1000101e 	bne	r2,zero,10940 <playerTurn+0x6c>
		{
			while (KEY_PRESS == 3)
   10900:	00000606 	br	1091c <playerTurn+0x48>
			{
				update_GLED(KEY_PRESS);
   10904:	e13fff17 	ldw	r4,-4(fp)
   10908:	00103780 	call	10378 <update_GLED>
				KEY_PRESS = IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE);
   1090c:	008000b4 	movhi	r2,2
   10910:	10840804 	addi	r2,r2,4128
   10914:	10800037 	ldwio	r2,0(r2)
   10918:	e0bfff15 	stw	r2,-4(fp)
	{
		KEY_PRESS = IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE);
		// HIT
		if (KEY_PRESS == 3)
		{
			while (KEY_PRESS == 3)
   1091c:	e0bfff17 	ldw	r2,-4(fp)
   10920:	108000e0 	cmpeqi	r2,r2,3
   10924:	103ff71e 	bne	r2,zero,10904 <_gp+0xffff0138>
			{
				update_GLED(KEY_PRESS);
				KEY_PRESS = IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE);
			}
			update_GLED(KEY_PRESS);
   10928:	e13fff17 	ldw	r4,-4(fp)
   1092c:	00103780 	call	10378 <update_GLED>

			hit();
   10930:	00110580 	call	11058 <hit>
			if (playerSum >= 21)
   10934:	d0a6ba17 	ldw	r2,-25880(gp)
   10938:	10800550 	cmplti	r2,r2,21
   1093c:	10001126 	beq	r2,zero,10984 <playerTurn+0xb0>
			{
				return;
			}
		}
		// STAY
		if (KEY_PRESS == 5)
   10940:	e0bfff17 	ldw	r2,-4(fp)
   10944:	10800158 	cmpnei	r2,r2,5
   10948:	103fe61e 	bne	r2,zero,108e4 <_gp+0xffff0118>
		{
			while (KEY_PRESS == 5)
   1094c:	00000606 	br	10968 <playerTurn+0x94>
			{
				update_GLED(KEY_PRESS);
   10950:	e13fff17 	ldw	r4,-4(fp)
   10954:	00103780 	call	10378 <update_GLED>
				KEY_PRESS = IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE);
   10958:	008000b4 	movhi	r2,2
   1095c:	10840804 	addi	r2,r2,4128
   10960:	10800037 	ldwio	r2,0(r2)
   10964:	e0bfff15 	stw	r2,-4(fp)
			}
		}
		// STAY
		if (KEY_PRESS == 5)
		{
			while (KEY_PRESS == 5)
   10968:	e0bfff17 	ldw	r2,-4(fp)
   1096c:	10800160 	cmpeqi	r2,r2,5
   10970:	103ff71e 	bne	r2,zero,10950 <_gp+0xffff0184>
			{
				update_GLED(KEY_PRESS);
				KEY_PRESS = IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE);
			}
			update_GLED(KEY_PRESS);
   10974:	e13fff17 	ldw	r4,-4(fp)
   10978:	00103780 	call	10378 <update_GLED>
			stay();
   1097c:	00111580 	call	11158 <stay>
			return;
   10980:	00000106 	br	10988 <playerTurn+0xb4>
			update_GLED(KEY_PRESS);

			hit();
			if (playerSum >= 21)
			{
				return;
   10984:	0001883a 	nop
			stay();
			return;
		}
	}
	return;
}
   10988:	e037883a 	mov	sp,fp
   1098c:	dfc00117 	ldw	ra,4(sp)
   10990:	df000017 	ldw	fp,0(sp)
   10994:	dec00204 	addi	sp,sp,8
   10998:	f800283a 	ret

0001099c <playerBust>:
int playerBust(void)
{
   1099c:	defffe04 	addi	sp,sp,-8
   109a0:	df000115 	stw	fp,4(sp)
   109a4:	df000104 	addi	fp,sp,4
	int busted = 0;
   109a8:	e03fff15 	stw	zero,-4(fp)
	if (playerSum > 21)
   109ac:	d0a6ba17 	ldw	r2,-25880(gp)
   109b0:	10800590 	cmplti	r2,r2,22
   109b4:	1000021e 	bne	r2,zero,109c0 <playerBust+0x24>
	{
		busted = 1;
   109b8:	00800044 	movi	r2,1
   109bc:	e0bfff15 	stw	r2,-4(fp)
	}
	return busted;
   109c0:	e0bfff17 	ldw	r2,-4(fp)
}
   109c4:	e037883a 	mov	sp,fp
   109c8:	df000017 	ldw	fp,0(sp)
   109cc:	dec00104 	addi	sp,sp,4
   109d0:	f800283a 	ret

000109d4 <dealerTurn>:
void dealerTurn(void)
{
   109d4:	defff904 	addi	sp,sp,-28
   109d8:	dfc00615 	stw	ra,24(sp)
   109dc:	df000515 	stw	fp,20(sp)
   109e0:	df000504 	addi	fp,sp,20
	int card;
	while (1)
	{
		card = generateRandomCard();
   109e4:	0010ccc0 	call	10ccc <generateRandomCard>
   109e8:	e0bffb15 	stw	r2,-20(fp)
		while (cardDeck[card] == 1)
   109ec:	00000206 	br	109f8 <dealerTurn+0x24>
		{
			card = generateRandomCard();
   109f0:	0010ccc0 	call	10ccc <generateRandomCard>
   109f4:	e0bffb15 	stw	r2,-20(fp)
{
	int card;
	while (1)
	{
		card = generateRandomCard();
		while (cardDeck[card] == 1)
   109f8:	008000b4 	movhi	r2,2
   109fc:	10a8bd04 	addi	r2,r2,-23820
   10a00:	e0fffb17 	ldw	r3,-20(fp)
   10a04:	18c7883a 	add	r3,r3,r3
   10a08:	18c7883a 	add	r3,r3,r3
   10a0c:	10c5883a 	add	r2,r2,r3
   10a10:	10800017 	ldw	r2,0(r2)
   10a14:	10800060 	cmpeqi	r2,r2,1
   10a18:	103ff51e 	bne	r2,zero,109f0 <_gp+0xffff0224>
		{
			card = generateRandomCard();
		}
		updateDeck(card);
   10a1c:	e13ffb17 	ldw	r4,-20(fp)
   10a20:	0010d240 	call	10d24 <updateDeck>

		int cardValue = translateCardValue(card);
   10a24:	e13ffb17 	ldw	r4,-20(fp)
   10a28:	0010de00 	call	10de0 <translateCardValue>
   10a2c:	e0bffc15 	stw	r2,-16(fp)
		char msg[10];
		itoa(cardValue, msg, 10);
   10a30:	e0bffd04 	addi	r2,fp,-12
   10a34:	01800284 	movi	r6,10
   10a38:	100b883a 	mov	r5,r2
   10a3c:	e13ffc17 	ldw	r4,-16(fp)
   10a40:	00117280 	call	11728 <itoa>
		alt_putstr("[DEALER] - ");
   10a44:	01000074 	movhi	r4,1
   10a48:	211b4904 	addi	r4,r4,27940
   10a4c:	0014ac40 	call	14ac4 <alt_putstr>
		alt_putstr(msg);
   10a50:	e0bffd04 	addi	r2,fp,-12
   10a54:	1009883a 	mov	r4,r2
   10a58:	0014ac40 	call	14ac4 <alt_putstr>
		alt_putstr("\n");
   10a5c:	01000074 	movhi	r4,1
   10a60:	211b3604 	addi	r4,r4,27864
   10a64:	0014ac40 	call	14ac4 <alt_putstr>

		// Update Dealer Sum
		dealerSum = dealerSum + cardValue;
   10a68:	d0e6b917 	ldw	r3,-25884(gp)
   10a6c:	e0bffc17 	ldw	r2,-16(fp)
   10a70:	1885883a 	add	r2,r3,r2
   10a74:	d0a6b915 	stw	r2,-25884(gp)
		displayDealerSum();
   10a78:	0010ee00 	call	10ee0 <displayDealerSum>
		if (dealerSum >= 17)
   10a7c:	d0a6b917 	ldw	r2,-25884(gp)
   10a80:	10800450 	cmplti	r2,r2,17
   10a84:	10000426 	beq	r2,zero,10a98 <dealerTurn+0xc4>
		{
			return;
		}
		delay(1000000);
   10a88:	010003f4 	movhi	r4,15
   10a8c:	21109004 	addi	r4,r4,16960
   10a90:	0010c880 	call	10c88 <delay>
	}
   10a94:	003fd306 	br	109e4 <_gp+0xffff0218>
		// Update Dealer Sum
		dealerSum = dealerSum + cardValue;
		displayDealerSum();
		if (dealerSum >= 17)
		{
			return;
   10a98:	0001883a 	nop
		}
		delay(1000000);
	}
	return;
}
   10a9c:	e037883a 	mov	sp,fp
   10aa0:	dfc00117 	ldw	ra,4(sp)
   10aa4:	df000017 	ldw	fp,0(sp)
   10aa8:	dec00204 	addi	sp,sp,8
   10aac:	f800283a 	ret

00010ab0 <dealerBust>:
int dealerBust(void)
{
   10ab0:	defffe04 	addi	sp,sp,-8
   10ab4:	df000115 	stw	fp,4(sp)
   10ab8:	df000104 	addi	fp,sp,4
	int busted = 0;
   10abc:	e03fff15 	stw	zero,-4(fp)
	if (dealerSum > 21)
   10ac0:	d0a6b917 	ldw	r2,-25884(gp)
   10ac4:	10800590 	cmplti	r2,r2,22
   10ac8:	1000021e 	bne	r2,zero,10ad4 <dealerBust+0x24>
	{
		busted = 1;
   10acc:	00800044 	movi	r2,1
   10ad0:	e0bfff15 	stw	r2,-4(fp)
	}
	return busted;
   10ad4:	e0bfff17 	ldw	r2,-4(fp)
}
   10ad8:	e037883a 	mov	sp,fp
   10adc:	df000017 	ldw	fp,0(sp)
   10ae0:	dec00104 	addi	sp,sp,4
   10ae4:	f800283a 	ret

00010ae8 <determineResult>:
int determineResult(void)
{
   10ae8:	defffe04 	addi	sp,sp,-8
   10aec:	dfc00115 	stw	ra,4(sp)
   10af0:	df000015 	stw	fp,0(sp)
   10af4:	d839883a 	mov	fp,sp
	if (playerBust() == 1)
   10af8:	001099c0 	call	1099c <playerBust>
   10afc:	10800058 	cmpnei	r2,r2,1
   10b00:	1000161e 	bne	r2,zero,10b5c <determineResult+0x74>
	{
		IOWR_ALTERA_AVALON_PIO_DATA(SEV_SEG_0_BASE, 0x92); // S
   10b04:	00c02484 	movi	r3,146
   10b08:	008000b4 	movhi	r2,2
   10b0c:	10843404 	addi	r2,r2,4304
   10b10:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(SEV_SEG_1_BASE, 0x92); // S
   10b14:	00c02484 	movi	r3,146
   10b18:	008000b4 	movhi	r2,2
   10b1c:	10842c04 	addi	r2,r2,4272
   10b20:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(SEV_SEG_2_BASE, 0xC0); // O
   10b24:	00c03004 	movi	r3,192
   10b28:	008000b4 	movhi	r2,2
   10b2c:	10842804 	addi	r2,r2,4256
   10b30:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(SEV_SEG_3_BASE, 0xC7); // L
   10b34:	00c031c4 	movi	r3,199
   10b38:	008000b4 	movhi	r2,2
   10b3c:	10842404 	addi	r2,r2,4240
   10b40:	10c00035 	stwio	r3,0(r2)
		bankRoll = bankRoll - currentBet;
   10b44:	d0e00017 	ldw	r3,-32768(gp)
   10b48:	d0a6b817 	ldw	r2,-25888(gp)
   10b4c:	1885c83a 	sub	r2,r3,r2
   10b50:	d0a00015 	stw	r2,-32768(gp)
		return 0;
   10b54:	0005883a 	mov	r2,zero
   10b58:	00004606 	br	10c74 <determineResult+0x18c>
	}
	else if (dealerBust() == 1 || (playerSum > dealerSum))
   10b5c:	0010ab00 	call	10ab0 <dealerBust>
   10b60:	10800060 	cmpeqi	r2,r2,1
   10b64:	1000031e 	bne	r2,zero,10b74 <determineResult+0x8c>
   10b68:	d0a6ba17 	ldw	r2,-25880(gp)
   10b6c:	d0e6b917 	ldw	r3,-25884(gp)
   10b70:	1880160e 	bge	r3,r2,10bcc <determineResult+0xe4>
	{
		IOWR_ALTERA_AVALON_PIO_DATA(SEV_SEG_0_BASE, 0xFF);
   10b74:	00c03fc4 	movi	r3,255
   10b78:	008000b4 	movhi	r2,2
   10b7c:	10843404 	addi	r2,r2,4304
   10b80:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(SEV_SEG_1_BASE, 0x80); // B
   10b84:	00c02004 	movi	r3,128
   10b88:	008000b4 	movhi	r2,2
   10b8c:	10842c04 	addi	r2,r2,4272
   10b90:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(SEV_SEG_2_BASE, 0xC1); // U
   10b94:	00c03044 	movi	r3,193
   10b98:	008000b4 	movhi	r2,2
   10b9c:	10842804 	addi	r2,r2,4256
   10ba0:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(SEV_SEG_3_BASE, 0xA1); // d
   10ba4:	00c02844 	movi	r3,161
   10ba8:	008000b4 	movhi	r2,2
   10bac:	10842404 	addi	r2,r2,4240
   10bb0:	10c00035 	stwio	r3,0(r2)
		bankRoll = bankRoll + currentBet;
   10bb4:	d0e00017 	ldw	r3,-32768(gp)
   10bb8:	d0a6b817 	ldw	r2,-25888(gp)
   10bbc:	1885883a 	add	r2,r3,r2
   10bc0:	d0a00015 	stw	r2,-32768(gp)
		return 1;
   10bc4:	00800044 	movi	r2,1
   10bc8:	00002a06 	br	10c74 <determineResult+0x18c>
	}
	else if (playerSum == dealerSum)
   10bcc:	d0e6ba17 	ldw	r3,-25880(gp)
   10bd0:	d0a6b917 	ldw	r2,-25884(gp)
   10bd4:	1880121e 	bne	r3,r2,10c20 <determineResult+0x138>
	{
		IOWR_ALTERA_AVALON_PIO_DATA(SEV_SEG_0_BASE, 0x89); // H
   10bd8:	00c02244 	movi	r3,137
   10bdc:	008000b4 	movhi	r2,2
   10be0:	10843404 	addi	r2,r2,4304
   10be4:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(SEV_SEG_1_BASE, 0x92); // S
   10be8:	00c02484 	movi	r3,146
   10bec:	008000b4 	movhi	r2,2
   10bf0:	10842c04 	addi	r2,r2,4272
   10bf4:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(SEV_SEG_2_BASE, 0xC1); // U
   10bf8:	00c03044 	movi	r3,193
   10bfc:	008000b4 	movhi	r2,2
   10c00:	10842804 	addi	r2,r2,4256
   10c04:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(SEV_SEG_3_BASE, 0x8C); // P
   10c08:	00c02304 	movi	r3,140
   10c0c:	008000b4 	movhi	r2,2
   10c10:	10842404 	addi	r2,r2,4240
   10c14:	10c00035 	stwio	r3,0(r2)
		return 2;
   10c18:	00800084 	movi	r2,2
   10c1c:	00001506 	br	10c74 <determineResult+0x18c>
	}
	else
	{
		IOWR_ALTERA_AVALON_PIO_DATA(SEV_SEG_0_BASE, 0x92); // S
   10c20:	00c02484 	movi	r3,146
   10c24:	008000b4 	movhi	r2,2
   10c28:	10843404 	addi	r2,r2,4304
   10c2c:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(SEV_SEG_1_BASE, 0x92); // S
   10c30:	00c02484 	movi	r3,146
   10c34:	008000b4 	movhi	r2,2
   10c38:	10842c04 	addi	r2,r2,4272
   10c3c:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(SEV_SEG_2_BASE, 0xC0); // O
   10c40:	00c03004 	movi	r3,192
   10c44:	008000b4 	movhi	r2,2
   10c48:	10842804 	addi	r2,r2,4256
   10c4c:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(SEV_SEG_3_BASE, 0xC7); // L
   10c50:	00c031c4 	movi	r3,199
   10c54:	008000b4 	movhi	r2,2
   10c58:	10842404 	addi	r2,r2,4240
   10c5c:	10c00035 	stwio	r3,0(r2)
		bankRoll = bankRoll - currentBet;
   10c60:	d0e00017 	ldw	r3,-32768(gp)
   10c64:	d0a6b817 	ldw	r2,-25888(gp)
   10c68:	1885c83a 	sub	r2,r3,r2
   10c6c:	d0a00015 	stw	r2,-32768(gp)
		return 0;
   10c70:	0005883a 	mov	r2,zero
	}
}
   10c74:	e037883a 	mov	sp,fp
   10c78:	dfc00117 	ldw	ra,4(sp)
   10c7c:	df000017 	ldw	fp,0(sp)
   10c80:	dec00204 	addi	sp,sp,8
   10c84:	f800283a 	ret

00010c88 <delay>:
void delay(int delay)
{
   10c88:	defffd04 	addi	sp,sp,-12
   10c8c:	df000215 	stw	fp,8(sp)
   10c90:	df000204 	addi	fp,sp,8
   10c94:	e13fff15 	stw	r4,-4(fp)
	int count = 0;
   10c98:	e03ffe15 	stw	zero,-8(fp)
	while (count < delay)
   10c9c:	00000306 	br	10cac <delay+0x24>
	{
		count++;
   10ca0:	e0bffe17 	ldw	r2,-8(fp)
   10ca4:	10800044 	addi	r2,r2,1
   10ca8:	e0bffe15 	stw	r2,-8(fp)
	}
}
void delay(int delay)
{
	int count = 0;
	while (count < delay)
   10cac:	e0fffe17 	ldw	r3,-8(fp)
   10cb0:	e0bfff17 	ldw	r2,-4(fp)
   10cb4:	18bffa16 	blt	r3,r2,10ca0 <_gp+0xffff04d4>
	{
		count++;
	}
	return;
   10cb8:	0001883a 	nop
}
   10cbc:	e037883a 	mov	sp,fp
   10cc0:	df000017 	ldw	fp,0(sp)
   10cc4:	dec00104 	addi	sp,sp,4
   10cc8:	f800283a 	ret

00010ccc <generateRandomCard>:

/************************************************************
 Game Functionality
*************************************************************/
int generateRandomCard(void)
{
   10ccc:	defffd04 	addi	sp,sp,-12
   10cd0:	dfc00215 	stw	ra,8(sp)
   10cd4:	df000115 	stw	fp,4(sp)
   10cd8:	df000104 	addi	fp,sp,4
	cardsDealt++;
   10cdc:	d0a6bc17 	ldw	r2,-25872(gp)
   10ce0:	10800044 	addi	r2,r2,1
   10ce4:	d0a6bc15 	stw	r2,-25872(gp)
	int random_num = IORD_ALTERA_AVALON_PIO_DATA(RANDOMS_BASE);
   10ce8:	008000b4 	movhi	r2,2
   10cec:	10843004 	addi	r2,r2,4288
   10cf0:	10800037 	ldwio	r2,0(r2)
   10cf4:	e0bfff15 	stw	r2,-4(fp)
	return abs(random_num % 52);
   10cf8:	e0bfff17 	ldw	r2,-4(fp)
   10cfc:	01400d04 	movi	r5,52
   10d00:	1009883a 	mov	r4,r2
   10d04:	00115900 	call	11590 <__modsi3>
   10d08:	1000010e 	bge	r2,zero,10d10 <generateRandomCard+0x44>
   10d0c:	0085c83a 	sub	r2,zero,r2
}
   10d10:	e037883a 	mov	sp,fp
   10d14:	dfc00117 	ldw	ra,4(sp)
   10d18:	df000017 	ldw	fp,0(sp)
   10d1c:	dec00204 	addi	sp,sp,8
   10d20:	f800283a 	ret

00010d24 <updateDeck>:
void updateDeck(int cardIdx)
{
   10d24:	defffd04 	addi	sp,sp,-12
   10d28:	dfc00215 	stw	ra,8(sp)
   10d2c:	df000115 	stw	fp,4(sp)
   10d30:	df000104 	addi	fp,sp,4
   10d34:	e13fff15 	stw	r4,-4(fp)
	// set 0 -> 1 in cardDeck array
	cardDeck[cardIdx] = 1;
   10d38:	008000b4 	movhi	r2,2
   10d3c:	10a8bd04 	addi	r2,r2,-23820
   10d40:	e0ffff17 	ldw	r3,-4(fp)
   10d44:	18c7883a 	add	r3,r3,r3
   10d48:	18c7883a 	add	r3,r3,r3
   10d4c:	10c5883a 	add	r2,r2,r3
   10d50:	00c00044 	movi	r3,1
   10d54:	10c00015 	stw	r3,0(r2)
	if (cardsDealt == 47)
   10d58:	d0a6bc17 	ldw	r2,-25872(gp)
   10d5c:	10800bd8 	cmpnei	r2,r2,47
   10d60:	1000021e 	bne	r2,zero,10d6c <updateDeck+0x48>
	{
		resetDeck();
   10d64:	0010d840 	call	10d84 <resetDeck>
	}
	return;
   10d68:	0001883a 	nop
   10d6c:	0001883a 	nop
}
   10d70:	e037883a 	mov	sp,fp
   10d74:	dfc00117 	ldw	ra,4(sp)
   10d78:	df000017 	ldw	fp,0(sp)
   10d7c:	dec00204 	addi	sp,sp,8
   10d80:	f800283a 	ret

00010d84 <resetDeck>:
void resetDeck(void)
{
   10d84:	defffe04 	addi	sp,sp,-8
   10d88:	df000115 	stw	fp,4(sp)
   10d8c:	df000104 	addi	fp,sp,4
	// set all indicies of cardDeck array back to 0
	for (int i = 0; i < 52; i++)
   10d90:	e03fff15 	stw	zero,-4(fp)
   10d94:	00000a06 	br	10dc0 <resetDeck+0x3c>
	{
		cardDeck[i] = 0;
   10d98:	008000b4 	movhi	r2,2
   10d9c:	10a8bd04 	addi	r2,r2,-23820
   10da0:	e0ffff17 	ldw	r3,-4(fp)
   10da4:	18c7883a 	add	r3,r3,r3
   10da8:	18c7883a 	add	r3,r3,r3
   10dac:	10c5883a 	add	r2,r2,r3
   10db0:	10000015 	stw	zero,0(r2)
	return;
}
void resetDeck(void)
{
	// set all indicies of cardDeck array back to 0
	for (int i = 0; i < 52; i++)
   10db4:	e0bfff17 	ldw	r2,-4(fp)
   10db8:	10800044 	addi	r2,r2,1
   10dbc:	e0bfff15 	stw	r2,-4(fp)
   10dc0:	e0bfff17 	ldw	r2,-4(fp)
   10dc4:	10800d10 	cmplti	r2,r2,52
   10dc8:	103ff31e 	bne	r2,zero,10d98 <_gp+0xffff05cc>
	{
		cardDeck[i] = 0;
	}
	return;
   10dcc:	0001883a 	nop
}
   10dd0:	e037883a 	mov	sp,fp
   10dd4:	df000017 	ldw	fp,0(sp)
   10dd8:	dec00104 	addi	sp,sp,4
   10ddc:	f800283a 	ret

00010de0 <translateCardValue>:
int translateCardValue(int cardIdx)
{
   10de0:	defffd04 	addi	sp,sp,-12
   10de4:	df000215 	stw	fp,8(sp)
   10de8:	df000204 	addi	fp,sp,8
   10dec:	e13fff15 	stw	r4,-4(fp)
	int cardValue = cardValues[cardIdx] - 48;
   10df0:	00800074 	movhi	r2,1
   10df4:	109b5904 	addi	r2,r2,28004
   10df8:	e0ffff17 	ldw	r3,-4(fp)
   10dfc:	10c5883a 	add	r2,r2,r3
   10e00:	10800003 	ldbu	r2,0(r2)
   10e04:	10803fcc 	andi	r2,r2,255
   10e08:	1080201c 	xori	r2,r2,128
   10e0c:	10bfe004 	addi	r2,r2,-128
   10e10:	10bff404 	addi	r2,r2,-48
   10e14:	e0bffe15 	stw	r2,-8(fp)
	if (cardValue == 17)
   10e18:	e0bffe17 	ldw	r2,-8(fp)
   10e1c:	10800458 	cmpnei	r2,r2,17
   10e20:	1000031e 	bne	r2,zero,10e30 <translateCardValue+0x50>
	{
		cardValue = 11;
   10e24:	008002c4 	movi	r2,11
   10e28:	e0bffe15 	stw	r2,-8(fp)
   10e2c:	00000506 	br	10e44 <translateCardValue+0x64>
	}
	else if (cardValue > 11)
   10e30:	e0bffe17 	ldw	r2,-8(fp)
   10e34:	10800310 	cmplti	r2,r2,12
   10e38:	1000021e 	bne	r2,zero,10e44 <translateCardValue+0x64>
	{
		cardValue = 10;
   10e3c:	00800284 	movi	r2,10
   10e40:	e0bffe15 	stw	r2,-8(fp)
	}
	return cardValue;
   10e44:	e0bffe17 	ldw	r2,-8(fp)
}
   10e48:	e037883a 	mov	sp,fp
   10e4c:	df000017 	ldw	fp,0(sp)
   10e50:	dec00104 	addi	sp,sp,4
   10e54:	f800283a 	ret

00010e58 <displayPlayerSum>:
void displayPlayerSum(void)
{
   10e58:	defffb04 	addi	sp,sp,-20
   10e5c:	dfc00415 	stw	ra,16(sp)
   10e60:	df000315 	stw	fp,12(sp)
   10e64:	df000304 	addi	fp,sp,12
	// display to HEX7 and HEX6
	int ones = playerSum % 10;
   10e68:	d0a6ba17 	ldw	r2,-25880(gp)
   10e6c:	01400284 	movi	r5,10
   10e70:	1009883a 	mov	r4,r2
   10e74:	00115900 	call	11590 <__modsi3>
   10e78:	e0bffd15 	stw	r2,-12(fp)
	int tens = playerSum / 10;
   10e7c:	d0a6ba17 	ldw	r2,-25880(gp)
   10e80:	01400284 	movi	r5,10
   10e84:	1009883a 	mov	r4,r2
   10e88:	001150c0 	call	1150c <__divsi3>
   10e8c:	e0bffe15 	stw	r2,-8(fp)
	int hexVal;
	hexVal = sevenSegmentConversion(ones);
   10e90:	e13ffd17 	ldw	r4,-12(fp)
   10e94:	0010f680 	call	10f68 <sevenSegmentConversion>
   10e98:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(SEV_SEG_6_BASE, hexVal);
   10e9c:	008000b4 	movhi	r2,2
   10ea0:	10841804 	addi	r2,r2,4192
   10ea4:	e0ffff17 	ldw	r3,-4(fp)
   10ea8:	10c00035 	stwio	r3,0(r2)
	hexVal = sevenSegmentConversion(tens);
   10eac:	e13ffe17 	ldw	r4,-8(fp)
   10eb0:	0010f680 	call	10f68 <sevenSegmentConversion>
   10eb4:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(SEV_SEG_7_BASE, hexVal);
   10eb8:	008000b4 	movhi	r2,2
   10ebc:	10841404 	addi	r2,r2,4176
   10ec0:	e0ffff17 	ldw	r3,-4(fp)
   10ec4:	10c00035 	stwio	r3,0(r2)
	return;
   10ec8:	0001883a 	nop
}
   10ecc:	e037883a 	mov	sp,fp
   10ed0:	dfc00117 	ldw	ra,4(sp)
   10ed4:	df000017 	ldw	fp,0(sp)
   10ed8:	dec00204 	addi	sp,sp,8
   10edc:	f800283a 	ret

00010ee0 <displayDealerSum>:
void displayDealerSum(void)
{
   10ee0:	defffb04 	addi	sp,sp,-20
   10ee4:	dfc00415 	stw	ra,16(sp)
   10ee8:	df000315 	stw	fp,12(sp)
   10eec:	df000304 	addi	fp,sp,12
	// display to HEX5 and HEX4
	int ones = dealerSum % 10;
   10ef0:	d0a6b917 	ldw	r2,-25884(gp)
   10ef4:	01400284 	movi	r5,10
   10ef8:	1009883a 	mov	r4,r2
   10efc:	00115900 	call	11590 <__modsi3>
   10f00:	e0bffd15 	stw	r2,-12(fp)
	int tens = dealerSum / 10;
   10f04:	d0a6b917 	ldw	r2,-25884(gp)
   10f08:	01400284 	movi	r5,10
   10f0c:	1009883a 	mov	r4,r2
   10f10:	001150c0 	call	1150c <__divsi3>
   10f14:	e0bffe15 	stw	r2,-8(fp)
	int hexVal;
	hexVal = sevenSegmentConversion(ones);
   10f18:	e13ffd17 	ldw	r4,-12(fp)
   10f1c:	0010f680 	call	10f68 <sevenSegmentConversion>
   10f20:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(SEV_SEG_4_BASE, hexVal);
   10f24:	008000b4 	movhi	r2,2
   10f28:	10842004 	addi	r2,r2,4224
   10f2c:	e0ffff17 	ldw	r3,-4(fp)
   10f30:	10c00035 	stwio	r3,0(r2)
	hexVal = sevenSegmentConversion(tens);
   10f34:	e13ffe17 	ldw	r4,-8(fp)
   10f38:	0010f680 	call	10f68 <sevenSegmentConversion>
   10f3c:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(SEV_SEG_5_BASE, hexVal);
   10f40:	008000b4 	movhi	r2,2
   10f44:	10841c04 	addi	r2,r2,4208
   10f48:	e0ffff17 	ldw	r3,-4(fp)
   10f4c:	10c00035 	stwio	r3,0(r2)
	return;
   10f50:	0001883a 	nop
}
   10f54:	e037883a 	mov	sp,fp
   10f58:	dfc00117 	ldw	ra,4(sp)
   10f5c:	df000017 	ldw	fp,0(sp)
   10f60:	dec00204 	addi	sp,sp,8
   10f64:	f800283a 	ret

00010f68 <sevenSegmentConversion>:
int sevenSegmentConversion(int digit)
{
   10f68:	defffd04 	addi	sp,sp,-12
   10f6c:	df000215 	stw	fp,8(sp)
   10f70:	df000204 	addi	fp,sp,8
   10f74:	e13fff15 	stw	r4,-4(fp)
	int hexVal;
	switch (digit)
   10f78:	e0bfff17 	ldw	r2,-4(fp)
   10f7c:	108002a8 	cmpgeui	r2,r2,10
   10f80:	10002f1e 	bne	r2,zero,11040 <sevenSegmentConversion+0xd8>
   10f84:	e0bfff17 	ldw	r2,-4(fp)
   10f88:	100690ba 	slli	r3,r2,2
   10f8c:	00800074 	movhi	r2,1
   10f90:	1083e804 	addi	r2,r2,4000
   10f94:	1885883a 	add	r2,r3,r2
   10f98:	10800017 	ldw	r2,0(r2)
   10f9c:	1000683a 	jmp	r2
   10fa0:	00011034 	movhi	zero,1088
   10fa4:	00011028 	cmpgeui	zero,zero,1088
   10fa8:	0001101c 	xori	zero,zero,1088
   10fac:	00011010 	cmplti	zero,zero,1088
   10fb0:	00011004 	movi	zero,1088
   10fb4:	00010ff8 	rdprs	zero,zero,1087
   10fb8:	00010fec 	andhi	zero,zero,1087
   10fbc:	00010fe0 	cmpeqi	zero,zero,1087
   10fc0:	00010fd4 	movui	zero,1087
   10fc4:	00010fc8 	cmpgei	zero,zero,1087
	{
	case 9: // 00010010
		hexVal = 0x90;
   10fc8:	00802404 	movi	r2,144
   10fcc:	e0bffe15 	stw	r2,-8(fp)
		break;
   10fd0:	00001c06 	br	11044 <sevenSegmentConversion+0xdc>
	case 8:
		hexVal = 0x80;
   10fd4:	00802004 	movi	r2,128
   10fd8:	e0bffe15 	stw	r2,-8(fp)
		break;
   10fdc:	00001906 	br	11044 <sevenSegmentConversion+0xdc>
	case 7:
		hexVal = 0xF8;
   10fe0:	00803e04 	movi	r2,248
   10fe4:	e0bffe15 	stw	r2,-8(fp)
		break;
   10fe8:	00001606 	br	11044 <sevenSegmentConversion+0xdc>
	case 6:
		hexVal = 0x82;
   10fec:	00802084 	movi	r2,130
   10ff0:	e0bffe15 	stw	r2,-8(fp)
		break;
   10ff4:	00001306 	br	11044 <sevenSegmentConversion+0xdc>
	case 5:
		hexVal = 0x92;
   10ff8:	00802484 	movi	r2,146
   10ffc:	e0bffe15 	stw	r2,-8(fp)
		break;
   11000:	00001006 	br	11044 <sevenSegmentConversion+0xdc>
	case 4:
		hexVal = 0x99;
   11004:	00802644 	movi	r2,153
   11008:	e0bffe15 	stw	r2,-8(fp)
		break;
   1100c:	00000d06 	br	11044 <sevenSegmentConversion+0xdc>
	case 3:
		hexVal = 0xB0;
   11010:	00802c04 	movi	r2,176
   11014:	e0bffe15 	stw	r2,-8(fp)
		break;
   11018:	00000a06 	br	11044 <sevenSegmentConversion+0xdc>
	case 2:
		hexVal = 0xA4;
   1101c:	00802904 	movi	r2,164
   11020:	e0bffe15 	stw	r2,-8(fp)
		break;
   11024:	00000706 	br	11044 <sevenSegmentConversion+0xdc>
	case 1:
		hexVal = 0xF9;
   11028:	00803e44 	movi	r2,249
   1102c:	e0bffe15 	stw	r2,-8(fp)
		break;
   11030:	00000406 	br	11044 <sevenSegmentConversion+0xdc>
	case 0:
		hexVal = 0xC0;
   11034:	00803004 	movi	r2,192
   11038:	e0bffe15 	stw	r2,-8(fp)
		break;
   1103c:	00000106 	br	11044 <sevenSegmentConversion+0xdc>
	default:
		break;
   11040:	0001883a 	nop
	}
	return hexVal;
   11044:	e0bffe17 	ldw	r2,-8(fp)
}
   11048:	e037883a 	mov	sp,fp
   1104c:	df000017 	ldw	fp,0(sp)
   11050:	dec00104 	addi	sp,sp,4
   11054:	f800283a 	ret

00011058 <hit>:

/************************************************************
 Player Actions
*************************************************************/
void hit(void)
{
   11058:	defff904 	addi	sp,sp,-28
   1105c:	dfc00615 	stw	ra,24(sp)
   11060:	df000515 	stw	fp,20(sp)
   11064:	df000504 	addi	fp,sp,20
	IOWR_ALTERA_AVALON_PIO_DATA(SEV_SEG_0_BASE, 0xFF);
   11068:	00c03fc4 	movi	r3,255
   1106c:	008000b4 	movhi	r2,2
   11070:	10843404 	addi	r2,r2,4304
   11074:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(SEV_SEG_1_BASE, 0x87);
   11078:	00c021c4 	movi	r3,135
   1107c:	008000b4 	movhi	r2,2
   11080:	10842c04 	addi	r2,r2,4272
   11084:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(SEV_SEG_2_BASE, 0xCF);
   11088:	00c033c4 	movi	r3,207
   1108c:	008000b4 	movhi	r2,2
   11090:	10842804 	addi	r2,r2,4256
   11094:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(SEV_SEG_3_BASE, 0x89);
   11098:	00c02244 	movi	r3,137
   1109c:	008000b4 	movhi	r2,2
   110a0:	10842404 	addi	r2,r2,4240
   110a4:	10c00035 	stwio	r3,0(r2)
	// Generate Random Card
	int card = generateRandomCard();
   110a8:	0010ccc0 	call	10ccc <generateRandomCard>
   110ac:	e0bffb15 	stw	r2,-20(fp)

	// Check and Update Deck
	while (cardDeck[card] == 1)
   110b0:	00000206 	br	110bc <hit+0x64>
	{
		card = generateRandomCard();
   110b4:	0010ccc0 	call	10ccc <generateRandomCard>
   110b8:	e0bffb15 	stw	r2,-20(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(SEV_SEG_3_BASE, 0x89);
	// Generate Random Card
	int card = generateRandomCard();

	// Check and Update Deck
	while (cardDeck[card] == 1)
   110bc:	008000b4 	movhi	r2,2
   110c0:	10a8bd04 	addi	r2,r2,-23820
   110c4:	e0fffb17 	ldw	r3,-20(fp)
   110c8:	18c7883a 	add	r3,r3,r3
   110cc:	18c7883a 	add	r3,r3,r3
   110d0:	10c5883a 	add	r2,r2,r3
   110d4:	10800017 	ldw	r2,0(r2)
   110d8:	10800060 	cmpeqi	r2,r2,1
   110dc:	103ff51e 	bne	r2,zero,110b4 <_gp+0xffff08e8>
	{
		card = generateRandomCard();
	}
	updateDeck(card);
   110e0:	e13ffb17 	ldw	r4,-20(fp)
   110e4:	0010d240 	call	10d24 <updateDeck>

	// Char to Int
	int cardValue = translateCardValue(card);
   110e8:	e13ffb17 	ldw	r4,-20(fp)
   110ec:	0010de00 	call	10de0 <translateCardValue>
   110f0:	e0bffc15 	stw	r2,-16(fp)

	char msg[10];
	itoa(cardValue, msg, 10);
   110f4:	e0bffd04 	addi	r2,fp,-12
   110f8:	01800284 	movi	r6,10
   110fc:	100b883a 	mov	r5,r2
   11100:	e13ffc17 	ldw	r4,-16(fp)
   11104:	00117280 	call	11728 <itoa>
	alt_putstr("[PLAYER] - ");
   11108:	01000074 	movhi	r4,1
   1110c:	211b4604 	addi	r4,r4,27928
   11110:	0014ac40 	call	14ac4 <alt_putstr>
	alt_putstr(msg);
   11114:	e0bffd04 	addi	r2,fp,-12
   11118:	1009883a 	mov	r4,r2
   1111c:	0014ac40 	call	14ac4 <alt_putstr>
	alt_putstr("\n");
   11120:	01000074 	movhi	r4,1
   11124:	211b3604 	addi	r4,r4,27864
   11128:	0014ac40 	call	14ac4 <alt_putstr>

	// Update playerSum
	playerSum = playerSum + cardValue;
   1112c:	d0e6ba17 	ldw	r3,-25880(gp)
   11130:	e0bffc17 	ldw	r2,-16(fp)
   11134:	1885883a 	add	r2,r3,r2
   11138:	d0a6ba15 	stw	r2,-25880(gp)
	displayPlayerSum();
   1113c:	0010e580 	call	10e58 <displayPlayerSum>
	return;
   11140:	0001883a 	nop
}
   11144:	e037883a 	mov	sp,fp
   11148:	dfc00117 	ldw	ra,4(sp)
   1114c:	df000017 	ldw	fp,0(sp)
   11150:	dec00204 	addi	sp,sp,8
   11154:	f800283a 	ret

00011158 <stay>:
void stay(void)
{ // Nothing Happens
   11158:	deffff04 	addi	sp,sp,-4
   1115c:	df000015 	stw	fp,0(sp)
   11160:	d839883a 	mov	fp,sp
	IOWR_ALTERA_AVALON_PIO_DATA(SEV_SEG_0_BASE, 0x91);
   11164:	00c02444 	movi	r3,145
   11168:	008000b4 	movhi	r2,2
   1116c:	10843404 	addi	r2,r2,4304
   11170:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(SEV_SEG_1_BASE, 0x88);
   11174:	00c02204 	movi	r3,136
   11178:	008000b4 	movhi	r2,2
   1117c:	10842c04 	addi	r2,r2,4272
   11180:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(SEV_SEG_2_BASE, 0x87);
   11184:	00c021c4 	movi	r3,135
   11188:	008000b4 	movhi	r2,2
   1118c:	10842804 	addi	r2,r2,4256
   11190:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(SEV_SEG_3_BASE, 0x92);
   11194:	00c02484 	movi	r3,146
   11198:	008000b4 	movhi	r2,2
   1119c:	10842404 	addi	r2,r2,4240
   111a0:	10c00035 	stwio	r3,0(r2)
	return;
   111a4:	0001883a 	nop
}
   111a8:	e037883a 	mov	sp,fp
   111ac:	df000017 	ldw	fp,0(sp)
   111b0:	dec00104 	addi	sp,sp,4
   111b4:	f800283a 	ret

000111b8 <LCDInit>:

int charCount = 0;
int bits;

void LCDInit()
{
   111b8:	defffd04 	addi	sp,sp,-12
   111bc:	dfc00215 	stw	ra,8(sp)
   111c0:	df000115 	stw	fp,4(sp)
   111c4:	df000104 	addi	fp,sp,4
	// IOWR_ALTERA_AVALON_PIO_DATA(LCD_BASE, 0);
	//  Turn on LCD and wait more than 15 ms
	LCDWrite(0x800);
   111c8:	01020004 	movi	r4,2048
   111cc:	00112580 	call	11258 <LCDWrite>
	delay1ms(15);
   111d0:	010003c4 	movi	r4,15
   111d4:	00114a80 	call	114a8 <delay1ms>

	// Function set (Interface is 8 bits long) then more than 4.1ms delay
	//  RS RW DB7 DB6 DB5 DB4 DB3 DB2 DB1 DB0
	//  0  0   0   0   1   1   *   *   *   *
	for( int i = 0; i < 4; i++)
   111d8:	e03fff15 	stw	zero,-4(fp)
   111dc:	00000506 	br	111f4 <LCDInit+0x3c>
	{
		LCDWrite(0x83B);
   111e0:	01020ec4 	movi	r4,2107
   111e4:	00112580 	call	11258 <LCDWrite>
	delay1ms(15);

	// Function set (Interface is 8 bits long) then more than 4.1ms delay
	//  RS RW DB7 DB6 DB5 DB4 DB3 DB2 DB1 DB0
	//  0  0   0   0   1   1   *   *   *   *
	for( int i = 0; i < 4; i++)
   111e8:	e0bfff17 	ldw	r2,-4(fp)
   111ec:	10800044 	addi	r2,r2,1
   111f0:	e0bfff15 	stw	r2,-4(fp)
   111f4:	e0bfff17 	ldw	r2,-4(fp)
   111f8:	10800110 	cmplti	r2,r2,4
   111fc:	103ff81e 	bne	r2,zero,111e0 <_gp+0xffff0a14>
	{
		LCDWrite(0x83B);
	}
	LCDWrite(0x801);
   11200:	01020044 	movi	r4,2049
   11204:	00112580 	call	11258 <LCDWrite>
	delay1ms(1);
   11208:	01000044 	movi	r4,1
   1120c:	00114a80 	call	114a8 <delay1ms>

	LCDWrite(0x80C);
   11210:	01020304 	movi	r4,2060
   11214:	00112580 	call	11258 <LCDWrite>
	delay1ms(1);
   11218:	01000044 	movi	r4,1
   1121c:	00114a80 	call	114a8 <delay1ms>

	LCDWrite(0x806);
   11220:	01020184 	movi	r4,2054
   11224:	00112580 	call	11258 <LCDWrite>
	delay1ms(1);
   11228:	01000044 	movi	r4,1
   1122c:	00114a80 	call	114a8 <delay1ms>

	LCDWrite(0x880);
   11230:	01022004 	movi	r4,2176
   11234:	00112580 	call	11258 <LCDWrite>
	delay1ms(1);
   11238:	01000044 	movi	r4,1
   1123c:	00114a80 	call	114a8 <delay1ms>
}
   11240:	0001883a 	nop
   11244:	e037883a 	mov	sp,fp
   11248:	dfc00117 	ldw	ra,4(sp)
   1124c:	df000017 	ldw	fp,0(sp)
   11250:	dec00204 	addi	sp,sp,8
   11254:	f800283a 	ret

00011258 <LCDWrite>:

void LCDWrite(int data)
{
   11258:	defffd04 	addi	sp,sp,-12
   1125c:	dfc00215 	stw	ra,8(sp)
   11260:	df000115 	stw	fp,4(sp)
   11264:	df000104 	addi	fp,sp,4
   11268:	e13fff15 	stw	r4,-4(fp)
	data = data & 0x0EFF;
   1126c:	e0bfff17 	ldw	r2,-4(fp)
   11270:	1083bfcc 	andi	r2,r2,3839
   11274:	e0bfff15 	stw	r2,-4(fp)

	IOWR_ALTERA_AVALON_PIO_DATA(LCD_BASE, data);
   11278:	008000b4 	movhi	r2,2
   1127c:	10840004 	addi	r2,r2,4096
   11280:	e0ffff17 	ldw	r3,-4(fp)
   11284:	10c00035 	stwio	r3,0(r2)

	bits = IORD_ALTERA_AVALON_PIO_DATA(LCD_BASE);
   11288:	008000b4 	movhi	r2,2
   1128c:	10840004 	addi	r2,r2,4096
   11290:	10800037 	ldwio	r2,0(r2)
   11294:	d0a6be15 	stw	r2,-25864(gp)
	bits = bits | 0x0100;
   11298:	d0a6be17 	ldw	r2,-25864(gp)
   1129c:	10804014 	ori	r2,r2,256
   112a0:	d0a6be15 	stw	r2,-25864(gp)
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_BASE, bits);
   112a4:	d0e6be17 	ldw	r3,-25864(gp)
   112a8:	008000b4 	movhi	r2,2
   112ac:	10840004 	addi	r2,r2,4096
   112b0:	10c00035 	stwio	r3,0(r2)
	delay1ms(1);
   112b4:	01000044 	movi	r4,1
   112b8:	00114a80 	call	114a8 <delay1ms>
	//   neorv32_gpio_pin_set(LCD_EN_PIN);
	//   neorv32_cpu_delay_ms(1);

	bits = IORD_ALTERA_AVALON_PIO_DATA(LCD_BASE);
   112bc:	008000b4 	movhi	r2,2
   112c0:	10840004 	addi	r2,r2,4096
   112c4:	10800037 	ldwio	r2,0(r2)
   112c8:	d0a6be15 	stw	r2,-25864(gp)
	bits = bits & ~0x0100;
   112cc:	d0e6be17 	ldw	r3,-25864(gp)
   112d0:	00bfbfc4 	movi	r2,-257
   112d4:	1884703a 	and	r2,r3,r2
   112d8:	d0a6be15 	stw	r2,-25864(gp)
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_BASE, bits);
   112dc:	d0e6be17 	ldw	r3,-25864(gp)
   112e0:	008000b4 	movhi	r2,2
   112e4:	10840004 	addi	r2,r2,4096
   112e8:	10c00035 	stwio	r3,0(r2)
	delay1ms(1);
   112ec:	01000044 	movi	r4,1
   112f0:	00114a80 	call	114a8 <delay1ms>
	//   neorv32_gpio_pin_clr(LCD_EN_PIN);
	//   neorv32_cpu_delay_ms(1);
}
   112f4:	0001883a 	nop
   112f8:	e037883a 	mov	sp,fp
   112fc:	dfc00117 	ldw	ra,4(sp)
   11300:	df000017 	ldw	fp,0(sp)
   11304:	dec00204 	addi	sp,sp,8
   11308:	f800283a 	ret

0001130c <LCDClear>:

void LCDClear()
{
   1130c:	defffe04 	addi	sp,sp,-8
   11310:	dfc00115 	stw	ra,4(sp)
   11314:	df000015 	stw	fp,0(sp)
   11318:	d839883a 	mov	fp,sp
	charCount = 0;
   1131c:	d026bd15 	stw	zero,-25868(gp)
	LCDWrite(0x801);
   11320:	01020044 	movi	r4,2049
   11324:	00112580 	call	11258 <LCDWrite>
	delay1ms(2);
   11328:	01000084 	movi	r4,2
   1132c:	00114a80 	call	114a8 <delay1ms>
}
   11330:	0001883a 	nop
   11334:	e037883a 	mov	sp,fp
   11338:	dfc00117 	ldw	ra,4(sp)
   1133c:	df000017 	ldw	fp,0(sp)
   11340:	dec00204 	addi	sp,sp,8
   11344:	f800283a 	ret

00011348 <LCDWriteChar>:

void LCDWriteChar(char c)
{
   11348:	defffd04 	addi	sp,sp,-12
   1134c:	dfc00215 	stw	ra,8(sp)
   11350:	df000115 	stw	fp,4(sp)
   11354:	df000104 	addi	fp,sp,4
   11358:	2005883a 	mov	r2,r4
   1135c:	e0bfff05 	stb	r2,-4(fp)
	charCount++;
   11360:	d0a6bd17 	ldw	r2,-25868(gp)
   11364:	10800044 	addi	r2,r2,1
   11368:	d0a6bd15 	stw	r2,-25868(gp)

	// If the amount of characters overrides the first line, move to second
	if (charCount == 17)
   1136c:	d0a6bd17 	ldw	r2,-25868(gp)
   11370:	10800458 	cmpnei	r2,r2,17
   11374:	1000031e 	bne	r2,zero,11384 <LCDWriteChar+0x3c>
	{
		LCDWrite(0x8C0); // move DDRAM to 0x40 which is the first character of second line
   11378:	01023004 	movi	r4,2240
   1137c:	00112580 	call	11258 <LCDWrite>
   11380:	00000606 	br	1139c <LCDWriteChar+0x54>
	}
	else if (charCount == 33)
   11384:	d0a6bd17 	ldw	r2,-25868(gp)
   11388:	10800858 	cmpnei	r2,r2,33
   1138c:	1000031e 	bne	r2,zero,1139c <LCDWriteChar+0x54>
	{
		LCDWrite(0x880); // move DDRAM to 0x00 which is first character first line
   11390:	01022004 	movi	r4,2176
   11394:	00112580 	call	11258 <LCDWrite>
		charCount = 0;
   11398:	d026bd15 	stw	zero,-25868(gp)
	}

	// Write character to the screen, the data lines gets the ascii value of the character
	// RS RW DB7-DB0
	// 1  0   Char
	LCDWrite(0xC00 | (int)c);
   1139c:	e0bfff07 	ldb	r2,-4(fp)
   113a0:	10830014 	ori	r2,r2,3072
   113a4:	1009883a 	mov	r4,r2
   113a8:	00112580 	call	11258 <LCDWrite>
}
   113ac:	0001883a 	nop
   113b0:	e037883a 	mov	sp,fp
   113b4:	dfc00117 	ldw	ra,4(sp)
   113b8:	df000017 	ldw	fp,0(sp)
   113bc:	dec00204 	addi	sp,sp,8
   113c0:	f800283a 	ret

000113c4 <LCDWriteString>:

void LCDWriteString(char *str, int length)
{
   113c4:	defffb04 	addi	sp,sp,-20
   113c8:	dfc00415 	stw	ra,16(sp)
   113cc:	df000315 	stw	fp,12(sp)
   113d0:	df000304 	addi	fp,sp,12
   113d4:	e13ffe15 	stw	r4,-8(fp)
   113d8:	e17fff15 	stw	r5,-4(fp)
	int i;

	for (i = 0; i < length; i++)
   113dc:	e03ffd15 	stw	zero,-12(fp)
   113e0:	00001706 	br	11440 <LCDWriteString+0x7c>
	{
		if (str[i] == '\0')
   113e4:	e0bffd17 	ldw	r2,-12(fp)
   113e8:	e0fffe17 	ldw	r3,-8(fp)
   113ec:	1885883a 	add	r2,r3,r2
   113f0:	10800003 	ldbu	r2,0(r2)
   113f4:	10803fcc 	andi	r2,r2,255
   113f8:	1080201c 	xori	r2,r2,128
   113fc:	10bfe004 	addi	r2,r2,-128
   11400:	1000031e 	bne	r2,zero,11410 <LCDWriteString+0x4c>
			i = length;
   11404:	e0bfff17 	ldw	r2,-4(fp)
   11408:	e0bffd15 	stw	r2,-12(fp)
   1140c:	00000906 	br	11434 <LCDWriteString+0x70>
		else
			LCDWriteChar(str[i]);
   11410:	e0bffd17 	ldw	r2,-12(fp)
   11414:	e0fffe17 	ldw	r3,-8(fp)
   11418:	1885883a 	add	r2,r3,r2
   1141c:	10800003 	ldbu	r2,0(r2)
   11420:	10803fcc 	andi	r2,r2,255
   11424:	1080201c 	xori	r2,r2,128
   11428:	10bfe004 	addi	r2,r2,-128
   1142c:	1009883a 	mov	r4,r2
   11430:	00113480 	call	11348 <LCDWriteChar>

void LCDWriteString(char *str, int length)
{
	int i;

	for (i = 0; i < length; i++)
   11434:	e0bffd17 	ldw	r2,-12(fp)
   11438:	10800044 	addi	r2,r2,1
   1143c:	e0bffd15 	stw	r2,-12(fp)
   11440:	e0fffd17 	ldw	r3,-12(fp)
   11444:	e0bfff17 	ldw	r2,-4(fp)
   11448:	18bfe616 	blt	r3,r2,113e4 <_gp+0xffff0c18>
		if (str[i] == '\0')
			i = length;
		else
			LCDWriteChar(str[i]);
	}
}
   1144c:	0001883a 	nop
   11450:	e037883a 	mov	sp,fp
   11454:	dfc00117 	ldw	ra,4(sp)
   11458:	df000017 	ldw	fp,0(sp)
   1145c:	dec00204 	addi	sp,sp,8
   11460:	f800283a 	ret

00011464 <setPosition>:

void setPosition(int pos)
{
   11464:	defffd04 	addi	sp,sp,-12
   11468:	dfc00215 	stw	ra,8(sp)
   1146c:	df000115 	stw	fp,4(sp)
   11470:	df000104 	addi	fp,sp,4
   11474:	e13fff15 	stw	r4,-4(fp)
	LCDWrite(0x880 | pos);
   11478:	e0bfff17 	ldw	r2,-4(fp)
   1147c:	10822014 	ori	r2,r2,2176
   11480:	1009883a 	mov	r4,r2
   11484:	00112580 	call	11258 <LCDWrite>
	delay1ms(1);
   11488:	01000044 	movi	r4,1
   1148c:	00114a80 	call	114a8 <delay1ms>
}
   11490:	0001883a 	nop
   11494:	e037883a 	mov	sp,fp
   11498:	dfc00117 	ldw	ra,4(sp)
   1149c:	df000017 	ldw	fp,0(sp)
   114a0:	dec00204 	addi	sp,sp,8
   114a4:	f800283a 	ret

000114a8 <delay1ms>:

void delay1ms(int ms)
{
   114a8:	defffc04 	addi	sp,sp,-16
   114ac:	df000315 	stw	fp,12(sp)
   114b0:	df000304 	addi	fp,sp,12
   114b4:	e13fff15 	stw	r4,-4(fp)
	for (int i = 0; i < ms; i++)
   114b8:	e03ffd15 	stw	zero,-12(fp)
   114bc:	00000b06 	br	114ec <delay1ms+0x44>
	{
		int count = 0;
   114c0:	e03ffe15 	stw	zero,-8(fp)
		while(count < 5000)
   114c4:	00000306 	br	114d4 <delay1ms+0x2c>
		{
			count++;
   114c8:	e0bffe17 	ldw	r2,-8(fp)
   114cc:	10800044 	addi	r2,r2,1
   114d0:	e0bffe15 	stw	r2,-8(fp)
void delay1ms(int ms)
{
	for (int i = 0; i < ms; i++)
	{
		int count = 0;
		while(count < 5000)
   114d4:	e0bffe17 	ldw	r2,-8(fp)
   114d8:	1084e210 	cmplti	r2,r2,5000
   114dc:	103ffa1e 	bne	r2,zero,114c8 <_gp+0xffff0cfc>
	delay1ms(1);
}

void delay1ms(int ms)
{
	for (int i = 0; i < ms; i++)
   114e0:	e0bffd17 	ldw	r2,-12(fp)
   114e4:	10800044 	addi	r2,r2,1
   114e8:	e0bffd15 	stw	r2,-12(fp)
   114ec:	e0fffd17 	ldw	r3,-12(fp)
   114f0:	e0bfff17 	ldw	r2,-4(fp)
   114f4:	18bff216 	blt	r3,r2,114c0 <_gp+0xffff0cf4>
		while(count < 5000)
		{
			count++;
		}
	}
}
   114f8:	0001883a 	nop
   114fc:	e037883a 	mov	sp,fp
   11500:	df000017 	ldw	fp,0(sp)
   11504:	dec00104 	addi	sp,sp,4
   11508:	f800283a 	ret

0001150c <__divsi3>:
   1150c:	20001b16 	blt	r4,zero,1157c <__divsi3+0x70>
   11510:	000f883a 	mov	r7,zero
   11514:	28001616 	blt	r5,zero,11570 <__divsi3+0x64>
   11518:	200d883a 	mov	r6,r4
   1151c:	29001a2e 	bgeu	r5,r4,11588 <__divsi3+0x7c>
   11520:	00800804 	movi	r2,32
   11524:	00c00044 	movi	r3,1
   11528:	00000106 	br	11530 <__divsi3+0x24>
   1152c:	10000d26 	beq	r2,zero,11564 <__divsi3+0x58>
   11530:	294b883a 	add	r5,r5,r5
   11534:	10bfffc4 	addi	r2,r2,-1
   11538:	18c7883a 	add	r3,r3,r3
   1153c:	293ffb36 	bltu	r5,r4,1152c <_gp+0xffff0d60>
   11540:	0005883a 	mov	r2,zero
   11544:	18000726 	beq	r3,zero,11564 <__divsi3+0x58>
   11548:	0005883a 	mov	r2,zero
   1154c:	31400236 	bltu	r6,r5,11558 <__divsi3+0x4c>
   11550:	314dc83a 	sub	r6,r6,r5
   11554:	10c4b03a 	or	r2,r2,r3
   11558:	1806d07a 	srli	r3,r3,1
   1155c:	280ad07a 	srli	r5,r5,1
   11560:	183ffa1e 	bne	r3,zero,1154c <_gp+0xffff0d80>
   11564:	38000126 	beq	r7,zero,1156c <__divsi3+0x60>
   11568:	0085c83a 	sub	r2,zero,r2
   1156c:	f800283a 	ret
   11570:	014bc83a 	sub	r5,zero,r5
   11574:	39c0005c 	xori	r7,r7,1
   11578:	003fe706 	br	11518 <_gp+0xffff0d4c>
   1157c:	0109c83a 	sub	r4,zero,r4
   11580:	01c00044 	movi	r7,1
   11584:	003fe306 	br	11514 <_gp+0xffff0d48>
   11588:	00c00044 	movi	r3,1
   1158c:	003fee06 	br	11548 <_gp+0xffff0d7c>

00011590 <__modsi3>:
   11590:	20001716 	blt	r4,zero,115f0 <__modsi3+0x60>
   11594:	000f883a 	mov	r7,zero
   11598:	2005883a 	mov	r2,r4
   1159c:	28001216 	blt	r5,zero,115e8 <__modsi3+0x58>
   115a0:	2900162e 	bgeu	r5,r4,115fc <__modsi3+0x6c>
   115a4:	01800804 	movi	r6,32
   115a8:	00c00044 	movi	r3,1
   115ac:	00000106 	br	115b4 <__modsi3+0x24>
   115b0:	30000a26 	beq	r6,zero,115dc <__modsi3+0x4c>
   115b4:	294b883a 	add	r5,r5,r5
   115b8:	31bfffc4 	addi	r6,r6,-1
   115bc:	18c7883a 	add	r3,r3,r3
   115c0:	293ffb36 	bltu	r5,r4,115b0 <_gp+0xffff0de4>
   115c4:	18000526 	beq	r3,zero,115dc <__modsi3+0x4c>
   115c8:	1806d07a 	srli	r3,r3,1
   115cc:	11400136 	bltu	r2,r5,115d4 <__modsi3+0x44>
   115d0:	1145c83a 	sub	r2,r2,r5
   115d4:	280ad07a 	srli	r5,r5,1
   115d8:	183ffb1e 	bne	r3,zero,115c8 <_gp+0xffff0dfc>
   115dc:	38000126 	beq	r7,zero,115e4 <__modsi3+0x54>
   115e0:	0085c83a 	sub	r2,zero,r2
   115e4:	f800283a 	ret
   115e8:	014bc83a 	sub	r5,zero,r5
   115ec:	003fec06 	br	115a0 <_gp+0xffff0dd4>
   115f0:	0109c83a 	sub	r4,zero,r4
   115f4:	01c00044 	movi	r7,1
   115f8:	003fe706 	br	11598 <_gp+0xffff0dcc>
   115fc:	00c00044 	movi	r3,1
   11600:	003ff106 	br	115c8 <_gp+0xffff0dfc>

00011604 <__udivsi3>:
   11604:	200d883a 	mov	r6,r4
   11608:	2900152e 	bgeu	r5,r4,11660 <__udivsi3+0x5c>
   1160c:	28001416 	blt	r5,zero,11660 <__udivsi3+0x5c>
   11610:	00800804 	movi	r2,32
   11614:	00c00044 	movi	r3,1
   11618:	00000206 	br	11624 <__udivsi3+0x20>
   1161c:	10000e26 	beq	r2,zero,11658 <__udivsi3+0x54>
   11620:	28000516 	blt	r5,zero,11638 <__udivsi3+0x34>
   11624:	294b883a 	add	r5,r5,r5
   11628:	10bfffc4 	addi	r2,r2,-1
   1162c:	18c7883a 	add	r3,r3,r3
   11630:	293ffa36 	bltu	r5,r4,1161c <_gp+0xffff0e50>
   11634:	18000826 	beq	r3,zero,11658 <__udivsi3+0x54>
   11638:	0005883a 	mov	r2,zero
   1163c:	31400236 	bltu	r6,r5,11648 <__udivsi3+0x44>
   11640:	314dc83a 	sub	r6,r6,r5
   11644:	10c4b03a 	or	r2,r2,r3
   11648:	1806d07a 	srli	r3,r3,1
   1164c:	280ad07a 	srli	r5,r5,1
   11650:	183ffa1e 	bne	r3,zero,1163c <_gp+0xffff0e70>
   11654:	f800283a 	ret
   11658:	0005883a 	mov	r2,zero
   1165c:	f800283a 	ret
   11660:	00c00044 	movi	r3,1
   11664:	003ff406 	br	11638 <_gp+0xffff0e6c>

00011668 <__umodsi3>:
   11668:	2005883a 	mov	r2,r4
   1166c:	2900122e 	bgeu	r5,r4,116b8 <__umodsi3+0x50>
   11670:	28001116 	blt	r5,zero,116b8 <__umodsi3+0x50>
   11674:	01800804 	movi	r6,32
   11678:	00c00044 	movi	r3,1
   1167c:	00000206 	br	11688 <__umodsi3+0x20>
   11680:	30000c26 	beq	r6,zero,116b4 <__umodsi3+0x4c>
   11684:	28000516 	blt	r5,zero,1169c <__umodsi3+0x34>
   11688:	294b883a 	add	r5,r5,r5
   1168c:	31bfffc4 	addi	r6,r6,-1
   11690:	18c7883a 	add	r3,r3,r3
   11694:	293ffa36 	bltu	r5,r4,11680 <_gp+0xffff0eb4>
   11698:	18000626 	beq	r3,zero,116b4 <__umodsi3+0x4c>
   1169c:	1806d07a 	srli	r3,r3,1
   116a0:	11400136 	bltu	r2,r5,116a8 <__umodsi3+0x40>
   116a4:	1145c83a 	sub	r2,r2,r5
   116a8:	280ad07a 	srli	r5,r5,1
   116ac:	183ffb1e 	bne	r3,zero,1169c <_gp+0xffff0ed0>
   116b0:	f800283a 	ret
   116b4:	f800283a 	ret
   116b8:	00c00044 	movi	r3,1
   116bc:	003ff706 	br	1169c <_gp+0xffff0ed0>

000116c0 <__itoa>:
   116c0:	30bfff84 	addi	r2,r6,-2
   116c4:	00c00884 	movi	r3,34
   116c8:	18801436 	bltu	r3,r2,1171c <__itoa+0x5c>
   116cc:	defffe04 	addi	sp,sp,-8
   116d0:	dfc00115 	stw	ra,4(sp)
   116d4:	dc000015 	stw	r16,0(sp)
   116d8:	00800284 	movi	r2,10
   116dc:	30800926 	beq	r6,r2,11704 <__itoa+0x44>
   116e0:	0005883a 	mov	r2,zero
   116e4:	2821883a 	mov	r16,r5
   116e8:	288b883a 	add	r5,r5,r2
   116ec:	00118980 	call	11898 <__utoa>
   116f0:	8005883a 	mov	r2,r16
   116f4:	dfc00117 	ldw	ra,4(sp)
   116f8:	dc000017 	ldw	r16,0(sp)
   116fc:	dec00204 	addi	sp,sp,8
   11700:	f800283a 	ret
   11704:	203ff60e 	bge	r4,zero,116e0 <_gp+0xffff0f14>
   11708:	00800b44 	movi	r2,45
   1170c:	28800005 	stb	r2,0(r5)
   11710:	0109c83a 	sub	r4,zero,r4
   11714:	00800044 	movi	r2,1
   11718:	003ff206 	br	116e4 <_gp+0xffff0f18>
   1171c:	28000005 	stb	zero,0(r5)
   11720:	0005883a 	mov	r2,zero
   11724:	f800283a 	ret

00011728 <itoa>:
   11728:	00116c01 	jmpi	116c0 <__itoa>

0001172c <_puts_r>:
   1172c:	defff604 	addi	sp,sp,-40
   11730:	dc000715 	stw	r16,28(sp)
   11734:	2021883a 	mov	r16,r4
   11738:	2809883a 	mov	r4,r5
   1173c:	dc400815 	stw	r17,32(sp)
   11740:	dfc00915 	stw	ra,36(sp)
   11744:	2823883a 	mov	r17,r5
   11748:	00118000 	call	11800 <strlen>
   1174c:	10c00044 	addi	r3,r2,1
   11750:	d8800115 	stw	r2,4(sp)
   11754:	00800074 	movhi	r2,1
   11758:	109b4c04 	addi	r2,r2,27952
   1175c:	d8800215 	stw	r2,8(sp)
   11760:	00800044 	movi	r2,1
   11764:	d8800315 	stw	r2,12(sp)
   11768:	00800084 	movi	r2,2
   1176c:	dc400015 	stw	r17,0(sp)
   11770:	d8c00615 	stw	r3,24(sp)
   11774:	dec00415 	stw	sp,16(sp)
   11778:	d8800515 	stw	r2,20(sp)
   1177c:	80000226 	beq	r16,zero,11788 <_puts_r+0x5c>
   11780:	80800e17 	ldw	r2,56(r16)
   11784:	10001426 	beq	r2,zero,117d8 <_puts_r+0xac>
   11788:	81400217 	ldw	r5,8(r16)
   1178c:	2880030b 	ldhu	r2,12(r5)
   11790:	10c8000c 	andi	r3,r2,8192
   11794:	1800061e 	bne	r3,zero,117b0 <_puts_r+0x84>
   11798:	29001917 	ldw	r4,100(r5)
   1179c:	00f7ffc4 	movi	r3,-8193
   117a0:	10880014 	ori	r2,r2,8192
   117a4:	20c6703a 	and	r3,r4,r3
   117a8:	2880030d 	sth	r2,12(r5)
   117ac:	28c01915 	stw	r3,100(r5)
   117b0:	d9800404 	addi	r6,sp,16
   117b4:	8009883a 	mov	r4,r16
   117b8:	0011da40 	call	11da4 <__sfvwrite_r>
   117bc:	1000091e 	bne	r2,zero,117e4 <_puts_r+0xb8>
   117c0:	00800284 	movi	r2,10
   117c4:	dfc00917 	ldw	ra,36(sp)
   117c8:	dc400817 	ldw	r17,32(sp)
   117cc:	dc000717 	ldw	r16,28(sp)
   117d0:	dec00a04 	addi	sp,sp,40
   117d4:	f800283a 	ret
   117d8:	8009883a 	mov	r4,r16
   117dc:	0011d540 	call	11d54 <__sinit>
   117e0:	003fe906 	br	11788 <_gp+0xffff0fbc>
   117e4:	00bfffc4 	movi	r2,-1
   117e8:	003ff606 	br	117c4 <_gp+0xffff0ff8>

000117ec <puts>:
   117ec:	008000b4 	movhi	r2,2
   117f0:	10a1f504 	addi	r2,r2,-30764
   117f4:	200b883a 	mov	r5,r4
   117f8:	11000017 	ldw	r4,0(r2)
   117fc:	001172c1 	jmpi	1172c <_puts_r>

00011800 <strlen>:
   11800:	208000cc 	andi	r2,r4,3
   11804:	10002026 	beq	r2,zero,11888 <strlen+0x88>
   11808:	20800007 	ldb	r2,0(r4)
   1180c:	10002026 	beq	r2,zero,11890 <strlen+0x90>
   11810:	2005883a 	mov	r2,r4
   11814:	00000206 	br	11820 <strlen+0x20>
   11818:	10c00007 	ldb	r3,0(r2)
   1181c:	18001826 	beq	r3,zero,11880 <strlen+0x80>
   11820:	10800044 	addi	r2,r2,1
   11824:	10c000cc 	andi	r3,r2,3
   11828:	183ffb1e 	bne	r3,zero,11818 <_gp+0xffff104c>
   1182c:	10c00017 	ldw	r3,0(r2)
   11830:	01ffbff4 	movhi	r7,65279
   11834:	39ffbfc4 	addi	r7,r7,-257
   11838:	00ca303a 	nor	r5,zero,r3
   1183c:	01a02074 	movhi	r6,32897
   11840:	19c7883a 	add	r3,r3,r7
   11844:	31a02004 	addi	r6,r6,-32640
   11848:	1946703a 	and	r3,r3,r5
   1184c:	1986703a 	and	r3,r3,r6
   11850:	1800091e 	bne	r3,zero,11878 <strlen+0x78>
   11854:	10800104 	addi	r2,r2,4
   11858:	10c00017 	ldw	r3,0(r2)
   1185c:	19cb883a 	add	r5,r3,r7
   11860:	00c6303a 	nor	r3,zero,r3
   11864:	28c6703a 	and	r3,r5,r3
   11868:	1986703a 	and	r3,r3,r6
   1186c:	183ff926 	beq	r3,zero,11854 <_gp+0xffff1088>
   11870:	00000106 	br	11878 <strlen+0x78>
   11874:	10800044 	addi	r2,r2,1
   11878:	10c00007 	ldb	r3,0(r2)
   1187c:	183ffd1e 	bne	r3,zero,11874 <_gp+0xffff10a8>
   11880:	1105c83a 	sub	r2,r2,r4
   11884:	f800283a 	ret
   11888:	2005883a 	mov	r2,r4
   1188c:	003fe706 	br	1182c <_gp+0xffff1060>
   11890:	0005883a 	mov	r2,zero
   11894:	f800283a 	ret

00011898 <__utoa>:
   11898:	008cccb4 	movhi	r2,13106
   1189c:	defff004 	addi	sp,sp,-64
   118a0:	108c4c04 	addi	r2,r2,12592
   118a4:	d8800015 	stw	r2,0(sp)
   118a8:	008dcdb4 	movhi	r2,14134
   118ac:	108d4d04 	addi	r2,r2,13620
   118b0:	d8800115 	stw	r2,4(sp)
   118b4:	00989874 	movhi	r2,25185
   118b8:	108e4e04 	addi	r2,r2,14648
   118bc:	d8800215 	stw	r2,8(sp)
   118c0:	00999974 	movhi	r2,26213
   118c4:	109918c4 	addi	r2,r2,25699
   118c8:	d8800315 	stw	r2,12(sp)
   118cc:	009a9a74 	movhi	r2,27241
   118d0:	109a19c4 	addi	r2,r2,26727
   118d4:	d8800415 	stw	r2,16(sp)
   118d8:	009b9b74 	movhi	r2,28269
   118dc:	109b1ac4 	addi	r2,r2,27755
   118e0:	d8800515 	stw	r2,20(sp)
   118e4:	009c9c74 	movhi	r2,29297
   118e8:	109c1bc4 	addi	r2,r2,28783
   118ec:	d8800615 	stw	r2,24(sp)
   118f0:	009d9d74 	movhi	r2,30325
   118f4:	109d1cc4 	addi	r2,r2,29811
   118f8:	d8800715 	stw	r2,28(sp)
   118fc:	009e9e74 	movhi	r2,31353
   11900:	109e1dc4 	addi	r2,r2,30839
   11904:	dd000e15 	stw	r20,56(sp)
   11908:	d8800815 	stw	r2,32(sp)
   1190c:	dfc00f15 	stw	ra,60(sp)
   11910:	dcc00d15 	stw	r19,52(sp)
   11914:	dc800c15 	stw	r18,48(sp)
   11918:	dc400b15 	stw	r17,44(sp)
   1191c:	dc000a15 	stw	r16,40(sp)
   11920:	d8000905 	stb	zero,36(sp)
   11924:	30bfff84 	addi	r2,r6,-2
   11928:	00c00884 	movi	r3,34
   1192c:	2829883a 	mov	r20,r5
   11930:	18802c36 	bltu	r3,r2,119e4 <__utoa+0x14c>
   11934:	3027883a 	mov	r19,r6
   11938:	2023883a 	mov	r17,r4
   1193c:	2825883a 	mov	r18,r5
   11940:	0021883a 	mov	r16,zero
   11944:	00000106 	br	1194c <__utoa+0xb4>
   11948:	1821883a 	mov	r16,r3
   1194c:	8809883a 	mov	r4,r17
   11950:	980b883a 	mov	r5,r19
   11954:	00116680 	call	11668 <__umodsi3>
   11958:	d885883a 	add	r2,sp,r2
   1195c:	10800003 	ldbu	r2,0(r2)
   11960:	8809883a 	mov	r4,r17
   11964:	980b883a 	mov	r5,r19
   11968:	90800005 	stb	r2,0(r18)
   1196c:	00116040 	call	11604 <__udivsi3>
   11970:	1023883a 	mov	r17,r2
   11974:	80c00044 	addi	r3,r16,1
   11978:	94800044 	addi	r18,r18,1
   1197c:	103ff21e 	bne	r2,zero,11948 <_gp+0xffff117c>
   11980:	a0c7883a 	add	r3,r20,r3
   11984:	18000005 	stb	zero,0(r3)
   11988:	80000d26 	beq	r16,zero,119c0 <__utoa+0x128>
   1198c:	01c00044 	movi	r7,1
   11990:	a409883a 	add	r4,r20,r16
   11994:	a007883a 	mov	r3,r20
   11998:	3d0fc83a 	sub	r7,r7,r20
   1199c:	21800003 	ldbu	r6,0(r4)
   119a0:	19400003 	ldbu	r5,0(r3)
   119a4:	38c5883a 	add	r2,r7,r3
   119a8:	19800005 	stb	r6,0(r3)
   119ac:	21400005 	stb	r5,0(r4)
   119b0:	843fffc4 	addi	r16,r16,-1
   119b4:	18c00044 	addi	r3,r3,1
   119b8:	213fffc4 	addi	r4,r4,-1
   119bc:	143ff716 	blt	r2,r16,1199c <_gp+0xffff11d0>
   119c0:	a005883a 	mov	r2,r20
   119c4:	dfc00f17 	ldw	ra,60(sp)
   119c8:	dd000e17 	ldw	r20,56(sp)
   119cc:	dcc00d17 	ldw	r19,52(sp)
   119d0:	dc800c17 	ldw	r18,48(sp)
   119d4:	dc400b17 	ldw	r17,44(sp)
   119d8:	dc000a17 	ldw	r16,40(sp)
   119dc:	dec01004 	addi	sp,sp,64
   119e0:	f800283a 	ret
   119e4:	28000005 	stb	zero,0(r5)
   119e8:	0005883a 	mov	r2,zero
   119ec:	003ff506 	br	119c4 <_gp+0xffff11f8>

000119f0 <utoa>:
   119f0:	00118981 	jmpi	11898 <__utoa>

000119f4 <__fp_unlock>:
   119f4:	0005883a 	mov	r2,zero
   119f8:	f800283a 	ret

000119fc <_cleanup_r>:
   119fc:	01400074 	movhi	r5,1
   11a00:	294e6b04 	addi	r5,r5,14764
   11a04:	00123301 	jmpi	12330 <_fwalk_reent>

00011a08 <__sinit.part.1>:
   11a08:	defff704 	addi	sp,sp,-36
   11a0c:	00c00074 	movhi	r3,1
   11a10:	dfc00815 	stw	ra,32(sp)
   11a14:	ddc00715 	stw	r23,28(sp)
   11a18:	dd800615 	stw	r22,24(sp)
   11a1c:	dd400515 	stw	r21,20(sp)
   11a20:	dd000415 	stw	r20,16(sp)
   11a24:	dcc00315 	stw	r19,12(sp)
   11a28:	dc800215 	stw	r18,8(sp)
   11a2c:	dc400115 	stw	r17,4(sp)
   11a30:	dc000015 	stw	r16,0(sp)
   11a34:	18c67f04 	addi	r3,r3,6652
   11a38:	24000117 	ldw	r16,4(r4)
   11a3c:	20c00f15 	stw	r3,60(r4)
   11a40:	2080bb04 	addi	r2,r4,748
   11a44:	00c000c4 	movi	r3,3
   11a48:	20c0b915 	stw	r3,740(r4)
   11a4c:	2080ba15 	stw	r2,744(r4)
   11a50:	2000b815 	stw	zero,736(r4)
   11a54:	05c00204 	movi	r23,8
   11a58:	00800104 	movi	r2,4
   11a5c:	2025883a 	mov	r18,r4
   11a60:	b80d883a 	mov	r6,r23
   11a64:	81001704 	addi	r4,r16,92
   11a68:	000b883a 	mov	r5,zero
   11a6c:	80000015 	stw	zero,0(r16)
   11a70:	80000115 	stw	zero,4(r16)
   11a74:	80000215 	stw	zero,8(r16)
   11a78:	8080030d 	sth	r2,12(r16)
   11a7c:	80001915 	stw	zero,100(r16)
   11a80:	8000038d 	sth	zero,14(r16)
   11a84:	80000415 	stw	zero,16(r16)
   11a88:	80000515 	stw	zero,20(r16)
   11a8c:	80000615 	stw	zero,24(r16)
   11a90:	0012f880 	call	12f88 <memset>
   11a94:	05800074 	movhi	r22,1
   11a98:	94400217 	ldw	r17,8(r18)
   11a9c:	05400074 	movhi	r21,1
   11aa0:	05000074 	movhi	r20,1
   11aa4:	04c00074 	movhi	r19,1
   11aa8:	b58d9a04 	addi	r22,r22,13928
   11aac:	ad4db104 	addi	r21,r21,14020
   11ab0:	a50dd004 	addi	r20,r20,14144
   11ab4:	9ccde704 	addi	r19,r19,14236
   11ab8:	85800815 	stw	r22,32(r16)
   11abc:	85400915 	stw	r21,36(r16)
   11ac0:	85000a15 	stw	r20,40(r16)
   11ac4:	84c00b15 	stw	r19,44(r16)
   11ac8:	84000715 	stw	r16,28(r16)
   11acc:	00800284 	movi	r2,10
   11ad0:	8880030d 	sth	r2,12(r17)
   11ad4:	00800044 	movi	r2,1
   11ad8:	b80d883a 	mov	r6,r23
   11adc:	89001704 	addi	r4,r17,92
   11ae0:	000b883a 	mov	r5,zero
   11ae4:	88000015 	stw	zero,0(r17)
   11ae8:	88000115 	stw	zero,4(r17)
   11aec:	88000215 	stw	zero,8(r17)
   11af0:	88001915 	stw	zero,100(r17)
   11af4:	8880038d 	sth	r2,14(r17)
   11af8:	88000415 	stw	zero,16(r17)
   11afc:	88000515 	stw	zero,20(r17)
   11b00:	88000615 	stw	zero,24(r17)
   11b04:	0012f880 	call	12f88 <memset>
   11b08:	94000317 	ldw	r16,12(r18)
   11b0c:	00800484 	movi	r2,18
   11b10:	8c400715 	stw	r17,28(r17)
   11b14:	8d800815 	stw	r22,32(r17)
   11b18:	8d400915 	stw	r21,36(r17)
   11b1c:	8d000a15 	stw	r20,40(r17)
   11b20:	8cc00b15 	stw	r19,44(r17)
   11b24:	8080030d 	sth	r2,12(r16)
   11b28:	00800084 	movi	r2,2
   11b2c:	80000015 	stw	zero,0(r16)
   11b30:	80000115 	stw	zero,4(r16)
   11b34:	80000215 	stw	zero,8(r16)
   11b38:	80001915 	stw	zero,100(r16)
   11b3c:	8080038d 	sth	r2,14(r16)
   11b40:	80000415 	stw	zero,16(r16)
   11b44:	80000515 	stw	zero,20(r16)
   11b48:	80000615 	stw	zero,24(r16)
   11b4c:	b80d883a 	mov	r6,r23
   11b50:	000b883a 	mov	r5,zero
   11b54:	81001704 	addi	r4,r16,92
   11b58:	0012f880 	call	12f88 <memset>
   11b5c:	00800044 	movi	r2,1
   11b60:	84000715 	stw	r16,28(r16)
   11b64:	85800815 	stw	r22,32(r16)
   11b68:	85400915 	stw	r21,36(r16)
   11b6c:	85000a15 	stw	r20,40(r16)
   11b70:	84c00b15 	stw	r19,44(r16)
   11b74:	90800e15 	stw	r2,56(r18)
   11b78:	dfc00817 	ldw	ra,32(sp)
   11b7c:	ddc00717 	ldw	r23,28(sp)
   11b80:	dd800617 	ldw	r22,24(sp)
   11b84:	dd400517 	ldw	r21,20(sp)
   11b88:	dd000417 	ldw	r20,16(sp)
   11b8c:	dcc00317 	ldw	r19,12(sp)
   11b90:	dc800217 	ldw	r18,8(sp)
   11b94:	dc400117 	ldw	r17,4(sp)
   11b98:	dc000017 	ldw	r16,0(sp)
   11b9c:	dec00904 	addi	sp,sp,36
   11ba0:	f800283a 	ret

00011ba4 <__fp_lock>:
   11ba4:	0005883a 	mov	r2,zero
   11ba8:	f800283a 	ret

00011bac <__sfmoreglue>:
   11bac:	defffc04 	addi	sp,sp,-16
   11bb0:	dc800215 	stw	r18,8(sp)
   11bb4:	2825883a 	mov	r18,r5
   11bb8:	dc000015 	stw	r16,0(sp)
   11bbc:	01401a04 	movi	r5,104
   11bc0:	2021883a 	mov	r16,r4
   11bc4:	913fffc4 	addi	r4,r18,-1
   11bc8:	dfc00315 	stw	ra,12(sp)
   11bcc:	dc400115 	stw	r17,4(sp)
   11bd0:	00144b80 	call	144b8 <__mulsi3>
   11bd4:	8009883a 	mov	r4,r16
   11bd8:	11401d04 	addi	r5,r2,116
   11bdc:	1023883a 	mov	r17,r2
   11be0:	00123f40 	call	123f4 <_malloc_r>
   11be4:	1021883a 	mov	r16,r2
   11be8:	10000726 	beq	r2,zero,11c08 <__sfmoreglue+0x5c>
   11bec:	11000304 	addi	r4,r2,12
   11bf0:	10000015 	stw	zero,0(r2)
   11bf4:	14800115 	stw	r18,4(r2)
   11bf8:	11000215 	stw	r4,8(r2)
   11bfc:	89801a04 	addi	r6,r17,104
   11c00:	000b883a 	mov	r5,zero
   11c04:	0012f880 	call	12f88 <memset>
   11c08:	8005883a 	mov	r2,r16
   11c0c:	dfc00317 	ldw	ra,12(sp)
   11c10:	dc800217 	ldw	r18,8(sp)
   11c14:	dc400117 	ldw	r17,4(sp)
   11c18:	dc000017 	ldw	r16,0(sp)
   11c1c:	dec00404 	addi	sp,sp,16
   11c20:	f800283a 	ret

00011c24 <__sfp>:
   11c24:	defffb04 	addi	sp,sp,-20
   11c28:	dc000015 	stw	r16,0(sp)
   11c2c:	040000b4 	movhi	r16,2
   11c30:	8421f404 	addi	r16,r16,-30768
   11c34:	dcc00315 	stw	r19,12(sp)
   11c38:	2027883a 	mov	r19,r4
   11c3c:	81000017 	ldw	r4,0(r16)
   11c40:	dfc00415 	stw	ra,16(sp)
   11c44:	dc800215 	stw	r18,8(sp)
   11c48:	20800e17 	ldw	r2,56(r4)
   11c4c:	dc400115 	stw	r17,4(sp)
   11c50:	1000021e 	bne	r2,zero,11c5c <__sfp+0x38>
   11c54:	0011a080 	call	11a08 <__sinit.part.1>
   11c58:	81000017 	ldw	r4,0(r16)
   11c5c:	2480b804 	addi	r18,r4,736
   11c60:	047fffc4 	movi	r17,-1
   11c64:	91000117 	ldw	r4,4(r18)
   11c68:	94000217 	ldw	r16,8(r18)
   11c6c:	213fffc4 	addi	r4,r4,-1
   11c70:	20000a16 	blt	r4,zero,11c9c <__sfp+0x78>
   11c74:	8080030f 	ldh	r2,12(r16)
   11c78:	10000c26 	beq	r2,zero,11cac <__sfp+0x88>
   11c7c:	80c01d04 	addi	r3,r16,116
   11c80:	00000206 	br	11c8c <__sfp+0x68>
   11c84:	18bfe60f 	ldh	r2,-104(r3)
   11c88:	10000826 	beq	r2,zero,11cac <__sfp+0x88>
   11c8c:	213fffc4 	addi	r4,r4,-1
   11c90:	1c3ffd04 	addi	r16,r3,-12
   11c94:	18c01a04 	addi	r3,r3,104
   11c98:	247ffa1e 	bne	r4,r17,11c84 <_gp+0xffff14b8>
   11c9c:	90800017 	ldw	r2,0(r18)
   11ca0:	10001d26 	beq	r2,zero,11d18 <__sfp+0xf4>
   11ca4:	1025883a 	mov	r18,r2
   11ca8:	003fee06 	br	11c64 <_gp+0xffff1498>
   11cac:	00bfffc4 	movi	r2,-1
   11cb0:	8080038d 	sth	r2,14(r16)
   11cb4:	00800044 	movi	r2,1
   11cb8:	8080030d 	sth	r2,12(r16)
   11cbc:	80001915 	stw	zero,100(r16)
   11cc0:	80000015 	stw	zero,0(r16)
   11cc4:	80000215 	stw	zero,8(r16)
   11cc8:	80000115 	stw	zero,4(r16)
   11ccc:	80000415 	stw	zero,16(r16)
   11cd0:	80000515 	stw	zero,20(r16)
   11cd4:	80000615 	stw	zero,24(r16)
   11cd8:	01800204 	movi	r6,8
   11cdc:	000b883a 	mov	r5,zero
   11ce0:	81001704 	addi	r4,r16,92
   11ce4:	0012f880 	call	12f88 <memset>
   11ce8:	8005883a 	mov	r2,r16
   11cec:	80000c15 	stw	zero,48(r16)
   11cf0:	80000d15 	stw	zero,52(r16)
   11cf4:	80001115 	stw	zero,68(r16)
   11cf8:	80001215 	stw	zero,72(r16)
   11cfc:	dfc00417 	ldw	ra,16(sp)
   11d00:	dcc00317 	ldw	r19,12(sp)
   11d04:	dc800217 	ldw	r18,8(sp)
   11d08:	dc400117 	ldw	r17,4(sp)
   11d0c:	dc000017 	ldw	r16,0(sp)
   11d10:	dec00504 	addi	sp,sp,20
   11d14:	f800283a 	ret
   11d18:	01400104 	movi	r5,4
   11d1c:	9809883a 	mov	r4,r19
   11d20:	0011bac0 	call	11bac <__sfmoreglue>
   11d24:	90800015 	stw	r2,0(r18)
   11d28:	103fde1e 	bne	r2,zero,11ca4 <_gp+0xffff14d8>
   11d2c:	00800304 	movi	r2,12
   11d30:	98800015 	stw	r2,0(r19)
   11d34:	0005883a 	mov	r2,zero
   11d38:	003ff006 	br	11cfc <_gp+0xffff1530>

00011d3c <_cleanup>:
   11d3c:	008000b4 	movhi	r2,2
   11d40:	10a1f404 	addi	r2,r2,-30768
   11d44:	11000017 	ldw	r4,0(r2)
   11d48:	01400074 	movhi	r5,1
   11d4c:	294e6b04 	addi	r5,r5,14764
   11d50:	00123301 	jmpi	12330 <_fwalk_reent>

00011d54 <__sinit>:
   11d54:	20800e17 	ldw	r2,56(r4)
   11d58:	10000126 	beq	r2,zero,11d60 <__sinit+0xc>
   11d5c:	f800283a 	ret
   11d60:	0011a081 	jmpi	11a08 <__sinit.part.1>

00011d64 <__sfp_lock_acquire>:
   11d64:	f800283a 	ret

00011d68 <__sfp_lock_release>:
   11d68:	f800283a 	ret

00011d6c <__sinit_lock_acquire>:
   11d6c:	f800283a 	ret

00011d70 <__sinit_lock_release>:
   11d70:	f800283a 	ret

00011d74 <__fp_lock_all>:
   11d74:	008000b4 	movhi	r2,2
   11d78:	10a1f504 	addi	r2,r2,-30764
   11d7c:	11000017 	ldw	r4,0(r2)
   11d80:	01400074 	movhi	r5,1
   11d84:	2946e904 	addi	r5,r5,7076
   11d88:	001226c1 	jmpi	1226c <_fwalk>

00011d8c <__fp_unlock_all>:
   11d8c:	008000b4 	movhi	r2,2
   11d90:	10a1f504 	addi	r2,r2,-30764
   11d94:	11000017 	ldw	r4,0(r2)
   11d98:	01400074 	movhi	r5,1
   11d9c:	29467d04 	addi	r5,r5,6644
   11da0:	001226c1 	jmpi	1226c <_fwalk>

00011da4 <__sfvwrite_r>:
   11da4:	30800217 	ldw	r2,8(r6)
   11da8:	10006726 	beq	r2,zero,11f48 <__sfvwrite_r+0x1a4>
   11dac:	28c0030b 	ldhu	r3,12(r5)
   11db0:	defff404 	addi	sp,sp,-48
   11db4:	dd400715 	stw	r21,28(sp)
   11db8:	dd000615 	stw	r20,24(sp)
   11dbc:	dc000215 	stw	r16,8(sp)
   11dc0:	dfc00b15 	stw	ra,44(sp)
   11dc4:	df000a15 	stw	fp,40(sp)
   11dc8:	ddc00915 	stw	r23,36(sp)
   11dcc:	dd800815 	stw	r22,32(sp)
   11dd0:	dcc00515 	stw	r19,20(sp)
   11dd4:	dc800415 	stw	r18,16(sp)
   11dd8:	dc400315 	stw	r17,12(sp)
   11ddc:	1880020c 	andi	r2,r3,8
   11de0:	2821883a 	mov	r16,r5
   11de4:	202b883a 	mov	r21,r4
   11de8:	3029883a 	mov	r20,r6
   11dec:	10002726 	beq	r2,zero,11e8c <__sfvwrite_r+0xe8>
   11df0:	28800417 	ldw	r2,16(r5)
   11df4:	10002526 	beq	r2,zero,11e8c <__sfvwrite_r+0xe8>
   11df8:	1880008c 	andi	r2,r3,2
   11dfc:	a4400017 	ldw	r17,0(r20)
   11e00:	10002a26 	beq	r2,zero,11eac <__sfvwrite_r+0x108>
   11e04:	05a00034 	movhi	r22,32768
   11e08:	0027883a 	mov	r19,zero
   11e0c:	0025883a 	mov	r18,zero
   11e10:	b5bf0004 	addi	r22,r22,-1024
   11e14:	980d883a 	mov	r6,r19
   11e18:	a809883a 	mov	r4,r21
   11e1c:	90004626 	beq	r18,zero,11f38 <__sfvwrite_r+0x194>
   11e20:	900f883a 	mov	r7,r18
   11e24:	b480022e 	bgeu	r22,r18,11e30 <__sfvwrite_r+0x8c>
   11e28:	01e00034 	movhi	r7,32768
   11e2c:	39ff0004 	addi	r7,r7,-1024
   11e30:	80800917 	ldw	r2,36(r16)
   11e34:	81400717 	ldw	r5,28(r16)
   11e38:	103ee83a 	callr	r2
   11e3c:	00805a0e 	bge	zero,r2,11fa8 <__sfvwrite_r+0x204>
   11e40:	a0c00217 	ldw	r3,8(r20)
   11e44:	98a7883a 	add	r19,r19,r2
   11e48:	90a5c83a 	sub	r18,r18,r2
   11e4c:	1885c83a 	sub	r2,r3,r2
   11e50:	a0800215 	stw	r2,8(r20)
   11e54:	103fef1e 	bne	r2,zero,11e14 <_gp+0xffff1648>
   11e58:	0005883a 	mov	r2,zero
   11e5c:	dfc00b17 	ldw	ra,44(sp)
   11e60:	df000a17 	ldw	fp,40(sp)
   11e64:	ddc00917 	ldw	r23,36(sp)
   11e68:	dd800817 	ldw	r22,32(sp)
   11e6c:	dd400717 	ldw	r21,28(sp)
   11e70:	dd000617 	ldw	r20,24(sp)
   11e74:	dcc00517 	ldw	r19,20(sp)
   11e78:	dc800417 	ldw	r18,16(sp)
   11e7c:	dc400317 	ldw	r17,12(sp)
   11e80:	dc000217 	ldw	r16,8(sp)
   11e84:	dec00c04 	addi	sp,sp,48
   11e88:	f800283a 	ret
   11e8c:	800b883a 	mov	r5,r16
   11e90:	a809883a 	mov	r4,r21
   11e94:	00138040 	call	13804 <__swsetup_r>
   11e98:	1000ee1e 	bne	r2,zero,12254 <__sfvwrite_r+0x4b0>
   11e9c:	80c0030b 	ldhu	r3,12(r16)
   11ea0:	a4400017 	ldw	r17,0(r20)
   11ea4:	1880008c 	andi	r2,r3,2
   11ea8:	103fd61e 	bne	r2,zero,11e04 <_gp+0xffff1638>
   11eac:	1880004c 	andi	r2,r3,1
   11eb0:	1000421e 	bne	r2,zero,11fbc <__sfvwrite_r+0x218>
   11eb4:	0039883a 	mov	fp,zero
   11eb8:	0025883a 	mov	r18,zero
   11ebc:	90001a26 	beq	r18,zero,11f28 <__sfvwrite_r+0x184>
   11ec0:	1880800c 	andi	r2,r3,512
   11ec4:	84c00217 	ldw	r19,8(r16)
   11ec8:	10002126 	beq	r2,zero,11f50 <__sfvwrite_r+0x1ac>
   11ecc:	982f883a 	mov	r23,r19
   11ed0:	94c09636 	bltu	r18,r19,1212c <__sfvwrite_r+0x388>
   11ed4:	1881200c 	andi	r2,r3,1152
   11ed8:	1000a11e 	bne	r2,zero,12160 <__sfvwrite_r+0x3bc>
   11edc:	81000017 	ldw	r4,0(r16)
   11ee0:	b80d883a 	mov	r6,r23
   11ee4:	e00b883a 	mov	r5,fp
   11ee8:	0012e2c0 	call	12e2c <memmove>
   11eec:	80c00217 	ldw	r3,8(r16)
   11ef0:	81000017 	ldw	r4,0(r16)
   11ef4:	9005883a 	mov	r2,r18
   11ef8:	1ce7c83a 	sub	r19,r3,r19
   11efc:	25cf883a 	add	r7,r4,r23
   11f00:	84c00215 	stw	r19,8(r16)
   11f04:	81c00015 	stw	r7,0(r16)
   11f08:	a0c00217 	ldw	r3,8(r20)
   11f0c:	e0b9883a 	add	fp,fp,r2
   11f10:	90a5c83a 	sub	r18,r18,r2
   11f14:	18a7c83a 	sub	r19,r3,r2
   11f18:	a4c00215 	stw	r19,8(r20)
   11f1c:	983fce26 	beq	r19,zero,11e58 <_gp+0xffff168c>
   11f20:	80c0030b 	ldhu	r3,12(r16)
   11f24:	903fe61e 	bne	r18,zero,11ec0 <_gp+0xffff16f4>
   11f28:	8f000017 	ldw	fp,0(r17)
   11f2c:	8c800117 	ldw	r18,4(r17)
   11f30:	8c400204 	addi	r17,r17,8
   11f34:	003fe106 	br	11ebc <_gp+0xffff16f0>
   11f38:	8cc00017 	ldw	r19,0(r17)
   11f3c:	8c800117 	ldw	r18,4(r17)
   11f40:	8c400204 	addi	r17,r17,8
   11f44:	003fb306 	br	11e14 <_gp+0xffff1648>
   11f48:	0005883a 	mov	r2,zero
   11f4c:	f800283a 	ret
   11f50:	81000017 	ldw	r4,0(r16)
   11f54:	80800417 	ldw	r2,16(r16)
   11f58:	11005a36 	bltu	r2,r4,120c4 <__sfvwrite_r+0x320>
   11f5c:	85c00517 	ldw	r23,20(r16)
   11f60:	95c05836 	bltu	r18,r23,120c4 <__sfvwrite_r+0x320>
   11f64:	00a00034 	movhi	r2,32768
   11f68:	10bfffc4 	addi	r2,r2,-1
   11f6c:	9009883a 	mov	r4,r18
   11f70:	1480012e 	bgeu	r2,r18,11f78 <__sfvwrite_r+0x1d4>
   11f74:	1009883a 	mov	r4,r2
   11f78:	b80b883a 	mov	r5,r23
   11f7c:	001150c0 	call	1150c <__divsi3>
   11f80:	b80b883a 	mov	r5,r23
   11f84:	1009883a 	mov	r4,r2
   11f88:	00144b80 	call	144b8 <__mulsi3>
   11f8c:	81400717 	ldw	r5,28(r16)
   11f90:	80c00917 	ldw	r3,36(r16)
   11f94:	100f883a 	mov	r7,r2
   11f98:	e00d883a 	mov	r6,fp
   11f9c:	a809883a 	mov	r4,r21
   11fa0:	183ee83a 	callr	r3
   11fa4:	00bfd816 	blt	zero,r2,11f08 <_gp+0xffff173c>
   11fa8:	8080030b 	ldhu	r2,12(r16)
   11fac:	10801014 	ori	r2,r2,64
   11fb0:	8080030d 	sth	r2,12(r16)
   11fb4:	00bfffc4 	movi	r2,-1
   11fb8:	003fa806 	br	11e5c <_gp+0xffff1690>
   11fbc:	0027883a 	mov	r19,zero
   11fc0:	0011883a 	mov	r8,zero
   11fc4:	0039883a 	mov	fp,zero
   11fc8:	0025883a 	mov	r18,zero
   11fcc:	90001f26 	beq	r18,zero,1204c <__sfvwrite_r+0x2a8>
   11fd0:	40005a26 	beq	r8,zero,1213c <__sfvwrite_r+0x398>
   11fd4:	982d883a 	mov	r22,r19
   11fd8:	94c0012e 	bgeu	r18,r19,11fe0 <__sfvwrite_r+0x23c>
   11fdc:	902d883a 	mov	r22,r18
   11fe0:	81000017 	ldw	r4,0(r16)
   11fe4:	80800417 	ldw	r2,16(r16)
   11fe8:	b02f883a 	mov	r23,r22
   11fec:	81c00517 	ldw	r7,20(r16)
   11ff0:	1100032e 	bgeu	r2,r4,12000 <__sfvwrite_r+0x25c>
   11ff4:	80c00217 	ldw	r3,8(r16)
   11ff8:	38c7883a 	add	r3,r7,r3
   11ffc:	1d801816 	blt	r3,r22,12060 <__sfvwrite_r+0x2bc>
   12000:	b1c03e16 	blt	r22,r7,120fc <__sfvwrite_r+0x358>
   12004:	80800917 	ldw	r2,36(r16)
   12008:	81400717 	ldw	r5,28(r16)
   1200c:	e00d883a 	mov	r6,fp
   12010:	da000115 	stw	r8,4(sp)
   12014:	a809883a 	mov	r4,r21
   12018:	103ee83a 	callr	r2
   1201c:	102f883a 	mov	r23,r2
   12020:	da000117 	ldw	r8,4(sp)
   12024:	00bfe00e 	bge	zero,r2,11fa8 <_gp+0xffff17dc>
   12028:	9de7c83a 	sub	r19,r19,r23
   1202c:	98001f26 	beq	r19,zero,120ac <__sfvwrite_r+0x308>
   12030:	a0800217 	ldw	r2,8(r20)
   12034:	e5f9883a 	add	fp,fp,r23
   12038:	95e5c83a 	sub	r18,r18,r23
   1203c:	15efc83a 	sub	r23,r2,r23
   12040:	a5c00215 	stw	r23,8(r20)
   12044:	b83f8426 	beq	r23,zero,11e58 <_gp+0xffff168c>
   12048:	903fe11e 	bne	r18,zero,11fd0 <_gp+0xffff1804>
   1204c:	8f000017 	ldw	fp,0(r17)
   12050:	8c800117 	ldw	r18,4(r17)
   12054:	0011883a 	mov	r8,zero
   12058:	8c400204 	addi	r17,r17,8
   1205c:	003fdb06 	br	11fcc <_gp+0xffff1800>
   12060:	180d883a 	mov	r6,r3
   12064:	e00b883a 	mov	r5,fp
   12068:	da000115 	stw	r8,4(sp)
   1206c:	d8c00015 	stw	r3,0(sp)
   12070:	0012e2c0 	call	12e2c <memmove>
   12074:	d8c00017 	ldw	r3,0(sp)
   12078:	80800017 	ldw	r2,0(r16)
   1207c:	800b883a 	mov	r5,r16
   12080:	a809883a 	mov	r4,r21
   12084:	10c5883a 	add	r2,r2,r3
   12088:	80800015 	stw	r2,0(r16)
   1208c:	d8c00015 	stw	r3,0(sp)
   12090:	0013ccc0 	call	13ccc <_fflush_r>
   12094:	d8c00017 	ldw	r3,0(sp)
   12098:	da000117 	ldw	r8,4(sp)
   1209c:	103fc21e 	bne	r2,zero,11fa8 <_gp+0xffff17dc>
   120a0:	182f883a 	mov	r23,r3
   120a4:	9de7c83a 	sub	r19,r19,r23
   120a8:	983fe11e 	bne	r19,zero,12030 <_gp+0xffff1864>
   120ac:	800b883a 	mov	r5,r16
   120b0:	a809883a 	mov	r4,r21
   120b4:	0013ccc0 	call	13ccc <_fflush_r>
   120b8:	103fbb1e 	bne	r2,zero,11fa8 <_gp+0xffff17dc>
   120bc:	0011883a 	mov	r8,zero
   120c0:	003fdb06 	br	12030 <_gp+0xffff1864>
   120c4:	94c0012e 	bgeu	r18,r19,120cc <__sfvwrite_r+0x328>
   120c8:	9027883a 	mov	r19,r18
   120cc:	980d883a 	mov	r6,r19
   120d0:	e00b883a 	mov	r5,fp
   120d4:	0012e2c0 	call	12e2c <memmove>
   120d8:	80800217 	ldw	r2,8(r16)
   120dc:	80c00017 	ldw	r3,0(r16)
   120e0:	14c5c83a 	sub	r2,r2,r19
   120e4:	1cc7883a 	add	r3,r3,r19
   120e8:	80800215 	stw	r2,8(r16)
   120ec:	80c00015 	stw	r3,0(r16)
   120f0:	10004326 	beq	r2,zero,12200 <__sfvwrite_r+0x45c>
   120f4:	9805883a 	mov	r2,r19
   120f8:	003f8306 	br	11f08 <_gp+0xffff173c>
   120fc:	b00d883a 	mov	r6,r22
   12100:	e00b883a 	mov	r5,fp
   12104:	da000115 	stw	r8,4(sp)
   12108:	0012e2c0 	call	12e2c <memmove>
   1210c:	80800217 	ldw	r2,8(r16)
   12110:	80c00017 	ldw	r3,0(r16)
   12114:	da000117 	ldw	r8,4(sp)
   12118:	1585c83a 	sub	r2,r2,r22
   1211c:	1dad883a 	add	r22,r3,r22
   12120:	80800215 	stw	r2,8(r16)
   12124:	85800015 	stw	r22,0(r16)
   12128:	003fbf06 	br	12028 <_gp+0xffff185c>
   1212c:	81000017 	ldw	r4,0(r16)
   12130:	9027883a 	mov	r19,r18
   12134:	902f883a 	mov	r23,r18
   12138:	003f6906 	br	11ee0 <_gp+0xffff1714>
   1213c:	900d883a 	mov	r6,r18
   12140:	01400284 	movi	r5,10
   12144:	e009883a 	mov	r4,fp
   12148:	0012c000 	call	12c00 <memchr>
   1214c:	10003e26 	beq	r2,zero,12248 <__sfvwrite_r+0x4a4>
   12150:	10800044 	addi	r2,r2,1
   12154:	1727c83a 	sub	r19,r2,fp
   12158:	02000044 	movi	r8,1
   1215c:	003f9d06 	br	11fd4 <_gp+0xffff1808>
   12160:	80800517 	ldw	r2,20(r16)
   12164:	81400417 	ldw	r5,16(r16)
   12168:	81c00017 	ldw	r7,0(r16)
   1216c:	10a7883a 	add	r19,r2,r2
   12170:	9885883a 	add	r2,r19,r2
   12174:	1026d7fa 	srli	r19,r2,31
   12178:	396dc83a 	sub	r22,r7,r5
   1217c:	b1000044 	addi	r4,r22,1
   12180:	9885883a 	add	r2,r19,r2
   12184:	1027d07a 	srai	r19,r2,1
   12188:	2485883a 	add	r2,r4,r18
   1218c:	980d883a 	mov	r6,r19
   12190:	9880022e 	bgeu	r19,r2,1219c <__sfvwrite_r+0x3f8>
   12194:	1027883a 	mov	r19,r2
   12198:	100d883a 	mov	r6,r2
   1219c:	18c1000c 	andi	r3,r3,1024
   121a0:	18001c26 	beq	r3,zero,12214 <__sfvwrite_r+0x470>
   121a4:	300b883a 	mov	r5,r6
   121a8:	a809883a 	mov	r4,r21
   121ac:	00123f40 	call	123f4 <_malloc_r>
   121b0:	102f883a 	mov	r23,r2
   121b4:	10002926 	beq	r2,zero,1225c <__sfvwrite_r+0x4b8>
   121b8:	81400417 	ldw	r5,16(r16)
   121bc:	b00d883a 	mov	r6,r22
   121c0:	1009883a 	mov	r4,r2
   121c4:	0012ce40 	call	12ce4 <memcpy>
   121c8:	8080030b 	ldhu	r2,12(r16)
   121cc:	00fedfc4 	movi	r3,-1153
   121d0:	10c4703a 	and	r2,r2,r3
   121d4:	10802014 	ori	r2,r2,128
   121d8:	8080030d 	sth	r2,12(r16)
   121dc:	bd89883a 	add	r4,r23,r22
   121e0:	9d8fc83a 	sub	r7,r19,r22
   121e4:	85c00415 	stw	r23,16(r16)
   121e8:	84c00515 	stw	r19,20(r16)
   121ec:	81000015 	stw	r4,0(r16)
   121f0:	9027883a 	mov	r19,r18
   121f4:	81c00215 	stw	r7,8(r16)
   121f8:	902f883a 	mov	r23,r18
   121fc:	003f3806 	br	11ee0 <_gp+0xffff1714>
   12200:	800b883a 	mov	r5,r16
   12204:	a809883a 	mov	r4,r21
   12208:	0013ccc0 	call	13ccc <_fflush_r>
   1220c:	103fb926 	beq	r2,zero,120f4 <_gp+0xffff1928>
   12210:	003f6506 	br	11fa8 <_gp+0xffff17dc>
   12214:	a809883a 	mov	r4,r21
   12218:	00130b00 	call	130b0 <_realloc_r>
   1221c:	102f883a 	mov	r23,r2
   12220:	103fee1e 	bne	r2,zero,121dc <_gp+0xffff1a10>
   12224:	81400417 	ldw	r5,16(r16)
   12228:	a809883a 	mov	r4,r21
   1222c:	0013e7c0 	call	13e7c <_free_r>
   12230:	8080030b 	ldhu	r2,12(r16)
   12234:	00ffdfc4 	movi	r3,-129
   12238:	1884703a 	and	r2,r3,r2
   1223c:	00c00304 	movi	r3,12
   12240:	a8c00015 	stw	r3,0(r21)
   12244:	003f5906 	br	11fac <_gp+0xffff17e0>
   12248:	94c00044 	addi	r19,r18,1
   1224c:	02000044 	movi	r8,1
   12250:	003f6006 	br	11fd4 <_gp+0xffff1808>
   12254:	00bfffc4 	movi	r2,-1
   12258:	003f0006 	br	11e5c <_gp+0xffff1690>
   1225c:	00800304 	movi	r2,12
   12260:	a8800015 	stw	r2,0(r21)
   12264:	8080030b 	ldhu	r2,12(r16)
   12268:	003f5006 	br	11fac <_gp+0xffff17e0>

0001226c <_fwalk>:
   1226c:	defff704 	addi	sp,sp,-36
   12270:	dd000415 	stw	r20,16(sp)
   12274:	dfc00815 	stw	ra,32(sp)
   12278:	ddc00715 	stw	r23,28(sp)
   1227c:	dd800615 	stw	r22,24(sp)
   12280:	dd400515 	stw	r21,20(sp)
   12284:	dcc00315 	stw	r19,12(sp)
   12288:	dc800215 	stw	r18,8(sp)
   1228c:	dc400115 	stw	r17,4(sp)
   12290:	dc000015 	stw	r16,0(sp)
   12294:	2500b804 	addi	r20,r4,736
   12298:	a0002326 	beq	r20,zero,12328 <_fwalk+0xbc>
   1229c:	282b883a 	mov	r21,r5
   122a0:	002f883a 	mov	r23,zero
   122a4:	05800044 	movi	r22,1
   122a8:	04ffffc4 	movi	r19,-1
   122ac:	a4400117 	ldw	r17,4(r20)
   122b0:	a4800217 	ldw	r18,8(r20)
   122b4:	8c7fffc4 	addi	r17,r17,-1
   122b8:	88000d16 	blt	r17,zero,122f0 <_fwalk+0x84>
   122bc:	94000304 	addi	r16,r18,12
   122c0:	94800384 	addi	r18,r18,14
   122c4:	8080000b 	ldhu	r2,0(r16)
   122c8:	8c7fffc4 	addi	r17,r17,-1
   122cc:	813ffd04 	addi	r4,r16,-12
   122d0:	b080042e 	bgeu	r22,r2,122e4 <_fwalk+0x78>
   122d4:	9080000f 	ldh	r2,0(r18)
   122d8:	14c00226 	beq	r2,r19,122e4 <_fwalk+0x78>
   122dc:	a83ee83a 	callr	r21
   122e0:	b8aeb03a 	or	r23,r23,r2
   122e4:	84001a04 	addi	r16,r16,104
   122e8:	94801a04 	addi	r18,r18,104
   122ec:	8cfff51e 	bne	r17,r19,122c4 <_gp+0xffff1af8>
   122f0:	a5000017 	ldw	r20,0(r20)
   122f4:	a03fed1e 	bne	r20,zero,122ac <_gp+0xffff1ae0>
   122f8:	b805883a 	mov	r2,r23
   122fc:	dfc00817 	ldw	ra,32(sp)
   12300:	ddc00717 	ldw	r23,28(sp)
   12304:	dd800617 	ldw	r22,24(sp)
   12308:	dd400517 	ldw	r21,20(sp)
   1230c:	dd000417 	ldw	r20,16(sp)
   12310:	dcc00317 	ldw	r19,12(sp)
   12314:	dc800217 	ldw	r18,8(sp)
   12318:	dc400117 	ldw	r17,4(sp)
   1231c:	dc000017 	ldw	r16,0(sp)
   12320:	dec00904 	addi	sp,sp,36
   12324:	f800283a 	ret
   12328:	002f883a 	mov	r23,zero
   1232c:	003ff206 	br	122f8 <_gp+0xffff1b2c>

00012330 <_fwalk_reent>:
   12330:	defff704 	addi	sp,sp,-36
   12334:	dd000415 	stw	r20,16(sp)
   12338:	dfc00815 	stw	ra,32(sp)
   1233c:	ddc00715 	stw	r23,28(sp)
   12340:	dd800615 	stw	r22,24(sp)
   12344:	dd400515 	stw	r21,20(sp)
   12348:	dcc00315 	stw	r19,12(sp)
   1234c:	dc800215 	stw	r18,8(sp)
   12350:	dc400115 	stw	r17,4(sp)
   12354:	dc000015 	stw	r16,0(sp)
   12358:	2500b804 	addi	r20,r4,736
   1235c:	a0002326 	beq	r20,zero,123ec <_fwalk_reent+0xbc>
   12360:	282b883a 	mov	r21,r5
   12364:	2027883a 	mov	r19,r4
   12368:	002f883a 	mov	r23,zero
   1236c:	05800044 	movi	r22,1
   12370:	04bfffc4 	movi	r18,-1
   12374:	a4400117 	ldw	r17,4(r20)
   12378:	a4000217 	ldw	r16,8(r20)
   1237c:	8c7fffc4 	addi	r17,r17,-1
   12380:	88000c16 	blt	r17,zero,123b4 <_fwalk_reent+0x84>
   12384:	84000304 	addi	r16,r16,12
   12388:	8080000b 	ldhu	r2,0(r16)
   1238c:	8c7fffc4 	addi	r17,r17,-1
   12390:	817ffd04 	addi	r5,r16,-12
   12394:	b080052e 	bgeu	r22,r2,123ac <_fwalk_reent+0x7c>
   12398:	8080008f 	ldh	r2,2(r16)
   1239c:	9809883a 	mov	r4,r19
   123a0:	14800226 	beq	r2,r18,123ac <_fwalk_reent+0x7c>
   123a4:	a83ee83a 	callr	r21
   123a8:	b8aeb03a 	or	r23,r23,r2
   123ac:	84001a04 	addi	r16,r16,104
   123b0:	8cbff51e 	bne	r17,r18,12388 <_gp+0xffff1bbc>
   123b4:	a5000017 	ldw	r20,0(r20)
   123b8:	a03fee1e 	bne	r20,zero,12374 <_gp+0xffff1ba8>
   123bc:	b805883a 	mov	r2,r23
   123c0:	dfc00817 	ldw	ra,32(sp)
   123c4:	ddc00717 	ldw	r23,28(sp)
   123c8:	dd800617 	ldw	r22,24(sp)
   123cc:	dd400517 	ldw	r21,20(sp)
   123d0:	dd000417 	ldw	r20,16(sp)
   123d4:	dcc00317 	ldw	r19,12(sp)
   123d8:	dc800217 	ldw	r18,8(sp)
   123dc:	dc400117 	ldw	r17,4(sp)
   123e0:	dc000017 	ldw	r16,0(sp)
   123e4:	dec00904 	addi	sp,sp,36
   123e8:	f800283a 	ret
   123ec:	002f883a 	mov	r23,zero
   123f0:	003ff206 	br	123bc <_gp+0xffff1bf0>

000123f4 <_malloc_r>:
   123f4:	defff504 	addi	sp,sp,-44
   123f8:	dc800315 	stw	r18,12(sp)
   123fc:	dfc00a15 	stw	ra,40(sp)
   12400:	df000915 	stw	fp,36(sp)
   12404:	ddc00815 	stw	r23,32(sp)
   12408:	dd800715 	stw	r22,28(sp)
   1240c:	dd400615 	stw	r21,24(sp)
   12410:	dd000515 	stw	r20,20(sp)
   12414:	dcc00415 	stw	r19,16(sp)
   12418:	dc400215 	stw	r17,8(sp)
   1241c:	dc000115 	stw	r16,4(sp)
   12420:	288002c4 	addi	r2,r5,11
   12424:	00c00584 	movi	r3,22
   12428:	2025883a 	mov	r18,r4
   1242c:	18807f2e 	bgeu	r3,r2,1262c <_malloc_r+0x238>
   12430:	047ffe04 	movi	r17,-8
   12434:	1462703a 	and	r17,r2,r17
   12438:	8800a316 	blt	r17,zero,126c8 <_malloc_r+0x2d4>
   1243c:	8940a236 	bltu	r17,r5,126c8 <_malloc_r+0x2d4>
   12440:	0014a7c0 	call	14a7c <__malloc_lock>
   12444:	00807dc4 	movi	r2,503
   12448:	1441e92e 	bgeu	r2,r17,12bf0 <_malloc_r+0x7fc>
   1244c:	8804d27a 	srli	r2,r17,9
   12450:	1000a126 	beq	r2,zero,126d8 <_malloc_r+0x2e4>
   12454:	00c00104 	movi	r3,4
   12458:	18811e36 	bltu	r3,r2,128d4 <_malloc_r+0x4e0>
   1245c:	8804d1ba 	srli	r2,r17,6
   12460:	12000e44 	addi	r8,r2,57
   12464:	11c00e04 	addi	r7,r2,56
   12468:	4209883a 	add	r4,r8,r8
   1246c:	04c00074 	movhi	r19,1
   12470:	2109883a 	add	r4,r4,r4
   12474:	9cdc6f04 	addi	r19,r19,29116
   12478:	2109883a 	add	r4,r4,r4
   1247c:	9909883a 	add	r4,r19,r4
   12480:	24000117 	ldw	r16,4(r4)
   12484:	213ffe04 	addi	r4,r4,-8
   12488:	24009726 	beq	r4,r16,126e8 <_malloc_r+0x2f4>
   1248c:	80800117 	ldw	r2,4(r16)
   12490:	01bfff04 	movi	r6,-4
   12494:	014003c4 	movi	r5,15
   12498:	1184703a 	and	r2,r2,r6
   1249c:	1447c83a 	sub	r3,r2,r17
   124a0:	28c00716 	blt	r5,r3,124c0 <_malloc_r+0xcc>
   124a4:	1800920e 	bge	r3,zero,126f0 <_malloc_r+0x2fc>
   124a8:	84000317 	ldw	r16,12(r16)
   124ac:	24008e26 	beq	r4,r16,126e8 <_malloc_r+0x2f4>
   124b0:	80800117 	ldw	r2,4(r16)
   124b4:	1184703a 	and	r2,r2,r6
   124b8:	1447c83a 	sub	r3,r2,r17
   124bc:	28fff90e 	bge	r5,r3,124a4 <_gp+0xffff1cd8>
   124c0:	3809883a 	mov	r4,r7
   124c4:	01800074 	movhi	r6,1
   124c8:	9c000417 	ldw	r16,16(r19)
   124cc:	319c6f04 	addi	r6,r6,29116
   124d0:	32000204 	addi	r8,r6,8
   124d4:	82013426 	beq	r16,r8,129a8 <_malloc_r+0x5b4>
   124d8:	80c00117 	ldw	r3,4(r16)
   124dc:	00bfff04 	movi	r2,-4
   124e0:	188e703a 	and	r7,r3,r2
   124e4:	3c45c83a 	sub	r2,r7,r17
   124e8:	00c003c4 	movi	r3,15
   124ec:	18811f16 	blt	r3,r2,1296c <_malloc_r+0x578>
   124f0:	32000515 	stw	r8,20(r6)
   124f4:	32000415 	stw	r8,16(r6)
   124f8:	10007f0e 	bge	r2,zero,126f8 <_malloc_r+0x304>
   124fc:	00807fc4 	movi	r2,511
   12500:	11c0fd36 	bltu	r2,r7,128f8 <_malloc_r+0x504>
   12504:	3806d0fa 	srli	r3,r7,3
   12508:	01c00044 	movi	r7,1
   1250c:	30800117 	ldw	r2,4(r6)
   12510:	19400044 	addi	r5,r3,1
   12514:	294b883a 	add	r5,r5,r5
   12518:	1807d0ba 	srai	r3,r3,2
   1251c:	294b883a 	add	r5,r5,r5
   12520:	294b883a 	add	r5,r5,r5
   12524:	298b883a 	add	r5,r5,r6
   12528:	38c6983a 	sll	r3,r7,r3
   1252c:	29c00017 	ldw	r7,0(r5)
   12530:	2a7ffe04 	addi	r9,r5,-8
   12534:	1886b03a 	or	r3,r3,r2
   12538:	82400315 	stw	r9,12(r16)
   1253c:	81c00215 	stw	r7,8(r16)
   12540:	30c00115 	stw	r3,4(r6)
   12544:	2c000015 	stw	r16,0(r5)
   12548:	3c000315 	stw	r16,12(r7)
   1254c:	2005d0ba 	srai	r2,r4,2
   12550:	01400044 	movi	r5,1
   12554:	288a983a 	sll	r5,r5,r2
   12558:	19406f36 	bltu	r3,r5,12718 <_malloc_r+0x324>
   1255c:	28c4703a 	and	r2,r5,r3
   12560:	10000a1e 	bne	r2,zero,1258c <_malloc_r+0x198>
   12564:	00bfff04 	movi	r2,-4
   12568:	294b883a 	add	r5,r5,r5
   1256c:	2088703a 	and	r4,r4,r2
   12570:	28c4703a 	and	r2,r5,r3
   12574:	21000104 	addi	r4,r4,4
   12578:	1000041e 	bne	r2,zero,1258c <_malloc_r+0x198>
   1257c:	294b883a 	add	r5,r5,r5
   12580:	28c4703a 	and	r2,r5,r3
   12584:	21000104 	addi	r4,r4,4
   12588:	103ffc26 	beq	r2,zero,1257c <_gp+0xffff1db0>
   1258c:	02bfff04 	movi	r10,-4
   12590:	024003c4 	movi	r9,15
   12594:	21800044 	addi	r6,r4,1
   12598:	318d883a 	add	r6,r6,r6
   1259c:	318d883a 	add	r6,r6,r6
   125a0:	318d883a 	add	r6,r6,r6
   125a4:	998d883a 	add	r6,r19,r6
   125a8:	333ffe04 	addi	r12,r6,-8
   125ac:	2017883a 	mov	r11,r4
   125b0:	31800104 	addi	r6,r6,4
   125b4:	34000017 	ldw	r16,0(r6)
   125b8:	31fffd04 	addi	r7,r6,-12
   125bc:	81c0041e 	bne	r16,r7,125d0 <_malloc_r+0x1dc>
   125c0:	0000fb06 	br	129b0 <_malloc_r+0x5bc>
   125c4:	1801030e 	bge	r3,zero,129d4 <_malloc_r+0x5e0>
   125c8:	84000317 	ldw	r16,12(r16)
   125cc:	81c0f826 	beq	r16,r7,129b0 <_malloc_r+0x5bc>
   125d0:	80800117 	ldw	r2,4(r16)
   125d4:	1284703a 	and	r2,r2,r10
   125d8:	1447c83a 	sub	r3,r2,r17
   125dc:	48fff90e 	bge	r9,r3,125c4 <_gp+0xffff1df8>
   125e0:	80800317 	ldw	r2,12(r16)
   125e4:	81000217 	ldw	r4,8(r16)
   125e8:	89400054 	ori	r5,r17,1
   125ec:	81400115 	stw	r5,4(r16)
   125f0:	20800315 	stw	r2,12(r4)
   125f4:	11000215 	stw	r4,8(r2)
   125f8:	8463883a 	add	r17,r16,r17
   125fc:	9c400515 	stw	r17,20(r19)
   12600:	9c400415 	stw	r17,16(r19)
   12604:	18800054 	ori	r2,r3,1
   12608:	88800115 	stw	r2,4(r17)
   1260c:	8a000315 	stw	r8,12(r17)
   12610:	8a000215 	stw	r8,8(r17)
   12614:	88e3883a 	add	r17,r17,r3
   12618:	88c00015 	stw	r3,0(r17)
   1261c:	9009883a 	mov	r4,r18
   12620:	0014aa00 	call	14aa0 <__malloc_unlock>
   12624:	80800204 	addi	r2,r16,8
   12628:	00001b06 	br	12698 <_malloc_r+0x2a4>
   1262c:	04400404 	movi	r17,16
   12630:	89402536 	bltu	r17,r5,126c8 <_malloc_r+0x2d4>
   12634:	0014a7c0 	call	14a7c <__malloc_lock>
   12638:	00800184 	movi	r2,6
   1263c:	01000084 	movi	r4,2
   12640:	04c00074 	movhi	r19,1
   12644:	1085883a 	add	r2,r2,r2
   12648:	9cdc6f04 	addi	r19,r19,29116
   1264c:	1085883a 	add	r2,r2,r2
   12650:	9885883a 	add	r2,r19,r2
   12654:	14000117 	ldw	r16,4(r2)
   12658:	10fffe04 	addi	r3,r2,-8
   1265c:	80c0d926 	beq	r16,r3,129c4 <_malloc_r+0x5d0>
   12660:	80c00117 	ldw	r3,4(r16)
   12664:	81000317 	ldw	r4,12(r16)
   12668:	00bfff04 	movi	r2,-4
   1266c:	1884703a 	and	r2,r3,r2
   12670:	81400217 	ldw	r5,8(r16)
   12674:	8085883a 	add	r2,r16,r2
   12678:	10c00117 	ldw	r3,4(r2)
   1267c:	29000315 	stw	r4,12(r5)
   12680:	21400215 	stw	r5,8(r4)
   12684:	18c00054 	ori	r3,r3,1
   12688:	10c00115 	stw	r3,4(r2)
   1268c:	9009883a 	mov	r4,r18
   12690:	0014aa00 	call	14aa0 <__malloc_unlock>
   12694:	80800204 	addi	r2,r16,8
   12698:	dfc00a17 	ldw	ra,40(sp)
   1269c:	df000917 	ldw	fp,36(sp)
   126a0:	ddc00817 	ldw	r23,32(sp)
   126a4:	dd800717 	ldw	r22,28(sp)
   126a8:	dd400617 	ldw	r21,24(sp)
   126ac:	dd000517 	ldw	r20,20(sp)
   126b0:	dcc00417 	ldw	r19,16(sp)
   126b4:	dc800317 	ldw	r18,12(sp)
   126b8:	dc400217 	ldw	r17,8(sp)
   126bc:	dc000117 	ldw	r16,4(sp)
   126c0:	dec00b04 	addi	sp,sp,44
   126c4:	f800283a 	ret
   126c8:	00800304 	movi	r2,12
   126cc:	90800015 	stw	r2,0(r18)
   126d0:	0005883a 	mov	r2,zero
   126d4:	003ff006 	br	12698 <_gp+0xffff1ecc>
   126d8:	01002004 	movi	r4,128
   126dc:	02001004 	movi	r8,64
   126e0:	01c00fc4 	movi	r7,63
   126e4:	003f6106 	br	1246c <_gp+0xffff1ca0>
   126e8:	4009883a 	mov	r4,r8
   126ec:	003f7506 	br	124c4 <_gp+0xffff1cf8>
   126f0:	81000317 	ldw	r4,12(r16)
   126f4:	003fde06 	br	12670 <_gp+0xffff1ea4>
   126f8:	81c5883a 	add	r2,r16,r7
   126fc:	11400117 	ldw	r5,4(r2)
   12700:	9009883a 	mov	r4,r18
   12704:	29400054 	ori	r5,r5,1
   12708:	11400115 	stw	r5,4(r2)
   1270c:	0014aa00 	call	14aa0 <__malloc_unlock>
   12710:	80800204 	addi	r2,r16,8
   12714:	003fe006 	br	12698 <_gp+0xffff1ecc>
   12718:	9c000217 	ldw	r16,8(r19)
   1271c:	00bfff04 	movi	r2,-4
   12720:	85800117 	ldw	r22,4(r16)
   12724:	b0ac703a 	and	r22,r22,r2
   12728:	b4400336 	bltu	r22,r17,12738 <_malloc_r+0x344>
   1272c:	b445c83a 	sub	r2,r22,r17
   12730:	00c003c4 	movi	r3,15
   12734:	18805d16 	blt	r3,r2,128ac <_malloc_r+0x4b8>
   12738:	05c000b4 	movhi	r23,2
   1273c:	008000b4 	movhi	r2,2
   12740:	10a8b404 	addi	r2,r2,-23856
   12744:	bde1f604 	addi	r23,r23,-30760
   12748:	15400017 	ldw	r21,0(r2)
   1274c:	b8c00017 	ldw	r3,0(r23)
   12750:	00bfffc4 	movi	r2,-1
   12754:	858d883a 	add	r6,r16,r22
   12758:	8d6b883a 	add	r21,r17,r21
   1275c:	1880ea26 	beq	r3,r2,12b08 <_malloc_r+0x714>
   12760:	ad4403c4 	addi	r21,r21,4111
   12764:	00bc0004 	movi	r2,-4096
   12768:	a8aa703a 	and	r21,r21,r2
   1276c:	a80b883a 	mov	r5,r21
   12770:	9009883a 	mov	r4,r18
   12774:	d9800015 	stw	r6,0(sp)
   12778:	00136140 	call	13614 <_sbrk_r>
   1277c:	1029883a 	mov	r20,r2
   12780:	00bfffc4 	movi	r2,-1
   12784:	d9800017 	ldw	r6,0(sp)
   12788:	a080e826 	beq	r20,r2,12b2c <_malloc_r+0x738>
   1278c:	a180a636 	bltu	r20,r6,12a28 <_malloc_r+0x634>
   12790:	070000b4 	movhi	fp,2
   12794:	e728f104 	addi	fp,fp,-23612
   12798:	e0800017 	ldw	r2,0(fp)
   1279c:	a887883a 	add	r3,r21,r2
   127a0:	e0c00015 	stw	r3,0(fp)
   127a4:	3500e626 	beq	r6,r20,12b40 <_malloc_r+0x74c>
   127a8:	b9000017 	ldw	r4,0(r23)
   127ac:	00bfffc4 	movi	r2,-1
   127b0:	2080ee26 	beq	r4,r2,12b6c <_malloc_r+0x778>
   127b4:	a185c83a 	sub	r2,r20,r6
   127b8:	10c5883a 	add	r2,r2,r3
   127bc:	e0800015 	stw	r2,0(fp)
   127c0:	a0c001cc 	andi	r3,r20,7
   127c4:	1800bc26 	beq	r3,zero,12ab8 <_malloc_r+0x6c4>
   127c8:	a0e9c83a 	sub	r20,r20,r3
   127cc:	00840204 	movi	r2,4104
   127d0:	a5000204 	addi	r20,r20,8
   127d4:	10c7c83a 	sub	r3,r2,r3
   127d8:	a545883a 	add	r2,r20,r21
   127dc:	1083ffcc 	andi	r2,r2,4095
   127e0:	18abc83a 	sub	r21,r3,r2
   127e4:	a80b883a 	mov	r5,r21
   127e8:	9009883a 	mov	r4,r18
   127ec:	00136140 	call	13614 <_sbrk_r>
   127f0:	00ffffc4 	movi	r3,-1
   127f4:	10c0e126 	beq	r2,r3,12b7c <_malloc_r+0x788>
   127f8:	1505c83a 	sub	r2,r2,r20
   127fc:	1545883a 	add	r2,r2,r21
   12800:	10800054 	ori	r2,r2,1
   12804:	e0c00017 	ldw	r3,0(fp)
   12808:	9d000215 	stw	r20,8(r19)
   1280c:	a0800115 	stw	r2,4(r20)
   12810:	a8c7883a 	add	r3,r21,r3
   12814:	e0c00015 	stw	r3,0(fp)
   12818:	84c00e26 	beq	r16,r19,12854 <_malloc_r+0x460>
   1281c:	018003c4 	movi	r6,15
   12820:	3580a72e 	bgeu	r6,r22,12ac0 <_malloc_r+0x6cc>
   12824:	81400117 	ldw	r5,4(r16)
   12828:	013ffe04 	movi	r4,-8
   1282c:	b0bffd04 	addi	r2,r22,-12
   12830:	1104703a 	and	r2,r2,r4
   12834:	2900004c 	andi	r4,r5,1
   12838:	2088b03a 	or	r4,r4,r2
   1283c:	81000115 	stw	r4,4(r16)
   12840:	01400144 	movi	r5,5
   12844:	8089883a 	add	r4,r16,r2
   12848:	21400115 	stw	r5,4(r4)
   1284c:	21400215 	stw	r5,8(r4)
   12850:	3080cd36 	bltu	r6,r2,12b88 <_malloc_r+0x794>
   12854:	008000b4 	movhi	r2,2
   12858:	10a8b304 	addi	r2,r2,-23860
   1285c:	11000017 	ldw	r4,0(r2)
   12860:	20c0012e 	bgeu	r4,r3,12868 <_malloc_r+0x474>
   12864:	10c00015 	stw	r3,0(r2)
   12868:	008000b4 	movhi	r2,2
   1286c:	10a8b204 	addi	r2,r2,-23864
   12870:	11000017 	ldw	r4,0(r2)
   12874:	9c000217 	ldw	r16,8(r19)
   12878:	20c0012e 	bgeu	r4,r3,12880 <_malloc_r+0x48c>
   1287c:	10c00015 	stw	r3,0(r2)
   12880:	80c00117 	ldw	r3,4(r16)
   12884:	00bfff04 	movi	r2,-4
   12888:	1886703a 	and	r3,r3,r2
   1288c:	1c45c83a 	sub	r2,r3,r17
   12890:	1c400236 	bltu	r3,r17,1289c <_malloc_r+0x4a8>
   12894:	00c003c4 	movi	r3,15
   12898:	18800416 	blt	r3,r2,128ac <_malloc_r+0x4b8>
   1289c:	9009883a 	mov	r4,r18
   128a0:	0014aa00 	call	14aa0 <__malloc_unlock>
   128a4:	0005883a 	mov	r2,zero
   128a8:	003f7b06 	br	12698 <_gp+0xffff1ecc>
   128ac:	88c00054 	ori	r3,r17,1
   128b0:	80c00115 	stw	r3,4(r16)
   128b4:	8463883a 	add	r17,r16,r17
   128b8:	10800054 	ori	r2,r2,1
   128bc:	9c400215 	stw	r17,8(r19)
   128c0:	88800115 	stw	r2,4(r17)
   128c4:	9009883a 	mov	r4,r18
   128c8:	0014aa00 	call	14aa0 <__malloc_unlock>
   128cc:	80800204 	addi	r2,r16,8
   128d0:	003f7106 	br	12698 <_gp+0xffff1ecc>
   128d4:	00c00504 	movi	r3,20
   128d8:	18804a2e 	bgeu	r3,r2,12a04 <_malloc_r+0x610>
   128dc:	00c01504 	movi	r3,84
   128e0:	18806e36 	bltu	r3,r2,12a9c <_malloc_r+0x6a8>
   128e4:	8804d33a 	srli	r2,r17,12
   128e8:	12001bc4 	addi	r8,r2,111
   128ec:	11c01b84 	addi	r7,r2,110
   128f0:	4209883a 	add	r4,r8,r8
   128f4:	003edd06 	br	1246c <_gp+0xffff1ca0>
   128f8:	3804d27a 	srli	r2,r7,9
   128fc:	00c00104 	movi	r3,4
   12900:	1880442e 	bgeu	r3,r2,12a14 <_malloc_r+0x620>
   12904:	00c00504 	movi	r3,20
   12908:	18808136 	bltu	r3,r2,12b10 <_malloc_r+0x71c>
   1290c:	11401704 	addi	r5,r2,92
   12910:	10c016c4 	addi	r3,r2,91
   12914:	294b883a 	add	r5,r5,r5
   12918:	294b883a 	add	r5,r5,r5
   1291c:	294b883a 	add	r5,r5,r5
   12920:	994b883a 	add	r5,r19,r5
   12924:	28800017 	ldw	r2,0(r5)
   12928:	01800074 	movhi	r6,1
   1292c:	297ffe04 	addi	r5,r5,-8
   12930:	319c6f04 	addi	r6,r6,29116
   12934:	28806526 	beq	r5,r2,12acc <_malloc_r+0x6d8>
   12938:	01bfff04 	movi	r6,-4
   1293c:	10c00117 	ldw	r3,4(r2)
   12940:	1986703a 	and	r3,r3,r6
   12944:	38c0022e 	bgeu	r7,r3,12950 <_malloc_r+0x55c>
   12948:	10800217 	ldw	r2,8(r2)
   1294c:	28bffb1e 	bne	r5,r2,1293c <_gp+0xffff2170>
   12950:	11400317 	ldw	r5,12(r2)
   12954:	98c00117 	ldw	r3,4(r19)
   12958:	81400315 	stw	r5,12(r16)
   1295c:	80800215 	stw	r2,8(r16)
   12960:	2c000215 	stw	r16,8(r5)
   12964:	14000315 	stw	r16,12(r2)
   12968:	003ef806 	br	1254c <_gp+0xffff1d80>
   1296c:	88c00054 	ori	r3,r17,1
   12970:	80c00115 	stw	r3,4(r16)
   12974:	8463883a 	add	r17,r16,r17
   12978:	34400515 	stw	r17,20(r6)
   1297c:	34400415 	stw	r17,16(r6)
   12980:	10c00054 	ori	r3,r2,1
   12984:	8a000315 	stw	r8,12(r17)
   12988:	8a000215 	stw	r8,8(r17)
   1298c:	88c00115 	stw	r3,4(r17)
   12990:	88a3883a 	add	r17,r17,r2
   12994:	88800015 	stw	r2,0(r17)
   12998:	9009883a 	mov	r4,r18
   1299c:	0014aa00 	call	14aa0 <__malloc_unlock>
   129a0:	80800204 	addi	r2,r16,8
   129a4:	003f3c06 	br	12698 <_gp+0xffff1ecc>
   129a8:	30c00117 	ldw	r3,4(r6)
   129ac:	003ee706 	br	1254c <_gp+0xffff1d80>
   129b0:	5ac00044 	addi	r11,r11,1
   129b4:	588000cc 	andi	r2,r11,3
   129b8:	31800204 	addi	r6,r6,8
   129bc:	103efd1e 	bne	r2,zero,125b4 <_gp+0xffff1de8>
   129c0:	00002406 	br	12a54 <_malloc_r+0x660>
   129c4:	14000317 	ldw	r16,12(r2)
   129c8:	143f251e 	bne	r2,r16,12660 <_gp+0xffff1e94>
   129cc:	21000084 	addi	r4,r4,2
   129d0:	003ebc06 	br	124c4 <_gp+0xffff1cf8>
   129d4:	8085883a 	add	r2,r16,r2
   129d8:	10c00117 	ldw	r3,4(r2)
   129dc:	81000317 	ldw	r4,12(r16)
   129e0:	81400217 	ldw	r5,8(r16)
   129e4:	18c00054 	ori	r3,r3,1
   129e8:	10c00115 	stw	r3,4(r2)
   129ec:	29000315 	stw	r4,12(r5)
   129f0:	21400215 	stw	r5,8(r4)
   129f4:	9009883a 	mov	r4,r18
   129f8:	0014aa00 	call	14aa0 <__malloc_unlock>
   129fc:	80800204 	addi	r2,r16,8
   12a00:	003f2506 	br	12698 <_gp+0xffff1ecc>
   12a04:	12001704 	addi	r8,r2,92
   12a08:	11c016c4 	addi	r7,r2,91
   12a0c:	4209883a 	add	r4,r8,r8
   12a10:	003e9606 	br	1246c <_gp+0xffff1ca0>
   12a14:	3804d1ba 	srli	r2,r7,6
   12a18:	11400e44 	addi	r5,r2,57
   12a1c:	10c00e04 	addi	r3,r2,56
   12a20:	294b883a 	add	r5,r5,r5
   12a24:	003fbc06 	br	12918 <_gp+0xffff214c>
   12a28:	84ff5926 	beq	r16,r19,12790 <_gp+0xffff1fc4>
   12a2c:	00800074 	movhi	r2,1
   12a30:	109c6f04 	addi	r2,r2,29116
   12a34:	14000217 	ldw	r16,8(r2)
   12a38:	00bfff04 	movi	r2,-4
   12a3c:	80c00117 	ldw	r3,4(r16)
   12a40:	1886703a 	and	r3,r3,r2
   12a44:	003f9106 	br	1288c <_gp+0xffff20c0>
   12a48:	60800217 	ldw	r2,8(r12)
   12a4c:	213fffc4 	addi	r4,r4,-1
   12a50:	1300651e 	bne	r2,r12,12be8 <_malloc_r+0x7f4>
   12a54:	208000cc 	andi	r2,r4,3
   12a58:	633ffe04 	addi	r12,r12,-8
   12a5c:	103ffa1e 	bne	r2,zero,12a48 <_gp+0xffff227c>
   12a60:	98800117 	ldw	r2,4(r19)
   12a64:	0146303a 	nor	r3,zero,r5
   12a68:	1884703a 	and	r2,r3,r2
   12a6c:	98800115 	stw	r2,4(r19)
   12a70:	294b883a 	add	r5,r5,r5
   12a74:	117f2836 	bltu	r2,r5,12718 <_gp+0xffff1f4c>
   12a78:	283f2726 	beq	r5,zero,12718 <_gp+0xffff1f4c>
   12a7c:	2886703a 	and	r3,r5,r2
   12a80:	5809883a 	mov	r4,r11
   12a84:	183ec31e 	bne	r3,zero,12594 <_gp+0xffff1dc8>
   12a88:	294b883a 	add	r5,r5,r5
   12a8c:	2886703a 	and	r3,r5,r2
   12a90:	21000104 	addi	r4,r4,4
   12a94:	183ffc26 	beq	r3,zero,12a88 <_gp+0xffff22bc>
   12a98:	003ebe06 	br	12594 <_gp+0xffff1dc8>
   12a9c:	00c05504 	movi	r3,340
   12aa0:	18801236 	bltu	r3,r2,12aec <_malloc_r+0x6f8>
   12aa4:	8804d3fa 	srli	r2,r17,15
   12aa8:	12001e04 	addi	r8,r2,120
   12aac:	11c01dc4 	addi	r7,r2,119
   12ab0:	4209883a 	add	r4,r8,r8
   12ab4:	003e6d06 	br	1246c <_gp+0xffff1ca0>
   12ab8:	00c40004 	movi	r3,4096
   12abc:	003f4606 	br	127d8 <_gp+0xffff200c>
   12ac0:	00800044 	movi	r2,1
   12ac4:	a0800115 	stw	r2,4(r20)
   12ac8:	003f7406 	br	1289c <_gp+0xffff20d0>
   12acc:	1805d0ba 	srai	r2,r3,2
   12ad0:	01c00044 	movi	r7,1
   12ad4:	30c00117 	ldw	r3,4(r6)
   12ad8:	388e983a 	sll	r7,r7,r2
   12adc:	2805883a 	mov	r2,r5
   12ae0:	38c6b03a 	or	r3,r7,r3
   12ae4:	30c00115 	stw	r3,4(r6)
   12ae8:	003f9b06 	br	12958 <_gp+0xffff218c>
   12aec:	00c15504 	movi	r3,1364
   12af0:	18801a36 	bltu	r3,r2,12b5c <_malloc_r+0x768>
   12af4:	8804d4ba 	srli	r2,r17,18
   12af8:	12001f44 	addi	r8,r2,125
   12afc:	11c01f04 	addi	r7,r2,124
   12b00:	4209883a 	add	r4,r8,r8
   12b04:	003e5906 	br	1246c <_gp+0xffff1ca0>
   12b08:	ad400404 	addi	r21,r21,16
   12b0c:	003f1706 	br	1276c <_gp+0xffff1fa0>
   12b10:	00c01504 	movi	r3,84
   12b14:	18802336 	bltu	r3,r2,12ba4 <_malloc_r+0x7b0>
   12b18:	3804d33a 	srli	r2,r7,12
   12b1c:	11401bc4 	addi	r5,r2,111
   12b20:	10c01b84 	addi	r3,r2,110
   12b24:	294b883a 	add	r5,r5,r5
   12b28:	003f7b06 	br	12918 <_gp+0xffff214c>
   12b2c:	9c000217 	ldw	r16,8(r19)
   12b30:	00bfff04 	movi	r2,-4
   12b34:	80c00117 	ldw	r3,4(r16)
   12b38:	1886703a 	and	r3,r3,r2
   12b3c:	003f5306 	br	1288c <_gp+0xffff20c0>
   12b40:	3083ffcc 	andi	r2,r6,4095
   12b44:	103f181e 	bne	r2,zero,127a8 <_gp+0xffff1fdc>
   12b48:	99000217 	ldw	r4,8(r19)
   12b4c:	b545883a 	add	r2,r22,r21
   12b50:	10800054 	ori	r2,r2,1
   12b54:	20800115 	stw	r2,4(r4)
   12b58:	003f3e06 	br	12854 <_gp+0xffff2088>
   12b5c:	01003f84 	movi	r4,254
   12b60:	02001fc4 	movi	r8,127
   12b64:	01c01f84 	movi	r7,126
   12b68:	003e4006 	br	1246c <_gp+0xffff1ca0>
   12b6c:	008000b4 	movhi	r2,2
   12b70:	10a1f604 	addi	r2,r2,-30760
   12b74:	15000015 	stw	r20,0(r2)
   12b78:	003f1106 	br	127c0 <_gp+0xffff1ff4>
   12b7c:	00800044 	movi	r2,1
   12b80:	002b883a 	mov	r21,zero
   12b84:	003f1f06 	br	12804 <_gp+0xffff2038>
   12b88:	81400204 	addi	r5,r16,8
   12b8c:	9009883a 	mov	r4,r18
   12b90:	0013e7c0 	call	13e7c <_free_r>
   12b94:	008000b4 	movhi	r2,2
   12b98:	10a8f104 	addi	r2,r2,-23612
   12b9c:	10c00017 	ldw	r3,0(r2)
   12ba0:	003f2c06 	br	12854 <_gp+0xffff2088>
   12ba4:	00c05504 	movi	r3,340
   12ba8:	18800536 	bltu	r3,r2,12bc0 <_malloc_r+0x7cc>
   12bac:	3804d3fa 	srli	r2,r7,15
   12bb0:	11401e04 	addi	r5,r2,120
   12bb4:	10c01dc4 	addi	r3,r2,119
   12bb8:	294b883a 	add	r5,r5,r5
   12bbc:	003f5606 	br	12918 <_gp+0xffff214c>
   12bc0:	00c15504 	movi	r3,1364
   12bc4:	18800536 	bltu	r3,r2,12bdc <_malloc_r+0x7e8>
   12bc8:	3804d4ba 	srli	r2,r7,18
   12bcc:	11401f44 	addi	r5,r2,125
   12bd0:	10c01f04 	addi	r3,r2,124
   12bd4:	294b883a 	add	r5,r5,r5
   12bd8:	003f4f06 	br	12918 <_gp+0xffff214c>
   12bdc:	01403f84 	movi	r5,254
   12be0:	00c01f84 	movi	r3,126
   12be4:	003f4c06 	br	12918 <_gp+0xffff214c>
   12be8:	98800117 	ldw	r2,4(r19)
   12bec:	003fa006 	br	12a70 <_gp+0xffff22a4>
   12bf0:	8808d0fa 	srli	r4,r17,3
   12bf4:	20800044 	addi	r2,r4,1
   12bf8:	1085883a 	add	r2,r2,r2
   12bfc:	003e9006 	br	12640 <_gp+0xffff1e74>

00012c00 <memchr>:
   12c00:	208000cc 	andi	r2,r4,3
   12c04:	280f883a 	mov	r7,r5
   12c08:	10003426 	beq	r2,zero,12cdc <memchr+0xdc>
   12c0c:	30bfffc4 	addi	r2,r6,-1
   12c10:	30001a26 	beq	r6,zero,12c7c <memchr+0x7c>
   12c14:	20c00003 	ldbu	r3,0(r4)
   12c18:	29803fcc 	andi	r6,r5,255
   12c1c:	30c0051e 	bne	r6,r3,12c34 <memchr+0x34>
   12c20:	00001806 	br	12c84 <memchr+0x84>
   12c24:	10001526 	beq	r2,zero,12c7c <memchr+0x7c>
   12c28:	20c00003 	ldbu	r3,0(r4)
   12c2c:	10bfffc4 	addi	r2,r2,-1
   12c30:	30c01426 	beq	r6,r3,12c84 <memchr+0x84>
   12c34:	21000044 	addi	r4,r4,1
   12c38:	20c000cc 	andi	r3,r4,3
   12c3c:	183ff91e 	bne	r3,zero,12c24 <_gp+0xffff2458>
   12c40:	020000c4 	movi	r8,3
   12c44:	40801136 	bltu	r8,r2,12c8c <memchr+0x8c>
   12c48:	10000c26 	beq	r2,zero,12c7c <memchr+0x7c>
   12c4c:	20c00003 	ldbu	r3,0(r4)
   12c50:	29403fcc 	andi	r5,r5,255
   12c54:	28c00b26 	beq	r5,r3,12c84 <memchr+0x84>
   12c58:	20c00044 	addi	r3,r4,1
   12c5c:	39803fcc 	andi	r6,r7,255
   12c60:	2089883a 	add	r4,r4,r2
   12c64:	00000306 	br	12c74 <memchr+0x74>
   12c68:	18c00044 	addi	r3,r3,1
   12c6c:	197fffc3 	ldbu	r5,-1(r3)
   12c70:	31400526 	beq	r6,r5,12c88 <memchr+0x88>
   12c74:	1805883a 	mov	r2,r3
   12c78:	20fffb1e 	bne	r4,r3,12c68 <_gp+0xffff249c>
   12c7c:	0005883a 	mov	r2,zero
   12c80:	f800283a 	ret
   12c84:	2005883a 	mov	r2,r4
   12c88:	f800283a 	ret
   12c8c:	28c03fcc 	andi	r3,r5,255
   12c90:	1812923a 	slli	r9,r3,8
   12c94:	02ffbff4 	movhi	r11,65279
   12c98:	02a02074 	movhi	r10,32897
   12c9c:	48d2b03a 	or	r9,r9,r3
   12ca0:	4806943a 	slli	r3,r9,16
   12ca4:	5affbfc4 	addi	r11,r11,-257
   12ca8:	52a02004 	addi	r10,r10,-32640
   12cac:	48d2b03a 	or	r9,r9,r3
   12cb0:	20c00017 	ldw	r3,0(r4)
   12cb4:	48c6f03a 	xor	r3,r9,r3
   12cb8:	1acd883a 	add	r6,r3,r11
   12cbc:	00c6303a 	nor	r3,zero,r3
   12cc0:	30c6703a 	and	r3,r6,r3
   12cc4:	1a86703a 	and	r3,r3,r10
   12cc8:	183fe01e 	bne	r3,zero,12c4c <_gp+0xffff2480>
   12ccc:	10bfff04 	addi	r2,r2,-4
   12cd0:	21000104 	addi	r4,r4,4
   12cd4:	40bff636 	bltu	r8,r2,12cb0 <_gp+0xffff24e4>
   12cd8:	003fdb06 	br	12c48 <_gp+0xffff247c>
   12cdc:	3005883a 	mov	r2,r6
   12ce0:	003fd706 	br	12c40 <_gp+0xffff2474>

00012ce4 <memcpy>:
   12ce4:	defffd04 	addi	sp,sp,-12
   12ce8:	dfc00215 	stw	ra,8(sp)
   12cec:	dc400115 	stw	r17,4(sp)
   12cf0:	dc000015 	stw	r16,0(sp)
   12cf4:	00c003c4 	movi	r3,15
   12cf8:	2005883a 	mov	r2,r4
   12cfc:	1980452e 	bgeu	r3,r6,12e14 <memcpy+0x130>
   12d00:	2906b03a 	or	r3,r5,r4
   12d04:	18c000cc 	andi	r3,r3,3
   12d08:	1800441e 	bne	r3,zero,12e1c <memcpy+0x138>
   12d0c:	347ffc04 	addi	r17,r6,-16
   12d10:	8822d13a 	srli	r17,r17,4
   12d14:	28c00104 	addi	r3,r5,4
   12d18:	23400104 	addi	r13,r4,4
   12d1c:	8820913a 	slli	r16,r17,4
   12d20:	2b000204 	addi	r12,r5,8
   12d24:	22c00204 	addi	r11,r4,8
   12d28:	84000504 	addi	r16,r16,20
   12d2c:	2a800304 	addi	r10,r5,12
   12d30:	22400304 	addi	r9,r4,12
   12d34:	2c21883a 	add	r16,r5,r16
   12d38:	2811883a 	mov	r8,r5
   12d3c:	200f883a 	mov	r7,r4
   12d40:	41000017 	ldw	r4,0(r8)
   12d44:	1fc00017 	ldw	ra,0(r3)
   12d48:	63c00017 	ldw	r15,0(r12)
   12d4c:	39000015 	stw	r4,0(r7)
   12d50:	53800017 	ldw	r14,0(r10)
   12d54:	6fc00015 	stw	ra,0(r13)
   12d58:	5bc00015 	stw	r15,0(r11)
   12d5c:	4b800015 	stw	r14,0(r9)
   12d60:	18c00404 	addi	r3,r3,16
   12d64:	39c00404 	addi	r7,r7,16
   12d68:	42000404 	addi	r8,r8,16
   12d6c:	6b400404 	addi	r13,r13,16
   12d70:	63000404 	addi	r12,r12,16
   12d74:	5ac00404 	addi	r11,r11,16
   12d78:	52800404 	addi	r10,r10,16
   12d7c:	4a400404 	addi	r9,r9,16
   12d80:	1c3fef1e 	bne	r3,r16,12d40 <_gp+0xffff2574>
   12d84:	89c00044 	addi	r7,r17,1
   12d88:	380e913a 	slli	r7,r7,4
   12d8c:	310003cc 	andi	r4,r6,15
   12d90:	02c000c4 	movi	r11,3
   12d94:	11c7883a 	add	r3,r2,r7
   12d98:	29cb883a 	add	r5,r5,r7
   12d9c:	5900212e 	bgeu	r11,r4,12e24 <memcpy+0x140>
   12da0:	1813883a 	mov	r9,r3
   12da4:	2811883a 	mov	r8,r5
   12da8:	200f883a 	mov	r7,r4
   12dac:	42800017 	ldw	r10,0(r8)
   12db0:	4a400104 	addi	r9,r9,4
   12db4:	39ffff04 	addi	r7,r7,-4
   12db8:	4abfff15 	stw	r10,-4(r9)
   12dbc:	42000104 	addi	r8,r8,4
   12dc0:	59fffa36 	bltu	r11,r7,12dac <_gp+0xffff25e0>
   12dc4:	213fff04 	addi	r4,r4,-4
   12dc8:	2008d0ba 	srli	r4,r4,2
   12dcc:	318000cc 	andi	r6,r6,3
   12dd0:	21000044 	addi	r4,r4,1
   12dd4:	2109883a 	add	r4,r4,r4
   12dd8:	2109883a 	add	r4,r4,r4
   12ddc:	1907883a 	add	r3,r3,r4
   12de0:	290b883a 	add	r5,r5,r4
   12de4:	30000626 	beq	r6,zero,12e00 <memcpy+0x11c>
   12de8:	198d883a 	add	r6,r3,r6
   12dec:	29c00003 	ldbu	r7,0(r5)
   12df0:	18c00044 	addi	r3,r3,1
   12df4:	29400044 	addi	r5,r5,1
   12df8:	19ffffc5 	stb	r7,-1(r3)
   12dfc:	19bffb1e 	bne	r3,r6,12dec <_gp+0xffff2620>
   12e00:	dfc00217 	ldw	ra,8(sp)
   12e04:	dc400117 	ldw	r17,4(sp)
   12e08:	dc000017 	ldw	r16,0(sp)
   12e0c:	dec00304 	addi	sp,sp,12
   12e10:	f800283a 	ret
   12e14:	2007883a 	mov	r3,r4
   12e18:	003ff206 	br	12de4 <_gp+0xffff2618>
   12e1c:	2007883a 	mov	r3,r4
   12e20:	003ff106 	br	12de8 <_gp+0xffff261c>
   12e24:	200d883a 	mov	r6,r4
   12e28:	003fee06 	br	12de4 <_gp+0xffff2618>

00012e2c <memmove>:
   12e2c:	2005883a 	mov	r2,r4
   12e30:	29000b2e 	bgeu	r5,r4,12e60 <memmove+0x34>
   12e34:	298f883a 	add	r7,r5,r6
   12e38:	21c0092e 	bgeu	r4,r7,12e60 <memmove+0x34>
   12e3c:	2187883a 	add	r3,r4,r6
   12e40:	198bc83a 	sub	r5,r3,r6
   12e44:	30004826 	beq	r6,zero,12f68 <memmove+0x13c>
   12e48:	39ffffc4 	addi	r7,r7,-1
   12e4c:	39000003 	ldbu	r4,0(r7)
   12e50:	18ffffc4 	addi	r3,r3,-1
   12e54:	19000005 	stb	r4,0(r3)
   12e58:	28fffb1e 	bne	r5,r3,12e48 <_gp+0xffff267c>
   12e5c:	f800283a 	ret
   12e60:	00c003c4 	movi	r3,15
   12e64:	1980412e 	bgeu	r3,r6,12f6c <memmove+0x140>
   12e68:	2886b03a 	or	r3,r5,r2
   12e6c:	18c000cc 	andi	r3,r3,3
   12e70:	1800401e 	bne	r3,zero,12f74 <memmove+0x148>
   12e74:	33fffc04 	addi	r15,r6,-16
   12e78:	781ed13a 	srli	r15,r15,4
   12e7c:	28c00104 	addi	r3,r5,4
   12e80:	13400104 	addi	r13,r2,4
   12e84:	781c913a 	slli	r14,r15,4
   12e88:	2b000204 	addi	r12,r5,8
   12e8c:	12c00204 	addi	r11,r2,8
   12e90:	73800504 	addi	r14,r14,20
   12e94:	2a800304 	addi	r10,r5,12
   12e98:	12400304 	addi	r9,r2,12
   12e9c:	2b9d883a 	add	r14,r5,r14
   12ea0:	2811883a 	mov	r8,r5
   12ea4:	100f883a 	mov	r7,r2
   12ea8:	41000017 	ldw	r4,0(r8)
   12eac:	39c00404 	addi	r7,r7,16
   12eb0:	18c00404 	addi	r3,r3,16
   12eb4:	393ffc15 	stw	r4,-16(r7)
   12eb8:	193ffc17 	ldw	r4,-16(r3)
   12ebc:	6b400404 	addi	r13,r13,16
   12ec0:	5ac00404 	addi	r11,r11,16
   12ec4:	693ffc15 	stw	r4,-16(r13)
   12ec8:	61000017 	ldw	r4,0(r12)
   12ecc:	4a400404 	addi	r9,r9,16
   12ed0:	42000404 	addi	r8,r8,16
   12ed4:	593ffc15 	stw	r4,-16(r11)
   12ed8:	51000017 	ldw	r4,0(r10)
   12edc:	63000404 	addi	r12,r12,16
   12ee0:	52800404 	addi	r10,r10,16
   12ee4:	493ffc15 	stw	r4,-16(r9)
   12ee8:	1bbfef1e 	bne	r3,r14,12ea8 <_gp+0xffff26dc>
   12eec:	79000044 	addi	r4,r15,1
   12ef0:	2008913a 	slli	r4,r4,4
   12ef4:	328003cc 	andi	r10,r6,15
   12ef8:	02c000c4 	movi	r11,3
   12efc:	1107883a 	add	r3,r2,r4
   12f00:	290b883a 	add	r5,r5,r4
   12f04:	5a801e2e 	bgeu	r11,r10,12f80 <memmove+0x154>
   12f08:	1813883a 	mov	r9,r3
   12f0c:	2811883a 	mov	r8,r5
   12f10:	500f883a 	mov	r7,r10
   12f14:	41000017 	ldw	r4,0(r8)
   12f18:	4a400104 	addi	r9,r9,4
   12f1c:	39ffff04 	addi	r7,r7,-4
   12f20:	493fff15 	stw	r4,-4(r9)
   12f24:	42000104 	addi	r8,r8,4
   12f28:	59fffa36 	bltu	r11,r7,12f14 <_gp+0xffff2748>
   12f2c:	513fff04 	addi	r4,r10,-4
   12f30:	2008d0ba 	srli	r4,r4,2
   12f34:	318000cc 	andi	r6,r6,3
   12f38:	21000044 	addi	r4,r4,1
   12f3c:	2109883a 	add	r4,r4,r4
   12f40:	2109883a 	add	r4,r4,r4
   12f44:	1907883a 	add	r3,r3,r4
   12f48:	290b883a 	add	r5,r5,r4
   12f4c:	30000b26 	beq	r6,zero,12f7c <memmove+0x150>
   12f50:	198d883a 	add	r6,r3,r6
   12f54:	29c00003 	ldbu	r7,0(r5)
   12f58:	18c00044 	addi	r3,r3,1
   12f5c:	29400044 	addi	r5,r5,1
   12f60:	19ffffc5 	stb	r7,-1(r3)
   12f64:	19bffb1e 	bne	r3,r6,12f54 <_gp+0xffff2788>
   12f68:	f800283a 	ret
   12f6c:	1007883a 	mov	r3,r2
   12f70:	003ff606 	br	12f4c <_gp+0xffff2780>
   12f74:	1007883a 	mov	r3,r2
   12f78:	003ff506 	br	12f50 <_gp+0xffff2784>
   12f7c:	f800283a 	ret
   12f80:	500d883a 	mov	r6,r10
   12f84:	003ff106 	br	12f4c <_gp+0xffff2780>

00012f88 <memset>:
   12f88:	20c000cc 	andi	r3,r4,3
   12f8c:	2005883a 	mov	r2,r4
   12f90:	18004426 	beq	r3,zero,130a4 <memset+0x11c>
   12f94:	31ffffc4 	addi	r7,r6,-1
   12f98:	30004026 	beq	r6,zero,1309c <memset+0x114>
   12f9c:	2813883a 	mov	r9,r5
   12fa0:	200d883a 	mov	r6,r4
   12fa4:	2007883a 	mov	r3,r4
   12fa8:	00000406 	br	12fbc <memset+0x34>
   12fac:	3a3fffc4 	addi	r8,r7,-1
   12fb0:	31800044 	addi	r6,r6,1
   12fb4:	38003926 	beq	r7,zero,1309c <memset+0x114>
   12fb8:	400f883a 	mov	r7,r8
   12fbc:	18c00044 	addi	r3,r3,1
   12fc0:	32400005 	stb	r9,0(r6)
   12fc4:	1a0000cc 	andi	r8,r3,3
   12fc8:	403ff81e 	bne	r8,zero,12fac <_gp+0xffff27e0>
   12fcc:	010000c4 	movi	r4,3
   12fd0:	21c02d2e 	bgeu	r4,r7,13088 <memset+0x100>
   12fd4:	29003fcc 	andi	r4,r5,255
   12fd8:	200c923a 	slli	r6,r4,8
   12fdc:	3108b03a 	or	r4,r6,r4
   12fe0:	200c943a 	slli	r6,r4,16
   12fe4:	218cb03a 	or	r6,r4,r6
   12fe8:	010003c4 	movi	r4,15
   12fec:	21c0182e 	bgeu	r4,r7,13050 <memset+0xc8>
   12ff0:	3b3ffc04 	addi	r12,r7,-16
   12ff4:	6018d13a 	srli	r12,r12,4
   12ff8:	1a000104 	addi	r8,r3,4
   12ffc:	1ac00204 	addi	r11,r3,8
   13000:	6008913a 	slli	r4,r12,4
   13004:	1a800304 	addi	r10,r3,12
   13008:	1813883a 	mov	r9,r3
   1300c:	21000504 	addi	r4,r4,20
   13010:	1909883a 	add	r4,r3,r4
   13014:	49800015 	stw	r6,0(r9)
   13018:	41800015 	stw	r6,0(r8)
   1301c:	59800015 	stw	r6,0(r11)
   13020:	51800015 	stw	r6,0(r10)
   13024:	42000404 	addi	r8,r8,16
   13028:	4a400404 	addi	r9,r9,16
   1302c:	5ac00404 	addi	r11,r11,16
   13030:	52800404 	addi	r10,r10,16
   13034:	413ff71e 	bne	r8,r4,13014 <_gp+0xffff2848>
   13038:	63000044 	addi	r12,r12,1
   1303c:	6018913a 	slli	r12,r12,4
   13040:	39c003cc 	andi	r7,r7,15
   13044:	010000c4 	movi	r4,3
   13048:	1b07883a 	add	r3,r3,r12
   1304c:	21c00e2e 	bgeu	r4,r7,13088 <memset+0x100>
   13050:	1813883a 	mov	r9,r3
   13054:	3811883a 	mov	r8,r7
   13058:	010000c4 	movi	r4,3
   1305c:	49800015 	stw	r6,0(r9)
   13060:	423fff04 	addi	r8,r8,-4
   13064:	4a400104 	addi	r9,r9,4
   13068:	223ffc36 	bltu	r4,r8,1305c <_gp+0xffff2890>
   1306c:	393fff04 	addi	r4,r7,-4
   13070:	2008d0ba 	srli	r4,r4,2
   13074:	39c000cc 	andi	r7,r7,3
   13078:	21000044 	addi	r4,r4,1
   1307c:	2109883a 	add	r4,r4,r4
   13080:	2109883a 	add	r4,r4,r4
   13084:	1907883a 	add	r3,r3,r4
   13088:	38000526 	beq	r7,zero,130a0 <memset+0x118>
   1308c:	19cf883a 	add	r7,r3,r7
   13090:	19400005 	stb	r5,0(r3)
   13094:	18c00044 	addi	r3,r3,1
   13098:	38fffd1e 	bne	r7,r3,13090 <_gp+0xffff28c4>
   1309c:	f800283a 	ret
   130a0:	f800283a 	ret
   130a4:	2007883a 	mov	r3,r4
   130a8:	300f883a 	mov	r7,r6
   130ac:	003fc706 	br	12fcc <_gp+0xffff2800>

000130b0 <_realloc_r>:
   130b0:	defff604 	addi	sp,sp,-40
   130b4:	dc800215 	stw	r18,8(sp)
   130b8:	dfc00915 	stw	ra,36(sp)
   130bc:	df000815 	stw	fp,32(sp)
   130c0:	ddc00715 	stw	r23,28(sp)
   130c4:	dd800615 	stw	r22,24(sp)
   130c8:	dd400515 	stw	r21,20(sp)
   130cc:	dd000415 	stw	r20,16(sp)
   130d0:	dcc00315 	stw	r19,12(sp)
   130d4:	dc400115 	stw	r17,4(sp)
   130d8:	dc000015 	stw	r16,0(sp)
   130dc:	3025883a 	mov	r18,r6
   130e0:	2800b726 	beq	r5,zero,133c0 <_realloc_r+0x310>
   130e4:	282b883a 	mov	r21,r5
   130e8:	2029883a 	mov	r20,r4
   130ec:	0014a7c0 	call	14a7c <__malloc_lock>
   130f0:	a8bfff17 	ldw	r2,-4(r21)
   130f4:	043fff04 	movi	r16,-4
   130f8:	90c002c4 	addi	r3,r18,11
   130fc:	01000584 	movi	r4,22
   13100:	acfffe04 	addi	r19,r21,-8
   13104:	1420703a 	and	r16,r2,r16
   13108:	20c0332e 	bgeu	r4,r3,131d8 <_realloc_r+0x128>
   1310c:	047ffe04 	movi	r17,-8
   13110:	1c62703a 	and	r17,r3,r17
   13114:	8807883a 	mov	r3,r17
   13118:	88005816 	blt	r17,zero,1327c <_realloc_r+0x1cc>
   1311c:	8c805736 	bltu	r17,r18,1327c <_realloc_r+0x1cc>
   13120:	80c0300e 	bge	r16,r3,131e4 <_realloc_r+0x134>
   13124:	07000074 	movhi	fp,1
   13128:	e71c6f04 	addi	fp,fp,29116
   1312c:	e1c00217 	ldw	r7,8(fp)
   13130:	9c09883a 	add	r4,r19,r16
   13134:	22000117 	ldw	r8,4(r4)
   13138:	21c06326 	beq	r4,r7,132c8 <_realloc_r+0x218>
   1313c:	017fff84 	movi	r5,-2
   13140:	414a703a 	and	r5,r8,r5
   13144:	214b883a 	add	r5,r4,r5
   13148:	29800117 	ldw	r6,4(r5)
   1314c:	3180004c 	andi	r6,r6,1
   13150:	30003f26 	beq	r6,zero,13250 <_realloc_r+0x1a0>
   13154:	1080004c 	andi	r2,r2,1
   13158:	10008326 	beq	r2,zero,13368 <_realloc_r+0x2b8>
   1315c:	900b883a 	mov	r5,r18
   13160:	a009883a 	mov	r4,r20
   13164:	00123f40 	call	123f4 <_malloc_r>
   13168:	1025883a 	mov	r18,r2
   1316c:	10011e26 	beq	r2,zero,135e8 <_realloc_r+0x538>
   13170:	a93fff17 	ldw	r4,-4(r21)
   13174:	10fffe04 	addi	r3,r2,-8
   13178:	00bfff84 	movi	r2,-2
   1317c:	2084703a 	and	r2,r4,r2
   13180:	9885883a 	add	r2,r19,r2
   13184:	1880ee26 	beq	r3,r2,13540 <_realloc_r+0x490>
   13188:	81bfff04 	addi	r6,r16,-4
   1318c:	00800904 	movi	r2,36
   13190:	1180b836 	bltu	r2,r6,13474 <_realloc_r+0x3c4>
   13194:	00c004c4 	movi	r3,19
   13198:	19809636 	bltu	r3,r6,133f4 <_realloc_r+0x344>
   1319c:	9005883a 	mov	r2,r18
   131a0:	a807883a 	mov	r3,r21
   131a4:	19000017 	ldw	r4,0(r3)
   131a8:	11000015 	stw	r4,0(r2)
   131ac:	19000117 	ldw	r4,4(r3)
   131b0:	11000115 	stw	r4,4(r2)
   131b4:	18c00217 	ldw	r3,8(r3)
   131b8:	10c00215 	stw	r3,8(r2)
   131bc:	a80b883a 	mov	r5,r21
   131c0:	a009883a 	mov	r4,r20
   131c4:	0013e7c0 	call	13e7c <_free_r>
   131c8:	a009883a 	mov	r4,r20
   131cc:	0014aa00 	call	14aa0 <__malloc_unlock>
   131d0:	9005883a 	mov	r2,r18
   131d4:	00001206 	br	13220 <_realloc_r+0x170>
   131d8:	00c00404 	movi	r3,16
   131dc:	1823883a 	mov	r17,r3
   131e0:	003fce06 	br	1311c <_gp+0xffff2950>
   131e4:	a825883a 	mov	r18,r21
   131e8:	8445c83a 	sub	r2,r16,r17
   131ec:	00c003c4 	movi	r3,15
   131f0:	18802636 	bltu	r3,r2,1328c <_realloc_r+0x1dc>
   131f4:	99800117 	ldw	r6,4(r19)
   131f8:	9c07883a 	add	r3,r19,r16
   131fc:	3180004c 	andi	r6,r6,1
   13200:	3420b03a 	or	r16,r6,r16
   13204:	9c000115 	stw	r16,4(r19)
   13208:	18800117 	ldw	r2,4(r3)
   1320c:	10800054 	ori	r2,r2,1
   13210:	18800115 	stw	r2,4(r3)
   13214:	a009883a 	mov	r4,r20
   13218:	0014aa00 	call	14aa0 <__malloc_unlock>
   1321c:	9005883a 	mov	r2,r18
   13220:	dfc00917 	ldw	ra,36(sp)
   13224:	df000817 	ldw	fp,32(sp)
   13228:	ddc00717 	ldw	r23,28(sp)
   1322c:	dd800617 	ldw	r22,24(sp)
   13230:	dd400517 	ldw	r21,20(sp)
   13234:	dd000417 	ldw	r20,16(sp)
   13238:	dcc00317 	ldw	r19,12(sp)
   1323c:	dc800217 	ldw	r18,8(sp)
   13240:	dc400117 	ldw	r17,4(sp)
   13244:	dc000017 	ldw	r16,0(sp)
   13248:	dec00a04 	addi	sp,sp,40
   1324c:	f800283a 	ret
   13250:	017fff04 	movi	r5,-4
   13254:	414a703a 	and	r5,r8,r5
   13258:	814d883a 	add	r6,r16,r5
   1325c:	30c01f16 	blt	r6,r3,132dc <_realloc_r+0x22c>
   13260:	20800317 	ldw	r2,12(r4)
   13264:	20c00217 	ldw	r3,8(r4)
   13268:	a825883a 	mov	r18,r21
   1326c:	3021883a 	mov	r16,r6
   13270:	18800315 	stw	r2,12(r3)
   13274:	10c00215 	stw	r3,8(r2)
   13278:	003fdb06 	br	131e8 <_gp+0xffff2a1c>
   1327c:	00800304 	movi	r2,12
   13280:	a0800015 	stw	r2,0(r20)
   13284:	0005883a 	mov	r2,zero
   13288:	003fe506 	br	13220 <_gp+0xffff2a54>
   1328c:	98c00117 	ldw	r3,4(r19)
   13290:	9c4b883a 	add	r5,r19,r17
   13294:	11000054 	ori	r4,r2,1
   13298:	18c0004c 	andi	r3,r3,1
   1329c:	1c62b03a 	or	r17,r3,r17
   132a0:	9c400115 	stw	r17,4(r19)
   132a4:	29000115 	stw	r4,4(r5)
   132a8:	2885883a 	add	r2,r5,r2
   132ac:	10c00117 	ldw	r3,4(r2)
   132b0:	29400204 	addi	r5,r5,8
   132b4:	a009883a 	mov	r4,r20
   132b8:	18c00054 	ori	r3,r3,1
   132bc:	10c00115 	stw	r3,4(r2)
   132c0:	0013e7c0 	call	13e7c <_free_r>
   132c4:	003fd306 	br	13214 <_gp+0xffff2a48>
   132c8:	017fff04 	movi	r5,-4
   132cc:	414a703a 	and	r5,r8,r5
   132d0:	89800404 	addi	r6,r17,16
   132d4:	8151883a 	add	r8,r16,r5
   132d8:	4180590e 	bge	r8,r6,13440 <_realloc_r+0x390>
   132dc:	1080004c 	andi	r2,r2,1
   132e0:	103f9e1e 	bne	r2,zero,1315c <_gp+0xffff2990>
   132e4:	adbffe17 	ldw	r22,-8(r21)
   132e8:	00bfff04 	movi	r2,-4
   132ec:	9dadc83a 	sub	r22,r19,r22
   132f0:	b1800117 	ldw	r6,4(r22)
   132f4:	3084703a 	and	r2,r6,r2
   132f8:	20002026 	beq	r4,zero,1337c <_realloc_r+0x2cc>
   132fc:	80af883a 	add	r23,r16,r2
   13300:	b96f883a 	add	r23,r23,r5
   13304:	21c05f26 	beq	r4,r7,13484 <_realloc_r+0x3d4>
   13308:	b8c01c16 	blt	r23,r3,1337c <_realloc_r+0x2cc>
   1330c:	20800317 	ldw	r2,12(r4)
   13310:	20c00217 	ldw	r3,8(r4)
   13314:	81bfff04 	addi	r6,r16,-4
   13318:	01000904 	movi	r4,36
   1331c:	18800315 	stw	r2,12(r3)
   13320:	10c00215 	stw	r3,8(r2)
   13324:	b0c00217 	ldw	r3,8(r22)
   13328:	b0800317 	ldw	r2,12(r22)
   1332c:	b4800204 	addi	r18,r22,8
   13330:	18800315 	stw	r2,12(r3)
   13334:	10c00215 	stw	r3,8(r2)
   13338:	21801b36 	bltu	r4,r6,133a8 <_realloc_r+0x2f8>
   1333c:	008004c4 	movi	r2,19
   13340:	1180352e 	bgeu	r2,r6,13418 <_realloc_r+0x368>
   13344:	a8800017 	ldw	r2,0(r21)
   13348:	b0800215 	stw	r2,8(r22)
   1334c:	a8800117 	ldw	r2,4(r21)
   13350:	b0800315 	stw	r2,12(r22)
   13354:	008006c4 	movi	r2,27
   13358:	11807f36 	bltu	r2,r6,13558 <_realloc_r+0x4a8>
   1335c:	b0800404 	addi	r2,r22,16
   13360:	ad400204 	addi	r21,r21,8
   13364:	00002d06 	br	1341c <_realloc_r+0x36c>
   13368:	adbffe17 	ldw	r22,-8(r21)
   1336c:	00bfff04 	movi	r2,-4
   13370:	9dadc83a 	sub	r22,r19,r22
   13374:	b1000117 	ldw	r4,4(r22)
   13378:	2084703a 	and	r2,r4,r2
   1337c:	b03f7726 	beq	r22,zero,1315c <_gp+0xffff2990>
   13380:	80af883a 	add	r23,r16,r2
   13384:	b8ff7516 	blt	r23,r3,1315c <_gp+0xffff2990>
   13388:	b0800317 	ldw	r2,12(r22)
   1338c:	b0c00217 	ldw	r3,8(r22)
   13390:	81bfff04 	addi	r6,r16,-4
   13394:	01000904 	movi	r4,36
   13398:	18800315 	stw	r2,12(r3)
   1339c:	10c00215 	stw	r3,8(r2)
   133a0:	b4800204 	addi	r18,r22,8
   133a4:	21bfe52e 	bgeu	r4,r6,1333c <_gp+0xffff2b70>
   133a8:	a80b883a 	mov	r5,r21
   133ac:	9009883a 	mov	r4,r18
   133b0:	0012e2c0 	call	12e2c <memmove>
   133b4:	b821883a 	mov	r16,r23
   133b8:	b027883a 	mov	r19,r22
   133bc:	003f8a06 	br	131e8 <_gp+0xffff2a1c>
   133c0:	300b883a 	mov	r5,r6
   133c4:	dfc00917 	ldw	ra,36(sp)
   133c8:	df000817 	ldw	fp,32(sp)
   133cc:	ddc00717 	ldw	r23,28(sp)
   133d0:	dd800617 	ldw	r22,24(sp)
   133d4:	dd400517 	ldw	r21,20(sp)
   133d8:	dd000417 	ldw	r20,16(sp)
   133dc:	dcc00317 	ldw	r19,12(sp)
   133e0:	dc800217 	ldw	r18,8(sp)
   133e4:	dc400117 	ldw	r17,4(sp)
   133e8:	dc000017 	ldw	r16,0(sp)
   133ec:	dec00a04 	addi	sp,sp,40
   133f0:	00123f41 	jmpi	123f4 <_malloc_r>
   133f4:	a8c00017 	ldw	r3,0(r21)
   133f8:	90c00015 	stw	r3,0(r18)
   133fc:	a8c00117 	ldw	r3,4(r21)
   13400:	90c00115 	stw	r3,4(r18)
   13404:	00c006c4 	movi	r3,27
   13408:	19804536 	bltu	r3,r6,13520 <_realloc_r+0x470>
   1340c:	90800204 	addi	r2,r18,8
   13410:	a8c00204 	addi	r3,r21,8
   13414:	003f6306 	br	131a4 <_gp+0xffff29d8>
   13418:	9005883a 	mov	r2,r18
   1341c:	a8c00017 	ldw	r3,0(r21)
   13420:	b821883a 	mov	r16,r23
   13424:	b027883a 	mov	r19,r22
   13428:	10c00015 	stw	r3,0(r2)
   1342c:	a8c00117 	ldw	r3,4(r21)
   13430:	10c00115 	stw	r3,4(r2)
   13434:	a8c00217 	ldw	r3,8(r21)
   13438:	10c00215 	stw	r3,8(r2)
   1343c:	003f6a06 	br	131e8 <_gp+0xffff2a1c>
   13440:	9c67883a 	add	r19,r19,r17
   13444:	4445c83a 	sub	r2,r8,r17
   13448:	e4c00215 	stw	r19,8(fp)
   1344c:	10800054 	ori	r2,r2,1
   13450:	98800115 	stw	r2,4(r19)
   13454:	a8bfff17 	ldw	r2,-4(r21)
   13458:	a009883a 	mov	r4,r20
   1345c:	1080004c 	andi	r2,r2,1
   13460:	1462b03a 	or	r17,r2,r17
   13464:	ac7fff15 	stw	r17,-4(r21)
   13468:	0014aa00 	call	14aa0 <__malloc_unlock>
   1346c:	a805883a 	mov	r2,r21
   13470:	003f6b06 	br	13220 <_gp+0xffff2a54>
   13474:	a80b883a 	mov	r5,r21
   13478:	9009883a 	mov	r4,r18
   1347c:	0012e2c0 	call	12e2c <memmove>
   13480:	003f4e06 	br	131bc <_gp+0xffff29f0>
   13484:	89000404 	addi	r4,r17,16
   13488:	b93fbc16 	blt	r23,r4,1337c <_gp+0xffff2bb0>
   1348c:	b0800317 	ldw	r2,12(r22)
   13490:	b0c00217 	ldw	r3,8(r22)
   13494:	81bfff04 	addi	r6,r16,-4
   13498:	01000904 	movi	r4,36
   1349c:	18800315 	stw	r2,12(r3)
   134a0:	10c00215 	stw	r3,8(r2)
   134a4:	b4800204 	addi	r18,r22,8
   134a8:	21804336 	bltu	r4,r6,135b8 <_realloc_r+0x508>
   134ac:	008004c4 	movi	r2,19
   134b0:	11803f2e 	bgeu	r2,r6,135b0 <_realloc_r+0x500>
   134b4:	a8800017 	ldw	r2,0(r21)
   134b8:	b0800215 	stw	r2,8(r22)
   134bc:	a8800117 	ldw	r2,4(r21)
   134c0:	b0800315 	stw	r2,12(r22)
   134c4:	008006c4 	movi	r2,27
   134c8:	11803f36 	bltu	r2,r6,135c8 <_realloc_r+0x518>
   134cc:	b0800404 	addi	r2,r22,16
   134d0:	ad400204 	addi	r21,r21,8
   134d4:	a8c00017 	ldw	r3,0(r21)
   134d8:	10c00015 	stw	r3,0(r2)
   134dc:	a8c00117 	ldw	r3,4(r21)
   134e0:	10c00115 	stw	r3,4(r2)
   134e4:	a8c00217 	ldw	r3,8(r21)
   134e8:	10c00215 	stw	r3,8(r2)
   134ec:	b447883a 	add	r3,r22,r17
   134f0:	bc45c83a 	sub	r2,r23,r17
   134f4:	e0c00215 	stw	r3,8(fp)
   134f8:	10800054 	ori	r2,r2,1
   134fc:	18800115 	stw	r2,4(r3)
   13500:	b0800117 	ldw	r2,4(r22)
   13504:	a009883a 	mov	r4,r20
   13508:	1080004c 	andi	r2,r2,1
   1350c:	1462b03a 	or	r17,r2,r17
   13510:	b4400115 	stw	r17,4(r22)
   13514:	0014aa00 	call	14aa0 <__malloc_unlock>
   13518:	9005883a 	mov	r2,r18
   1351c:	003f4006 	br	13220 <_gp+0xffff2a54>
   13520:	a8c00217 	ldw	r3,8(r21)
   13524:	90c00215 	stw	r3,8(r18)
   13528:	a8c00317 	ldw	r3,12(r21)
   1352c:	90c00315 	stw	r3,12(r18)
   13530:	30801126 	beq	r6,r2,13578 <_realloc_r+0x4c8>
   13534:	90800404 	addi	r2,r18,16
   13538:	a8c00404 	addi	r3,r21,16
   1353c:	003f1906 	br	131a4 <_gp+0xffff29d8>
   13540:	90ffff17 	ldw	r3,-4(r18)
   13544:	00bfff04 	movi	r2,-4
   13548:	a825883a 	mov	r18,r21
   1354c:	1884703a 	and	r2,r3,r2
   13550:	80a1883a 	add	r16,r16,r2
   13554:	003f2406 	br	131e8 <_gp+0xffff2a1c>
   13558:	a8800217 	ldw	r2,8(r21)
   1355c:	b0800415 	stw	r2,16(r22)
   13560:	a8800317 	ldw	r2,12(r21)
   13564:	b0800515 	stw	r2,20(r22)
   13568:	31000a26 	beq	r6,r4,13594 <_realloc_r+0x4e4>
   1356c:	b0800604 	addi	r2,r22,24
   13570:	ad400404 	addi	r21,r21,16
   13574:	003fa906 	br	1341c <_gp+0xffff2c50>
   13578:	a9000417 	ldw	r4,16(r21)
   1357c:	90800604 	addi	r2,r18,24
   13580:	a8c00604 	addi	r3,r21,24
   13584:	91000415 	stw	r4,16(r18)
   13588:	a9000517 	ldw	r4,20(r21)
   1358c:	91000515 	stw	r4,20(r18)
   13590:	003f0406 	br	131a4 <_gp+0xffff29d8>
   13594:	a8c00417 	ldw	r3,16(r21)
   13598:	ad400604 	addi	r21,r21,24
   1359c:	b0800804 	addi	r2,r22,32
   135a0:	b0c00615 	stw	r3,24(r22)
   135a4:	a8ffff17 	ldw	r3,-4(r21)
   135a8:	b0c00715 	stw	r3,28(r22)
   135ac:	003f9b06 	br	1341c <_gp+0xffff2c50>
   135b0:	9005883a 	mov	r2,r18
   135b4:	003fc706 	br	134d4 <_gp+0xffff2d08>
   135b8:	a80b883a 	mov	r5,r21
   135bc:	9009883a 	mov	r4,r18
   135c0:	0012e2c0 	call	12e2c <memmove>
   135c4:	003fc906 	br	134ec <_gp+0xffff2d20>
   135c8:	a8800217 	ldw	r2,8(r21)
   135cc:	b0800415 	stw	r2,16(r22)
   135d0:	a8800317 	ldw	r2,12(r21)
   135d4:	b0800515 	stw	r2,20(r22)
   135d8:	31000726 	beq	r6,r4,135f8 <_realloc_r+0x548>
   135dc:	b0800604 	addi	r2,r22,24
   135e0:	ad400404 	addi	r21,r21,16
   135e4:	003fbb06 	br	134d4 <_gp+0xffff2d08>
   135e8:	a009883a 	mov	r4,r20
   135ec:	0014aa00 	call	14aa0 <__malloc_unlock>
   135f0:	0005883a 	mov	r2,zero
   135f4:	003f0a06 	br	13220 <_gp+0xffff2a54>
   135f8:	a8c00417 	ldw	r3,16(r21)
   135fc:	ad400604 	addi	r21,r21,24
   13600:	b0800804 	addi	r2,r22,32
   13604:	b0c00615 	stw	r3,24(r22)
   13608:	a8ffff17 	ldw	r3,-4(r21)
   1360c:	b0c00715 	stw	r3,28(r22)
   13610:	003fb006 	br	134d4 <_gp+0xffff2d08>

00013614 <_sbrk_r>:
   13614:	defffd04 	addi	sp,sp,-12
   13618:	dc000015 	stw	r16,0(sp)
   1361c:	040000b4 	movhi	r16,2
   13620:	dc400115 	stw	r17,4(sp)
   13624:	8428b504 	addi	r16,r16,-23852
   13628:	2023883a 	mov	r17,r4
   1362c:	2809883a 	mov	r4,r5
   13630:	dfc00215 	stw	ra,8(sp)
   13634:	80000015 	stw	zero,0(r16)
   13638:	0014cc40 	call	14cc4 <sbrk>
   1363c:	00ffffc4 	movi	r3,-1
   13640:	10c00526 	beq	r2,r3,13658 <_sbrk_r+0x44>
   13644:	dfc00217 	ldw	ra,8(sp)
   13648:	dc400117 	ldw	r17,4(sp)
   1364c:	dc000017 	ldw	r16,0(sp)
   13650:	dec00304 	addi	sp,sp,12
   13654:	f800283a 	ret
   13658:	80c00017 	ldw	r3,0(r16)
   1365c:	183ff926 	beq	r3,zero,13644 <_gp+0xffff2e78>
   13660:	88c00015 	stw	r3,0(r17)
   13664:	003ff706 	br	13644 <_gp+0xffff2e78>

00013668 <__sread>:
   13668:	defffe04 	addi	sp,sp,-8
   1366c:	dc000015 	stw	r16,0(sp)
   13670:	2821883a 	mov	r16,r5
   13674:	2940038f 	ldh	r5,14(r5)
   13678:	dfc00115 	stw	ra,4(sp)
   1367c:	00143a80 	call	143a8 <_read_r>
   13680:	10000716 	blt	r2,zero,136a0 <__sread+0x38>
   13684:	80c01417 	ldw	r3,80(r16)
   13688:	1887883a 	add	r3,r3,r2
   1368c:	80c01415 	stw	r3,80(r16)
   13690:	dfc00117 	ldw	ra,4(sp)
   13694:	dc000017 	ldw	r16,0(sp)
   13698:	dec00204 	addi	sp,sp,8
   1369c:	f800283a 	ret
   136a0:	80c0030b 	ldhu	r3,12(r16)
   136a4:	18fbffcc 	andi	r3,r3,61439
   136a8:	80c0030d 	sth	r3,12(r16)
   136ac:	dfc00117 	ldw	ra,4(sp)
   136b0:	dc000017 	ldw	r16,0(sp)
   136b4:	dec00204 	addi	sp,sp,8
   136b8:	f800283a 	ret

000136bc <__seofread>:
   136bc:	0005883a 	mov	r2,zero
   136c0:	f800283a 	ret

000136c4 <__swrite>:
   136c4:	2880030b 	ldhu	r2,12(r5)
   136c8:	defffb04 	addi	sp,sp,-20
   136cc:	dcc00315 	stw	r19,12(sp)
   136d0:	dc800215 	stw	r18,8(sp)
   136d4:	dc400115 	stw	r17,4(sp)
   136d8:	dc000015 	stw	r16,0(sp)
   136dc:	dfc00415 	stw	ra,16(sp)
   136e0:	10c0400c 	andi	r3,r2,256
   136e4:	2821883a 	mov	r16,r5
   136e8:	2023883a 	mov	r17,r4
   136ec:	3025883a 	mov	r18,r6
   136f0:	3827883a 	mov	r19,r7
   136f4:	18000526 	beq	r3,zero,1370c <__swrite+0x48>
   136f8:	2940038f 	ldh	r5,14(r5)
   136fc:	01c00084 	movi	r7,2
   13700:	000d883a 	mov	r6,zero
   13704:	001418c0 	call	1418c <_lseek_r>
   13708:	8080030b 	ldhu	r2,12(r16)
   1370c:	8140038f 	ldh	r5,14(r16)
   13710:	10bbffcc 	andi	r2,r2,61439
   13714:	980f883a 	mov	r7,r19
   13718:	900d883a 	mov	r6,r18
   1371c:	8809883a 	mov	r4,r17
   13720:	8080030d 	sth	r2,12(r16)
   13724:	dfc00417 	ldw	ra,16(sp)
   13728:	dcc00317 	ldw	r19,12(sp)
   1372c:	dc800217 	ldw	r18,8(sp)
   13730:	dc400117 	ldw	r17,4(sp)
   13734:	dc000017 	ldw	r16,0(sp)
   13738:	dec00504 	addi	sp,sp,20
   1373c:	00137a41 	jmpi	137a4 <_write_r>

00013740 <__sseek>:
   13740:	defffe04 	addi	sp,sp,-8
   13744:	dc000015 	stw	r16,0(sp)
   13748:	2821883a 	mov	r16,r5
   1374c:	2940038f 	ldh	r5,14(r5)
   13750:	dfc00115 	stw	ra,4(sp)
   13754:	001418c0 	call	1418c <_lseek_r>
   13758:	00ffffc4 	movi	r3,-1
   1375c:	10c00826 	beq	r2,r3,13780 <__sseek+0x40>
   13760:	80c0030b 	ldhu	r3,12(r16)
   13764:	80801415 	stw	r2,80(r16)
   13768:	18c40014 	ori	r3,r3,4096
   1376c:	80c0030d 	sth	r3,12(r16)
   13770:	dfc00117 	ldw	ra,4(sp)
   13774:	dc000017 	ldw	r16,0(sp)
   13778:	dec00204 	addi	sp,sp,8
   1377c:	f800283a 	ret
   13780:	80c0030b 	ldhu	r3,12(r16)
   13784:	18fbffcc 	andi	r3,r3,61439
   13788:	80c0030d 	sth	r3,12(r16)
   1378c:	dfc00117 	ldw	ra,4(sp)
   13790:	dc000017 	ldw	r16,0(sp)
   13794:	dec00204 	addi	sp,sp,8
   13798:	f800283a 	ret

0001379c <__sclose>:
   1379c:	2940038f 	ldh	r5,14(r5)
   137a0:	00139581 	jmpi	13958 <_close_r>

000137a4 <_write_r>:
   137a4:	defffd04 	addi	sp,sp,-12
   137a8:	2805883a 	mov	r2,r5
   137ac:	dc000015 	stw	r16,0(sp)
   137b0:	040000b4 	movhi	r16,2
   137b4:	dc400115 	stw	r17,4(sp)
   137b8:	300b883a 	mov	r5,r6
   137bc:	8428b504 	addi	r16,r16,-23852
   137c0:	2023883a 	mov	r17,r4
   137c4:	380d883a 	mov	r6,r7
   137c8:	1009883a 	mov	r4,r2
   137cc:	dfc00215 	stw	ra,8(sp)
   137d0:	80000015 	stw	zero,0(r16)
   137d4:	0014db00 	call	14db0 <write>
   137d8:	00ffffc4 	movi	r3,-1
   137dc:	10c00526 	beq	r2,r3,137f4 <_write_r+0x50>
   137e0:	dfc00217 	ldw	ra,8(sp)
   137e4:	dc400117 	ldw	r17,4(sp)
   137e8:	dc000017 	ldw	r16,0(sp)
   137ec:	dec00304 	addi	sp,sp,12
   137f0:	f800283a 	ret
   137f4:	80c00017 	ldw	r3,0(r16)
   137f8:	183ff926 	beq	r3,zero,137e0 <_gp+0xffff3014>
   137fc:	88c00015 	stw	r3,0(r17)
   13800:	003ff706 	br	137e0 <_gp+0xffff3014>

00013804 <__swsetup_r>:
   13804:	008000b4 	movhi	r2,2
   13808:	defffd04 	addi	sp,sp,-12
   1380c:	10a1f504 	addi	r2,r2,-30764
   13810:	dc400115 	stw	r17,4(sp)
   13814:	2023883a 	mov	r17,r4
   13818:	11000017 	ldw	r4,0(r2)
   1381c:	dc000015 	stw	r16,0(sp)
   13820:	dfc00215 	stw	ra,8(sp)
   13824:	2821883a 	mov	r16,r5
   13828:	20000226 	beq	r4,zero,13834 <__swsetup_r+0x30>
   1382c:	20800e17 	ldw	r2,56(r4)
   13830:	10003126 	beq	r2,zero,138f8 <__swsetup_r+0xf4>
   13834:	8080030b 	ldhu	r2,12(r16)
   13838:	10c0020c 	andi	r3,r2,8
   1383c:	1009883a 	mov	r4,r2
   13840:	18000f26 	beq	r3,zero,13880 <__swsetup_r+0x7c>
   13844:	80c00417 	ldw	r3,16(r16)
   13848:	18001526 	beq	r3,zero,138a0 <__swsetup_r+0x9c>
   1384c:	1100004c 	andi	r4,r2,1
   13850:	20001c1e 	bne	r4,zero,138c4 <__swsetup_r+0xc0>
   13854:	1080008c 	andi	r2,r2,2
   13858:	1000291e 	bne	r2,zero,13900 <__swsetup_r+0xfc>
   1385c:	80800517 	ldw	r2,20(r16)
   13860:	80800215 	stw	r2,8(r16)
   13864:	18001c26 	beq	r3,zero,138d8 <__swsetup_r+0xd4>
   13868:	0005883a 	mov	r2,zero
   1386c:	dfc00217 	ldw	ra,8(sp)
   13870:	dc400117 	ldw	r17,4(sp)
   13874:	dc000017 	ldw	r16,0(sp)
   13878:	dec00304 	addi	sp,sp,12
   1387c:	f800283a 	ret
   13880:	2080040c 	andi	r2,r4,16
   13884:	10002e26 	beq	r2,zero,13940 <__swsetup_r+0x13c>
   13888:	2080010c 	andi	r2,r4,4
   1388c:	10001e1e 	bne	r2,zero,13908 <__swsetup_r+0x104>
   13890:	80c00417 	ldw	r3,16(r16)
   13894:	20800214 	ori	r2,r4,8
   13898:	8080030d 	sth	r2,12(r16)
   1389c:	183feb1e 	bne	r3,zero,1384c <_gp+0xffff3080>
   138a0:	1100a00c 	andi	r4,r2,640
   138a4:	01408004 	movi	r5,512
   138a8:	217fe826 	beq	r4,r5,1384c <_gp+0xffff3080>
   138ac:	800b883a 	mov	r5,r16
   138b0:	8809883a 	mov	r4,r17
   138b4:	00141ec0 	call	141ec <__smakebuf_r>
   138b8:	8080030b 	ldhu	r2,12(r16)
   138bc:	80c00417 	ldw	r3,16(r16)
   138c0:	003fe206 	br	1384c <_gp+0xffff3080>
   138c4:	80800517 	ldw	r2,20(r16)
   138c8:	80000215 	stw	zero,8(r16)
   138cc:	0085c83a 	sub	r2,zero,r2
   138d0:	80800615 	stw	r2,24(r16)
   138d4:	183fe41e 	bne	r3,zero,13868 <_gp+0xffff309c>
   138d8:	80c0030b 	ldhu	r3,12(r16)
   138dc:	0005883a 	mov	r2,zero
   138e0:	1900200c 	andi	r4,r3,128
   138e4:	203fe126 	beq	r4,zero,1386c <_gp+0xffff30a0>
   138e8:	18c01014 	ori	r3,r3,64
   138ec:	80c0030d 	sth	r3,12(r16)
   138f0:	00bfffc4 	movi	r2,-1
   138f4:	003fdd06 	br	1386c <_gp+0xffff30a0>
   138f8:	0011d540 	call	11d54 <__sinit>
   138fc:	003fcd06 	br	13834 <_gp+0xffff3068>
   13900:	0005883a 	mov	r2,zero
   13904:	003fd606 	br	13860 <_gp+0xffff3094>
   13908:	81400c17 	ldw	r5,48(r16)
   1390c:	28000626 	beq	r5,zero,13928 <__swsetup_r+0x124>
   13910:	80801004 	addi	r2,r16,64
   13914:	28800326 	beq	r5,r2,13924 <__swsetup_r+0x120>
   13918:	8809883a 	mov	r4,r17
   1391c:	0013e7c0 	call	13e7c <_free_r>
   13920:	8100030b 	ldhu	r4,12(r16)
   13924:	80000c15 	stw	zero,48(r16)
   13928:	80c00417 	ldw	r3,16(r16)
   1392c:	00bff6c4 	movi	r2,-37
   13930:	1108703a 	and	r4,r2,r4
   13934:	80000115 	stw	zero,4(r16)
   13938:	80c00015 	stw	r3,0(r16)
   1393c:	003fd506 	br	13894 <_gp+0xffff30c8>
   13940:	00800244 	movi	r2,9
   13944:	88800015 	stw	r2,0(r17)
   13948:	20801014 	ori	r2,r4,64
   1394c:	8080030d 	sth	r2,12(r16)
   13950:	00bfffc4 	movi	r2,-1
   13954:	003fc506 	br	1386c <_gp+0xffff30a0>

00013958 <_close_r>:
   13958:	defffd04 	addi	sp,sp,-12
   1395c:	dc000015 	stw	r16,0(sp)
   13960:	040000b4 	movhi	r16,2
   13964:	dc400115 	stw	r17,4(sp)
   13968:	8428b504 	addi	r16,r16,-23852
   1396c:	2023883a 	mov	r17,r4
   13970:	2809883a 	mov	r4,r5
   13974:	dfc00215 	stw	ra,8(sp)
   13978:	80000015 	stw	zero,0(r16)
   1397c:	001451c0 	call	1451c <close>
   13980:	00ffffc4 	movi	r3,-1
   13984:	10c00526 	beq	r2,r3,1399c <_close_r+0x44>
   13988:	dfc00217 	ldw	ra,8(sp)
   1398c:	dc400117 	ldw	r17,4(sp)
   13990:	dc000017 	ldw	r16,0(sp)
   13994:	dec00304 	addi	sp,sp,12
   13998:	f800283a 	ret
   1399c:	80c00017 	ldw	r3,0(r16)
   139a0:	183ff926 	beq	r3,zero,13988 <_gp+0xffff31bc>
   139a4:	88c00015 	stw	r3,0(r17)
   139a8:	003ff706 	br	13988 <_gp+0xffff31bc>

000139ac <_fclose_r>:
   139ac:	28003926 	beq	r5,zero,13a94 <_fclose_r+0xe8>
   139b0:	defffc04 	addi	sp,sp,-16
   139b4:	dc400115 	stw	r17,4(sp)
   139b8:	dc000015 	stw	r16,0(sp)
   139bc:	dfc00315 	stw	ra,12(sp)
   139c0:	dc800215 	stw	r18,8(sp)
   139c4:	2023883a 	mov	r17,r4
   139c8:	2821883a 	mov	r16,r5
   139cc:	20000226 	beq	r4,zero,139d8 <_fclose_r+0x2c>
   139d0:	20800e17 	ldw	r2,56(r4)
   139d4:	10002726 	beq	r2,zero,13a74 <_fclose_r+0xc8>
   139d8:	8080030f 	ldh	r2,12(r16)
   139dc:	1000071e 	bne	r2,zero,139fc <_fclose_r+0x50>
   139e0:	0005883a 	mov	r2,zero
   139e4:	dfc00317 	ldw	ra,12(sp)
   139e8:	dc800217 	ldw	r18,8(sp)
   139ec:	dc400117 	ldw	r17,4(sp)
   139f0:	dc000017 	ldw	r16,0(sp)
   139f4:	dec00404 	addi	sp,sp,16
   139f8:	f800283a 	ret
   139fc:	800b883a 	mov	r5,r16
   13a00:	8809883a 	mov	r4,r17
   13a04:	0013ab00 	call	13ab0 <__sflush_r>
   13a08:	1025883a 	mov	r18,r2
   13a0c:	80800b17 	ldw	r2,44(r16)
   13a10:	10000426 	beq	r2,zero,13a24 <_fclose_r+0x78>
   13a14:	81400717 	ldw	r5,28(r16)
   13a18:	8809883a 	mov	r4,r17
   13a1c:	103ee83a 	callr	r2
   13a20:	10001616 	blt	r2,zero,13a7c <_fclose_r+0xd0>
   13a24:	8080030b 	ldhu	r2,12(r16)
   13a28:	1080200c 	andi	r2,r2,128
   13a2c:	1000151e 	bne	r2,zero,13a84 <_fclose_r+0xd8>
   13a30:	81400c17 	ldw	r5,48(r16)
   13a34:	28000526 	beq	r5,zero,13a4c <_fclose_r+0xa0>
   13a38:	80801004 	addi	r2,r16,64
   13a3c:	28800226 	beq	r5,r2,13a48 <_fclose_r+0x9c>
   13a40:	8809883a 	mov	r4,r17
   13a44:	0013e7c0 	call	13e7c <_free_r>
   13a48:	80000c15 	stw	zero,48(r16)
   13a4c:	81401117 	ldw	r5,68(r16)
   13a50:	28000326 	beq	r5,zero,13a60 <_fclose_r+0xb4>
   13a54:	8809883a 	mov	r4,r17
   13a58:	0013e7c0 	call	13e7c <_free_r>
   13a5c:	80001115 	stw	zero,68(r16)
   13a60:	0011d640 	call	11d64 <__sfp_lock_acquire>
   13a64:	8000030d 	sth	zero,12(r16)
   13a68:	0011d680 	call	11d68 <__sfp_lock_release>
   13a6c:	9005883a 	mov	r2,r18
   13a70:	003fdc06 	br	139e4 <_gp+0xffff3218>
   13a74:	0011d540 	call	11d54 <__sinit>
   13a78:	003fd706 	br	139d8 <_gp+0xffff320c>
   13a7c:	04bfffc4 	movi	r18,-1
   13a80:	003fe806 	br	13a24 <_gp+0xffff3258>
   13a84:	81400417 	ldw	r5,16(r16)
   13a88:	8809883a 	mov	r4,r17
   13a8c:	0013e7c0 	call	13e7c <_free_r>
   13a90:	003fe706 	br	13a30 <_gp+0xffff3264>
   13a94:	0005883a 	mov	r2,zero
   13a98:	f800283a 	ret

00013a9c <fclose>:
   13a9c:	008000b4 	movhi	r2,2
   13aa0:	10a1f504 	addi	r2,r2,-30764
   13aa4:	200b883a 	mov	r5,r4
   13aa8:	11000017 	ldw	r4,0(r2)
   13aac:	00139ac1 	jmpi	139ac <_fclose_r>

00013ab0 <__sflush_r>:
   13ab0:	2880030b 	ldhu	r2,12(r5)
   13ab4:	defffb04 	addi	sp,sp,-20
   13ab8:	dcc00315 	stw	r19,12(sp)
   13abc:	dc400115 	stw	r17,4(sp)
   13ac0:	dfc00415 	stw	ra,16(sp)
   13ac4:	dc800215 	stw	r18,8(sp)
   13ac8:	dc000015 	stw	r16,0(sp)
   13acc:	10c0020c 	andi	r3,r2,8
   13ad0:	2823883a 	mov	r17,r5
   13ad4:	2027883a 	mov	r19,r4
   13ad8:	1800311e 	bne	r3,zero,13ba0 <__sflush_r+0xf0>
   13adc:	28c00117 	ldw	r3,4(r5)
   13ae0:	10820014 	ori	r2,r2,2048
   13ae4:	2880030d 	sth	r2,12(r5)
   13ae8:	00c04b0e 	bge	zero,r3,13c18 <__sflush_r+0x168>
   13aec:	8a000a17 	ldw	r8,40(r17)
   13af0:	40002326 	beq	r8,zero,13b80 <__sflush_r+0xd0>
   13af4:	9c000017 	ldw	r16,0(r19)
   13af8:	10c4000c 	andi	r3,r2,4096
   13afc:	98000015 	stw	zero,0(r19)
   13b00:	18004826 	beq	r3,zero,13c24 <__sflush_r+0x174>
   13b04:	89801417 	ldw	r6,80(r17)
   13b08:	10c0010c 	andi	r3,r2,4
   13b0c:	18000626 	beq	r3,zero,13b28 <__sflush_r+0x78>
   13b10:	88c00117 	ldw	r3,4(r17)
   13b14:	88800c17 	ldw	r2,48(r17)
   13b18:	30cdc83a 	sub	r6,r6,r3
   13b1c:	10000226 	beq	r2,zero,13b28 <__sflush_r+0x78>
   13b20:	88800f17 	ldw	r2,60(r17)
   13b24:	308dc83a 	sub	r6,r6,r2
   13b28:	89400717 	ldw	r5,28(r17)
   13b2c:	000f883a 	mov	r7,zero
   13b30:	9809883a 	mov	r4,r19
   13b34:	403ee83a 	callr	r8
   13b38:	00ffffc4 	movi	r3,-1
   13b3c:	10c04426 	beq	r2,r3,13c50 <__sflush_r+0x1a0>
   13b40:	88c0030b 	ldhu	r3,12(r17)
   13b44:	89000417 	ldw	r4,16(r17)
   13b48:	88000115 	stw	zero,4(r17)
   13b4c:	197dffcc 	andi	r5,r3,63487
   13b50:	8940030d 	sth	r5,12(r17)
   13b54:	89000015 	stw	r4,0(r17)
   13b58:	18c4000c 	andi	r3,r3,4096
   13b5c:	18002c1e 	bne	r3,zero,13c10 <__sflush_r+0x160>
   13b60:	89400c17 	ldw	r5,48(r17)
   13b64:	9c000015 	stw	r16,0(r19)
   13b68:	28000526 	beq	r5,zero,13b80 <__sflush_r+0xd0>
   13b6c:	88801004 	addi	r2,r17,64
   13b70:	28800226 	beq	r5,r2,13b7c <__sflush_r+0xcc>
   13b74:	9809883a 	mov	r4,r19
   13b78:	0013e7c0 	call	13e7c <_free_r>
   13b7c:	88000c15 	stw	zero,48(r17)
   13b80:	0005883a 	mov	r2,zero
   13b84:	dfc00417 	ldw	ra,16(sp)
   13b88:	dcc00317 	ldw	r19,12(sp)
   13b8c:	dc800217 	ldw	r18,8(sp)
   13b90:	dc400117 	ldw	r17,4(sp)
   13b94:	dc000017 	ldw	r16,0(sp)
   13b98:	dec00504 	addi	sp,sp,20
   13b9c:	f800283a 	ret
   13ba0:	2c800417 	ldw	r18,16(r5)
   13ba4:	903ff626 	beq	r18,zero,13b80 <_gp+0xffff33b4>
   13ba8:	2c000017 	ldw	r16,0(r5)
   13bac:	108000cc 	andi	r2,r2,3
   13bb0:	2c800015 	stw	r18,0(r5)
   13bb4:	84a1c83a 	sub	r16,r16,r18
   13bb8:	1000131e 	bne	r2,zero,13c08 <__sflush_r+0x158>
   13bbc:	28800517 	ldw	r2,20(r5)
   13bc0:	88800215 	stw	r2,8(r17)
   13bc4:	04000316 	blt	zero,r16,13bd4 <__sflush_r+0x124>
   13bc8:	003fed06 	br	13b80 <_gp+0xffff33b4>
   13bcc:	90a5883a 	add	r18,r18,r2
   13bd0:	043feb0e 	bge	zero,r16,13b80 <_gp+0xffff33b4>
   13bd4:	88800917 	ldw	r2,36(r17)
   13bd8:	89400717 	ldw	r5,28(r17)
   13bdc:	800f883a 	mov	r7,r16
   13be0:	900d883a 	mov	r6,r18
   13be4:	9809883a 	mov	r4,r19
   13be8:	103ee83a 	callr	r2
   13bec:	80a1c83a 	sub	r16,r16,r2
   13bf0:	00bff616 	blt	zero,r2,13bcc <_gp+0xffff3400>
   13bf4:	88c0030b 	ldhu	r3,12(r17)
   13bf8:	00bfffc4 	movi	r2,-1
   13bfc:	18c01014 	ori	r3,r3,64
   13c00:	88c0030d 	sth	r3,12(r17)
   13c04:	003fdf06 	br	13b84 <_gp+0xffff33b8>
   13c08:	0005883a 	mov	r2,zero
   13c0c:	003fec06 	br	13bc0 <_gp+0xffff33f4>
   13c10:	88801415 	stw	r2,80(r17)
   13c14:	003fd206 	br	13b60 <_gp+0xffff3394>
   13c18:	28c00f17 	ldw	r3,60(r5)
   13c1c:	00ffb316 	blt	zero,r3,13aec <_gp+0xffff3320>
   13c20:	003fd706 	br	13b80 <_gp+0xffff33b4>
   13c24:	89400717 	ldw	r5,28(r17)
   13c28:	000d883a 	mov	r6,zero
   13c2c:	01c00044 	movi	r7,1
   13c30:	9809883a 	mov	r4,r19
   13c34:	403ee83a 	callr	r8
   13c38:	100d883a 	mov	r6,r2
   13c3c:	00bfffc4 	movi	r2,-1
   13c40:	30801426 	beq	r6,r2,13c94 <__sflush_r+0x1e4>
   13c44:	8880030b 	ldhu	r2,12(r17)
   13c48:	8a000a17 	ldw	r8,40(r17)
   13c4c:	003fae06 	br	13b08 <_gp+0xffff333c>
   13c50:	98c00017 	ldw	r3,0(r19)
   13c54:	183fba26 	beq	r3,zero,13b40 <_gp+0xffff3374>
   13c58:	01000744 	movi	r4,29
   13c5c:	19000626 	beq	r3,r4,13c78 <__sflush_r+0x1c8>
   13c60:	01000584 	movi	r4,22
   13c64:	19000426 	beq	r3,r4,13c78 <__sflush_r+0x1c8>
   13c68:	88c0030b 	ldhu	r3,12(r17)
   13c6c:	18c01014 	ori	r3,r3,64
   13c70:	88c0030d 	sth	r3,12(r17)
   13c74:	003fc306 	br	13b84 <_gp+0xffff33b8>
   13c78:	8880030b 	ldhu	r2,12(r17)
   13c7c:	88c00417 	ldw	r3,16(r17)
   13c80:	88000115 	stw	zero,4(r17)
   13c84:	10bdffcc 	andi	r2,r2,63487
   13c88:	8880030d 	sth	r2,12(r17)
   13c8c:	88c00015 	stw	r3,0(r17)
   13c90:	003fb306 	br	13b60 <_gp+0xffff3394>
   13c94:	98800017 	ldw	r2,0(r19)
   13c98:	103fea26 	beq	r2,zero,13c44 <_gp+0xffff3478>
   13c9c:	00c00744 	movi	r3,29
   13ca0:	10c00226 	beq	r2,r3,13cac <__sflush_r+0x1fc>
   13ca4:	00c00584 	movi	r3,22
   13ca8:	10c0031e 	bne	r2,r3,13cb8 <__sflush_r+0x208>
   13cac:	9c000015 	stw	r16,0(r19)
   13cb0:	0005883a 	mov	r2,zero
   13cb4:	003fb306 	br	13b84 <_gp+0xffff33b8>
   13cb8:	88c0030b 	ldhu	r3,12(r17)
   13cbc:	3005883a 	mov	r2,r6
   13cc0:	18c01014 	ori	r3,r3,64
   13cc4:	88c0030d 	sth	r3,12(r17)
   13cc8:	003fae06 	br	13b84 <_gp+0xffff33b8>

00013ccc <_fflush_r>:
   13ccc:	defffd04 	addi	sp,sp,-12
   13cd0:	dc000115 	stw	r16,4(sp)
   13cd4:	dfc00215 	stw	ra,8(sp)
   13cd8:	2021883a 	mov	r16,r4
   13cdc:	20000226 	beq	r4,zero,13ce8 <_fflush_r+0x1c>
   13ce0:	20800e17 	ldw	r2,56(r4)
   13ce4:	10000c26 	beq	r2,zero,13d18 <_fflush_r+0x4c>
   13ce8:	2880030f 	ldh	r2,12(r5)
   13cec:	1000051e 	bne	r2,zero,13d04 <_fflush_r+0x38>
   13cf0:	0005883a 	mov	r2,zero
   13cf4:	dfc00217 	ldw	ra,8(sp)
   13cf8:	dc000117 	ldw	r16,4(sp)
   13cfc:	dec00304 	addi	sp,sp,12
   13d00:	f800283a 	ret
   13d04:	8009883a 	mov	r4,r16
   13d08:	dfc00217 	ldw	ra,8(sp)
   13d0c:	dc000117 	ldw	r16,4(sp)
   13d10:	dec00304 	addi	sp,sp,12
   13d14:	0013ab01 	jmpi	13ab0 <__sflush_r>
   13d18:	d9400015 	stw	r5,0(sp)
   13d1c:	0011d540 	call	11d54 <__sinit>
   13d20:	d9400017 	ldw	r5,0(sp)
   13d24:	003ff006 	br	13ce8 <_gp+0xffff351c>

00013d28 <fflush>:
   13d28:	20000526 	beq	r4,zero,13d40 <fflush+0x18>
   13d2c:	008000b4 	movhi	r2,2
   13d30:	10a1f504 	addi	r2,r2,-30764
   13d34:	200b883a 	mov	r5,r4
   13d38:	11000017 	ldw	r4,0(r2)
   13d3c:	0013ccc1 	jmpi	13ccc <_fflush_r>
   13d40:	008000b4 	movhi	r2,2
   13d44:	10a1f404 	addi	r2,r2,-30768
   13d48:	11000017 	ldw	r4,0(r2)
   13d4c:	01400074 	movhi	r5,1
   13d50:	294f3304 	addi	r5,r5,15564
   13d54:	00123301 	jmpi	12330 <_fwalk_reent>

00013d58 <_malloc_trim_r>:
   13d58:	defffb04 	addi	sp,sp,-20
   13d5c:	dcc00315 	stw	r19,12(sp)
   13d60:	04c00074 	movhi	r19,1
   13d64:	dc800215 	stw	r18,8(sp)
   13d68:	dc400115 	stw	r17,4(sp)
   13d6c:	dc000015 	stw	r16,0(sp)
   13d70:	dfc00415 	stw	ra,16(sp)
   13d74:	2821883a 	mov	r16,r5
   13d78:	9cdc6f04 	addi	r19,r19,29116
   13d7c:	2025883a 	mov	r18,r4
   13d80:	0014a7c0 	call	14a7c <__malloc_lock>
   13d84:	98800217 	ldw	r2,8(r19)
   13d88:	14400117 	ldw	r17,4(r2)
   13d8c:	00bfff04 	movi	r2,-4
   13d90:	88a2703a 	and	r17,r17,r2
   13d94:	8c21c83a 	sub	r16,r17,r16
   13d98:	8403fbc4 	addi	r16,r16,4079
   13d9c:	8020d33a 	srli	r16,r16,12
   13da0:	0083ffc4 	movi	r2,4095
   13da4:	843fffc4 	addi	r16,r16,-1
   13da8:	8020933a 	slli	r16,r16,12
   13dac:	1400060e 	bge	r2,r16,13dc8 <_malloc_trim_r+0x70>
   13db0:	000b883a 	mov	r5,zero
   13db4:	9009883a 	mov	r4,r18
   13db8:	00136140 	call	13614 <_sbrk_r>
   13dbc:	98c00217 	ldw	r3,8(r19)
   13dc0:	1c47883a 	add	r3,r3,r17
   13dc4:	10c00a26 	beq	r2,r3,13df0 <_malloc_trim_r+0x98>
   13dc8:	9009883a 	mov	r4,r18
   13dcc:	0014aa00 	call	14aa0 <__malloc_unlock>
   13dd0:	0005883a 	mov	r2,zero
   13dd4:	dfc00417 	ldw	ra,16(sp)
   13dd8:	dcc00317 	ldw	r19,12(sp)
   13ddc:	dc800217 	ldw	r18,8(sp)
   13de0:	dc400117 	ldw	r17,4(sp)
   13de4:	dc000017 	ldw	r16,0(sp)
   13de8:	dec00504 	addi	sp,sp,20
   13dec:	f800283a 	ret
   13df0:	040bc83a 	sub	r5,zero,r16
   13df4:	9009883a 	mov	r4,r18
   13df8:	00136140 	call	13614 <_sbrk_r>
   13dfc:	00ffffc4 	movi	r3,-1
   13e00:	10c00d26 	beq	r2,r3,13e38 <_malloc_trim_r+0xe0>
   13e04:	00c000b4 	movhi	r3,2
   13e08:	18e8f104 	addi	r3,r3,-23612
   13e0c:	18800017 	ldw	r2,0(r3)
   13e10:	99000217 	ldw	r4,8(r19)
   13e14:	8c23c83a 	sub	r17,r17,r16
   13e18:	8c400054 	ori	r17,r17,1
   13e1c:	1421c83a 	sub	r16,r2,r16
   13e20:	24400115 	stw	r17,4(r4)
   13e24:	9009883a 	mov	r4,r18
   13e28:	1c000015 	stw	r16,0(r3)
   13e2c:	0014aa00 	call	14aa0 <__malloc_unlock>
   13e30:	00800044 	movi	r2,1
   13e34:	003fe706 	br	13dd4 <_gp+0xffff3608>
   13e38:	000b883a 	mov	r5,zero
   13e3c:	9009883a 	mov	r4,r18
   13e40:	00136140 	call	13614 <_sbrk_r>
   13e44:	99000217 	ldw	r4,8(r19)
   13e48:	014003c4 	movi	r5,15
   13e4c:	1107c83a 	sub	r3,r2,r4
   13e50:	28ffdd0e 	bge	r5,r3,13dc8 <_gp+0xffff35fc>
   13e54:	014000b4 	movhi	r5,2
   13e58:	2961f604 	addi	r5,r5,-30760
   13e5c:	29400017 	ldw	r5,0(r5)
   13e60:	18c00054 	ori	r3,r3,1
   13e64:	20c00115 	stw	r3,4(r4)
   13e68:	00c000b4 	movhi	r3,2
   13e6c:	1145c83a 	sub	r2,r2,r5
   13e70:	18e8f104 	addi	r3,r3,-23612
   13e74:	18800015 	stw	r2,0(r3)
   13e78:	003fd306 	br	13dc8 <_gp+0xffff35fc>

00013e7c <_free_r>:
   13e7c:	28004126 	beq	r5,zero,13f84 <_free_r+0x108>
   13e80:	defffd04 	addi	sp,sp,-12
   13e84:	dc400115 	stw	r17,4(sp)
   13e88:	dc000015 	stw	r16,0(sp)
   13e8c:	2023883a 	mov	r17,r4
   13e90:	2821883a 	mov	r16,r5
   13e94:	dfc00215 	stw	ra,8(sp)
   13e98:	0014a7c0 	call	14a7c <__malloc_lock>
   13e9c:	81ffff17 	ldw	r7,-4(r16)
   13ea0:	00bfff84 	movi	r2,-2
   13ea4:	01000074 	movhi	r4,1
   13ea8:	81bffe04 	addi	r6,r16,-8
   13eac:	3884703a 	and	r2,r7,r2
   13eb0:	211c6f04 	addi	r4,r4,29116
   13eb4:	308b883a 	add	r5,r6,r2
   13eb8:	2a400117 	ldw	r9,4(r5)
   13ebc:	22000217 	ldw	r8,8(r4)
   13ec0:	00ffff04 	movi	r3,-4
   13ec4:	48c6703a 	and	r3,r9,r3
   13ec8:	2a005726 	beq	r5,r8,14028 <_free_r+0x1ac>
   13ecc:	28c00115 	stw	r3,4(r5)
   13ed0:	39c0004c 	andi	r7,r7,1
   13ed4:	3800091e 	bne	r7,zero,13efc <_free_r+0x80>
   13ed8:	823ffe17 	ldw	r8,-8(r16)
   13edc:	22400204 	addi	r9,r4,8
   13ee0:	320dc83a 	sub	r6,r6,r8
   13ee4:	31c00217 	ldw	r7,8(r6)
   13ee8:	1205883a 	add	r2,r2,r8
   13eec:	3a406526 	beq	r7,r9,14084 <_free_r+0x208>
   13ef0:	32000317 	ldw	r8,12(r6)
   13ef4:	3a000315 	stw	r8,12(r7)
   13ef8:	41c00215 	stw	r7,8(r8)
   13efc:	28cf883a 	add	r7,r5,r3
   13f00:	39c00117 	ldw	r7,4(r7)
   13f04:	39c0004c 	andi	r7,r7,1
   13f08:	38003a26 	beq	r7,zero,13ff4 <_free_r+0x178>
   13f0c:	10c00054 	ori	r3,r2,1
   13f10:	30c00115 	stw	r3,4(r6)
   13f14:	3087883a 	add	r3,r6,r2
   13f18:	18800015 	stw	r2,0(r3)
   13f1c:	00c07fc4 	movi	r3,511
   13f20:	18801936 	bltu	r3,r2,13f88 <_free_r+0x10c>
   13f24:	1004d0fa 	srli	r2,r2,3
   13f28:	01c00044 	movi	r7,1
   13f2c:	21400117 	ldw	r5,4(r4)
   13f30:	10c00044 	addi	r3,r2,1
   13f34:	18c7883a 	add	r3,r3,r3
   13f38:	1005d0ba 	srai	r2,r2,2
   13f3c:	18c7883a 	add	r3,r3,r3
   13f40:	18c7883a 	add	r3,r3,r3
   13f44:	1907883a 	add	r3,r3,r4
   13f48:	3884983a 	sll	r2,r7,r2
   13f4c:	19c00017 	ldw	r7,0(r3)
   13f50:	1a3ffe04 	addi	r8,r3,-8
   13f54:	1144b03a 	or	r2,r2,r5
   13f58:	32000315 	stw	r8,12(r6)
   13f5c:	31c00215 	stw	r7,8(r6)
   13f60:	20800115 	stw	r2,4(r4)
   13f64:	19800015 	stw	r6,0(r3)
   13f68:	39800315 	stw	r6,12(r7)
   13f6c:	8809883a 	mov	r4,r17
   13f70:	dfc00217 	ldw	ra,8(sp)
   13f74:	dc400117 	ldw	r17,4(sp)
   13f78:	dc000017 	ldw	r16,0(sp)
   13f7c:	dec00304 	addi	sp,sp,12
   13f80:	0014aa01 	jmpi	14aa0 <__malloc_unlock>
   13f84:	f800283a 	ret
   13f88:	100ad27a 	srli	r5,r2,9
   13f8c:	00c00104 	movi	r3,4
   13f90:	19404a36 	bltu	r3,r5,140bc <_free_r+0x240>
   13f94:	100ad1ba 	srli	r5,r2,6
   13f98:	28c00e44 	addi	r3,r5,57
   13f9c:	18c7883a 	add	r3,r3,r3
   13fa0:	29400e04 	addi	r5,r5,56
   13fa4:	18c7883a 	add	r3,r3,r3
   13fa8:	18c7883a 	add	r3,r3,r3
   13fac:	1909883a 	add	r4,r3,r4
   13fb0:	20c00017 	ldw	r3,0(r4)
   13fb4:	01c00074 	movhi	r7,1
   13fb8:	213ffe04 	addi	r4,r4,-8
   13fbc:	39dc6f04 	addi	r7,r7,29116
   13fc0:	20c04426 	beq	r4,r3,140d4 <_free_r+0x258>
   13fc4:	01ffff04 	movi	r7,-4
   13fc8:	19400117 	ldw	r5,4(r3)
   13fcc:	29ca703a 	and	r5,r5,r7
   13fd0:	1140022e 	bgeu	r2,r5,13fdc <_free_r+0x160>
   13fd4:	18c00217 	ldw	r3,8(r3)
   13fd8:	20fffb1e 	bne	r4,r3,13fc8 <_gp+0xffff37fc>
   13fdc:	19000317 	ldw	r4,12(r3)
   13fe0:	31000315 	stw	r4,12(r6)
   13fe4:	30c00215 	stw	r3,8(r6)
   13fe8:	21800215 	stw	r6,8(r4)
   13fec:	19800315 	stw	r6,12(r3)
   13ff0:	003fde06 	br	13f6c <_gp+0xffff37a0>
   13ff4:	29c00217 	ldw	r7,8(r5)
   13ff8:	10c5883a 	add	r2,r2,r3
   13ffc:	00c00074 	movhi	r3,1
   14000:	18dc7104 	addi	r3,r3,29124
   14004:	38c03b26 	beq	r7,r3,140f4 <_free_r+0x278>
   14008:	2a000317 	ldw	r8,12(r5)
   1400c:	11400054 	ori	r5,r2,1
   14010:	3087883a 	add	r3,r6,r2
   14014:	3a000315 	stw	r8,12(r7)
   14018:	41c00215 	stw	r7,8(r8)
   1401c:	31400115 	stw	r5,4(r6)
   14020:	18800015 	stw	r2,0(r3)
   14024:	003fbd06 	br	13f1c <_gp+0xffff3750>
   14028:	39c0004c 	andi	r7,r7,1
   1402c:	10c5883a 	add	r2,r2,r3
   14030:	3800071e 	bne	r7,zero,14050 <_free_r+0x1d4>
   14034:	81fffe17 	ldw	r7,-8(r16)
   14038:	31cdc83a 	sub	r6,r6,r7
   1403c:	30c00317 	ldw	r3,12(r6)
   14040:	31400217 	ldw	r5,8(r6)
   14044:	11c5883a 	add	r2,r2,r7
   14048:	28c00315 	stw	r3,12(r5)
   1404c:	19400215 	stw	r5,8(r3)
   14050:	10c00054 	ori	r3,r2,1
   14054:	30c00115 	stw	r3,4(r6)
   14058:	00c000b4 	movhi	r3,2
   1405c:	18e1f704 	addi	r3,r3,-30756
   14060:	18c00017 	ldw	r3,0(r3)
   14064:	21800215 	stw	r6,8(r4)
   14068:	10ffc036 	bltu	r2,r3,13f6c <_gp+0xffff37a0>
   1406c:	008000b4 	movhi	r2,2
   14070:	10a8b404 	addi	r2,r2,-23856
   14074:	11400017 	ldw	r5,0(r2)
   14078:	8809883a 	mov	r4,r17
   1407c:	0013d580 	call	13d58 <_malloc_trim_r>
   14080:	003fba06 	br	13f6c <_gp+0xffff37a0>
   14084:	28c9883a 	add	r4,r5,r3
   14088:	21000117 	ldw	r4,4(r4)
   1408c:	2100004c 	andi	r4,r4,1
   14090:	2000391e 	bne	r4,zero,14178 <_free_r+0x2fc>
   14094:	29c00217 	ldw	r7,8(r5)
   14098:	29000317 	ldw	r4,12(r5)
   1409c:	1885883a 	add	r2,r3,r2
   140a0:	10c00054 	ori	r3,r2,1
   140a4:	39000315 	stw	r4,12(r7)
   140a8:	21c00215 	stw	r7,8(r4)
   140ac:	30c00115 	stw	r3,4(r6)
   140b0:	308d883a 	add	r6,r6,r2
   140b4:	30800015 	stw	r2,0(r6)
   140b8:	003fac06 	br	13f6c <_gp+0xffff37a0>
   140bc:	00c00504 	movi	r3,20
   140c0:	19401536 	bltu	r3,r5,14118 <_free_r+0x29c>
   140c4:	28c01704 	addi	r3,r5,92
   140c8:	18c7883a 	add	r3,r3,r3
   140cc:	294016c4 	addi	r5,r5,91
   140d0:	003fb406 	br	13fa4 <_gp+0xffff37d8>
   140d4:	280bd0ba 	srai	r5,r5,2
   140d8:	00c00044 	movi	r3,1
   140dc:	38800117 	ldw	r2,4(r7)
   140e0:	194a983a 	sll	r5,r3,r5
   140e4:	2007883a 	mov	r3,r4
   140e8:	2884b03a 	or	r2,r5,r2
   140ec:	38800115 	stw	r2,4(r7)
   140f0:	003fbb06 	br	13fe0 <_gp+0xffff3814>
   140f4:	21800515 	stw	r6,20(r4)
   140f8:	21800415 	stw	r6,16(r4)
   140fc:	10c00054 	ori	r3,r2,1
   14100:	31c00315 	stw	r7,12(r6)
   14104:	31c00215 	stw	r7,8(r6)
   14108:	30c00115 	stw	r3,4(r6)
   1410c:	308d883a 	add	r6,r6,r2
   14110:	30800015 	stw	r2,0(r6)
   14114:	003f9506 	br	13f6c <_gp+0xffff37a0>
   14118:	00c01504 	movi	r3,84
   1411c:	19400536 	bltu	r3,r5,14134 <_free_r+0x2b8>
   14120:	100ad33a 	srli	r5,r2,12
   14124:	28c01bc4 	addi	r3,r5,111
   14128:	18c7883a 	add	r3,r3,r3
   1412c:	29401b84 	addi	r5,r5,110
   14130:	003f9c06 	br	13fa4 <_gp+0xffff37d8>
   14134:	00c05504 	movi	r3,340
   14138:	19400536 	bltu	r3,r5,14150 <_free_r+0x2d4>
   1413c:	100ad3fa 	srli	r5,r2,15
   14140:	28c01e04 	addi	r3,r5,120
   14144:	18c7883a 	add	r3,r3,r3
   14148:	29401dc4 	addi	r5,r5,119
   1414c:	003f9506 	br	13fa4 <_gp+0xffff37d8>
   14150:	00c15504 	movi	r3,1364
   14154:	19400536 	bltu	r3,r5,1416c <_free_r+0x2f0>
   14158:	100ad4ba 	srli	r5,r2,18
   1415c:	28c01f44 	addi	r3,r5,125
   14160:	18c7883a 	add	r3,r3,r3
   14164:	29401f04 	addi	r5,r5,124
   14168:	003f8e06 	br	13fa4 <_gp+0xffff37d8>
   1416c:	00c03f84 	movi	r3,254
   14170:	01401f84 	movi	r5,126
   14174:	003f8b06 	br	13fa4 <_gp+0xffff37d8>
   14178:	10c00054 	ori	r3,r2,1
   1417c:	30c00115 	stw	r3,4(r6)
   14180:	308d883a 	add	r6,r6,r2
   14184:	30800015 	stw	r2,0(r6)
   14188:	003f7806 	br	13f6c <_gp+0xffff37a0>

0001418c <_lseek_r>:
   1418c:	defffd04 	addi	sp,sp,-12
   14190:	2805883a 	mov	r2,r5
   14194:	dc000015 	stw	r16,0(sp)
   14198:	040000b4 	movhi	r16,2
   1419c:	dc400115 	stw	r17,4(sp)
   141a0:	300b883a 	mov	r5,r6
   141a4:	8428b504 	addi	r16,r16,-23852
   141a8:	2023883a 	mov	r17,r4
   141ac:	380d883a 	mov	r6,r7
   141b0:	1009883a 	mov	r4,r2
   141b4:	dfc00215 	stw	ra,8(sp)
   141b8:	80000015 	stw	zero,0(r16)
   141bc:	00149240 	call	14924 <lseek>
   141c0:	00ffffc4 	movi	r3,-1
   141c4:	10c00526 	beq	r2,r3,141dc <_lseek_r+0x50>
   141c8:	dfc00217 	ldw	ra,8(sp)
   141cc:	dc400117 	ldw	r17,4(sp)
   141d0:	dc000017 	ldw	r16,0(sp)
   141d4:	dec00304 	addi	sp,sp,12
   141d8:	f800283a 	ret
   141dc:	80c00017 	ldw	r3,0(r16)
   141e0:	183ff926 	beq	r3,zero,141c8 <_gp+0xffff39fc>
   141e4:	88c00015 	stw	r3,0(r17)
   141e8:	003ff706 	br	141c8 <_gp+0xffff39fc>

000141ec <__smakebuf_r>:
   141ec:	2880030b 	ldhu	r2,12(r5)
   141f0:	10c0008c 	andi	r3,r2,2
   141f4:	1800411e 	bne	r3,zero,142fc <__smakebuf_r+0x110>
   141f8:	deffec04 	addi	sp,sp,-80
   141fc:	dc000f15 	stw	r16,60(sp)
   14200:	2821883a 	mov	r16,r5
   14204:	2940038f 	ldh	r5,14(r5)
   14208:	dc401015 	stw	r17,64(sp)
   1420c:	dfc01315 	stw	ra,76(sp)
   14210:	dcc01215 	stw	r19,72(sp)
   14214:	dc801115 	stw	r18,68(sp)
   14218:	2023883a 	mov	r17,r4
   1421c:	28001c16 	blt	r5,zero,14290 <__smakebuf_r+0xa4>
   14220:	d80d883a 	mov	r6,sp
   14224:	00144080 	call	14408 <_fstat_r>
   14228:	10001816 	blt	r2,zero,1428c <__smakebuf_r+0xa0>
   1422c:	d8800117 	ldw	r2,4(sp)
   14230:	00e00014 	movui	r3,32768
   14234:	10bc000c 	andi	r2,r2,61440
   14238:	14c80020 	cmpeqi	r19,r2,8192
   1423c:	10c03726 	beq	r2,r3,1431c <__smakebuf_r+0x130>
   14240:	80c0030b 	ldhu	r3,12(r16)
   14244:	18c20014 	ori	r3,r3,2048
   14248:	80c0030d 	sth	r3,12(r16)
   1424c:	00c80004 	movi	r3,8192
   14250:	10c0521e 	bne	r2,r3,1439c <__smakebuf_r+0x1b0>
   14254:	8140038f 	ldh	r5,14(r16)
   14258:	8809883a 	mov	r4,r17
   1425c:	00144640 	call	14464 <_isatty_r>
   14260:	10004c26 	beq	r2,zero,14394 <__smakebuf_r+0x1a8>
   14264:	8080030b 	ldhu	r2,12(r16)
   14268:	80c010c4 	addi	r3,r16,67
   1426c:	80c00015 	stw	r3,0(r16)
   14270:	10800054 	ori	r2,r2,1
   14274:	8080030d 	sth	r2,12(r16)
   14278:	00800044 	movi	r2,1
   1427c:	80c00415 	stw	r3,16(r16)
   14280:	80800515 	stw	r2,20(r16)
   14284:	04810004 	movi	r18,1024
   14288:	00000706 	br	142a8 <__smakebuf_r+0xbc>
   1428c:	8080030b 	ldhu	r2,12(r16)
   14290:	10c0200c 	andi	r3,r2,128
   14294:	18001f1e 	bne	r3,zero,14314 <__smakebuf_r+0x128>
   14298:	04810004 	movi	r18,1024
   1429c:	10820014 	ori	r2,r2,2048
   142a0:	8080030d 	sth	r2,12(r16)
   142a4:	0027883a 	mov	r19,zero
   142a8:	900b883a 	mov	r5,r18
   142ac:	8809883a 	mov	r4,r17
   142b0:	00123f40 	call	123f4 <_malloc_r>
   142b4:	10002c26 	beq	r2,zero,14368 <__smakebuf_r+0x17c>
   142b8:	80c0030b 	ldhu	r3,12(r16)
   142bc:	01000074 	movhi	r4,1
   142c0:	21067f04 	addi	r4,r4,6652
   142c4:	89000f15 	stw	r4,60(r17)
   142c8:	18c02014 	ori	r3,r3,128
   142cc:	80c0030d 	sth	r3,12(r16)
   142d0:	80800015 	stw	r2,0(r16)
   142d4:	80800415 	stw	r2,16(r16)
   142d8:	84800515 	stw	r18,20(r16)
   142dc:	98001a1e 	bne	r19,zero,14348 <__smakebuf_r+0x15c>
   142e0:	dfc01317 	ldw	ra,76(sp)
   142e4:	dcc01217 	ldw	r19,72(sp)
   142e8:	dc801117 	ldw	r18,68(sp)
   142ec:	dc401017 	ldw	r17,64(sp)
   142f0:	dc000f17 	ldw	r16,60(sp)
   142f4:	dec01404 	addi	sp,sp,80
   142f8:	f800283a 	ret
   142fc:	288010c4 	addi	r2,r5,67
   14300:	28800015 	stw	r2,0(r5)
   14304:	28800415 	stw	r2,16(r5)
   14308:	00800044 	movi	r2,1
   1430c:	28800515 	stw	r2,20(r5)
   14310:	f800283a 	ret
   14314:	04801004 	movi	r18,64
   14318:	003fe006 	br	1429c <_gp+0xffff3ad0>
   1431c:	81000a17 	ldw	r4,40(r16)
   14320:	00c00074 	movhi	r3,1
   14324:	18cdd004 	addi	r3,r3,14144
   14328:	20ffc51e 	bne	r4,r3,14240 <_gp+0xffff3a74>
   1432c:	8080030b 	ldhu	r2,12(r16)
   14330:	04810004 	movi	r18,1024
   14334:	84801315 	stw	r18,76(r16)
   14338:	1484b03a 	or	r2,r2,r18
   1433c:	8080030d 	sth	r2,12(r16)
   14340:	0027883a 	mov	r19,zero
   14344:	003fd806 	br	142a8 <_gp+0xffff3adc>
   14348:	8140038f 	ldh	r5,14(r16)
   1434c:	8809883a 	mov	r4,r17
   14350:	00144640 	call	14464 <_isatty_r>
   14354:	103fe226 	beq	r2,zero,142e0 <_gp+0xffff3b14>
   14358:	8080030b 	ldhu	r2,12(r16)
   1435c:	10800054 	ori	r2,r2,1
   14360:	8080030d 	sth	r2,12(r16)
   14364:	003fde06 	br	142e0 <_gp+0xffff3b14>
   14368:	8080030b 	ldhu	r2,12(r16)
   1436c:	10c0800c 	andi	r3,r2,512
   14370:	183fdb1e 	bne	r3,zero,142e0 <_gp+0xffff3b14>
   14374:	10800094 	ori	r2,r2,2
   14378:	80c010c4 	addi	r3,r16,67
   1437c:	8080030d 	sth	r2,12(r16)
   14380:	00800044 	movi	r2,1
   14384:	80c00015 	stw	r3,0(r16)
   14388:	80c00415 	stw	r3,16(r16)
   1438c:	80800515 	stw	r2,20(r16)
   14390:	003fd306 	br	142e0 <_gp+0xffff3b14>
   14394:	04810004 	movi	r18,1024
   14398:	003fc306 	br	142a8 <_gp+0xffff3adc>
   1439c:	0027883a 	mov	r19,zero
   143a0:	04810004 	movi	r18,1024
   143a4:	003fc006 	br	142a8 <_gp+0xffff3adc>

000143a8 <_read_r>:
   143a8:	defffd04 	addi	sp,sp,-12
   143ac:	2805883a 	mov	r2,r5
   143b0:	dc000015 	stw	r16,0(sp)
   143b4:	040000b4 	movhi	r16,2
   143b8:	dc400115 	stw	r17,4(sp)
   143bc:	300b883a 	mov	r5,r6
   143c0:	8428b504 	addi	r16,r16,-23852
   143c4:	2023883a 	mov	r17,r4
   143c8:	380d883a 	mov	r6,r7
   143cc:	1009883a 	mov	r4,r2
   143d0:	dfc00215 	stw	ra,8(sp)
   143d4:	80000015 	stw	zero,0(r16)
   143d8:	0014b3c0 	call	14b3c <read>
   143dc:	00ffffc4 	movi	r3,-1
   143e0:	10c00526 	beq	r2,r3,143f8 <_read_r+0x50>
   143e4:	dfc00217 	ldw	ra,8(sp)
   143e8:	dc400117 	ldw	r17,4(sp)
   143ec:	dc000017 	ldw	r16,0(sp)
   143f0:	dec00304 	addi	sp,sp,12
   143f4:	f800283a 	ret
   143f8:	80c00017 	ldw	r3,0(r16)
   143fc:	183ff926 	beq	r3,zero,143e4 <_gp+0xffff3c18>
   14400:	88c00015 	stw	r3,0(r17)
   14404:	003ff706 	br	143e4 <_gp+0xffff3c18>

00014408 <_fstat_r>:
   14408:	defffd04 	addi	sp,sp,-12
   1440c:	2805883a 	mov	r2,r5
   14410:	dc000015 	stw	r16,0(sp)
   14414:	040000b4 	movhi	r16,2
   14418:	dc400115 	stw	r17,4(sp)
   1441c:	8428b504 	addi	r16,r16,-23852
   14420:	2023883a 	mov	r17,r4
   14424:	300b883a 	mov	r5,r6
   14428:	1009883a 	mov	r4,r2
   1442c:	dfc00215 	stw	ra,8(sp)
   14430:	80000015 	stw	zero,0(r16)
   14434:	001465c0 	call	1465c <fstat>
   14438:	00ffffc4 	movi	r3,-1
   1443c:	10c00526 	beq	r2,r3,14454 <_fstat_r+0x4c>
   14440:	dfc00217 	ldw	ra,8(sp)
   14444:	dc400117 	ldw	r17,4(sp)
   14448:	dc000017 	ldw	r16,0(sp)
   1444c:	dec00304 	addi	sp,sp,12
   14450:	f800283a 	ret
   14454:	80c00017 	ldw	r3,0(r16)
   14458:	183ff926 	beq	r3,zero,14440 <_gp+0xffff3c74>
   1445c:	88c00015 	stw	r3,0(r17)
   14460:	003ff706 	br	14440 <_gp+0xffff3c74>

00014464 <_isatty_r>:
   14464:	defffd04 	addi	sp,sp,-12
   14468:	dc000015 	stw	r16,0(sp)
   1446c:	040000b4 	movhi	r16,2
   14470:	dc400115 	stw	r17,4(sp)
   14474:	8428b504 	addi	r16,r16,-23852
   14478:	2023883a 	mov	r17,r4
   1447c:	2809883a 	mov	r4,r5
   14480:	dfc00215 	stw	ra,8(sp)
   14484:	80000015 	stw	zero,0(r16)
   14488:	00147500 	call	14750 <isatty>
   1448c:	00ffffc4 	movi	r3,-1
   14490:	10c00526 	beq	r2,r3,144a8 <_isatty_r+0x44>
   14494:	dfc00217 	ldw	ra,8(sp)
   14498:	dc400117 	ldw	r17,4(sp)
   1449c:	dc000017 	ldw	r16,0(sp)
   144a0:	dec00304 	addi	sp,sp,12
   144a4:	f800283a 	ret
   144a8:	80c00017 	ldw	r3,0(r16)
   144ac:	183ff926 	beq	r3,zero,14494 <_gp+0xffff3cc8>
   144b0:	88c00015 	stw	r3,0(r17)
   144b4:	003ff706 	br	14494 <_gp+0xffff3cc8>

000144b8 <__mulsi3>:
   144b8:	0005883a 	mov	r2,zero
   144bc:	20000726 	beq	r4,zero,144dc <__mulsi3+0x24>
   144c0:	20c0004c 	andi	r3,r4,1
   144c4:	2008d07a 	srli	r4,r4,1
   144c8:	18000126 	beq	r3,zero,144d0 <__mulsi3+0x18>
   144cc:	1145883a 	add	r2,r2,r5
   144d0:	294b883a 	add	r5,r5,r5
   144d4:	203ffa1e 	bne	r4,zero,144c0 <_gp+0xffff3cf4>
   144d8:	f800283a 	ret
   144dc:	f800283a 	ret

000144e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   144e0:	defffe04 	addi	sp,sp,-8
   144e4:	dfc00115 	stw	ra,4(sp)
   144e8:	df000015 	stw	fp,0(sp)
   144ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   144f0:	d0a00a17 	ldw	r2,-32728(gp)
   144f4:	10000326 	beq	r2,zero,14504 <alt_get_errno+0x24>
   144f8:	d0a00a17 	ldw	r2,-32728(gp)
   144fc:	103ee83a 	callr	r2
   14500:	00000106 	br	14508 <alt_get_errno+0x28>
   14504:	d0a6c204 	addi	r2,gp,-25848
}
   14508:	e037883a 	mov	sp,fp
   1450c:	dfc00117 	ldw	ra,4(sp)
   14510:	df000017 	ldw	fp,0(sp)
   14514:	dec00204 	addi	sp,sp,8
   14518:	f800283a 	ret

0001451c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   1451c:	defffb04 	addi	sp,sp,-20
   14520:	dfc00415 	stw	ra,16(sp)
   14524:	df000315 	stw	fp,12(sp)
   14528:	df000304 	addi	fp,sp,12
   1452c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   14530:	e0bfff17 	ldw	r2,-4(fp)
   14534:	10000816 	blt	r2,zero,14558 <close+0x3c>
   14538:	01400304 	movi	r5,12
   1453c:	e13fff17 	ldw	r4,-4(fp)
   14540:	00144b80 	call	144b8 <__mulsi3>
   14544:	1007883a 	mov	r3,r2
   14548:	00800074 	movhi	r2,1
   1454c:	109d7b04 	addi	r2,r2,30188
   14550:	1885883a 	add	r2,r3,r2
   14554:	00000106 	br	1455c <close+0x40>
   14558:	0005883a 	mov	r2,zero
   1455c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   14560:	e0bffd17 	ldw	r2,-12(fp)
   14564:	10001926 	beq	r2,zero,145cc <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   14568:	e0bffd17 	ldw	r2,-12(fp)
   1456c:	10800017 	ldw	r2,0(r2)
   14570:	10800417 	ldw	r2,16(r2)
   14574:	10000626 	beq	r2,zero,14590 <close+0x74>
   14578:	e0bffd17 	ldw	r2,-12(fp)
   1457c:	10800017 	ldw	r2,0(r2)
   14580:	10800417 	ldw	r2,16(r2)
   14584:	e13ffd17 	ldw	r4,-12(fp)
   14588:	103ee83a 	callr	r2
   1458c:	00000106 	br	14594 <close+0x78>
   14590:	0005883a 	mov	r2,zero
   14594:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   14598:	e13fff17 	ldw	r4,-4(fp)
   1459c:	0014c400 	call	14c40 <alt_release_fd>
    if (rval < 0)
   145a0:	e0bffe17 	ldw	r2,-8(fp)
   145a4:	1000070e 	bge	r2,zero,145c4 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   145a8:	00144e00 	call	144e0 <alt_get_errno>
   145ac:	1007883a 	mov	r3,r2
   145b0:	e0bffe17 	ldw	r2,-8(fp)
   145b4:	0085c83a 	sub	r2,zero,r2
   145b8:	18800015 	stw	r2,0(r3)
      return -1;
   145bc:	00bfffc4 	movi	r2,-1
   145c0:	00000706 	br	145e0 <close+0xc4>
    }
    return 0;
   145c4:	0005883a 	mov	r2,zero
   145c8:	00000506 	br	145e0 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   145cc:	00144e00 	call	144e0 <alt_get_errno>
   145d0:	1007883a 	mov	r3,r2
   145d4:	00801444 	movi	r2,81
   145d8:	18800015 	stw	r2,0(r3)
    return -1;
   145dc:	00bfffc4 	movi	r2,-1
  }
}
   145e0:	e037883a 	mov	sp,fp
   145e4:	dfc00117 	ldw	ra,4(sp)
   145e8:	df000017 	ldw	fp,0(sp)
   145ec:	dec00204 	addi	sp,sp,8
   145f0:	f800283a 	ret

000145f4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   145f4:	defffc04 	addi	sp,sp,-16
   145f8:	df000315 	stw	fp,12(sp)
   145fc:	df000304 	addi	fp,sp,12
   14600:	e13ffd15 	stw	r4,-12(fp)
   14604:	e17ffe15 	stw	r5,-8(fp)
   14608:	e1bfff15 	stw	r6,-4(fp)
  return len;
   1460c:	e0bfff17 	ldw	r2,-4(fp)
}
   14610:	e037883a 	mov	sp,fp
   14614:	df000017 	ldw	fp,0(sp)
   14618:	dec00104 	addi	sp,sp,4
   1461c:	f800283a 	ret

00014620 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14620:	defffe04 	addi	sp,sp,-8
   14624:	dfc00115 	stw	ra,4(sp)
   14628:	df000015 	stw	fp,0(sp)
   1462c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14630:	d0a00a17 	ldw	r2,-32728(gp)
   14634:	10000326 	beq	r2,zero,14644 <alt_get_errno+0x24>
   14638:	d0a00a17 	ldw	r2,-32728(gp)
   1463c:	103ee83a 	callr	r2
   14640:	00000106 	br	14648 <alt_get_errno+0x28>
   14644:	d0a6c204 	addi	r2,gp,-25848
}
   14648:	e037883a 	mov	sp,fp
   1464c:	dfc00117 	ldw	ra,4(sp)
   14650:	df000017 	ldw	fp,0(sp)
   14654:	dec00204 	addi	sp,sp,8
   14658:	f800283a 	ret

0001465c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   1465c:	defffb04 	addi	sp,sp,-20
   14660:	dfc00415 	stw	ra,16(sp)
   14664:	df000315 	stw	fp,12(sp)
   14668:	df000304 	addi	fp,sp,12
   1466c:	e13ffe15 	stw	r4,-8(fp)
   14670:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   14674:	e0bffe17 	ldw	r2,-8(fp)
   14678:	10000816 	blt	r2,zero,1469c <fstat+0x40>
   1467c:	01400304 	movi	r5,12
   14680:	e13ffe17 	ldw	r4,-8(fp)
   14684:	00144b80 	call	144b8 <__mulsi3>
   14688:	1007883a 	mov	r3,r2
   1468c:	00800074 	movhi	r2,1
   14690:	109d7b04 	addi	r2,r2,30188
   14694:	1885883a 	add	r2,r3,r2
   14698:	00000106 	br	146a0 <fstat+0x44>
   1469c:	0005883a 	mov	r2,zero
   146a0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   146a4:	e0bffd17 	ldw	r2,-12(fp)
   146a8:	10001026 	beq	r2,zero,146ec <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   146ac:	e0bffd17 	ldw	r2,-12(fp)
   146b0:	10800017 	ldw	r2,0(r2)
   146b4:	10800817 	ldw	r2,32(r2)
   146b8:	10000726 	beq	r2,zero,146d8 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   146bc:	e0bffd17 	ldw	r2,-12(fp)
   146c0:	10800017 	ldw	r2,0(r2)
   146c4:	10800817 	ldw	r2,32(r2)
   146c8:	e17fff17 	ldw	r5,-4(fp)
   146cc:	e13ffd17 	ldw	r4,-12(fp)
   146d0:	103ee83a 	callr	r2
   146d4:	00000a06 	br	14700 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   146d8:	e0bfff17 	ldw	r2,-4(fp)
   146dc:	00c80004 	movi	r3,8192
   146e0:	10c00115 	stw	r3,4(r2)
      return 0;
   146e4:	0005883a 	mov	r2,zero
   146e8:	00000506 	br	14700 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   146ec:	00146200 	call	14620 <alt_get_errno>
   146f0:	1007883a 	mov	r3,r2
   146f4:	00801444 	movi	r2,81
   146f8:	18800015 	stw	r2,0(r3)
    return -1;
   146fc:	00bfffc4 	movi	r2,-1
  }
}
   14700:	e037883a 	mov	sp,fp
   14704:	dfc00117 	ldw	ra,4(sp)
   14708:	df000017 	ldw	fp,0(sp)
   1470c:	dec00204 	addi	sp,sp,8
   14710:	f800283a 	ret

00014714 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14714:	defffe04 	addi	sp,sp,-8
   14718:	dfc00115 	stw	ra,4(sp)
   1471c:	df000015 	stw	fp,0(sp)
   14720:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14724:	d0a00a17 	ldw	r2,-32728(gp)
   14728:	10000326 	beq	r2,zero,14738 <alt_get_errno+0x24>
   1472c:	d0a00a17 	ldw	r2,-32728(gp)
   14730:	103ee83a 	callr	r2
   14734:	00000106 	br	1473c <alt_get_errno+0x28>
   14738:	d0a6c204 	addi	r2,gp,-25848
}
   1473c:	e037883a 	mov	sp,fp
   14740:	dfc00117 	ldw	ra,4(sp)
   14744:	df000017 	ldw	fp,0(sp)
   14748:	dec00204 	addi	sp,sp,8
   1474c:	f800283a 	ret

00014750 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   14750:	deffed04 	addi	sp,sp,-76
   14754:	dfc01215 	stw	ra,72(sp)
   14758:	df001115 	stw	fp,68(sp)
   1475c:	df001104 	addi	fp,sp,68
   14760:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   14764:	e0bfff17 	ldw	r2,-4(fp)
   14768:	10000816 	blt	r2,zero,1478c <isatty+0x3c>
   1476c:	01400304 	movi	r5,12
   14770:	e13fff17 	ldw	r4,-4(fp)
   14774:	00144b80 	call	144b8 <__mulsi3>
   14778:	1007883a 	mov	r3,r2
   1477c:	00800074 	movhi	r2,1
   14780:	109d7b04 	addi	r2,r2,30188
   14784:	1885883a 	add	r2,r3,r2
   14788:	00000106 	br	14790 <isatty+0x40>
   1478c:	0005883a 	mov	r2,zero
   14790:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   14794:	e0bfef17 	ldw	r2,-68(fp)
   14798:	10000e26 	beq	r2,zero,147d4 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   1479c:	e0bfef17 	ldw	r2,-68(fp)
   147a0:	10800017 	ldw	r2,0(r2)
   147a4:	10800817 	ldw	r2,32(r2)
   147a8:	1000021e 	bne	r2,zero,147b4 <isatty+0x64>
    {
      return 1;
   147ac:	00800044 	movi	r2,1
   147b0:	00000d06 	br	147e8 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   147b4:	e0bff004 	addi	r2,fp,-64
   147b8:	100b883a 	mov	r5,r2
   147bc:	e13fff17 	ldw	r4,-4(fp)
   147c0:	001465c0 	call	1465c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   147c4:	e0bff117 	ldw	r2,-60(fp)
   147c8:	10880020 	cmpeqi	r2,r2,8192
   147cc:	10803fcc 	andi	r2,r2,255
   147d0:	00000506 	br	147e8 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   147d4:	00147140 	call	14714 <alt_get_errno>
   147d8:	1007883a 	mov	r3,r2
   147dc:	00801444 	movi	r2,81
   147e0:	18800015 	stw	r2,0(r3)
    return 0;
   147e4:	0005883a 	mov	r2,zero
  }
}
   147e8:	e037883a 	mov	sp,fp
   147ec:	dfc00117 	ldw	ra,4(sp)
   147f0:	df000017 	ldw	fp,0(sp)
   147f4:	dec00204 	addi	sp,sp,8
   147f8:	f800283a 	ret

000147fc <alt_load_section>:
   147fc:	defffc04 	addi	sp,sp,-16
   14800:	df000315 	stw	fp,12(sp)
   14804:	df000304 	addi	fp,sp,12
   14808:	e13ffd15 	stw	r4,-12(fp)
   1480c:	e17ffe15 	stw	r5,-8(fp)
   14810:	e1bfff15 	stw	r6,-4(fp)
   14814:	e0fffe17 	ldw	r3,-8(fp)
   14818:	e0bffd17 	ldw	r2,-12(fp)
   1481c:	18800c26 	beq	r3,r2,14850 <alt_load_section+0x54>
   14820:	00000806 	br	14844 <alt_load_section+0x48>
   14824:	e0bffe17 	ldw	r2,-8(fp)
   14828:	10c00104 	addi	r3,r2,4
   1482c:	e0fffe15 	stw	r3,-8(fp)
   14830:	e0fffd17 	ldw	r3,-12(fp)
   14834:	19000104 	addi	r4,r3,4
   14838:	e13ffd15 	stw	r4,-12(fp)
   1483c:	18c00017 	ldw	r3,0(r3)
   14840:	10c00015 	stw	r3,0(r2)
   14844:	e0fffe17 	ldw	r3,-8(fp)
   14848:	e0bfff17 	ldw	r2,-4(fp)
   1484c:	18bff51e 	bne	r3,r2,14824 <_gp+0xffff4058>
   14850:	0001883a 	nop
   14854:	e037883a 	mov	sp,fp
   14858:	df000017 	ldw	fp,0(sp)
   1485c:	dec00104 	addi	sp,sp,4
   14860:	f800283a 	ret

00014864 <alt_load>:
   14864:	defffe04 	addi	sp,sp,-8
   14868:	dfc00115 	stw	ra,4(sp)
   1486c:	df000015 	stw	fp,0(sp)
   14870:	d839883a 	mov	fp,sp
   14874:	018000b4 	movhi	r6,2
   14878:	31a20204 	addi	r6,r6,-30712
   1487c:	01400074 	movhi	r5,1
   14880:	295b5904 	addi	r5,r5,28004
   14884:	010000b4 	movhi	r4,2
   14888:	21220204 	addi	r4,r4,-30712
   1488c:	00147fc0 	call	147fc <alt_load_section>
   14890:	01800074 	movhi	r6,1
   14894:	31808c04 	addi	r6,r6,560
   14898:	01400074 	movhi	r5,1
   1489c:	29400804 	addi	r5,r5,32
   148a0:	01000074 	movhi	r4,1
   148a4:	21000804 	addi	r4,r4,32
   148a8:	00147fc0 	call	147fc <alt_load_section>
   148ac:	01800074 	movhi	r6,1
   148b0:	319b5904 	addi	r6,r6,28004
   148b4:	01400074 	movhi	r5,1
   148b8:	295b1904 	addi	r5,r5,27748
   148bc:	01000074 	movhi	r4,1
   148c0:	211b1904 	addi	r4,r4,27748
   148c4:	00147fc0 	call	147fc <alt_load_section>
   148c8:	0015af80 	call	15af8 <alt_dcache_flush_all>
   148cc:	0015cb80 	call	15cb8 <alt_icache_flush_all>
   148d0:	0001883a 	nop
   148d4:	e037883a 	mov	sp,fp
   148d8:	dfc00117 	ldw	ra,4(sp)
   148dc:	df000017 	ldw	fp,0(sp)
   148e0:	dec00204 	addi	sp,sp,8
   148e4:	f800283a 	ret

000148e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   148e8:	defffe04 	addi	sp,sp,-8
   148ec:	dfc00115 	stw	ra,4(sp)
   148f0:	df000015 	stw	fp,0(sp)
   148f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   148f8:	d0a00a17 	ldw	r2,-32728(gp)
   148fc:	10000326 	beq	r2,zero,1490c <alt_get_errno+0x24>
   14900:	d0a00a17 	ldw	r2,-32728(gp)
   14904:	103ee83a 	callr	r2
   14908:	00000106 	br	14910 <alt_get_errno+0x28>
   1490c:	d0a6c204 	addi	r2,gp,-25848
}
   14910:	e037883a 	mov	sp,fp
   14914:	dfc00117 	ldw	ra,4(sp)
   14918:	df000017 	ldw	fp,0(sp)
   1491c:	dec00204 	addi	sp,sp,8
   14920:	f800283a 	ret

00014924 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   14924:	defff904 	addi	sp,sp,-28
   14928:	dfc00615 	stw	ra,24(sp)
   1492c:	df000515 	stw	fp,20(sp)
   14930:	df000504 	addi	fp,sp,20
   14934:	e13ffd15 	stw	r4,-12(fp)
   14938:	e17ffe15 	stw	r5,-8(fp)
   1493c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   14940:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   14944:	e0bffd17 	ldw	r2,-12(fp)
   14948:	10000816 	blt	r2,zero,1496c <lseek+0x48>
   1494c:	01400304 	movi	r5,12
   14950:	e13ffd17 	ldw	r4,-12(fp)
   14954:	00144b80 	call	144b8 <__mulsi3>
   14958:	1007883a 	mov	r3,r2
   1495c:	00800074 	movhi	r2,1
   14960:	109d7b04 	addi	r2,r2,30188
   14964:	1885883a 	add	r2,r3,r2
   14968:	00000106 	br	14970 <lseek+0x4c>
   1496c:	0005883a 	mov	r2,zero
   14970:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   14974:	e0bffc17 	ldw	r2,-16(fp)
   14978:	10001026 	beq	r2,zero,149bc <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   1497c:	e0bffc17 	ldw	r2,-16(fp)
   14980:	10800017 	ldw	r2,0(r2)
   14984:	10800717 	ldw	r2,28(r2)
   14988:	10000926 	beq	r2,zero,149b0 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   1498c:	e0bffc17 	ldw	r2,-16(fp)
   14990:	10800017 	ldw	r2,0(r2)
   14994:	10800717 	ldw	r2,28(r2)
   14998:	e1bfff17 	ldw	r6,-4(fp)
   1499c:	e17ffe17 	ldw	r5,-8(fp)
   149a0:	e13ffc17 	ldw	r4,-16(fp)
   149a4:	103ee83a 	callr	r2
   149a8:	e0bffb15 	stw	r2,-20(fp)
   149ac:	00000506 	br	149c4 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   149b0:	00bfde84 	movi	r2,-134
   149b4:	e0bffb15 	stw	r2,-20(fp)
   149b8:	00000206 	br	149c4 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   149bc:	00bfebc4 	movi	r2,-81
   149c0:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   149c4:	e0bffb17 	ldw	r2,-20(fp)
   149c8:	1000070e 	bge	r2,zero,149e8 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   149cc:	00148e80 	call	148e8 <alt_get_errno>
   149d0:	1007883a 	mov	r3,r2
   149d4:	e0bffb17 	ldw	r2,-20(fp)
   149d8:	0085c83a 	sub	r2,zero,r2
   149dc:	18800015 	stw	r2,0(r3)
    rc = -1;
   149e0:	00bfffc4 	movi	r2,-1
   149e4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   149e8:	e0bffb17 	ldw	r2,-20(fp)
}
   149ec:	e037883a 	mov	sp,fp
   149f0:	dfc00117 	ldw	ra,4(sp)
   149f4:	df000017 	ldw	fp,0(sp)
   149f8:	dec00204 	addi	sp,sp,8
   149fc:	f800283a 	ret

00014a00 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   14a00:	defffd04 	addi	sp,sp,-12
   14a04:	dfc00215 	stw	ra,8(sp)
   14a08:	df000115 	stw	fp,4(sp)
   14a0c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   14a10:	0009883a 	mov	r4,zero
   14a14:	0014ee40 	call	14ee4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   14a18:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   14a1c:	0014f1c0 	call	14f1c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   14a20:	01800074 	movhi	r6,1
   14a24:	319b5104 	addi	r6,r6,27972
   14a28:	01400074 	movhi	r5,1
   14a2c:	295b5104 	addi	r5,r5,27972
   14a30:	01000074 	movhi	r4,1
   14a34:	211b5104 	addi	r4,r4,27972
   14a38:	001605c0 	call	1605c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   14a3c:	0015bf80 	call	15bf8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   14a40:	01000074 	movhi	r4,1
   14a44:	21171604 	addi	r4,r4,23640
   14a48:	001681c0 	call	1681c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   14a4c:	d0a6c317 	ldw	r2,-25844(gp)
   14a50:	d0e6c417 	ldw	r3,-25840(gp)
   14a54:	d126c517 	ldw	r4,-25836(gp)
   14a58:	200d883a 	mov	r6,r4
   14a5c:	180b883a 	mov	r5,r3
   14a60:	1009883a 	mov	r4,r2
   14a64:	001026c0 	call	1026c <main>
   14a68:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   14a6c:	01000044 	movi	r4,1
   14a70:	001451c0 	call	1451c <close>
  exit (result);
   14a74:	e13fff17 	ldw	r4,-4(fp)
   14a78:	00168300 	call	16830 <exit>

00014a7c <__malloc_lock>:
   14a7c:	defffe04 	addi	sp,sp,-8
   14a80:	df000115 	stw	fp,4(sp)
   14a84:	df000104 	addi	fp,sp,4
   14a88:	e13fff15 	stw	r4,-4(fp)
   14a8c:	0001883a 	nop
   14a90:	e037883a 	mov	sp,fp
   14a94:	df000017 	ldw	fp,0(sp)
   14a98:	dec00104 	addi	sp,sp,4
   14a9c:	f800283a 	ret

00014aa0 <__malloc_unlock>:
   14aa0:	defffe04 	addi	sp,sp,-8
   14aa4:	df000115 	stw	fp,4(sp)
   14aa8:	df000104 	addi	fp,sp,4
   14aac:	e13fff15 	stw	r4,-4(fp)
   14ab0:	0001883a 	nop
   14ab4:	e037883a 	mov	sp,fp
   14ab8:	df000017 	ldw	fp,0(sp)
   14abc:	dec00104 	addi	sp,sp,4
   14ac0:	f800283a 	ret

00014ac4 <alt_putstr>:
   14ac4:	defffd04 	addi	sp,sp,-12
   14ac8:	dfc00215 	stw	ra,8(sp)
   14acc:	df000115 	stw	fp,4(sp)
   14ad0:	df000104 	addi	fp,sp,4
   14ad4:	e13fff15 	stw	r4,-4(fp)
   14ad8:	d0a00217 	ldw	r2,-32760(gp)
   14adc:	10800217 	ldw	r2,8(r2)
   14ae0:	100b883a 	mov	r5,r2
   14ae4:	e13fff17 	ldw	r4,-4(fp)
   14ae8:	00169040 	call	16904 <fputs>
   14aec:	e037883a 	mov	sp,fp
   14af0:	dfc00117 	ldw	ra,4(sp)
   14af4:	df000017 	ldw	fp,0(sp)
   14af8:	dec00204 	addi	sp,sp,8
   14afc:	f800283a 	ret

00014b00 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14b00:	defffe04 	addi	sp,sp,-8
   14b04:	dfc00115 	stw	ra,4(sp)
   14b08:	df000015 	stw	fp,0(sp)
   14b0c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14b10:	d0a00a17 	ldw	r2,-32728(gp)
   14b14:	10000326 	beq	r2,zero,14b24 <alt_get_errno+0x24>
   14b18:	d0a00a17 	ldw	r2,-32728(gp)
   14b1c:	103ee83a 	callr	r2
   14b20:	00000106 	br	14b28 <alt_get_errno+0x28>
   14b24:	d0a6c204 	addi	r2,gp,-25848
}
   14b28:	e037883a 	mov	sp,fp
   14b2c:	dfc00117 	ldw	ra,4(sp)
   14b30:	df000017 	ldw	fp,0(sp)
   14b34:	dec00204 	addi	sp,sp,8
   14b38:	f800283a 	ret

00014b3c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   14b3c:	defff904 	addi	sp,sp,-28
   14b40:	dfc00615 	stw	ra,24(sp)
   14b44:	df000515 	stw	fp,20(sp)
   14b48:	df000504 	addi	fp,sp,20
   14b4c:	e13ffd15 	stw	r4,-12(fp)
   14b50:	e17ffe15 	stw	r5,-8(fp)
   14b54:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   14b58:	e0bffd17 	ldw	r2,-12(fp)
   14b5c:	10000816 	blt	r2,zero,14b80 <read+0x44>
   14b60:	01400304 	movi	r5,12
   14b64:	e13ffd17 	ldw	r4,-12(fp)
   14b68:	00144b80 	call	144b8 <__mulsi3>
   14b6c:	1007883a 	mov	r3,r2
   14b70:	00800074 	movhi	r2,1
   14b74:	109d7b04 	addi	r2,r2,30188
   14b78:	1885883a 	add	r2,r3,r2
   14b7c:	00000106 	br	14b84 <read+0x48>
   14b80:	0005883a 	mov	r2,zero
   14b84:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   14b88:	e0bffb17 	ldw	r2,-20(fp)
   14b8c:	10002226 	beq	r2,zero,14c18 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   14b90:	e0bffb17 	ldw	r2,-20(fp)
   14b94:	10800217 	ldw	r2,8(r2)
   14b98:	108000cc 	andi	r2,r2,3
   14b9c:	10800060 	cmpeqi	r2,r2,1
   14ba0:	1000181e 	bne	r2,zero,14c04 <read+0xc8>
        (fd->dev->read))
   14ba4:	e0bffb17 	ldw	r2,-20(fp)
   14ba8:	10800017 	ldw	r2,0(r2)
   14bac:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   14bb0:	10001426 	beq	r2,zero,14c04 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   14bb4:	e0bffb17 	ldw	r2,-20(fp)
   14bb8:	10800017 	ldw	r2,0(r2)
   14bbc:	10800517 	ldw	r2,20(r2)
   14bc0:	e0ffff17 	ldw	r3,-4(fp)
   14bc4:	180d883a 	mov	r6,r3
   14bc8:	e17ffe17 	ldw	r5,-8(fp)
   14bcc:	e13ffb17 	ldw	r4,-20(fp)
   14bd0:	103ee83a 	callr	r2
   14bd4:	e0bffc15 	stw	r2,-16(fp)
   14bd8:	e0bffc17 	ldw	r2,-16(fp)
   14bdc:	1000070e 	bge	r2,zero,14bfc <read+0xc0>
        {
          ALT_ERRNO = -rval;
   14be0:	0014b000 	call	14b00 <alt_get_errno>
   14be4:	1007883a 	mov	r3,r2
   14be8:	e0bffc17 	ldw	r2,-16(fp)
   14bec:	0085c83a 	sub	r2,zero,r2
   14bf0:	18800015 	stw	r2,0(r3)
          return -1;
   14bf4:	00bfffc4 	movi	r2,-1
   14bf8:	00000c06 	br	14c2c <read+0xf0>
        }
        return rval;
   14bfc:	e0bffc17 	ldw	r2,-16(fp)
   14c00:	00000a06 	br	14c2c <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   14c04:	0014b000 	call	14b00 <alt_get_errno>
   14c08:	1007883a 	mov	r3,r2
   14c0c:	00800344 	movi	r2,13
   14c10:	18800015 	stw	r2,0(r3)
   14c14:	00000406 	br	14c28 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   14c18:	0014b000 	call	14b00 <alt_get_errno>
   14c1c:	1007883a 	mov	r3,r2
   14c20:	00801444 	movi	r2,81
   14c24:	18800015 	stw	r2,0(r3)
  }
  return -1;
   14c28:	00bfffc4 	movi	r2,-1
}
   14c2c:	e037883a 	mov	sp,fp
   14c30:	dfc00117 	ldw	ra,4(sp)
   14c34:	df000017 	ldw	fp,0(sp)
   14c38:	dec00204 	addi	sp,sp,8
   14c3c:	f800283a 	ret

00014c40 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   14c40:	defffc04 	addi	sp,sp,-16
   14c44:	dfc00315 	stw	ra,12(sp)
   14c48:	df000215 	stw	fp,8(sp)
   14c4c:	dc000115 	stw	r16,4(sp)
   14c50:	df000204 	addi	fp,sp,8
   14c54:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   14c58:	e0bffe17 	ldw	r2,-8(fp)
   14c5c:	108000d0 	cmplti	r2,r2,3
   14c60:	1000111e 	bne	r2,zero,14ca8 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   14c64:	04000074 	movhi	r16,1
   14c68:	841d7b04 	addi	r16,r16,30188
   14c6c:	e0bffe17 	ldw	r2,-8(fp)
   14c70:	01400304 	movi	r5,12
   14c74:	1009883a 	mov	r4,r2
   14c78:	00144b80 	call	144b8 <__mulsi3>
   14c7c:	8085883a 	add	r2,r16,r2
   14c80:	10800204 	addi	r2,r2,8
   14c84:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   14c88:	04000074 	movhi	r16,1
   14c8c:	841d7b04 	addi	r16,r16,30188
   14c90:	e0bffe17 	ldw	r2,-8(fp)
   14c94:	01400304 	movi	r5,12
   14c98:	1009883a 	mov	r4,r2
   14c9c:	00144b80 	call	144b8 <__mulsi3>
   14ca0:	8085883a 	add	r2,r16,r2
   14ca4:	10000015 	stw	zero,0(r2)
  }
}
   14ca8:	0001883a 	nop
   14cac:	e6ffff04 	addi	sp,fp,-4
   14cb0:	dfc00217 	ldw	ra,8(sp)
   14cb4:	df000117 	ldw	fp,4(sp)
   14cb8:	dc000017 	ldw	r16,0(sp)
   14cbc:	dec00304 	addi	sp,sp,12
   14cc0:	f800283a 	ret

00014cc4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   14cc4:	defff904 	addi	sp,sp,-28
   14cc8:	df000615 	stw	fp,24(sp)
   14ccc:	df000604 	addi	fp,sp,24
   14cd0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14cd4:	0005303a 	rdctl	r2,status
   14cd8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14cdc:	e0fffe17 	ldw	r3,-8(fp)
   14ce0:	00bfff84 	movi	r2,-2
   14ce4:	1884703a 	and	r2,r3,r2
   14ce8:	1001703a 	wrctl	status,r2
  
  return context;
   14cec:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   14cf0:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   14cf4:	d0a00b17 	ldw	r2,-32724(gp)
   14cf8:	10c000c4 	addi	r3,r2,3
   14cfc:	00bfff04 	movi	r2,-4
   14d00:	1884703a 	and	r2,r3,r2
   14d04:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   14d08:	d0e00b17 	ldw	r3,-32724(gp)
   14d0c:	e0bfff17 	ldw	r2,-4(fp)
   14d10:	1887883a 	add	r3,r3,r2
   14d14:	008000b4 	movhi	r2,2
   14d18:	10800004 	addi	r2,r2,0
   14d1c:	10c0062e 	bgeu	r2,r3,14d38 <sbrk+0x74>
   14d20:	e0bffb17 	ldw	r2,-20(fp)
   14d24:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14d28:	e0bffa17 	ldw	r2,-24(fp)
   14d2c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   14d30:	00bfffc4 	movi	r2,-1
   14d34:	00000b06 	br	14d64 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   14d38:	d0a00b17 	ldw	r2,-32724(gp)
   14d3c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   14d40:	d0e00b17 	ldw	r3,-32724(gp)
   14d44:	e0bfff17 	ldw	r2,-4(fp)
   14d48:	1885883a 	add	r2,r3,r2
   14d4c:	d0a00b15 	stw	r2,-32724(gp)
   14d50:	e0bffb17 	ldw	r2,-20(fp)
   14d54:	e0bffc15 	stw	r2,-16(fp)
   14d58:	e0bffc17 	ldw	r2,-16(fp)
   14d5c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   14d60:	e0bffd17 	ldw	r2,-12(fp)
} 
   14d64:	e037883a 	mov	sp,fp
   14d68:	df000017 	ldw	fp,0(sp)
   14d6c:	dec00104 	addi	sp,sp,4
   14d70:	f800283a 	ret

00014d74 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14d74:	defffe04 	addi	sp,sp,-8
   14d78:	dfc00115 	stw	ra,4(sp)
   14d7c:	df000015 	stw	fp,0(sp)
   14d80:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14d84:	d0a00a17 	ldw	r2,-32728(gp)
   14d88:	10000326 	beq	r2,zero,14d98 <alt_get_errno+0x24>
   14d8c:	d0a00a17 	ldw	r2,-32728(gp)
   14d90:	103ee83a 	callr	r2
   14d94:	00000106 	br	14d9c <alt_get_errno+0x28>
   14d98:	d0a6c204 	addi	r2,gp,-25848
}
   14d9c:	e037883a 	mov	sp,fp
   14da0:	dfc00117 	ldw	ra,4(sp)
   14da4:	df000017 	ldw	fp,0(sp)
   14da8:	dec00204 	addi	sp,sp,8
   14dac:	f800283a 	ret

00014db0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   14db0:	defff904 	addi	sp,sp,-28
   14db4:	dfc00615 	stw	ra,24(sp)
   14db8:	df000515 	stw	fp,20(sp)
   14dbc:	df000504 	addi	fp,sp,20
   14dc0:	e13ffd15 	stw	r4,-12(fp)
   14dc4:	e17ffe15 	stw	r5,-8(fp)
   14dc8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   14dcc:	e0bffd17 	ldw	r2,-12(fp)
   14dd0:	10000816 	blt	r2,zero,14df4 <write+0x44>
   14dd4:	01400304 	movi	r5,12
   14dd8:	e13ffd17 	ldw	r4,-12(fp)
   14ddc:	00144b80 	call	144b8 <__mulsi3>
   14de0:	1007883a 	mov	r3,r2
   14de4:	00800074 	movhi	r2,1
   14de8:	109d7b04 	addi	r2,r2,30188
   14dec:	1885883a 	add	r2,r3,r2
   14df0:	00000106 	br	14df8 <write+0x48>
   14df4:	0005883a 	mov	r2,zero
   14df8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   14dfc:	e0bffb17 	ldw	r2,-20(fp)
   14e00:	10002126 	beq	r2,zero,14e88 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   14e04:	e0bffb17 	ldw	r2,-20(fp)
   14e08:	10800217 	ldw	r2,8(r2)
   14e0c:	108000cc 	andi	r2,r2,3
   14e10:	10001826 	beq	r2,zero,14e74 <write+0xc4>
   14e14:	e0bffb17 	ldw	r2,-20(fp)
   14e18:	10800017 	ldw	r2,0(r2)
   14e1c:	10800617 	ldw	r2,24(r2)
   14e20:	10001426 	beq	r2,zero,14e74 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   14e24:	e0bffb17 	ldw	r2,-20(fp)
   14e28:	10800017 	ldw	r2,0(r2)
   14e2c:	10800617 	ldw	r2,24(r2)
   14e30:	e0ffff17 	ldw	r3,-4(fp)
   14e34:	180d883a 	mov	r6,r3
   14e38:	e17ffe17 	ldw	r5,-8(fp)
   14e3c:	e13ffb17 	ldw	r4,-20(fp)
   14e40:	103ee83a 	callr	r2
   14e44:	e0bffc15 	stw	r2,-16(fp)
   14e48:	e0bffc17 	ldw	r2,-16(fp)
   14e4c:	1000070e 	bge	r2,zero,14e6c <write+0xbc>
      {
        ALT_ERRNO = -rval;
   14e50:	0014d740 	call	14d74 <alt_get_errno>
   14e54:	1007883a 	mov	r3,r2
   14e58:	e0bffc17 	ldw	r2,-16(fp)
   14e5c:	0085c83a 	sub	r2,zero,r2
   14e60:	18800015 	stw	r2,0(r3)
        return -1;
   14e64:	00bfffc4 	movi	r2,-1
   14e68:	00000c06 	br	14e9c <write+0xec>
      }
      return rval;
   14e6c:	e0bffc17 	ldw	r2,-16(fp)
   14e70:	00000a06 	br	14e9c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   14e74:	0014d740 	call	14d74 <alt_get_errno>
   14e78:	1007883a 	mov	r3,r2
   14e7c:	00800344 	movi	r2,13
   14e80:	18800015 	stw	r2,0(r3)
   14e84:	00000406 	br	14e98 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   14e88:	0014d740 	call	14d74 <alt_get_errno>
   14e8c:	1007883a 	mov	r3,r2
   14e90:	00801444 	movi	r2,81
   14e94:	18800015 	stw	r2,0(r3)
  }
  return -1;
   14e98:	00bfffc4 	movi	r2,-1
}
   14e9c:	e037883a 	mov	sp,fp
   14ea0:	dfc00117 	ldw	ra,4(sp)
   14ea4:	df000017 	ldw	fp,0(sp)
   14ea8:	dec00204 	addi	sp,sp,8
   14eac:	f800283a 	ret

00014eb0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   14eb0:	defffd04 	addi	sp,sp,-12
   14eb4:	dfc00215 	stw	ra,8(sp)
   14eb8:	df000115 	stw	fp,4(sp)
   14ebc:	df000104 	addi	fp,sp,4
   14ec0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   14ec4:	d1600704 	addi	r5,gp,-32740
   14ec8:	e13fff17 	ldw	r4,-4(fp)
   14ecc:	0015b540 	call	15b54 <alt_dev_llist_insert>
}
   14ed0:	e037883a 	mov	sp,fp
   14ed4:	dfc00117 	ldw	ra,4(sp)
   14ed8:	df000017 	ldw	fp,0(sp)
   14edc:	dec00204 	addi	sp,sp,8
   14ee0:	f800283a 	ret

00014ee4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   14ee4:	defffd04 	addi	sp,sp,-12
   14ee8:	dfc00215 	stw	ra,8(sp)
   14eec:	df000115 	stw	fp,4(sp)
   14ef0:	df000104 	addi	fp,sp,4
   14ef4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   14ef8:	00165000 	call	16500 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   14efc:	00800044 	movi	r2,1
   14f00:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   14f04:	0001883a 	nop
   14f08:	e037883a 	mov	sp,fp
   14f0c:	dfc00117 	ldw	ra,4(sp)
   14f10:	df000017 	ldw	fp,0(sp)
   14f14:	dec00204 	addi	sp,sp,8
   14f18:	f800283a 	ret

00014f1c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   14f1c:	defffe04 	addi	sp,sp,-8
   14f20:	dfc00115 	stw	ra,4(sp)
   14f24:	df000015 	stw	fp,0(sp)
   14f28:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   14f2c:	000d883a 	mov	r6,zero
   14f30:	000b883a 	mov	r5,zero
   14f34:	01000074 	movhi	r4,1
   14f38:	211de504 	addi	r4,r4,30612
   14f3c:	00150c80 	call	150c8 <altera_avalon_jtag_uart_init>
   14f40:	01000074 	movhi	r4,1
   14f44:	211ddb04 	addi	r4,r4,30572
   14f48:	0014eb00 	call	14eb0 <alt_dev_reg>
}
   14f4c:	0001883a 	nop
   14f50:	e037883a 	mov	sp,fp
   14f54:	dfc00117 	ldw	ra,4(sp)
   14f58:	df000017 	ldw	fp,0(sp)
   14f5c:	dec00204 	addi	sp,sp,8
   14f60:	f800283a 	ret

00014f64 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   14f64:	defffa04 	addi	sp,sp,-24
   14f68:	dfc00515 	stw	ra,20(sp)
   14f6c:	df000415 	stw	fp,16(sp)
   14f70:	df000404 	addi	fp,sp,16
   14f74:	e13ffd15 	stw	r4,-12(fp)
   14f78:	e17ffe15 	stw	r5,-8(fp)
   14f7c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   14f80:	e0bffd17 	ldw	r2,-12(fp)
   14f84:	10800017 	ldw	r2,0(r2)
   14f88:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   14f8c:	e0bffc17 	ldw	r2,-16(fp)
   14f90:	10c00a04 	addi	r3,r2,40
   14f94:	e0bffd17 	ldw	r2,-12(fp)
   14f98:	10800217 	ldw	r2,8(r2)
   14f9c:	100f883a 	mov	r7,r2
   14fa0:	e1bfff17 	ldw	r6,-4(fp)
   14fa4:	e17ffe17 	ldw	r5,-8(fp)
   14fa8:	1809883a 	mov	r4,r3
   14fac:	001558c0 	call	1558c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   14fb0:	e037883a 	mov	sp,fp
   14fb4:	dfc00117 	ldw	ra,4(sp)
   14fb8:	df000017 	ldw	fp,0(sp)
   14fbc:	dec00204 	addi	sp,sp,8
   14fc0:	f800283a 	ret

00014fc4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   14fc4:	defffa04 	addi	sp,sp,-24
   14fc8:	dfc00515 	stw	ra,20(sp)
   14fcc:	df000415 	stw	fp,16(sp)
   14fd0:	df000404 	addi	fp,sp,16
   14fd4:	e13ffd15 	stw	r4,-12(fp)
   14fd8:	e17ffe15 	stw	r5,-8(fp)
   14fdc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   14fe0:	e0bffd17 	ldw	r2,-12(fp)
   14fe4:	10800017 	ldw	r2,0(r2)
   14fe8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   14fec:	e0bffc17 	ldw	r2,-16(fp)
   14ff0:	10c00a04 	addi	r3,r2,40
   14ff4:	e0bffd17 	ldw	r2,-12(fp)
   14ff8:	10800217 	ldw	r2,8(r2)
   14ffc:	100f883a 	mov	r7,r2
   15000:	e1bfff17 	ldw	r6,-4(fp)
   15004:	e17ffe17 	ldw	r5,-8(fp)
   15008:	1809883a 	mov	r4,r3
   1500c:	00157a80 	call	157a8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   15010:	e037883a 	mov	sp,fp
   15014:	dfc00117 	ldw	ra,4(sp)
   15018:	df000017 	ldw	fp,0(sp)
   1501c:	dec00204 	addi	sp,sp,8
   15020:	f800283a 	ret

00015024 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   15024:	defffc04 	addi	sp,sp,-16
   15028:	dfc00315 	stw	ra,12(sp)
   1502c:	df000215 	stw	fp,8(sp)
   15030:	df000204 	addi	fp,sp,8
   15034:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   15038:	e0bfff17 	ldw	r2,-4(fp)
   1503c:	10800017 	ldw	r2,0(r2)
   15040:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   15044:	e0bffe17 	ldw	r2,-8(fp)
   15048:	10c00a04 	addi	r3,r2,40
   1504c:	e0bfff17 	ldw	r2,-4(fp)
   15050:	10800217 	ldw	r2,8(r2)
   15054:	100b883a 	mov	r5,r2
   15058:	1809883a 	mov	r4,r3
   1505c:	00154340 	call	15434 <altera_avalon_jtag_uart_close>
}
   15060:	e037883a 	mov	sp,fp
   15064:	dfc00117 	ldw	ra,4(sp)
   15068:	df000017 	ldw	fp,0(sp)
   1506c:	dec00204 	addi	sp,sp,8
   15070:	f800283a 	ret

00015074 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   15074:	defffa04 	addi	sp,sp,-24
   15078:	dfc00515 	stw	ra,20(sp)
   1507c:	df000415 	stw	fp,16(sp)
   15080:	df000404 	addi	fp,sp,16
   15084:	e13ffd15 	stw	r4,-12(fp)
   15088:	e17ffe15 	stw	r5,-8(fp)
   1508c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   15090:	e0bffd17 	ldw	r2,-12(fp)
   15094:	10800017 	ldw	r2,0(r2)
   15098:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   1509c:	e0bffc17 	ldw	r2,-16(fp)
   150a0:	10800a04 	addi	r2,r2,40
   150a4:	e1bfff17 	ldw	r6,-4(fp)
   150a8:	e17ffe17 	ldw	r5,-8(fp)
   150ac:	1009883a 	mov	r4,r2
   150b0:	001549c0 	call	1549c <altera_avalon_jtag_uart_ioctl>
}
   150b4:	e037883a 	mov	sp,fp
   150b8:	dfc00117 	ldw	ra,4(sp)
   150bc:	df000017 	ldw	fp,0(sp)
   150c0:	dec00204 	addi	sp,sp,8
   150c4:	f800283a 	ret

000150c8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   150c8:	defffa04 	addi	sp,sp,-24
   150cc:	dfc00515 	stw	ra,20(sp)
   150d0:	df000415 	stw	fp,16(sp)
   150d4:	df000404 	addi	fp,sp,16
   150d8:	e13ffd15 	stw	r4,-12(fp)
   150dc:	e17ffe15 	stw	r5,-8(fp)
   150e0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   150e4:	e0bffd17 	ldw	r2,-12(fp)
   150e8:	00c00044 	movi	r3,1
   150ec:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   150f0:	e0bffd17 	ldw	r2,-12(fp)
   150f4:	10800017 	ldw	r2,0(r2)
   150f8:	10800104 	addi	r2,r2,4
   150fc:	1007883a 	mov	r3,r2
   15100:	e0bffd17 	ldw	r2,-12(fp)
   15104:	10800817 	ldw	r2,32(r2)
   15108:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   1510c:	e0bffe17 	ldw	r2,-8(fp)
   15110:	e0ffff17 	ldw	r3,-4(fp)
   15114:	d8000015 	stw	zero,0(sp)
   15118:	e1fffd17 	ldw	r7,-12(fp)
   1511c:	01800074 	movhi	r6,1
   15120:	31946204 	addi	r6,r6,20872
   15124:	180b883a 	mov	r5,r3
   15128:	1009883a 	mov	r4,r2
   1512c:	0015cd80 	call	15cd8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   15130:	e0bffd17 	ldw	r2,-12(fp)
   15134:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   15138:	e0bffd17 	ldw	r2,-12(fp)
   1513c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   15140:	d0e6c717 	ldw	r3,-25828(gp)
   15144:	e1fffd17 	ldw	r7,-12(fp)
   15148:	01800074 	movhi	r6,1
   1514c:	3194e504 	addi	r6,r6,21396
   15150:	180b883a 	mov	r5,r3
   15154:	1009883a 	mov	r4,r2
   15158:	00159cc0 	call	159cc <alt_alarm_start>
   1515c:	1000040e 	bge	r2,zero,15170 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   15160:	e0fffd17 	ldw	r3,-12(fp)
   15164:	00a00034 	movhi	r2,32768
   15168:	10bfffc4 	addi	r2,r2,-1
   1516c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   15170:	0001883a 	nop
   15174:	e037883a 	mov	sp,fp
   15178:	dfc00117 	ldw	ra,4(sp)
   1517c:	df000017 	ldw	fp,0(sp)
   15180:	dec00204 	addi	sp,sp,8
   15184:	f800283a 	ret

00015188 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   15188:	defff804 	addi	sp,sp,-32
   1518c:	df000715 	stw	fp,28(sp)
   15190:	df000704 	addi	fp,sp,28
   15194:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   15198:	e0bfff17 	ldw	r2,-4(fp)
   1519c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   151a0:	e0bffb17 	ldw	r2,-20(fp)
   151a4:	10800017 	ldw	r2,0(r2)
   151a8:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   151ac:	e0bffc17 	ldw	r2,-16(fp)
   151b0:	10800104 	addi	r2,r2,4
   151b4:	10800037 	ldwio	r2,0(r2)
   151b8:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   151bc:	e0bffd17 	ldw	r2,-12(fp)
   151c0:	1080c00c 	andi	r2,r2,768
   151c4:	10006d26 	beq	r2,zero,1537c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   151c8:	e0bffd17 	ldw	r2,-12(fp)
   151cc:	1080400c 	andi	r2,r2,256
   151d0:	10003526 	beq	r2,zero,152a8 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   151d4:	00800074 	movhi	r2,1
   151d8:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   151dc:	e0bffb17 	ldw	r2,-20(fp)
   151e0:	10800a17 	ldw	r2,40(r2)
   151e4:	10800044 	addi	r2,r2,1
   151e8:	1081ffcc 	andi	r2,r2,2047
   151ec:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   151f0:	e0bffb17 	ldw	r2,-20(fp)
   151f4:	10c00b17 	ldw	r3,44(r2)
   151f8:	e0bffe17 	ldw	r2,-8(fp)
   151fc:	18801526 	beq	r3,r2,15254 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   15200:	e0bffc17 	ldw	r2,-16(fp)
   15204:	10800037 	ldwio	r2,0(r2)
   15208:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   1520c:	e0bff917 	ldw	r2,-28(fp)
   15210:	10a0000c 	andi	r2,r2,32768
   15214:	10001126 	beq	r2,zero,1525c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   15218:	e0bffb17 	ldw	r2,-20(fp)
   1521c:	10800a17 	ldw	r2,40(r2)
   15220:	e0fff917 	ldw	r3,-28(fp)
   15224:	1809883a 	mov	r4,r3
   15228:	e0fffb17 	ldw	r3,-20(fp)
   1522c:	1885883a 	add	r2,r3,r2
   15230:	10800e04 	addi	r2,r2,56
   15234:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   15238:	e0bffb17 	ldw	r2,-20(fp)
   1523c:	10800a17 	ldw	r2,40(r2)
   15240:	10800044 	addi	r2,r2,1
   15244:	10c1ffcc 	andi	r3,r2,2047
   15248:	e0bffb17 	ldw	r2,-20(fp)
   1524c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   15250:	003fe206 	br	151dc <_gp+0xffff4a10>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   15254:	0001883a 	nop
   15258:	00000106 	br	15260 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   1525c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   15260:	e0bff917 	ldw	r2,-28(fp)
   15264:	10bfffec 	andhi	r2,r2,65535
   15268:	10000f26 	beq	r2,zero,152a8 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1526c:	e0bffb17 	ldw	r2,-20(fp)
   15270:	10c00817 	ldw	r3,32(r2)
   15274:	00bfff84 	movi	r2,-2
   15278:	1886703a 	and	r3,r3,r2
   1527c:	e0bffb17 	ldw	r2,-20(fp)
   15280:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   15284:	e0bffc17 	ldw	r2,-16(fp)
   15288:	10800104 	addi	r2,r2,4
   1528c:	1007883a 	mov	r3,r2
   15290:	e0bffb17 	ldw	r2,-20(fp)
   15294:	10800817 	ldw	r2,32(r2)
   15298:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1529c:	e0bffc17 	ldw	r2,-16(fp)
   152a0:	10800104 	addi	r2,r2,4
   152a4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   152a8:	e0bffd17 	ldw	r2,-12(fp)
   152ac:	1080800c 	andi	r2,r2,512
   152b0:	103fbe26 	beq	r2,zero,151ac <_gp+0xffff49e0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   152b4:	e0bffd17 	ldw	r2,-12(fp)
   152b8:	1004d43a 	srli	r2,r2,16
   152bc:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   152c0:	00001406 	br	15314 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   152c4:	e0bffc17 	ldw	r2,-16(fp)
   152c8:	e0fffb17 	ldw	r3,-20(fp)
   152cc:	18c00d17 	ldw	r3,52(r3)
   152d0:	e13ffb17 	ldw	r4,-20(fp)
   152d4:	20c7883a 	add	r3,r4,r3
   152d8:	18c20e04 	addi	r3,r3,2104
   152dc:	18c00003 	ldbu	r3,0(r3)
   152e0:	18c03fcc 	andi	r3,r3,255
   152e4:	18c0201c 	xori	r3,r3,128
   152e8:	18ffe004 	addi	r3,r3,-128
   152ec:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   152f0:	e0bffb17 	ldw	r2,-20(fp)
   152f4:	10800d17 	ldw	r2,52(r2)
   152f8:	10800044 	addi	r2,r2,1
   152fc:	10c1ffcc 	andi	r3,r2,2047
   15300:	e0bffb17 	ldw	r2,-20(fp)
   15304:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   15308:	e0bffa17 	ldw	r2,-24(fp)
   1530c:	10bfffc4 	addi	r2,r2,-1
   15310:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   15314:	e0bffa17 	ldw	r2,-24(fp)
   15318:	10000526 	beq	r2,zero,15330 <altera_avalon_jtag_uart_irq+0x1a8>
   1531c:	e0bffb17 	ldw	r2,-20(fp)
   15320:	10c00d17 	ldw	r3,52(r2)
   15324:	e0bffb17 	ldw	r2,-20(fp)
   15328:	10800c17 	ldw	r2,48(r2)
   1532c:	18bfe51e 	bne	r3,r2,152c4 <_gp+0xffff4af8>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   15330:	e0bffa17 	ldw	r2,-24(fp)
   15334:	103f9d26 	beq	r2,zero,151ac <_gp+0xffff49e0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   15338:	e0bffb17 	ldw	r2,-20(fp)
   1533c:	10c00817 	ldw	r3,32(r2)
   15340:	00bfff44 	movi	r2,-3
   15344:	1886703a 	and	r3,r3,r2
   15348:	e0bffb17 	ldw	r2,-20(fp)
   1534c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   15350:	e0bffb17 	ldw	r2,-20(fp)
   15354:	10800017 	ldw	r2,0(r2)
   15358:	10800104 	addi	r2,r2,4
   1535c:	1007883a 	mov	r3,r2
   15360:	e0bffb17 	ldw	r2,-20(fp)
   15364:	10800817 	ldw	r2,32(r2)
   15368:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1536c:	e0bffc17 	ldw	r2,-16(fp)
   15370:	10800104 	addi	r2,r2,4
   15374:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   15378:	003f8c06 	br	151ac <_gp+0xffff49e0>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   1537c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   15380:	0001883a 	nop
   15384:	e037883a 	mov	sp,fp
   15388:	df000017 	ldw	fp,0(sp)
   1538c:	dec00104 	addi	sp,sp,4
   15390:	f800283a 	ret

00015394 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   15394:	defff804 	addi	sp,sp,-32
   15398:	df000715 	stw	fp,28(sp)
   1539c:	df000704 	addi	fp,sp,28
   153a0:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   153a4:	e0bffb17 	ldw	r2,-20(fp)
   153a8:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   153ac:	e0bff917 	ldw	r2,-28(fp)
   153b0:	10800017 	ldw	r2,0(r2)
   153b4:	10800104 	addi	r2,r2,4
   153b8:	10800037 	ldwio	r2,0(r2)
   153bc:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   153c0:	e0bffa17 	ldw	r2,-24(fp)
   153c4:	1081000c 	andi	r2,r2,1024
   153c8:	10000b26 	beq	r2,zero,153f8 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   153cc:	e0bff917 	ldw	r2,-28(fp)
   153d0:	10800017 	ldw	r2,0(r2)
   153d4:	10800104 	addi	r2,r2,4
   153d8:	1007883a 	mov	r3,r2
   153dc:	e0bff917 	ldw	r2,-28(fp)
   153e0:	10800817 	ldw	r2,32(r2)
   153e4:	10810014 	ori	r2,r2,1024
   153e8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   153ec:	e0bff917 	ldw	r2,-28(fp)
   153f0:	10000915 	stw	zero,36(r2)
   153f4:	00000a06 	br	15420 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   153f8:	e0bff917 	ldw	r2,-28(fp)
   153fc:	10c00917 	ldw	r3,36(r2)
   15400:	00a00034 	movhi	r2,32768
   15404:	10bfff04 	addi	r2,r2,-4
   15408:	10c00536 	bltu	r2,r3,15420 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   1540c:	e0bff917 	ldw	r2,-28(fp)
   15410:	10800917 	ldw	r2,36(r2)
   15414:	10c00044 	addi	r3,r2,1
   15418:	e0bff917 	ldw	r2,-28(fp)
   1541c:	10c00915 	stw	r3,36(r2)
   15420:	d0a6c717 	ldw	r2,-25828(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   15424:	e037883a 	mov	sp,fp
   15428:	df000017 	ldw	fp,0(sp)
   1542c:	dec00104 	addi	sp,sp,4
   15430:	f800283a 	ret

00015434 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   15434:	defffd04 	addi	sp,sp,-12
   15438:	df000215 	stw	fp,8(sp)
   1543c:	df000204 	addi	fp,sp,8
   15440:	e13ffe15 	stw	r4,-8(fp)
   15444:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   15448:	00000506 	br	15460 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   1544c:	e0bfff17 	ldw	r2,-4(fp)
   15450:	1090000c 	andi	r2,r2,16384
   15454:	10000226 	beq	r2,zero,15460 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   15458:	00bffd44 	movi	r2,-11
   1545c:	00000b06 	br	1548c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   15460:	e0bffe17 	ldw	r2,-8(fp)
   15464:	10c00d17 	ldw	r3,52(r2)
   15468:	e0bffe17 	ldw	r2,-8(fp)
   1546c:	10800c17 	ldw	r2,48(r2)
   15470:	18800526 	beq	r3,r2,15488 <altera_avalon_jtag_uart_close+0x54>
   15474:	e0bffe17 	ldw	r2,-8(fp)
   15478:	10c00917 	ldw	r3,36(r2)
   1547c:	e0bffe17 	ldw	r2,-8(fp)
   15480:	10800117 	ldw	r2,4(r2)
   15484:	18bff136 	bltu	r3,r2,1544c <_gp+0xffff4c80>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   15488:	0005883a 	mov	r2,zero
}
   1548c:	e037883a 	mov	sp,fp
   15490:	df000017 	ldw	fp,0(sp)
   15494:	dec00104 	addi	sp,sp,4
   15498:	f800283a 	ret

0001549c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   1549c:	defffa04 	addi	sp,sp,-24
   154a0:	df000515 	stw	fp,20(sp)
   154a4:	df000504 	addi	fp,sp,20
   154a8:	e13ffd15 	stw	r4,-12(fp)
   154ac:	e17ffe15 	stw	r5,-8(fp)
   154b0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   154b4:	00bff9c4 	movi	r2,-25
   154b8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   154bc:	e0bffe17 	ldw	r2,-8(fp)
   154c0:	10da8060 	cmpeqi	r3,r2,27137
   154c4:	1800031e 	bne	r3,zero,154d4 <altera_avalon_jtag_uart_ioctl+0x38>
   154c8:	109a80a0 	cmpeqi	r2,r2,27138
   154cc:	1000181e 	bne	r2,zero,15530 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   154d0:	00002906 	br	15578 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   154d4:	e0bffd17 	ldw	r2,-12(fp)
   154d8:	10c00117 	ldw	r3,4(r2)
   154dc:	00a00034 	movhi	r2,32768
   154e0:	10bfffc4 	addi	r2,r2,-1
   154e4:	18802126 	beq	r3,r2,1556c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   154e8:	e0bfff17 	ldw	r2,-4(fp)
   154ec:	10800017 	ldw	r2,0(r2)
   154f0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   154f4:	e0bffc17 	ldw	r2,-16(fp)
   154f8:	10800090 	cmplti	r2,r2,2
   154fc:	1000061e 	bne	r2,zero,15518 <altera_avalon_jtag_uart_ioctl+0x7c>
   15500:	e0fffc17 	ldw	r3,-16(fp)
   15504:	00a00034 	movhi	r2,32768
   15508:	10bfffc4 	addi	r2,r2,-1
   1550c:	18800226 	beq	r3,r2,15518 <altera_avalon_jtag_uart_ioctl+0x7c>
   15510:	e0bffc17 	ldw	r2,-16(fp)
   15514:	00000206 	br	15520 <altera_avalon_jtag_uart_ioctl+0x84>
   15518:	00a00034 	movhi	r2,32768
   1551c:	10bfff84 	addi	r2,r2,-2
   15520:	e0fffd17 	ldw	r3,-12(fp)
   15524:	18800115 	stw	r2,4(r3)
      rc = 0;
   15528:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1552c:	00000f06 	br	1556c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   15530:	e0bffd17 	ldw	r2,-12(fp)
   15534:	10c00117 	ldw	r3,4(r2)
   15538:	00a00034 	movhi	r2,32768
   1553c:	10bfffc4 	addi	r2,r2,-1
   15540:	18800c26 	beq	r3,r2,15574 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   15544:	e0bffd17 	ldw	r2,-12(fp)
   15548:	10c00917 	ldw	r3,36(r2)
   1554c:	e0bffd17 	ldw	r2,-12(fp)
   15550:	10800117 	ldw	r2,4(r2)
   15554:	1885803a 	cmpltu	r2,r3,r2
   15558:	10c03fcc 	andi	r3,r2,255
   1555c:	e0bfff17 	ldw	r2,-4(fp)
   15560:	10c00015 	stw	r3,0(r2)
      rc = 0;
   15564:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   15568:	00000206 	br	15574 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   1556c:	0001883a 	nop
   15570:	00000106 	br	15578 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   15574:	0001883a 	nop

  default:
    break;
  }

  return rc;
   15578:	e0bffb17 	ldw	r2,-20(fp)
}
   1557c:	e037883a 	mov	sp,fp
   15580:	df000017 	ldw	fp,0(sp)
   15584:	dec00104 	addi	sp,sp,4
   15588:	f800283a 	ret

0001558c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   1558c:	defff304 	addi	sp,sp,-52
   15590:	dfc00c15 	stw	ra,48(sp)
   15594:	df000b15 	stw	fp,44(sp)
   15598:	df000b04 	addi	fp,sp,44
   1559c:	e13ffc15 	stw	r4,-16(fp)
   155a0:	e17ffd15 	stw	r5,-12(fp)
   155a4:	e1bffe15 	stw	r6,-8(fp)
   155a8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   155ac:	e0bffd17 	ldw	r2,-12(fp)
   155b0:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   155b4:	00004706 	br	156d4 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   155b8:	e0bffc17 	ldw	r2,-16(fp)
   155bc:	10800a17 	ldw	r2,40(r2)
   155c0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   155c4:	e0bffc17 	ldw	r2,-16(fp)
   155c8:	10800b17 	ldw	r2,44(r2)
   155cc:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   155d0:	e0fff717 	ldw	r3,-36(fp)
   155d4:	e0bff817 	ldw	r2,-32(fp)
   155d8:	18800536 	bltu	r3,r2,155f0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   155dc:	e0fff717 	ldw	r3,-36(fp)
   155e0:	e0bff817 	ldw	r2,-32(fp)
   155e4:	1885c83a 	sub	r2,r3,r2
   155e8:	e0bff615 	stw	r2,-40(fp)
   155ec:	00000406 	br	15600 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   155f0:	00c20004 	movi	r3,2048
   155f4:	e0bff817 	ldw	r2,-32(fp)
   155f8:	1885c83a 	sub	r2,r3,r2
   155fc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   15600:	e0bff617 	ldw	r2,-40(fp)
   15604:	10001e26 	beq	r2,zero,15680 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   15608:	e0fffe17 	ldw	r3,-8(fp)
   1560c:	e0bff617 	ldw	r2,-40(fp)
   15610:	1880022e 	bgeu	r3,r2,1561c <altera_avalon_jtag_uart_read+0x90>
        n = space;
   15614:	e0bffe17 	ldw	r2,-8(fp)
   15618:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   1561c:	e0bffc17 	ldw	r2,-16(fp)
   15620:	10c00e04 	addi	r3,r2,56
   15624:	e0bff817 	ldw	r2,-32(fp)
   15628:	1885883a 	add	r2,r3,r2
   1562c:	e1bff617 	ldw	r6,-40(fp)
   15630:	100b883a 	mov	r5,r2
   15634:	e13ff517 	ldw	r4,-44(fp)
   15638:	0012ce40 	call	12ce4 <memcpy>
      ptr   += n;
   1563c:	e0fff517 	ldw	r3,-44(fp)
   15640:	e0bff617 	ldw	r2,-40(fp)
   15644:	1885883a 	add	r2,r3,r2
   15648:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   1564c:	e0fffe17 	ldw	r3,-8(fp)
   15650:	e0bff617 	ldw	r2,-40(fp)
   15654:	1885c83a 	sub	r2,r3,r2
   15658:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1565c:	e0fff817 	ldw	r3,-32(fp)
   15660:	e0bff617 	ldw	r2,-40(fp)
   15664:	1885883a 	add	r2,r3,r2
   15668:	10c1ffcc 	andi	r3,r2,2047
   1566c:	e0bffc17 	ldw	r2,-16(fp)
   15670:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   15674:	e0bffe17 	ldw	r2,-8(fp)
   15678:	00bfcf16 	blt	zero,r2,155b8 <_gp+0xffff4dec>
   1567c:	00000106 	br	15684 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   15680:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   15684:	e0fff517 	ldw	r3,-44(fp)
   15688:	e0bffd17 	ldw	r2,-12(fp)
   1568c:	1880141e 	bne	r3,r2,156e0 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   15690:	e0bfff17 	ldw	r2,-4(fp)
   15694:	1090000c 	andi	r2,r2,16384
   15698:	1000131e 	bne	r2,zero,156e8 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   1569c:	0001883a 	nop
   156a0:	e0bffc17 	ldw	r2,-16(fp)
   156a4:	10c00a17 	ldw	r3,40(r2)
   156a8:	e0bff717 	ldw	r2,-36(fp)
   156ac:	1880051e 	bne	r3,r2,156c4 <altera_avalon_jtag_uart_read+0x138>
   156b0:	e0bffc17 	ldw	r2,-16(fp)
   156b4:	10c00917 	ldw	r3,36(r2)
   156b8:	e0bffc17 	ldw	r2,-16(fp)
   156bc:	10800117 	ldw	r2,4(r2)
   156c0:	18bff736 	bltu	r3,r2,156a0 <_gp+0xffff4ed4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   156c4:	e0bffc17 	ldw	r2,-16(fp)
   156c8:	10c00a17 	ldw	r3,40(r2)
   156cc:	e0bff717 	ldw	r2,-36(fp)
   156d0:	18800726 	beq	r3,r2,156f0 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   156d4:	e0bffe17 	ldw	r2,-8(fp)
   156d8:	00bfb716 	blt	zero,r2,155b8 <_gp+0xffff4dec>
   156dc:	00000506 	br	156f4 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   156e0:	0001883a 	nop
   156e4:	00000306 	br	156f4 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   156e8:	0001883a 	nop
   156ec:	00000106 	br	156f4 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   156f0:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   156f4:	e0fff517 	ldw	r3,-44(fp)
   156f8:	e0bffd17 	ldw	r2,-12(fp)
   156fc:	18801826 	beq	r3,r2,15760 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15700:	0005303a 	rdctl	r2,status
   15704:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15708:	e0fffb17 	ldw	r3,-20(fp)
   1570c:	00bfff84 	movi	r2,-2
   15710:	1884703a 	and	r2,r3,r2
   15714:	1001703a 	wrctl	status,r2
  
  return context;
   15718:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   1571c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   15720:	e0bffc17 	ldw	r2,-16(fp)
   15724:	10800817 	ldw	r2,32(r2)
   15728:	10c00054 	ori	r3,r2,1
   1572c:	e0bffc17 	ldw	r2,-16(fp)
   15730:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   15734:	e0bffc17 	ldw	r2,-16(fp)
   15738:	10800017 	ldw	r2,0(r2)
   1573c:	10800104 	addi	r2,r2,4
   15740:	1007883a 	mov	r3,r2
   15744:	e0bffc17 	ldw	r2,-16(fp)
   15748:	10800817 	ldw	r2,32(r2)
   1574c:	18800035 	stwio	r2,0(r3)
   15750:	e0bffa17 	ldw	r2,-24(fp)
   15754:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15758:	e0bff917 	ldw	r2,-28(fp)
   1575c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   15760:	e0fff517 	ldw	r3,-44(fp)
   15764:	e0bffd17 	ldw	r2,-12(fp)
   15768:	18800426 	beq	r3,r2,1577c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   1576c:	e0fff517 	ldw	r3,-44(fp)
   15770:	e0bffd17 	ldw	r2,-12(fp)
   15774:	1885c83a 	sub	r2,r3,r2
   15778:	00000606 	br	15794 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   1577c:	e0bfff17 	ldw	r2,-4(fp)
   15780:	1090000c 	andi	r2,r2,16384
   15784:	10000226 	beq	r2,zero,15790 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   15788:	00bffd44 	movi	r2,-11
   1578c:	00000106 	br	15794 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   15790:	00bffec4 	movi	r2,-5
}
   15794:	e037883a 	mov	sp,fp
   15798:	dfc00117 	ldw	ra,4(sp)
   1579c:	df000017 	ldw	fp,0(sp)
   157a0:	dec00204 	addi	sp,sp,8
   157a4:	f800283a 	ret

000157a8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   157a8:	defff304 	addi	sp,sp,-52
   157ac:	dfc00c15 	stw	ra,48(sp)
   157b0:	df000b15 	stw	fp,44(sp)
   157b4:	df000b04 	addi	fp,sp,44
   157b8:	e13ffc15 	stw	r4,-16(fp)
   157bc:	e17ffd15 	stw	r5,-12(fp)
   157c0:	e1bffe15 	stw	r6,-8(fp)
   157c4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   157c8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   157cc:	e0bffd17 	ldw	r2,-12(fp)
   157d0:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   157d4:	00003706 	br	158b4 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   157d8:	e0bffc17 	ldw	r2,-16(fp)
   157dc:	10800c17 	ldw	r2,48(r2)
   157e0:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   157e4:	e0bffc17 	ldw	r2,-16(fp)
   157e8:	10800d17 	ldw	r2,52(r2)
   157ec:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   157f0:	e0fff917 	ldw	r3,-28(fp)
   157f4:	e0bff517 	ldw	r2,-44(fp)
   157f8:	1880062e 	bgeu	r3,r2,15814 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   157fc:	e0fff517 	ldw	r3,-44(fp)
   15800:	e0bff917 	ldw	r2,-28(fp)
   15804:	1885c83a 	sub	r2,r3,r2
   15808:	10bfffc4 	addi	r2,r2,-1
   1580c:	e0bff615 	stw	r2,-40(fp)
   15810:	00000b06 	br	15840 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   15814:	e0bff517 	ldw	r2,-44(fp)
   15818:	10000526 	beq	r2,zero,15830 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   1581c:	00c20004 	movi	r3,2048
   15820:	e0bff917 	ldw	r2,-28(fp)
   15824:	1885c83a 	sub	r2,r3,r2
   15828:	e0bff615 	stw	r2,-40(fp)
   1582c:	00000406 	br	15840 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   15830:	00c1ffc4 	movi	r3,2047
   15834:	e0bff917 	ldw	r2,-28(fp)
   15838:	1885c83a 	sub	r2,r3,r2
   1583c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   15840:	e0bff617 	ldw	r2,-40(fp)
   15844:	10001e26 	beq	r2,zero,158c0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   15848:	e0fffe17 	ldw	r3,-8(fp)
   1584c:	e0bff617 	ldw	r2,-40(fp)
   15850:	1880022e 	bgeu	r3,r2,1585c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   15854:	e0bffe17 	ldw	r2,-8(fp)
   15858:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   1585c:	e0bffc17 	ldw	r2,-16(fp)
   15860:	10c20e04 	addi	r3,r2,2104
   15864:	e0bff917 	ldw	r2,-28(fp)
   15868:	1885883a 	add	r2,r3,r2
   1586c:	e1bff617 	ldw	r6,-40(fp)
   15870:	e17ffd17 	ldw	r5,-12(fp)
   15874:	1009883a 	mov	r4,r2
   15878:	0012ce40 	call	12ce4 <memcpy>
      ptr   += n;
   1587c:	e0fffd17 	ldw	r3,-12(fp)
   15880:	e0bff617 	ldw	r2,-40(fp)
   15884:	1885883a 	add	r2,r3,r2
   15888:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   1588c:	e0fffe17 	ldw	r3,-8(fp)
   15890:	e0bff617 	ldw	r2,-40(fp)
   15894:	1885c83a 	sub	r2,r3,r2
   15898:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1589c:	e0fff917 	ldw	r3,-28(fp)
   158a0:	e0bff617 	ldw	r2,-40(fp)
   158a4:	1885883a 	add	r2,r3,r2
   158a8:	10c1ffcc 	andi	r3,r2,2047
   158ac:	e0bffc17 	ldw	r2,-16(fp)
   158b0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   158b4:	e0bffe17 	ldw	r2,-8(fp)
   158b8:	00bfc716 	blt	zero,r2,157d8 <_gp+0xffff500c>
   158bc:	00000106 	br	158c4 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   158c0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   158c4:	0005303a 	rdctl	r2,status
   158c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   158cc:	e0fffb17 	ldw	r3,-20(fp)
   158d0:	00bfff84 	movi	r2,-2
   158d4:	1884703a 	and	r2,r3,r2
   158d8:	1001703a 	wrctl	status,r2
  
  return context;
   158dc:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   158e0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   158e4:	e0bffc17 	ldw	r2,-16(fp)
   158e8:	10800817 	ldw	r2,32(r2)
   158ec:	10c00094 	ori	r3,r2,2
   158f0:	e0bffc17 	ldw	r2,-16(fp)
   158f4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   158f8:	e0bffc17 	ldw	r2,-16(fp)
   158fc:	10800017 	ldw	r2,0(r2)
   15900:	10800104 	addi	r2,r2,4
   15904:	1007883a 	mov	r3,r2
   15908:	e0bffc17 	ldw	r2,-16(fp)
   1590c:	10800817 	ldw	r2,32(r2)
   15910:	18800035 	stwio	r2,0(r3)
   15914:	e0bffa17 	ldw	r2,-24(fp)
   15918:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1591c:	e0bff817 	ldw	r2,-32(fp)
   15920:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   15924:	e0bffe17 	ldw	r2,-8(fp)
   15928:	0080100e 	bge	zero,r2,1596c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   1592c:	e0bfff17 	ldw	r2,-4(fp)
   15930:	1090000c 	andi	r2,r2,16384
   15934:	1000101e 	bne	r2,zero,15978 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   15938:	0001883a 	nop
   1593c:	e0bffc17 	ldw	r2,-16(fp)
   15940:	10c00d17 	ldw	r3,52(r2)
   15944:	e0bff517 	ldw	r2,-44(fp)
   15948:	1880051e 	bne	r3,r2,15960 <altera_avalon_jtag_uart_write+0x1b8>
   1594c:	e0bffc17 	ldw	r2,-16(fp)
   15950:	10c00917 	ldw	r3,36(r2)
   15954:	e0bffc17 	ldw	r2,-16(fp)
   15958:	10800117 	ldw	r2,4(r2)
   1595c:	18bff736 	bltu	r3,r2,1593c <_gp+0xffff5170>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   15960:	e0bffc17 	ldw	r2,-16(fp)
   15964:	10800917 	ldw	r2,36(r2)
   15968:	1000051e 	bne	r2,zero,15980 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   1596c:	e0bffe17 	ldw	r2,-8(fp)
   15970:	00bfd016 	blt	zero,r2,158b4 <_gp+0xffff50e8>
   15974:	00000306 	br	15984 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   15978:	0001883a 	nop
   1597c:	00000106 	br	15984 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   15980:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   15984:	e0fffd17 	ldw	r3,-12(fp)
   15988:	e0bff717 	ldw	r2,-36(fp)
   1598c:	18800426 	beq	r3,r2,159a0 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   15990:	e0fffd17 	ldw	r3,-12(fp)
   15994:	e0bff717 	ldw	r2,-36(fp)
   15998:	1885c83a 	sub	r2,r3,r2
   1599c:	00000606 	br	159b8 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   159a0:	e0bfff17 	ldw	r2,-4(fp)
   159a4:	1090000c 	andi	r2,r2,16384
   159a8:	10000226 	beq	r2,zero,159b4 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   159ac:	00bffd44 	movi	r2,-11
   159b0:	00000106 	br	159b8 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   159b4:	00bffec4 	movi	r2,-5
}
   159b8:	e037883a 	mov	sp,fp
   159bc:	dfc00117 	ldw	ra,4(sp)
   159c0:	df000017 	ldw	fp,0(sp)
   159c4:	dec00204 	addi	sp,sp,8
   159c8:	f800283a 	ret

000159cc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   159cc:	defff504 	addi	sp,sp,-44
   159d0:	df000a15 	stw	fp,40(sp)
   159d4:	df000a04 	addi	fp,sp,40
   159d8:	e13ffc15 	stw	r4,-16(fp)
   159dc:	e17ffd15 	stw	r5,-12(fp)
   159e0:	e1bffe15 	stw	r6,-8(fp)
   159e4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   159e8:	e03ff615 	stw	zero,-40(fp)
   159ec:	d0a6c717 	ldw	r2,-25828(gp)
  
  if (alt_ticks_per_second ())
   159f0:	10003c26 	beq	r2,zero,15ae4 <alt_alarm_start+0x118>
  {
    if (alarm)
   159f4:	e0bffc17 	ldw	r2,-16(fp)
   159f8:	10003826 	beq	r2,zero,15adc <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   159fc:	e0bffc17 	ldw	r2,-16(fp)
   15a00:	e0fffe17 	ldw	r3,-8(fp)
   15a04:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   15a08:	e0bffc17 	ldw	r2,-16(fp)
   15a0c:	e0ffff17 	ldw	r3,-4(fp)
   15a10:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15a14:	0005303a 	rdctl	r2,status
   15a18:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15a1c:	e0fff917 	ldw	r3,-28(fp)
   15a20:	00bfff84 	movi	r2,-2
   15a24:	1884703a 	and	r2,r3,r2
   15a28:	1001703a 	wrctl	status,r2
  
  return context;
   15a2c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   15a30:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   15a34:	d0a6c817 	ldw	r2,-25824(gp)
      
      current_nticks = alt_nticks();
   15a38:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   15a3c:	e0fffd17 	ldw	r3,-12(fp)
   15a40:	e0bff617 	ldw	r2,-40(fp)
   15a44:	1885883a 	add	r2,r3,r2
   15a48:	10c00044 	addi	r3,r2,1
   15a4c:	e0bffc17 	ldw	r2,-16(fp)
   15a50:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   15a54:	e0bffc17 	ldw	r2,-16(fp)
   15a58:	10c00217 	ldw	r3,8(r2)
   15a5c:	e0bff617 	ldw	r2,-40(fp)
   15a60:	1880042e 	bgeu	r3,r2,15a74 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   15a64:	e0bffc17 	ldw	r2,-16(fp)
   15a68:	00c00044 	movi	r3,1
   15a6c:	10c00405 	stb	r3,16(r2)
   15a70:	00000206 	br	15a7c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   15a74:	e0bffc17 	ldw	r2,-16(fp)
   15a78:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   15a7c:	e0bffc17 	ldw	r2,-16(fp)
   15a80:	d0e00d04 	addi	r3,gp,-32716
   15a84:	e0fffa15 	stw	r3,-24(fp)
   15a88:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   15a8c:	e0bffb17 	ldw	r2,-20(fp)
   15a90:	e0fffa17 	ldw	r3,-24(fp)
   15a94:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   15a98:	e0bffa17 	ldw	r2,-24(fp)
   15a9c:	10c00017 	ldw	r3,0(r2)
   15aa0:	e0bffb17 	ldw	r2,-20(fp)
   15aa4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   15aa8:	e0bffa17 	ldw	r2,-24(fp)
   15aac:	10800017 	ldw	r2,0(r2)
   15ab0:	e0fffb17 	ldw	r3,-20(fp)
   15ab4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   15ab8:	e0bffa17 	ldw	r2,-24(fp)
   15abc:	e0fffb17 	ldw	r3,-20(fp)
   15ac0:	10c00015 	stw	r3,0(r2)
   15ac4:	e0bff817 	ldw	r2,-32(fp)
   15ac8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15acc:	e0bff717 	ldw	r2,-36(fp)
   15ad0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   15ad4:	0005883a 	mov	r2,zero
   15ad8:	00000306 	br	15ae8 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   15adc:	00bffa84 	movi	r2,-22
   15ae0:	00000106 	br	15ae8 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   15ae4:	00bfde84 	movi	r2,-134
  }
}
   15ae8:	e037883a 	mov	sp,fp
   15aec:	df000017 	ldw	fp,0(sp)
   15af0:	dec00104 	addi	sp,sp,4
   15af4:	f800283a 	ret

00015af8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   15af8:	deffff04 	addi	sp,sp,-4
   15afc:	df000015 	stw	fp,0(sp)
   15b00:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   15b04:	0001883a 	nop
   15b08:	e037883a 	mov	sp,fp
   15b0c:	df000017 	ldw	fp,0(sp)
   15b10:	dec00104 	addi	sp,sp,4
   15b14:	f800283a 	ret

00015b18 <alt_get_errno>:
   15b18:	defffe04 	addi	sp,sp,-8
   15b1c:	dfc00115 	stw	ra,4(sp)
   15b20:	df000015 	stw	fp,0(sp)
   15b24:	d839883a 	mov	fp,sp
   15b28:	d0a00a17 	ldw	r2,-32728(gp)
   15b2c:	10000326 	beq	r2,zero,15b3c <alt_get_errno+0x24>
   15b30:	d0a00a17 	ldw	r2,-32728(gp)
   15b34:	103ee83a 	callr	r2
   15b38:	00000106 	br	15b40 <alt_get_errno+0x28>
   15b3c:	d0a6c204 	addi	r2,gp,-25848
   15b40:	e037883a 	mov	sp,fp
   15b44:	dfc00117 	ldw	ra,4(sp)
   15b48:	df000017 	ldw	fp,0(sp)
   15b4c:	dec00204 	addi	sp,sp,8
   15b50:	f800283a 	ret

00015b54 <alt_dev_llist_insert>:
   15b54:	defffa04 	addi	sp,sp,-24
   15b58:	dfc00515 	stw	ra,20(sp)
   15b5c:	df000415 	stw	fp,16(sp)
   15b60:	df000404 	addi	fp,sp,16
   15b64:	e13ffe15 	stw	r4,-8(fp)
   15b68:	e17fff15 	stw	r5,-4(fp)
   15b6c:	e0bffe17 	ldw	r2,-8(fp)
   15b70:	10000326 	beq	r2,zero,15b80 <alt_dev_llist_insert+0x2c>
   15b74:	e0bffe17 	ldw	r2,-8(fp)
   15b78:	10800217 	ldw	r2,8(r2)
   15b7c:	1000061e 	bne	r2,zero,15b98 <alt_dev_llist_insert+0x44>
   15b80:	0015b180 	call	15b18 <alt_get_errno>
   15b84:	1007883a 	mov	r3,r2
   15b88:	00800584 	movi	r2,22
   15b8c:	18800015 	stw	r2,0(r3)
   15b90:	00bffa84 	movi	r2,-22
   15b94:	00001306 	br	15be4 <alt_dev_llist_insert+0x90>
   15b98:	e0bffe17 	ldw	r2,-8(fp)
   15b9c:	e0ffff17 	ldw	r3,-4(fp)
   15ba0:	e0fffc15 	stw	r3,-16(fp)
   15ba4:	e0bffd15 	stw	r2,-12(fp)
   15ba8:	e0bffd17 	ldw	r2,-12(fp)
   15bac:	e0fffc17 	ldw	r3,-16(fp)
   15bb0:	10c00115 	stw	r3,4(r2)
   15bb4:	e0bffc17 	ldw	r2,-16(fp)
   15bb8:	10c00017 	ldw	r3,0(r2)
   15bbc:	e0bffd17 	ldw	r2,-12(fp)
   15bc0:	10c00015 	stw	r3,0(r2)
   15bc4:	e0bffc17 	ldw	r2,-16(fp)
   15bc8:	10800017 	ldw	r2,0(r2)
   15bcc:	e0fffd17 	ldw	r3,-12(fp)
   15bd0:	10c00115 	stw	r3,4(r2)
   15bd4:	e0bffc17 	ldw	r2,-16(fp)
   15bd8:	e0fffd17 	ldw	r3,-12(fp)
   15bdc:	10c00015 	stw	r3,0(r2)
   15be0:	0005883a 	mov	r2,zero
   15be4:	e037883a 	mov	sp,fp
   15be8:	dfc00117 	ldw	ra,4(sp)
   15bec:	df000017 	ldw	fp,0(sp)
   15bf0:	dec00204 	addi	sp,sp,8
   15bf4:	f800283a 	ret

00015bf8 <_do_ctors>:
   15bf8:	defffd04 	addi	sp,sp,-12
   15bfc:	dfc00215 	stw	ra,8(sp)
   15c00:	df000115 	stw	fp,4(sp)
   15c04:	df000104 	addi	fp,sp,4
   15c08:	00800074 	movhi	r2,1
   15c0c:	109b1804 	addi	r2,r2,27744
   15c10:	e0bfff15 	stw	r2,-4(fp)
   15c14:	00000606 	br	15c30 <_do_ctors+0x38>
   15c18:	e0bfff17 	ldw	r2,-4(fp)
   15c1c:	10800017 	ldw	r2,0(r2)
   15c20:	103ee83a 	callr	r2
   15c24:	e0bfff17 	ldw	r2,-4(fp)
   15c28:	10bfff04 	addi	r2,r2,-4
   15c2c:	e0bfff15 	stw	r2,-4(fp)
   15c30:	e0ffff17 	ldw	r3,-4(fp)
   15c34:	00800074 	movhi	r2,1
   15c38:	109b1904 	addi	r2,r2,27748
   15c3c:	18bff62e 	bgeu	r3,r2,15c18 <_gp+0xffff544c>
   15c40:	0001883a 	nop
   15c44:	e037883a 	mov	sp,fp
   15c48:	dfc00117 	ldw	ra,4(sp)
   15c4c:	df000017 	ldw	fp,0(sp)
   15c50:	dec00204 	addi	sp,sp,8
   15c54:	f800283a 	ret

00015c58 <_do_dtors>:
   15c58:	defffd04 	addi	sp,sp,-12
   15c5c:	dfc00215 	stw	ra,8(sp)
   15c60:	df000115 	stw	fp,4(sp)
   15c64:	df000104 	addi	fp,sp,4
   15c68:	00800074 	movhi	r2,1
   15c6c:	109b1804 	addi	r2,r2,27744
   15c70:	e0bfff15 	stw	r2,-4(fp)
   15c74:	00000606 	br	15c90 <_do_dtors+0x38>
   15c78:	e0bfff17 	ldw	r2,-4(fp)
   15c7c:	10800017 	ldw	r2,0(r2)
   15c80:	103ee83a 	callr	r2
   15c84:	e0bfff17 	ldw	r2,-4(fp)
   15c88:	10bfff04 	addi	r2,r2,-4
   15c8c:	e0bfff15 	stw	r2,-4(fp)
   15c90:	e0ffff17 	ldw	r3,-4(fp)
   15c94:	00800074 	movhi	r2,1
   15c98:	109b1904 	addi	r2,r2,27748
   15c9c:	18bff62e 	bgeu	r3,r2,15c78 <_gp+0xffff54ac>
   15ca0:	0001883a 	nop
   15ca4:	e037883a 	mov	sp,fp
   15ca8:	dfc00117 	ldw	ra,4(sp)
   15cac:	df000017 	ldw	fp,0(sp)
   15cb0:	dec00204 	addi	sp,sp,8
   15cb4:	f800283a 	ret

00015cb8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   15cb8:	deffff04 	addi	sp,sp,-4
   15cbc:	df000015 	stw	fp,0(sp)
   15cc0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   15cc4:	0001883a 	nop
   15cc8:	e037883a 	mov	sp,fp
   15ccc:	df000017 	ldw	fp,0(sp)
   15cd0:	dec00104 	addi	sp,sp,4
   15cd4:	f800283a 	ret

00015cd8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   15cd8:	defff904 	addi	sp,sp,-28
   15cdc:	dfc00615 	stw	ra,24(sp)
   15ce0:	df000515 	stw	fp,20(sp)
   15ce4:	df000504 	addi	fp,sp,20
   15ce8:	e13ffc15 	stw	r4,-16(fp)
   15cec:	e17ffd15 	stw	r5,-12(fp)
   15cf0:	e1bffe15 	stw	r6,-8(fp)
   15cf4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   15cf8:	e0800217 	ldw	r2,8(fp)
   15cfc:	d8800015 	stw	r2,0(sp)
   15d00:	e1ffff17 	ldw	r7,-4(fp)
   15d04:	e1bffe17 	ldw	r6,-8(fp)
   15d08:	e17ffd17 	ldw	r5,-12(fp)
   15d0c:	e13ffc17 	ldw	r4,-16(fp)
   15d10:	0015e880 	call	15e88 <alt_iic_isr_register>
}  
   15d14:	e037883a 	mov	sp,fp
   15d18:	dfc00117 	ldw	ra,4(sp)
   15d1c:	df000017 	ldw	fp,0(sp)
   15d20:	dec00204 	addi	sp,sp,8
   15d24:	f800283a 	ret

00015d28 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   15d28:	defff904 	addi	sp,sp,-28
   15d2c:	df000615 	stw	fp,24(sp)
   15d30:	df000604 	addi	fp,sp,24
   15d34:	e13ffe15 	stw	r4,-8(fp)
   15d38:	e17fff15 	stw	r5,-4(fp)
   15d3c:	e0bfff17 	ldw	r2,-4(fp)
   15d40:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15d44:	0005303a 	rdctl	r2,status
   15d48:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15d4c:	e0fffb17 	ldw	r3,-20(fp)
   15d50:	00bfff84 	movi	r2,-2
   15d54:	1884703a 	and	r2,r3,r2
   15d58:	1001703a 	wrctl	status,r2
  
  return context;
   15d5c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   15d60:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   15d64:	00c00044 	movi	r3,1
   15d68:	e0bffa17 	ldw	r2,-24(fp)
   15d6c:	1884983a 	sll	r2,r3,r2
   15d70:	1007883a 	mov	r3,r2
   15d74:	d0a6c617 	ldw	r2,-25832(gp)
   15d78:	1884b03a 	or	r2,r3,r2
   15d7c:	d0a6c615 	stw	r2,-25832(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   15d80:	d0a6c617 	ldw	r2,-25832(gp)
   15d84:	100170fa 	wrctl	ienable,r2
   15d88:	e0bffc17 	ldw	r2,-16(fp)
   15d8c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15d90:	e0bffd17 	ldw	r2,-12(fp)
   15d94:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   15d98:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   15d9c:	0001883a 	nop
}
   15da0:	e037883a 	mov	sp,fp
   15da4:	df000017 	ldw	fp,0(sp)
   15da8:	dec00104 	addi	sp,sp,4
   15dac:	f800283a 	ret

00015db0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   15db0:	defff904 	addi	sp,sp,-28
   15db4:	df000615 	stw	fp,24(sp)
   15db8:	df000604 	addi	fp,sp,24
   15dbc:	e13ffe15 	stw	r4,-8(fp)
   15dc0:	e17fff15 	stw	r5,-4(fp)
   15dc4:	e0bfff17 	ldw	r2,-4(fp)
   15dc8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15dcc:	0005303a 	rdctl	r2,status
   15dd0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15dd4:	e0fffb17 	ldw	r3,-20(fp)
   15dd8:	00bfff84 	movi	r2,-2
   15ddc:	1884703a 	and	r2,r3,r2
   15de0:	1001703a 	wrctl	status,r2
  
  return context;
   15de4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   15de8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   15dec:	00c00044 	movi	r3,1
   15df0:	e0bffa17 	ldw	r2,-24(fp)
   15df4:	1884983a 	sll	r2,r3,r2
   15df8:	0084303a 	nor	r2,zero,r2
   15dfc:	1007883a 	mov	r3,r2
   15e00:	d0a6c617 	ldw	r2,-25832(gp)
   15e04:	1884703a 	and	r2,r3,r2
   15e08:	d0a6c615 	stw	r2,-25832(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   15e0c:	d0a6c617 	ldw	r2,-25832(gp)
   15e10:	100170fa 	wrctl	ienable,r2
   15e14:	e0bffc17 	ldw	r2,-16(fp)
   15e18:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15e1c:	e0bffd17 	ldw	r2,-12(fp)
   15e20:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   15e24:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   15e28:	0001883a 	nop
}
   15e2c:	e037883a 	mov	sp,fp
   15e30:	df000017 	ldw	fp,0(sp)
   15e34:	dec00104 	addi	sp,sp,4
   15e38:	f800283a 	ret

00015e3c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   15e3c:	defffc04 	addi	sp,sp,-16
   15e40:	df000315 	stw	fp,12(sp)
   15e44:	df000304 	addi	fp,sp,12
   15e48:	e13ffe15 	stw	r4,-8(fp)
   15e4c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   15e50:	000530fa 	rdctl	r2,ienable
   15e54:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   15e58:	00c00044 	movi	r3,1
   15e5c:	e0bfff17 	ldw	r2,-4(fp)
   15e60:	1884983a 	sll	r2,r3,r2
   15e64:	1007883a 	mov	r3,r2
   15e68:	e0bffd17 	ldw	r2,-12(fp)
   15e6c:	1884703a 	and	r2,r3,r2
   15e70:	1004c03a 	cmpne	r2,r2,zero
   15e74:	10803fcc 	andi	r2,r2,255
}
   15e78:	e037883a 	mov	sp,fp
   15e7c:	df000017 	ldw	fp,0(sp)
   15e80:	dec00104 	addi	sp,sp,4
   15e84:	f800283a 	ret

00015e88 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   15e88:	defff504 	addi	sp,sp,-44
   15e8c:	dfc00a15 	stw	ra,40(sp)
   15e90:	df000915 	stw	fp,36(sp)
   15e94:	df000904 	addi	fp,sp,36
   15e98:	e13ffc15 	stw	r4,-16(fp)
   15e9c:	e17ffd15 	stw	r5,-12(fp)
   15ea0:	e1bffe15 	stw	r6,-8(fp)
   15ea4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   15ea8:	00bffa84 	movi	r2,-22
   15eac:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   15eb0:	e0bffd17 	ldw	r2,-12(fp)
   15eb4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   15eb8:	e0bff817 	ldw	r2,-32(fp)
   15ebc:	10800808 	cmpgei	r2,r2,32
   15ec0:	1000271e 	bne	r2,zero,15f60 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15ec4:	0005303a 	rdctl	r2,status
   15ec8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15ecc:	e0fffb17 	ldw	r3,-20(fp)
   15ed0:	00bfff84 	movi	r2,-2
   15ed4:	1884703a 	and	r2,r3,r2
   15ed8:	1001703a 	wrctl	status,r2
  
  return context;
   15edc:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   15ee0:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   15ee4:	008000b4 	movhi	r2,2
   15ee8:	10a8fb04 	addi	r2,r2,-23572
   15eec:	e0fff817 	ldw	r3,-32(fp)
   15ef0:	180690fa 	slli	r3,r3,3
   15ef4:	10c5883a 	add	r2,r2,r3
   15ef8:	e0fffe17 	ldw	r3,-8(fp)
   15efc:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   15f00:	008000b4 	movhi	r2,2
   15f04:	10a8fb04 	addi	r2,r2,-23572
   15f08:	e0fff817 	ldw	r3,-32(fp)
   15f0c:	180690fa 	slli	r3,r3,3
   15f10:	10c5883a 	add	r2,r2,r3
   15f14:	10800104 	addi	r2,r2,4
   15f18:	e0ffff17 	ldw	r3,-4(fp)
   15f1c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   15f20:	e0bffe17 	ldw	r2,-8(fp)
   15f24:	10000526 	beq	r2,zero,15f3c <alt_iic_isr_register+0xb4>
   15f28:	e0bff817 	ldw	r2,-32(fp)
   15f2c:	100b883a 	mov	r5,r2
   15f30:	e13ffc17 	ldw	r4,-16(fp)
   15f34:	0015d280 	call	15d28 <alt_ic_irq_enable>
   15f38:	00000406 	br	15f4c <alt_iic_isr_register+0xc4>
   15f3c:	e0bff817 	ldw	r2,-32(fp)
   15f40:	100b883a 	mov	r5,r2
   15f44:	e13ffc17 	ldw	r4,-16(fp)
   15f48:	0015db00 	call	15db0 <alt_ic_irq_disable>
   15f4c:	e0bff715 	stw	r2,-36(fp)
   15f50:	e0bffa17 	ldw	r2,-24(fp)
   15f54:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15f58:	e0bff917 	ldw	r2,-28(fp)
   15f5c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   15f60:	e0bff717 	ldw	r2,-36(fp)
}
   15f64:	e037883a 	mov	sp,fp
   15f68:	dfc00117 	ldw	ra,4(sp)
   15f6c:	df000017 	ldw	fp,0(sp)
   15f70:	dec00204 	addi	sp,sp,8
   15f74:	f800283a 	ret

00015f78 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   15f78:	defff804 	addi	sp,sp,-32
   15f7c:	dfc00715 	stw	ra,28(sp)
   15f80:	df000615 	stw	fp,24(sp)
   15f84:	dc000515 	stw	r16,20(sp)
   15f88:	df000604 	addi	fp,sp,24
   15f8c:	e13ffb15 	stw	r4,-20(fp)
   15f90:	e17ffc15 	stw	r5,-16(fp)
   15f94:	e1bffd15 	stw	r6,-12(fp)
   15f98:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   15f9c:	e1bffe17 	ldw	r6,-8(fp)
   15fa0:	e17ffd17 	ldw	r5,-12(fp)
   15fa4:	e13ffc17 	ldw	r4,-16(fp)
   15fa8:	00162000 	call	16200 <open>
   15fac:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   15fb0:	e0bffa17 	ldw	r2,-24(fp)
   15fb4:	10002216 	blt	r2,zero,16040 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   15fb8:	04000074 	movhi	r16,1
   15fbc:	841d7b04 	addi	r16,r16,30188
   15fc0:	e0bffa17 	ldw	r2,-24(fp)
   15fc4:	01400304 	movi	r5,12
   15fc8:	1009883a 	mov	r4,r2
   15fcc:	00144b80 	call	144b8 <__mulsi3>
   15fd0:	8085883a 	add	r2,r16,r2
   15fd4:	10c00017 	ldw	r3,0(r2)
   15fd8:	e0bffb17 	ldw	r2,-20(fp)
   15fdc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   15fe0:	04000074 	movhi	r16,1
   15fe4:	841d7b04 	addi	r16,r16,30188
   15fe8:	e0bffa17 	ldw	r2,-24(fp)
   15fec:	01400304 	movi	r5,12
   15ff0:	1009883a 	mov	r4,r2
   15ff4:	00144b80 	call	144b8 <__mulsi3>
   15ff8:	8085883a 	add	r2,r16,r2
   15ffc:	10800104 	addi	r2,r2,4
   16000:	10c00017 	ldw	r3,0(r2)
   16004:	e0bffb17 	ldw	r2,-20(fp)
   16008:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   1600c:	04000074 	movhi	r16,1
   16010:	841d7b04 	addi	r16,r16,30188
   16014:	e0bffa17 	ldw	r2,-24(fp)
   16018:	01400304 	movi	r5,12
   1601c:	1009883a 	mov	r4,r2
   16020:	00144b80 	call	144b8 <__mulsi3>
   16024:	8085883a 	add	r2,r16,r2
   16028:	10800204 	addi	r2,r2,8
   1602c:	10c00017 	ldw	r3,0(r2)
   16030:	e0bffb17 	ldw	r2,-20(fp)
   16034:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   16038:	e13ffa17 	ldw	r4,-24(fp)
   1603c:	0014c400 	call	14c40 <alt_release_fd>
  }
} 
   16040:	0001883a 	nop
   16044:	e6ffff04 	addi	sp,fp,-4
   16048:	dfc00217 	ldw	ra,8(sp)
   1604c:	df000117 	ldw	fp,4(sp)
   16050:	dc000017 	ldw	r16,0(sp)
   16054:	dec00304 	addi	sp,sp,12
   16058:	f800283a 	ret

0001605c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   1605c:	defffb04 	addi	sp,sp,-20
   16060:	dfc00415 	stw	ra,16(sp)
   16064:	df000315 	stw	fp,12(sp)
   16068:	df000304 	addi	fp,sp,12
   1606c:	e13ffd15 	stw	r4,-12(fp)
   16070:	e17ffe15 	stw	r5,-8(fp)
   16074:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   16078:	01c07fc4 	movi	r7,511
   1607c:	01800044 	movi	r6,1
   16080:	e17ffd17 	ldw	r5,-12(fp)
   16084:	01000074 	movhi	r4,1
   16088:	211d7e04 	addi	r4,r4,30200
   1608c:	0015f780 	call	15f78 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   16090:	01c07fc4 	movi	r7,511
   16094:	000d883a 	mov	r6,zero
   16098:	e17ffe17 	ldw	r5,-8(fp)
   1609c:	01000074 	movhi	r4,1
   160a0:	211d7b04 	addi	r4,r4,30188
   160a4:	0015f780 	call	15f78 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   160a8:	01c07fc4 	movi	r7,511
   160ac:	01800044 	movi	r6,1
   160b0:	e17fff17 	ldw	r5,-4(fp)
   160b4:	01000074 	movhi	r4,1
   160b8:	211d8104 	addi	r4,r4,30212
   160bc:	0015f780 	call	15f78 <alt_open_fd>
}  
   160c0:	0001883a 	nop
   160c4:	e037883a 	mov	sp,fp
   160c8:	dfc00117 	ldw	ra,4(sp)
   160cc:	df000017 	ldw	fp,0(sp)
   160d0:	dec00204 	addi	sp,sp,8
   160d4:	f800283a 	ret

000160d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   160d8:	defffe04 	addi	sp,sp,-8
   160dc:	dfc00115 	stw	ra,4(sp)
   160e0:	df000015 	stw	fp,0(sp)
   160e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   160e8:	d0a00a17 	ldw	r2,-32728(gp)
   160ec:	10000326 	beq	r2,zero,160fc <alt_get_errno+0x24>
   160f0:	d0a00a17 	ldw	r2,-32728(gp)
   160f4:	103ee83a 	callr	r2
   160f8:	00000106 	br	16100 <alt_get_errno+0x28>
   160fc:	d0a6c204 	addi	r2,gp,-25848
}
   16100:	e037883a 	mov	sp,fp
   16104:	dfc00117 	ldw	ra,4(sp)
   16108:	df000017 	ldw	fp,0(sp)
   1610c:	dec00204 	addi	sp,sp,8
   16110:	f800283a 	ret

00016114 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   16114:	defffb04 	addi	sp,sp,-20
   16118:	dfc00415 	stw	ra,16(sp)
   1611c:	df000315 	stw	fp,12(sp)
   16120:	dc000215 	stw	r16,8(sp)
   16124:	df000304 	addi	fp,sp,12
   16128:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   1612c:	e0bffe17 	ldw	r2,-8(fp)
   16130:	10800217 	ldw	r2,8(r2)
   16134:	10d00034 	orhi	r3,r2,16384
   16138:	e0bffe17 	ldw	r2,-8(fp)
   1613c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   16140:	e03ffd15 	stw	zero,-12(fp)
   16144:	00002306 	br	161d4 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   16148:	04000074 	movhi	r16,1
   1614c:	841d7b04 	addi	r16,r16,30188
   16150:	e0bffd17 	ldw	r2,-12(fp)
   16154:	01400304 	movi	r5,12
   16158:	1009883a 	mov	r4,r2
   1615c:	00144b80 	call	144b8 <__mulsi3>
   16160:	8085883a 	add	r2,r16,r2
   16164:	10c00017 	ldw	r3,0(r2)
   16168:	e0bffe17 	ldw	r2,-8(fp)
   1616c:	10800017 	ldw	r2,0(r2)
   16170:	1880151e 	bne	r3,r2,161c8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   16174:	04000074 	movhi	r16,1
   16178:	841d7b04 	addi	r16,r16,30188
   1617c:	e0bffd17 	ldw	r2,-12(fp)
   16180:	01400304 	movi	r5,12
   16184:	1009883a 	mov	r4,r2
   16188:	00144b80 	call	144b8 <__mulsi3>
   1618c:	8085883a 	add	r2,r16,r2
   16190:	10800204 	addi	r2,r2,8
   16194:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   16198:	10000b0e 	bge	r2,zero,161c8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   1619c:	01400304 	movi	r5,12
   161a0:	e13ffd17 	ldw	r4,-12(fp)
   161a4:	00144b80 	call	144b8 <__mulsi3>
   161a8:	1007883a 	mov	r3,r2
   161ac:	00800074 	movhi	r2,1
   161b0:	109d7b04 	addi	r2,r2,30188
   161b4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   161b8:	e0bffe17 	ldw	r2,-8(fp)
   161bc:	18800226 	beq	r3,r2,161c8 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   161c0:	00bffcc4 	movi	r2,-13
   161c4:	00000806 	br	161e8 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   161c8:	e0bffd17 	ldw	r2,-12(fp)
   161cc:	10800044 	addi	r2,r2,1
   161d0:	e0bffd15 	stw	r2,-12(fp)
   161d4:	d0a00917 	ldw	r2,-32732(gp)
   161d8:	1007883a 	mov	r3,r2
   161dc:	e0bffd17 	ldw	r2,-12(fp)
   161e0:	18bfd92e 	bgeu	r3,r2,16148 <_gp+0xffff597c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   161e4:	0005883a 	mov	r2,zero
}
   161e8:	e6ffff04 	addi	sp,fp,-4
   161ec:	dfc00217 	ldw	ra,8(sp)
   161f0:	df000117 	ldw	fp,4(sp)
   161f4:	dc000017 	ldw	r16,0(sp)
   161f8:	dec00304 	addi	sp,sp,12
   161fc:	f800283a 	ret

00016200 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   16200:	defff604 	addi	sp,sp,-40
   16204:	dfc00915 	stw	ra,36(sp)
   16208:	df000815 	stw	fp,32(sp)
   1620c:	df000804 	addi	fp,sp,32
   16210:	e13ffd15 	stw	r4,-12(fp)
   16214:	e17ffe15 	stw	r5,-8(fp)
   16218:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   1621c:	00bfffc4 	movi	r2,-1
   16220:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   16224:	00bffb44 	movi	r2,-19
   16228:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   1622c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   16230:	d1600704 	addi	r5,gp,-32740
   16234:	e13ffd17 	ldw	r4,-12(fp)
   16238:	00165240 	call	16524 <alt_find_dev>
   1623c:	e0bff815 	stw	r2,-32(fp)
   16240:	e0bff817 	ldw	r2,-32(fp)
   16244:	1000051e 	bne	r2,zero,1625c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   16248:	e13ffd17 	ldw	r4,-12(fp)
   1624c:	00165b40 	call	165b4 <alt_find_file>
   16250:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   16254:	00800044 	movi	r2,1
   16258:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   1625c:	e0bff817 	ldw	r2,-32(fp)
   16260:	10002b26 	beq	r2,zero,16310 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   16264:	e13ff817 	ldw	r4,-32(fp)
   16268:	00166bc0 	call	166bc <alt_get_fd>
   1626c:	e0bff915 	stw	r2,-28(fp)
   16270:	e0bff917 	ldw	r2,-28(fp)
   16274:	1000030e 	bge	r2,zero,16284 <open+0x84>
    {
      status = index;
   16278:	e0bff917 	ldw	r2,-28(fp)
   1627c:	e0bffa15 	stw	r2,-24(fp)
   16280:	00002506 	br	16318 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   16284:	01400304 	movi	r5,12
   16288:	e13ff917 	ldw	r4,-28(fp)
   1628c:	00144b80 	call	144b8 <__mulsi3>
   16290:	1007883a 	mov	r3,r2
   16294:	00800074 	movhi	r2,1
   16298:	109d7b04 	addi	r2,r2,30188
   1629c:	1885883a 	add	r2,r3,r2
   162a0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   162a4:	e0fffe17 	ldw	r3,-8(fp)
   162a8:	00900034 	movhi	r2,16384
   162ac:	10bfffc4 	addi	r2,r2,-1
   162b0:	1886703a 	and	r3,r3,r2
   162b4:	e0bffc17 	ldw	r2,-16(fp)
   162b8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   162bc:	e0bffb17 	ldw	r2,-20(fp)
   162c0:	1000051e 	bne	r2,zero,162d8 <open+0xd8>
   162c4:	e13ffc17 	ldw	r4,-16(fp)
   162c8:	00161140 	call	16114 <alt_file_locked>
   162cc:	e0bffa15 	stw	r2,-24(fp)
   162d0:	e0bffa17 	ldw	r2,-24(fp)
   162d4:	10001016 	blt	r2,zero,16318 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   162d8:	e0bff817 	ldw	r2,-32(fp)
   162dc:	10800317 	ldw	r2,12(r2)
   162e0:	10000826 	beq	r2,zero,16304 <open+0x104>
   162e4:	e0bff817 	ldw	r2,-32(fp)
   162e8:	10800317 	ldw	r2,12(r2)
   162ec:	e1ffff17 	ldw	r7,-4(fp)
   162f0:	e1bffe17 	ldw	r6,-8(fp)
   162f4:	e17ffd17 	ldw	r5,-12(fp)
   162f8:	e13ffc17 	ldw	r4,-16(fp)
   162fc:	103ee83a 	callr	r2
   16300:	00000106 	br	16308 <open+0x108>
   16304:	0005883a 	mov	r2,zero
   16308:	e0bffa15 	stw	r2,-24(fp)
   1630c:	00000206 	br	16318 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   16310:	00bffb44 	movi	r2,-19
   16314:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   16318:	e0bffa17 	ldw	r2,-24(fp)
   1631c:	1000090e 	bge	r2,zero,16344 <open+0x144>
  {
    alt_release_fd (index);  
   16320:	e13ff917 	ldw	r4,-28(fp)
   16324:	0014c400 	call	14c40 <alt_release_fd>
    ALT_ERRNO = -status;
   16328:	00160d80 	call	160d8 <alt_get_errno>
   1632c:	1007883a 	mov	r3,r2
   16330:	e0bffa17 	ldw	r2,-24(fp)
   16334:	0085c83a 	sub	r2,zero,r2
   16338:	18800015 	stw	r2,0(r3)
    return -1;
   1633c:	00bfffc4 	movi	r2,-1
   16340:	00000106 	br	16348 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   16344:	e0bff917 	ldw	r2,-28(fp)
}
   16348:	e037883a 	mov	sp,fp
   1634c:	dfc00117 	ldw	ra,4(sp)
   16350:	df000017 	ldw	fp,0(sp)
   16354:	dec00204 	addi	sp,sp,8
   16358:	f800283a 	ret

0001635c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   1635c:	defffa04 	addi	sp,sp,-24
   16360:	df000515 	stw	fp,20(sp)
   16364:	df000504 	addi	fp,sp,20
   16368:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1636c:	0005303a 	rdctl	r2,status
   16370:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16374:	e0fffc17 	ldw	r3,-16(fp)
   16378:	00bfff84 	movi	r2,-2
   1637c:	1884703a 	and	r2,r3,r2
   16380:	1001703a 	wrctl	status,r2
  
  return context;
   16384:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   16388:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   1638c:	e0bfff17 	ldw	r2,-4(fp)
   16390:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   16394:	e0bffd17 	ldw	r2,-12(fp)
   16398:	10800017 	ldw	r2,0(r2)
   1639c:	e0fffd17 	ldw	r3,-12(fp)
   163a0:	18c00117 	ldw	r3,4(r3)
   163a4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   163a8:	e0bffd17 	ldw	r2,-12(fp)
   163ac:	10800117 	ldw	r2,4(r2)
   163b0:	e0fffd17 	ldw	r3,-12(fp)
   163b4:	18c00017 	ldw	r3,0(r3)
   163b8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   163bc:	e0bffd17 	ldw	r2,-12(fp)
   163c0:	e0fffd17 	ldw	r3,-12(fp)
   163c4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   163c8:	e0bffd17 	ldw	r2,-12(fp)
   163cc:	e0fffd17 	ldw	r3,-12(fp)
   163d0:	10c00015 	stw	r3,0(r2)
   163d4:	e0bffb17 	ldw	r2,-20(fp)
   163d8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   163dc:	e0bffe17 	ldw	r2,-8(fp)
   163e0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   163e4:	0001883a 	nop
   163e8:	e037883a 	mov	sp,fp
   163ec:	df000017 	ldw	fp,0(sp)
   163f0:	dec00104 	addi	sp,sp,4
   163f4:	f800283a 	ret

000163f8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   163f8:	defffb04 	addi	sp,sp,-20
   163fc:	dfc00415 	stw	ra,16(sp)
   16400:	df000315 	stw	fp,12(sp)
   16404:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   16408:	d0a00d17 	ldw	r2,-32716(gp)
   1640c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   16410:	d0a6c817 	ldw	r2,-25824(gp)
   16414:	10800044 	addi	r2,r2,1
   16418:	d0a6c815 	stw	r2,-25824(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1641c:	00002e06 	br	164d8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   16420:	e0bffd17 	ldw	r2,-12(fp)
   16424:	10800017 	ldw	r2,0(r2)
   16428:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   1642c:	e0bffd17 	ldw	r2,-12(fp)
   16430:	10800403 	ldbu	r2,16(r2)
   16434:	10803fcc 	andi	r2,r2,255
   16438:	10000426 	beq	r2,zero,1644c <alt_tick+0x54>
   1643c:	d0a6c817 	ldw	r2,-25824(gp)
   16440:	1000021e 	bne	r2,zero,1644c <alt_tick+0x54>
    {
      alarm->rollover = 0;
   16444:	e0bffd17 	ldw	r2,-12(fp)
   16448:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   1644c:	e0bffd17 	ldw	r2,-12(fp)
   16450:	10800217 	ldw	r2,8(r2)
   16454:	d0e6c817 	ldw	r3,-25824(gp)
   16458:	18801d36 	bltu	r3,r2,164d0 <alt_tick+0xd8>
   1645c:	e0bffd17 	ldw	r2,-12(fp)
   16460:	10800403 	ldbu	r2,16(r2)
   16464:	10803fcc 	andi	r2,r2,255
   16468:	1000191e 	bne	r2,zero,164d0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   1646c:	e0bffd17 	ldw	r2,-12(fp)
   16470:	10800317 	ldw	r2,12(r2)
   16474:	e0fffd17 	ldw	r3,-12(fp)
   16478:	18c00517 	ldw	r3,20(r3)
   1647c:	1809883a 	mov	r4,r3
   16480:	103ee83a 	callr	r2
   16484:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   16488:	e0bfff17 	ldw	r2,-4(fp)
   1648c:	1000031e 	bne	r2,zero,1649c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   16490:	e13ffd17 	ldw	r4,-12(fp)
   16494:	001635c0 	call	1635c <alt_alarm_stop>
   16498:	00000d06 	br	164d0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   1649c:	e0bffd17 	ldw	r2,-12(fp)
   164a0:	10c00217 	ldw	r3,8(r2)
   164a4:	e0bfff17 	ldw	r2,-4(fp)
   164a8:	1887883a 	add	r3,r3,r2
   164ac:	e0bffd17 	ldw	r2,-12(fp)
   164b0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   164b4:	e0bffd17 	ldw	r2,-12(fp)
   164b8:	10c00217 	ldw	r3,8(r2)
   164bc:	d0a6c817 	ldw	r2,-25824(gp)
   164c0:	1880032e 	bgeu	r3,r2,164d0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   164c4:	e0bffd17 	ldw	r2,-12(fp)
   164c8:	00c00044 	movi	r3,1
   164cc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   164d0:	e0bffe17 	ldw	r2,-8(fp)
   164d4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   164d8:	e0fffd17 	ldw	r3,-12(fp)
   164dc:	d0a00d04 	addi	r2,gp,-32716
   164e0:	18bfcf1e 	bne	r3,r2,16420 <_gp+0xffff5c54>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   164e4:	0001883a 	nop
}
   164e8:	0001883a 	nop
   164ec:	e037883a 	mov	sp,fp
   164f0:	dfc00117 	ldw	ra,4(sp)
   164f4:	df000017 	ldw	fp,0(sp)
   164f8:	dec00204 	addi	sp,sp,8
   164fc:	f800283a 	ret

00016500 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   16500:	deffff04 	addi	sp,sp,-4
   16504:	df000015 	stw	fp,0(sp)
   16508:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   1650c:	000170fa 	wrctl	ienable,zero
}
   16510:	0001883a 	nop
   16514:	e037883a 	mov	sp,fp
   16518:	df000017 	ldw	fp,0(sp)
   1651c:	dec00104 	addi	sp,sp,4
   16520:	f800283a 	ret

00016524 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   16524:	defffa04 	addi	sp,sp,-24
   16528:	dfc00515 	stw	ra,20(sp)
   1652c:	df000415 	stw	fp,16(sp)
   16530:	df000404 	addi	fp,sp,16
   16534:	e13ffe15 	stw	r4,-8(fp)
   16538:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   1653c:	e0bfff17 	ldw	r2,-4(fp)
   16540:	10800017 	ldw	r2,0(r2)
   16544:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   16548:	e13ffe17 	ldw	r4,-8(fp)
   1654c:	00118000 	call	11800 <strlen>
   16550:	10800044 	addi	r2,r2,1
   16554:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   16558:	00000d06 	br	16590 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   1655c:	e0bffc17 	ldw	r2,-16(fp)
   16560:	10800217 	ldw	r2,8(r2)
   16564:	e0fffd17 	ldw	r3,-12(fp)
   16568:	180d883a 	mov	r6,r3
   1656c:	e17ffe17 	ldw	r5,-8(fp)
   16570:	1009883a 	mov	r4,r2
   16574:	001691c0 	call	1691c <memcmp>
   16578:	1000021e 	bne	r2,zero,16584 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   1657c:	e0bffc17 	ldw	r2,-16(fp)
   16580:	00000706 	br	165a0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   16584:	e0bffc17 	ldw	r2,-16(fp)
   16588:	10800017 	ldw	r2,0(r2)
   1658c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   16590:	e0fffc17 	ldw	r3,-16(fp)
   16594:	e0bfff17 	ldw	r2,-4(fp)
   16598:	18bff01e 	bne	r3,r2,1655c <_gp+0xffff5d90>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   1659c:	0005883a 	mov	r2,zero
}
   165a0:	e037883a 	mov	sp,fp
   165a4:	dfc00117 	ldw	ra,4(sp)
   165a8:	df000017 	ldw	fp,0(sp)
   165ac:	dec00204 	addi	sp,sp,8
   165b0:	f800283a 	ret

000165b4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   165b4:	defffb04 	addi	sp,sp,-20
   165b8:	dfc00415 	stw	ra,16(sp)
   165bc:	df000315 	stw	fp,12(sp)
   165c0:	df000304 	addi	fp,sp,12
   165c4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   165c8:	d0a00517 	ldw	r2,-32748(gp)
   165cc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   165d0:	00003106 	br	16698 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   165d4:	e0bffd17 	ldw	r2,-12(fp)
   165d8:	10800217 	ldw	r2,8(r2)
   165dc:	1009883a 	mov	r4,r2
   165e0:	00118000 	call	11800 <strlen>
   165e4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   165e8:	e0bffd17 	ldw	r2,-12(fp)
   165ec:	10c00217 	ldw	r3,8(r2)
   165f0:	e0bffe17 	ldw	r2,-8(fp)
   165f4:	10bfffc4 	addi	r2,r2,-1
   165f8:	1885883a 	add	r2,r3,r2
   165fc:	10800003 	ldbu	r2,0(r2)
   16600:	10803fcc 	andi	r2,r2,255
   16604:	1080201c 	xori	r2,r2,128
   16608:	10bfe004 	addi	r2,r2,-128
   1660c:	10800bd8 	cmpnei	r2,r2,47
   16610:	1000031e 	bne	r2,zero,16620 <alt_find_file+0x6c>
    {
      len -= 1;
   16614:	e0bffe17 	ldw	r2,-8(fp)
   16618:	10bfffc4 	addi	r2,r2,-1
   1661c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   16620:	e0bffe17 	ldw	r2,-8(fp)
   16624:	e0ffff17 	ldw	r3,-4(fp)
   16628:	1885883a 	add	r2,r3,r2
   1662c:	10800003 	ldbu	r2,0(r2)
   16630:	10803fcc 	andi	r2,r2,255
   16634:	1080201c 	xori	r2,r2,128
   16638:	10bfe004 	addi	r2,r2,-128
   1663c:	10800be0 	cmpeqi	r2,r2,47
   16640:	1000081e 	bne	r2,zero,16664 <alt_find_file+0xb0>
   16644:	e0bffe17 	ldw	r2,-8(fp)
   16648:	e0ffff17 	ldw	r3,-4(fp)
   1664c:	1885883a 	add	r2,r3,r2
   16650:	10800003 	ldbu	r2,0(r2)
   16654:	10803fcc 	andi	r2,r2,255
   16658:	1080201c 	xori	r2,r2,128
   1665c:	10bfe004 	addi	r2,r2,-128
   16660:	10000a1e 	bne	r2,zero,1668c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   16664:	e0bffd17 	ldw	r2,-12(fp)
   16668:	10800217 	ldw	r2,8(r2)
   1666c:	e0fffe17 	ldw	r3,-8(fp)
   16670:	180d883a 	mov	r6,r3
   16674:	e17fff17 	ldw	r5,-4(fp)
   16678:	1009883a 	mov	r4,r2
   1667c:	001691c0 	call	1691c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   16680:	1000021e 	bne	r2,zero,1668c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   16684:	e0bffd17 	ldw	r2,-12(fp)
   16688:	00000706 	br	166a8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   1668c:	e0bffd17 	ldw	r2,-12(fp)
   16690:	10800017 	ldw	r2,0(r2)
   16694:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   16698:	e0fffd17 	ldw	r3,-12(fp)
   1669c:	d0a00504 	addi	r2,gp,-32748
   166a0:	18bfcc1e 	bne	r3,r2,165d4 <_gp+0xffff5e08>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   166a4:	0005883a 	mov	r2,zero
}
   166a8:	e037883a 	mov	sp,fp
   166ac:	dfc00117 	ldw	ra,4(sp)
   166b0:	df000017 	ldw	fp,0(sp)
   166b4:	dec00204 	addi	sp,sp,8
   166b8:	f800283a 	ret

000166bc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   166bc:	defffa04 	addi	sp,sp,-24
   166c0:	dfc00515 	stw	ra,20(sp)
   166c4:	df000415 	stw	fp,16(sp)
   166c8:	dc000315 	stw	r16,12(sp)
   166cc:	df000404 	addi	fp,sp,16
   166d0:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   166d4:	00bffa04 	movi	r2,-24
   166d8:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   166dc:	e03ffc15 	stw	zero,-16(fp)
   166e0:	00001d06 	br	16758 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   166e4:	04000074 	movhi	r16,1
   166e8:	841d7b04 	addi	r16,r16,30188
   166ec:	e0bffc17 	ldw	r2,-16(fp)
   166f0:	01400304 	movi	r5,12
   166f4:	1009883a 	mov	r4,r2
   166f8:	00144b80 	call	144b8 <__mulsi3>
   166fc:	8085883a 	add	r2,r16,r2
   16700:	10800017 	ldw	r2,0(r2)
   16704:	1000111e 	bne	r2,zero,1674c <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   16708:	04000074 	movhi	r16,1
   1670c:	841d7b04 	addi	r16,r16,30188
   16710:	e0bffc17 	ldw	r2,-16(fp)
   16714:	01400304 	movi	r5,12
   16718:	1009883a 	mov	r4,r2
   1671c:	00144b80 	call	144b8 <__mulsi3>
   16720:	8085883a 	add	r2,r16,r2
   16724:	e0fffe17 	ldw	r3,-8(fp)
   16728:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   1672c:	d0e00917 	ldw	r3,-32732(gp)
   16730:	e0bffc17 	ldw	r2,-16(fp)
   16734:	1880020e 	bge	r3,r2,16740 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   16738:	e0bffc17 	ldw	r2,-16(fp)
   1673c:	d0a00915 	stw	r2,-32732(gp)
      }
      rc = i;
   16740:	e0bffc17 	ldw	r2,-16(fp)
   16744:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   16748:	00000606 	br	16764 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1674c:	e0bffc17 	ldw	r2,-16(fp)
   16750:	10800044 	addi	r2,r2,1
   16754:	e0bffc15 	stw	r2,-16(fp)
   16758:	e0bffc17 	ldw	r2,-16(fp)
   1675c:	10800810 	cmplti	r2,r2,32
   16760:	103fe01e 	bne	r2,zero,166e4 <_gp+0xffff5f18>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   16764:	e0bffd17 	ldw	r2,-12(fp)
}
   16768:	e6ffff04 	addi	sp,fp,-4
   1676c:	dfc00217 	ldw	ra,8(sp)
   16770:	df000117 	ldw	fp,4(sp)
   16774:	dc000017 	ldw	r16,0(sp)
   16778:	dec00304 	addi	sp,sp,12
   1677c:	f800283a 	ret

00016780 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   16780:	defffe04 	addi	sp,sp,-8
   16784:	df000115 	stw	fp,4(sp)
   16788:	df000104 	addi	fp,sp,4
   1678c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   16790:	e0bfff17 	ldw	r2,-4(fp)
   16794:	10bffe84 	addi	r2,r2,-6
   16798:	10c00428 	cmpgeui	r3,r2,16
   1679c:	18001a1e 	bne	r3,zero,16808 <alt_exception_cause_generated_bad_addr+0x88>
   167a0:	100690ba 	slli	r3,r2,2
   167a4:	00800074 	movhi	r2,1
   167a8:	1099ee04 	addi	r2,r2,26552
   167ac:	1885883a 	add	r2,r3,r2
   167b0:	10800017 	ldw	r2,0(r2)
   167b4:	1000683a 	jmp	r2
   167b8:	000167f8 	rdprs	zero,zero,1439
   167bc:	000167f8 	rdprs	zero,zero,1439
   167c0:	00016808 	cmpgei	zero,zero,1440
   167c4:	00016808 	cmpgei	zero,zero,1440
   167c8:	00016808 	cmpgei	zero,zero,1440
   167cc:	000167f8 	rdprs	zero,zero,1439
   167d0:	00016800 	call	1680 <__alt_mem_onchip_ram-0xe980>
   167d4:	00016808 	cmpgei	zero,zero,1440
   167d8:	000167f8 	rdprs	zero,zero,1439
   167dc:	000167f8 	rdprs	zero,zero,1439
   167e0:	00016808 	cmpgei	zero,zero,1440
   167e4:	000167f8 	rdprs	zero,zero,1439
   167e8:	00016800 	call	1680 <__alt_mem_onchip_ram-0xe980>
   167ec:	00016808 	cmpgei	zero,zero,1440
   167f0:	00016808 	cmpgei	zero,zero,1440
   167f4:	000167f8 	rdprs	zero,zero,1439
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   167f8:	00800044 	movi	r2,1
   167fc:	00000306 	br	1680c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   16800:	0005883a 	mov	r2,zero
   16804:	00000106 	br	1680c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   16808:	0005883a 	mov	r2,zero
  }
}
   1680c:	e037883a 	mov	sp,fp
   16810:	df000017 	ldw	fp,0(sp)
   16814:	dec00104 	addi	sp,sp,4
   16818:	f800283a 	ret

0001681c <atexit>:
   1681c:	200b883a 	mov	r5,r4
   16820:	000f883a 	mov	r7,zero
   16824:	000d883a 	mov	r6,zero
   16828:	0009883a 	mov	r4,zero
   1682c:	00169981 	jmpi	16998 <__register_exitproc>

00016830 <exit>:
   16830:	defffe04 	addi	sp,sp,-8
   16834:	000b883a 	mov	r5,zero
   16838:	dc000015 	stw	r16,0(sp)
   1683c:	dfc00115 	stw	ra,4(sp)
   16840:	2021883a 	mov	r16,r4
   16844:	0016ab00 	call	16ab0 <__call_exitprocs>
   16848:	008000b4 	movhi	r2,2
   1684c:	10a1f404 	addi	r2,r2,-30768
   16850:	11000017 	ldw	r4,0(r2)
   16854:	20800f17 	ldw	r2,60(r4)
   16858:	10000126 	beq	r2,zero,16860 <exit+0x30>
   1685c:	103ee83a 	callr	r2
   16860:	8009883a 	mov	r4,r16
   16864:	0016c300 	call	16c30 <_exit>

00016868 <_fputs_r>:
   16868:	defff804 	addi	sp,sp,-32
   1686c:	dc400615 	stw	r17,24(sp)
   16870:	2023883a 	mov	r17,r4
   16874:	2809883a 	mov	r4,r5
   16878:	dc000515 	stw	r16,20(sp)
   1687c:	dfc00715 	stw	ra,28(sp)
   16880:	3021883a 	mov	r16,r6
   16884:	d9400315 	stw	r5,12(sp)
   16888:	00118000 	call	11800 <strlen>
   1688c:	d8800215 	stw	r2,8(sp)
   16890:	d8800415 	stw	r2,16(sp)
   16894:	d8800304 	addi	r2,sp,12
   16898:	d8800015 	stw	r2,0(sp)
   1689c:	00800044 	movi	r2,1
   168a0:	d8800115 	stw	r2,4(sp)
   168a4:	88000226 	beq	r17,zero,168b0 <_fputs_r+0x48>
   168a8:	88800e17 	ldw	r2,56(r17)
   168ac:	10001226 	beq	r2,zero,168f8 <_fputs_r+0x90>
   168b0:	8080030b 	ldhu	r2,12(r16)
   168b4:	10c8000c 	andi	r3,r2,8192
   168b8:	1800061e 	bne	r3,zero,168d4 <_fputs_r+0x6c>
   168bc:	81001917 	ldw	r4,100(r16)
   168c0:	00f7ffc4 	movi	r3,-8193
   168c4:	10880014 	ori	r2,r2,8192
   168c8:	20c6703a 	and	r3,r4,r3
   168cc:	8080030d 	sth	r2,12(r16)
   168d0:	80c01915 	stw	r3,100(r16)
   168d4:	d80d883a 	mov	r6,sp
   168d8:	800b883a 	mov	r5,r16
   168dc:	8809883a 	mov	r4,r17
   168e0:	0011da40 	call	11da4 <__sfvwrite_r>
   168e4:	dfc00717 	ldw	ra,28(sp)
   168e8:	dc400617 	ldw	r17,24(sp)
   168ec:	dc000517 	ldw	r16,20(sp)
   168f0:	dec00804 	addi	sp,sp,32
   168f4:	f800283a 	ret
   168f8:	8809883a 	mov	r4,r17
   168fc:	0011d540 	call	11d54 <__sinit>
   16900:	003feb06 	br	168b0 <_gp+0xffff60e4>

00016904 <fputs>:
   16904:	008000b4 	movhi	r2,2
   16908:	10a1f504 	addi	r2,r2,-30764
   1690c:	280d883a 	mov	r6,r5
   16910:	200b883a 	mov	r5,r4
   16914:	11000017 	ldw	r4,0(r2)
   16918:	00168681 	jmpi	16868 <_fputs_r>

0001691c <memcmp>:
   1691c:	01c000c4 	movi	r7,3
   16920:	3980192e 	bgeu	r7,r6,16988 <memcmp+0x6c>
   16924:	2144b03a 	or	r2,r4,r5
   16928:	11c4703a 	and	r2,r2,r7
   1692c:	10000f26 	beq	r2,zero,1696c <memcmp+0x50>
   16930:	20800003 	ldbu	r2,0(r4)
   16934:	28c00003 	ldbu	r3,0(r5)
   16938:	10c0151e 	bne	r2,r3,16990 <memcmp+0x74>
   1693c:	31bfff84 	addi	r6,r6,-2
   16940:	01ffffc4 	movi	r7,-1
   16944:	00000406 	br	16958 <memcmp+0x3c>
   16948:	20800003 	ldbu	r2,0(r4)
   1694c:	28c00003 	ldbu	r3,0(r5)
   16950:	31bfffc4 	addi	r6,r6,-1
   16954:	10c00e1e 	bne	r2,r3,16990 <memcmp+0x74>
   16958:	21000044 	addi	r4,r4,1
   1695c:	29400044 	addi	r5,r5,1
   16960:	31fff91e 	bne	r6,r7,16948 <_gp+0xffff617c>
   16964:	0005883a 	mov	r2,zero
   16968:	f800283a 	ret
   1696c:	20c00017 	ldw	r3,0(r4)
   16970:	28800017 	ldw	r2,0(r5)
   16974:	18bfee1e 	bne	r3,r2,16930 <_gp+0xffff6164>
   16978:	31bfff04 	addi	r6,r6,-4
   1697c:	21000104 	addi	r4,r4,4
   16980:	29400104 	addi	r5,r5,4
   16984:	39bff936 	bltu	r7,r6,1696c <_gp+0xffff61a0>
   16988:	303fe91e 	bne	r6,zero,16930 <_gp+0xffff6164>
   1698c:	003ff506 	br	16964 <_gp+0xffff6198>
   16990:	10c5c83a 	sub	r2,r2,r3
   16994:	f800283a 	ret

00016998 <__register_exitproc>:
   16998:	defffa04 	addi	sp,sp,-24
   1699c:	dc000315 	stw	r16,12(sp)
   169a0:	040000b4 	movhi	r16,2
   169a4:	8421f404 	addi	r16,r16,-30768
   169a8:	80c00017 	ldw	r3,0(r16)
   169ac:	dc400415 	stw	r17,16(sp)
   169b0:	dfc00515 	stw	ra,20(sp)
   169b4:	18805217 	ldw	r2,328(r3)
   169b8:	2023883a 	mov	r17,r4
   169bc:	10003726 	beq	r2,zero,16a9c <__register_exitproc+0x104>
   169c0:	10c00117 	ldw	r3,4(r2)
   169c4:	010007c4 	movi	r4,31
   169c8:	20c00e16 	blt	r4,r3,16a04 <__register_exitproc+0x6c>
   169cc:	1a000044 	addi	r8,r3,1
   169d0:	8800221e 	bne	r17,zero,16a5c <__register_exitproc+0xc4>
   169d4:	18c00084 	addi	r3,r3,2
   169d8:	18c7883a 	add	r3,r3,r3
   169dc:	18c7883a 	add	r3,r3,r3
   169e0:	12000115 	stw	r8,4(r2)
   169e4:	10c7883a 	add	r3,r2,r3
   169e8:	19400015 	stw	r5,0(r3)
   169ec:	0005883a 	mov	r2,zero
   169f0:	dfc00517 	ldw	ra,20(sp)
   169f4:	dc400417 	ldw	r17,16(sp)
   169f8:	dc000317 	ldw	r16,12(sp)
   169fc:	dec00604 	addi	sp,sp,24
   16a00:	f800283a 	ret
   16a04:	00800034 	movhi	r2,0
   16a08:	10800004 	addi	r2,r2,0
   16a0c:	10002626 	beq	r2,zero,16aa8 <__register_exitproc+0x110>
   16a10:	01006404 	movi	r4,400
   16a14:	d9400015 	stw	r5,0(sp)
   16a18:	d9800115 	stw	r6,4(sp)
   16a1c:	d9c00215 	stw	r7,8(sp)
   16a20:	00000000 	call	0 <__alt_mem_onchip_ram-0x10000>
   16a24:	d9400017 	ldw	r5,0(sp)
   16a28:	d9800117 	ldw	r6,4(sp)
   16a2c:	d9c00217 	ldw	r7,8(sp)
   16a30:	10001d26 	beq	r2,zero,16aa8 <__register_exitproc+0x110>
   16a34:	81000017 	ldw	r4,0(r16)
   16a38:	10000115 	stw	zero,4(r2)
   16a3c:	02000044 	movi	r8,1
   16a40:	22405217 	ldw	r9,328(r4)
   16a44:	0007883a 	mov	r3,zero
   16a48:	12400015 	stw	r9,0(r2)
   16a4c:	20805215 	stw	r2,328(r4)
   16a50:	10006215 	stw	zero,392(r2)
   16a54:	10006315 	stw	zero,396(r2)
   16a58:	883fde26 	beq	r17,zero,169d4 <_gp+0xffff6208>
   16a5c:	18c9883a 	add	r4,r3,r3
   16a60:	2109883a 	add	r4,r4,r4
   16a64:	1109883a 	add	r4,r2,r4
   16a68:	21802215 	stw	r6,136(r4)
   16a6c:	01800044 	movi	r6,1
   16a70:	12406217 	ldw	r9,392(r2)
   16a74:	30cc983a 	sll	r6,r6,r3
   16a78:	4992b03a 	or	r9,r9,r6
   16a7c:	12406215 	stw	r9,392(r2)
   16a80:	21c04215 	stw	r7,264(r4)
   16a84:	01000084 	movi	r4,2
   16a88:	893fd21e 	bne	r17,r4,169d4 <_gp+0xffff6208>
   16a8c:	11006317 	ldw	r4,396(r2)
   16a90:	218cb03a 	or	r6,r4,r6
   16a94:	11806315 	stw	r6,396(r2)
   16a98:	003fce06 	br	169d4 <_gp+0xffff6208>
   16a9c:	18805304 	addi	r2,r3,332
   16aa0:	18805215 	stw	r2,328(r3)
   16aa4:	003fc606 	br	169c0 <_gp+0xffff61f4>
   16aa8:	00bfffc4 	movi	r2,-1
   16aac:	003fd006 	br	169f0 <_gp+0xffff6224>

00016ab0 <__call_exitprocs>:
   16ab0:	defff504 	addi	sp,sp,-44
   16ab4:	df000915 	stw	fp,36(sp)
   16ab8:	dd400615 	stw	r21,24(sp)
   16abc:	dc800315 	stw	r18,12(sp)
   16ac0:	dfc00a15 	stw	ra,40(sp)
   16ac4:	ddc00815 	stw	r23,32(sp)
   16ac8:	dd800715 	stw	r22,28(sp)
   16acc:	dd000515 	stw	r20,20(sp)
   16ad0:	dcc00415 	stw	r19,16(sp)
   16ad4:	dc400215 	stw	r17,8(sp)
   16ad8:	dc000115 	stw	r16,4(sp)
   16adc:	d9000015 	stw	r4,0(sp)
   16ae0:	2839883a 	mov	fp,r5
   16ae4:	04800044 	movi	r18,1
   16ae8:	057fffc4 	movi	r21,-1
   16aec:	008000b4 	movhi	r2,2
   16af0:	10a1f404 	addi	r2,r2,-30768
   16af4:	12000017 	ldw	r8,0(r2)
   16af8:	45005217 	ldw	r20,328(r8)
   16afc:	44c05204 	addi	r19,r8,328
   16b00:	a0001c26 	beq	r20,zero,16b74 <__call_exitprocs+0xc4>
   16b04:	a0800117 	ldw	r2,4(r20)
   16b08:	15ffffc4 	addi	r23,r2,-1
   16b0c:	b8000d16 	blt	r23,zero,16b44 <__call_exitprocs+0x94>
   16b10:	14000044 	addi	r16,r2,1
   16b14:	8421883a 	add	r16,r16,r16
   16b18:	8421883a 	add	r16,r16,r16
   16b1c:	84402004 	addi	r17,r16,128
   16b20:	a463883a 	add	r17,r20,r17
   16b24:	a421883a 	add	r16,r20,r16
   16b28:	e0001e26 	beq	fp,zero,16ba4 <__call_exitprocs+0xf4>
   16b2c:	80804017 	ldw	r2,256(r16)
   16b30:	e0801c26 	beq	fp,r2,16ba4 <__call_exitprocs+0xf4>
   16b34:	bdffffc4 	addi	r23,r23,-1
   16b38:	843fff04 	addi	r16,r16,-4
   16b3c:	8c7fff04 	addi	r17,r17,-4
   16b40:	bd7ff91e 	bne	r23,r21,16b28 <_gp+0xffff635c>
   16b44:	00800034 	movhi	r2,0
   16b48:	10800004 	addi	r2,r2,0
   16b4c:	10000926 	beq	r2,zero,16b74 <__call_exitprocs+0xc4>
   16b50:	a0800117 	ldw	r2,4(r20)
   16b54:	1000301e 	bne	r2,zero,16c18 <__call_exitprocs+0x168>
   16b58:	a0800017 	ldw	r2,0(r20)
   16b5c:	10003226 	beq	r2,zero,16c28 <__call_exitprocs+0x178>
   16b60:	a009883a 	mov	r4,r20
   16b64:	98800015 	stw	r2,0(r19)
   16b68:	00000000 	call	0 <__alt_mem_onchip_ram-0x10000>
   16b6c:	9d000017 	ldw	r20,0(r19)
   16b70:	a03fe41e 	bne	r20,zero,16b04 <_gp+0xffff6338>
   16b74:	dfc00a17 	ldw	ra,40(sp)
   16b78:	df000917 	ldw	fp,36(sp)
   16b7c:	ddc00817 	ldw	r23,32(sp)
   16b80:	dd800717 	ldw	r22,28(sp)
   16b84:	dd400617 	ldw	r21,24(sp)
   16b88:	dd000517 	ldw	r20,20(sp)
   16b8c:	dcc00417 	ldw	r19,16(sp)
   16b90:	dc800317 	ldw	r18,12(sp)
   16b94:	dc400217 	ldw	r17,8(sp)
   16b98:	dc000117 	ldw	r16,4(sp)
   16b9c:	dec00b04 	addi	sp,sp,44
   16ba0:	f800283a 	ret
   16ba4:	a0800117 	ldw	r2,4(r20)
   16ba8:	80c00017 	ldw	r3,0(r16)
   16bac:	10bfffc4 	addi	r2,r2,-1
   16bb0:	15c01426 	beq	r2,r23,16c04 <__call_exitprocs+0x154>
   16bb4:	80000015 	stw	zero,0(r16)
   16bb8:	183fde26 	beq	r3,zero,16b34 <_gp+0xffff6368>
   16bbc:	95c8983a 	sll	r4,r18,r23
   16bc0:	a0806217 	ldw	r2,392(r20)
   16bc4:	a5800117 	ldw	r22,4(r20)
   16bc8:	2084703a 	and	r2,r4,r2
   16bcc:	10000b26 	beq	r2,zero,16bfc <__call_exitprocs+0x14c>
   16bd0:	a0806317 	ldw	r2,396(r20)
   16bd4:	2088703a 	and	r4,r4,r2
   16bd8:	20000c1e 	bne	r4,zero,16c0c <__call_exitprocs+0x15c>
   16bdc:	89400017 	ldw	r5,0(r17)
   16be0:	d9000017 	ldw	r4,0(sp)
   16be4:	183ee83a 	callr	r3
   16be8:	a0800117 	ldw	r2,4(r20)
   16bec:	15bfbf1e 	bne	r2,r22,16aec <_gp+0xffff6320>
   16bf0:	98800017 	ldw	r2,0(r19)
   16bf4:	153fcf26 	beq	r2,r20,16b34 <_gp+0xffff6368>
   16bf8:	003fbc06 	br	16aec <_gp+0xffff6320>
   16bfc:	183ee83a 	callr	r3
   16c00:	003ff906 	br	16be8 <_gp+0xffff641c>
   16c04:	a5c00115 	stw	r23,4(r20)
   16c08:	003feb06 	br	16bb8 <_gp+0xffff63ec>
   16c0c:	89000017 	ldw	r4,0(r17)
   16c10:	183ee83a 	callr	r3
   16c14:	003ff406 	br	16be8 <_gp+0xffff641c>
   16c18:	a0800017 	ldw	r2,0(r20)
   16c1c:	a027883a 	mov	r19,r20
   16c20:	1029883a 	mov	r20,r2
   16c24:	003fb606 	br	16b00 <_gp+0xffff6334>
   16c28:	0005883a 	mov	r2,zero
   16c2c:	003ffb06 	br	16c1c <_gp+0xffff6450>

00016c30 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   16c30:	defffd04 	addi	sp,sp,-12
   16c34:	df000215 	stw	fp,8(sp)
   16c38:	df000204 	addi	fp,sp,8
   16c3c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   16c40:	0001883a 	nop
   16c44:	e0bfff17 	ldw	r2,-4(fp)
   16c48:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   16c4c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   16c50:	10000226 	beq	r2,zero,16c5c <_exit+0x2c>
    ALT_SIM_FAIL();
   16c54:	002af070 	cmpltui	zero,zero,43969
   16c58:	00000106 	br	16c60 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   16c5c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   16c60:	003fff06 	br	16c60 <_gp+0xffff6494>
