
blinky-sw.elf:     file format elf32-littlenios2
blinky-sw.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010230

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00005e20 memsz 0x00005e20 flags r-x
    LOAD off    0x00006e40 vaddr 0x00015e40 paddr 0x000178e4 align 2**12
         filesz 0x00001aa4 memsz 0x00001aa4 flags rw-
    LOAD off    0x00009388 vaddr 0x00019388 paddr 0x00019388 align 2**12
         filesz 0x00000000 memsz 0x00000230 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005bb4  00010230  00010230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000005c  00015de4  00015de4  00006de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aa4  00015e40  000178e4  00006e40  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000230  00019388  00019388  00009388  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_ram   00000000  000195b8  000195b8  000088e4  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000088e4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000aa8  00000000  00000000  00008908  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00017c0a  00000000  00000000  000093b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000659f  00000000  00000000  00020fba  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006e2e  00000000  00000000  00027559  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001a18  00000000  00000000  0002e388  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002a45  00000000  00000000  0002fda0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004f14  00000000  00000000  000327e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  000376fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000006e0  00000000  00000000  00037710  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0003a6c6  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0003a6c9  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0003a6cc  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0003a6cd  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0003a6ce  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0003a6d7  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0003a6e0  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000006  00000000  00000000  0003a6e9  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000003e  00000000  00000000  0003a6ef  2**0
                  CONTENTS, READONLY
 26 .jdi          00004428  00000000  00000000  0003a72d  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00045d77  00000000  00000000  0003eb55  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010230 l    d  .text	00000000 .text
00015de4 l    d  .rodata	00000000 .rodata
00015e40 l    d  .rwdata	00000000 .rwdata
00019388 l    d  .bss	00000000 .bss
000195b8 l    d  .onchip_ram	00000000 .onchip_ram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../blinky-sw_bsp//obj/HAL/src/crt0.o
00010268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 blinky.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 itoa.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 utoa.c
00000000 l    df *ABS*	00000000 findfp.c
00010b74 l     F .text	00000008 __fp_unlock
00010b88 l     F .text	0000019c __sinit.part.1
00010d24 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00015e74 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
00013660 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00013774 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000137a0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00013894 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0001397c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00013a68 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_read.c
00013c80 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000178d4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00013ef4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00014030 l     F .text	00000034 alt_dev_reg
00016848 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00014308 l     F .text	0000020c altera_avalon_jtag_uart_irq
00014514 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00014c98 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000150f8 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00015258 l     F .text	0000003c alt_get_errno
00015294 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
000193bc g     O .bss	00000004 alt_instruction_exception_handler
000102f0 g     F .text	00000020 init_RLED
000104e4 g     F .text	00000028 dealerBust
000135e4 g     F .text	00000054 _isatty_r
00013b80 g     F .text	0000007c alt_main
000103c8 g     F .text	00000020 dispInstructions
000108ac g     F .text	000000c0 _puts_r
00010350 g     F .text	00000020 init_Keys
000194b8 g     O .bss	00000100 alt_irq
0001330c g     F .text	00000060 _lseek_r
000178e4 g       *ABS*	00000000 __flash_rwdata_start
000195b8 g       *ABS*	00000000 __alt_heap_start
000128c0 g     F .text	0000005c __sseek
00010ed4 g     F .text	00000010 __sinit
00010d2c g     F .text	00000078 __sfmoreglue
00013c20 g     F .text	00000024 __malloc_unlock
00011fac g     F .text	0000015c memmove
00010ebc g     F .text	00000018 _cleanup
0001045c g     F .text	00000020 dealInitialCards
00015e40 g     O .rwdata	00000034 cardValues
00010390 g     F .text	00000020 readSwitches
00013c44 g     F .text	0000003c alt_putstr
00015680 g     F .text	00000024 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
00013588 g     F .text	0000005c _fstat_r
000193a0 g     O .bss	00000004 errno
0001283c g     F .text	00000008 __seofread
00019390 g     O .bss	00000004 gamesPlayed
00010608 g     F .text	00000024 displayResult
000105a0 g     F .text	00000020 resetDeck
000193a8 g     O .bss	00000004 alt_argv
0001f8a8 g       *ABS*	00000000 _gp
000166c8 g     O .rwdata	00000180 alt_fd_list
000156a4 g     F .text	00000090 alt_find_dev
00011e64 g     F .text	00000148 memcpy
0001064c g     F .text	00000020 stay
00010b7c g     F .text	0000000c _cleanup_r
000105c0 g     F .text	00000024 displayPlayerSum
000151dc g     F .text	0000007c alt_io_redirect
00015de4 g       *ABS*	00000000 __DTOR_END__
0001096c g     F .text	00000014 puts
00015900 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0001470c g     F .text	0000021c altera_avalon_jtag_uart_read
00010784 g     F .text	00000064 .hidden __udivsi3
000138d0 g     F .text	000000ac isatty
0001939c g     O .bss	00000004 __malloc_top_pad
000108a8 g     F .text	00000004 itoa
00010f24 g     F .text	000004c8 __sfvwrite_r
00010370 g     F .text	00000020 init_LCD
00012794 g     F .text	00000054 _sbrk_r
00013528 g     F .text	00000060 _read_r
0001050c g     F .text	00000028 updateBankroll
000178cc g     O .rwdata	00000004 alt_max_fd
00012b2c g     F .text	000000f0 _fclose_r
00012ea8 g     F .text	00000030 fflush
00019398 g     O .bss	00000004 __malloc_max_sbrked_mem
00010408 g     F .text	00000034 gameInitialization
00013aa4 g     F .text	000000dc lseek
000178ac g     O .rwdata	00000004 _global_impure_ptr
00012230 g     F .text	00000564 _realloc_r
000195b8 g       *ABS*	00000000 __bss_end
00015008 g     F .text	000000f0 alt_iic_isr_register
00015578 g     F .text	00000108 alt_tick
00010ef4 g     F .text	00000018 __fp_lock_all
00014fbc g     F .text	0000004c alt_ic_irq_enabled
00010580 g     F .text	00000020 updateDeck
000154dc g     F .text	0000009c alt_alarm_stop
000193b0 g     O .bss	00000004 alt_irq_active
000100fc g     F .exceptions	000000d4 alt_irq_handler
000166a0 g     O .rwdata	00000028 alt_dev_null
0001066c g     F .text	00000020 submitBet
0001049c g     F .text	00000028 playerBust
00014c78 g     F .text	00000020 alt_dcache_flush_all
00010b70 g     F .text	00000004 utoa
000193c0 g     O .bss	000000d0 cardDeck
000178e4 g       *ABS*	00000000 __ram_rwdata_end
000178c4 g     O .rwdata	00000008 alt_dev_list
00013f30 g     F .text	00000100 write
00015e40 g       *ABS*	00000000 __ram_rodata_end
000137dc g     F .text	000000b8 fstat
000104c4 g     F .text	00000020 dealerTurn
000107e8 g     F .text	00000058 .hidden __umodsi3
000195b8 g       *ABS*	00000000 end
00010840 g     F .text	00000068 __itoa
00014248 g     F .text	000000c0 altera_avalon_jtag_uart_init
000101d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00015de4 g       *ABS*	00000000 __CTOR_LIST__
00020000 g       *ABS*	00000000 __alt_stack_pointer
00014928 g     F .text	00000224 altera_avalon_jtag_uart_write
00010ee4 g     F .text	00000004 __sfp_lock_acquire
00011d80 g     F .text	000000e4 memchr
00019388 g     O .bss	00000004 dealerSum
00012ffc g     F .text	00000310 _free_r
00015c30 g     F .text	00000180 __call_exitprocs
000178b4 g     O .rwdata	00000004 __malloc_sbrk_base
00010230 g     F .text	0000003c _start
000193b4 g     O .bss	00000004 _alt_tick_rate
000193b8 g     O .bss	00000004 _alt_nticks
000103b0 g     F .text	00000018 play
00013cbc g     F .text	00000104 read
00010330 g     F .text	00000020 init_Switches
0001409c g     F .text	00000048 alt_sys_init
00015b18 g     F .text	00000118 __register_exitproc
000145b4 g     F .text	00000068 altera_avalon_jtag_uart_close
00013638 g     F .text	00000028 .hidden __mulsi3
00015e40 g       *ABS*	00000000 __ram_rwdata_start
00015de4 g       *ABS*	00000000 __ram_rodata_start
00019490 g     O .bss	00000028 __malloc_current_mallinfo
000140e4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0001583c g     F .text	000000c4 alt_get_fd
000103e8 g     F .text	00000020 dispBankroll
00012ad8 g     F .text	00000054 _close_r
00015a9c g     F .text	0000007c memcmp
000141a4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000195b8 g       *ABS*	00000000 __alt_stack_base
000141f4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00012984 g     F .text	00000154 __swsetup_r
00010da4 g     F .text	00000118 __sfp
00016298 g     O .rwdata	00000408 __malloc_av_
00010ef0 g     F .text	00000004 __sinit_lock_release
000127e8 g     F .text	00000054 __sread
00015734 g     F .text	00000108 alt_find_file
00014cd4 g     F .text	000000a4 alt_dev_llist_insert
00013bfc g     F .text	00000024 __malloc_lock
00013e44 g     F .text	000000b0 sbrk
00012e4c g     F .text	0000005c _fflush_r
00010a18 g     F .text	00000158 __utoa
00019388 g       *ABS*	00000000 __bss_start
00012108 g     F .text	00000128 memset
0001026c g     F .text	00000064 main
000193ac g     O .bss	00000004 alt_envp
00019394 g     O .bss	00000004 __malloc_max_total_mem
00014144 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0001291c g     F .text	00000008 __sclose
00020000 g       *ABS*	00000000 __alt_heap_limit
00012c1c g     F .text	00000014 fclose
00011574 g     F .text	0000080c _malloc_r
000178d0 g     O .rwdata	00000004 alt_errno
000102d0 g     F .text	00000020 init_GLED
0001043c g     F .text	00000020 playerBet
000113ec g     F .text	000000c4 _fwalk
0001068c g     F .text	00000084 .hidden __divsi3
00012ed8 g     F .text	00000124 _malloc_trim_r
00015de4 g       *ABS*	00000000 __CTOR_END__
0001062c g     F .text	00000020 hit
00015de4 g       *ABS*	00000000 __flash_rodata_start
00015de4 g       *ABS*	00000000 __DTOR_LIST__
000105e4 g     F .text	00000024 displayDealerSum
00014064 g     F .text	00000038 alt_irq_init
00013dc0 g     F .text	00000084 alt_release_fd
0001599c g     F .text	00000014 atexit
00012924 g     F .text	00000060 _write_r
0001938c g     O .bss	00000004 playerSum
000178b0 g     O .rwdata	00000004 _impure_ptr
000193a4 g     O .bss	00000004 alt_argc
00012c30 g     F .text	0000021c __sflush_r
00014dd8 g     F .text	00000060 _do_dtors
00010310 g     F .text	00000020 init_SevenSeg
00010020 g       .exceptions	00000000 alt_irq_entry
00010f0c g     F .text	00000018 __fp_unlock_all
000178bc g     O .rwdata	00000008 alt_fs_list
000178a8 g     O .rwdata	00000004 bankRoll
00010020 g       *ABS*	00000000 __ram_exceptions_start
00014e58 g     F .text	00000050 alt_ic_isr_register
000178e4 g       *ABS*	00000000 _edata
000195b8 g       *ABS*	00000000 _end
0001047c g     F .text	00000020 playerTurn
00010230 g       *ABS*	00000000 __ram_exceptions_end
0001461c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
000159e8 g     F .text	0000009c _fputs_r
00014f30 g     F .text	0000008c alt_ic_irq_disable
00012844 g     F .text	0000007c __swrite
000178b8 g     O .rwdata	00000004 __malloc_trim_threshold
000159b0 g     F .text	00000038 exit
000114b0 g     F .text	000000c4 _fwalk_reent
00010710 g     F .text	00000074 .hidden __modsi3
00020000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00010ee8 g     F .text	00000004 __sfp_lock_release
00010000 g       *ABS*	00000000 __alt_mem_onchip_ram
00015db0 g     F .text	00000034 _exit
00014b4c g     F .text	0000012c alt_alarm_start
0001336c g     F .text	000001bc __smakebuf_r
00010980 g     F .text	00000098 strlen
00015380 g     F .text	0000015c open
00014e38 g     F .text	00000020 alt_icache_flush_all
00015a84 g     F .text	00000018 fputs
000178d8 g     O .rwdata	00000004 alt_priority_mask
00014ea8 g     F .text	00000088 alt_ic_irq_enable
00010534 g     F .text	0000004c GenerateRandomCard
000178dc g     O .rwdata	00000008 alt_alarm_list
00014d78 g     F .text	00000060 _do_ctors
0001369c g     F .text	000000d8 close
000139e4 g     F .text	00000084 alt_load
00010eec g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08408c14 	ori	at,at,560
    jmp r1
   10008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	00101d00 	call	101d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defff904 	addi	sp,sp,-28
   10100:	dfc00615 	stw	ra,24(sp)
   10104:	df000515 	stw	fp,20(sp)
   10108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   1010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10110:	0005313a 	rdctl	r2,ipending
   10114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   10118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   1011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   10120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10124:	00800044 	movi	r2,1
   10128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1012c:	e0fffb17 	ldw	r3,-20(fp)
   10130:	e0bffc17 	ldw	r2,-16(fp)
   10134:	1884703a 	and	r2,r3,r2
   10138:	10001426 	beq	r2,zero,1018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1013c:	008000b4 	movhi	r2,2
   10140:	10a52e04 	addi	r2,r2,-27464
   10144:	e0fffd17 	ldw	r3,-12(fp)
   10148:	180690fa 	slli	r3,r3,3
   1014c:	10c5883a 	add	r2,r2,r3
   10150:	10c00017 	ldw	r3,0(r2)
   10154:	008000b4 	movhi	r2,2
   10158:	10a52e04 	addi	r2,r2,-27464
   1015c:	e13ffd17 	ldw	r4,-12(fp)
   10160:	200890fa 	slli	r4,r4,3
   10164:	1105883a 	add	r2,r2,r4
   10168:	10800104 	addi	r2,r2,4
   1016c:	10800017 	ldw	r2,0(r2)
   10170:	1009883a 	mov	r4,r2
   10174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   10178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   1017c:	0005313a 	rdctl	r2,ipending
   10180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   10184:	e0bfff17 	ldw	r2,-4(fp)
   10188:	00000706 	br	101a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   1018c:	e0bffc17 	ldw	r2,-16(fp)
   10190:	1085883a 	add	r2,r2,r2
   10194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   10198:	e0bffd17 	ldw	r2,-12(fp)
   1019c:	10800044 	addi	r2,r2,1
   101a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   101a4:	003fe106 	br	1012c <__alt_data_end+0xffff012c>

    active = alt_irq_pending ();
   101a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   101ac:	e0bffb17 	ldw	r2,-20(fp)
   101b0:	103fdb1e 	bne	r2,zero,10120 <__alt_data_end+0xffff0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   101b4:	0001883a 	nop
}
   101b8:	0001883a 	nop
   101bc:	e037883a 	mov	sp,fp
   101c0:	dfc00117 	ldw	ra,4(sp)
   101c4:	df000017 	ldw	fp,0(sp)
   101c8:	dec00204 	addi	sp,sp,8
   101cc:	f800283a 	ret

000101d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   101d0:	defffb04 	addi	sp,sp,-20
   101d4:	dfc00415 	stw	ra,16(sp)
   101d8:	df000315 	stw	fp,12(sp)
   101dc:	df000304 	addi	fp,sp,12
   101e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   101e4:	00bfffc4 	movi	r2,-1
   101e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   101ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   101f0:	d0a6c517 	ldw	r2,-25836(gp)
   101f4:	10000726 	beq	r2,zero,10214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   101f8:	d0a6c517 	ldw	r2,-25836(gp)
   101fc:	e0fffd17 	ldw	r3,-12(fp)
   10200:	e1bffe17 	ldw	r6,-8(fp)
   10204:	e17fff17 	ldw	r5,-4(fp)
   10208:	1809883a 	mov	r4,r3
   1020c:	103ee83a 	callr	r2
   10210:	00000206 	br	1021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   10218:	0005883a 	mov	r2,zero
}
   1021c:	e037883a 	mov	sp,fp
   10220:	dfc00117 	ldw	ra,4(sp)
   10224:	df000017 	ldw	fp,0(sp)
   10228:	dec00204 	addi	sp,sp,8
   1022c:	f800283a 	ret

Disassembly of section .text:

00010230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10230:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   10234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   10238:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1023c:	d6be2a14 	ori	gp,gp,63656
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10240:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10244:	10a4e214 	ori	r2,r2,37768

    movhi r3, %hi(__bss_end)
   10248:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1024c:	18e56e14 	ori	r3,r3,38328

    beq r2, r3, 1f
   10250:	10c00326 	beq	r2,r3,10260 <_start+0x30>

0:
    stw zero, (r2)
   10254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   1025c:	10fffd36 	bltu	r2,r3,10254 <__alt_data_end+0xffff0254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10260:	00139e40 	call	139e4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10264:	0013b800 	call	13b80 <alt_main>

00010268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10268:	003fff06 	br	10268 <__alt_data_end+0xffff0268>

0001026c <main>:
void stay(void); // KEY2
void submitBet(void); // KEY0


int main()
{
   1026c:	defff904 	addi	sp,sp,-28
   10270:	dfc00615 	stw	ra,24(sp)
   10274:	df000515 	stw	fp,20(sp)
   10278:	df000504 	addi	fp,sp,20
	int switch_data;
	int delay;
	int led_pattern=0x0;
   1027c:	e03ffb15 	stw	zero,-20(fp)
	alt_putstr("Ciao from Nios II!\n");
   10280:	01000074 	movhi	r4,1
   10284:	21177904 	addi	r4,r4,24036
   10288:	0013c440 	call	13c44 <alt_putstr>
	int card_val;
	printf("start program\n");
   1028c:	01000074 	movhi	r4,1
   10290:	21177e04 	addi	r4,r4,24056
   10294:	001096c0 	call	1096c <puts>




			char msg[10];
			card_val = GenerateRandomCard();
   10298:	00105340 	call	10534 <GenerateRandomCard>
   1029c:	e0bffc15 	stw	r2,-16(fp)
			itoa(card_val, msg, 10);
   102a0:	e0bffd04 	addi	r2,fp,-12
   102a4:	01800284 	movi	r6,10
   102a8:	100b883a 	mov	r5,r2
   102ac:	e13ffc17 	ldw	r4,-16(fp)
   102b0:	00108a80 	call	108a8 <itoa>
			alt_putstr(msg);
   102b4:	e0bffd04 	addi	r2,fp,-12
   102b8:	1009883a 	mov	r4,r2
   102bc:	0013c440 	call	13c44 <alt_putstr>
			alt_putstr("\n");
   102c0:	01000074 	movhi	r4,1
   102c4:	21178204 	addi	r4,r4,24072
   102c8:	0013c440 	call	13c44 <alt_putstr>

	}
   102cc:	003ff206 	br	10298 <__alt_data_end+0xffff0298>

000102d0 <init_GLED>:
}

/************************************************************
 Hardware Initialization
*************************************************************/ 
void init_GLED(void) {
   102d0:	deffff04 	addi	sp,sp,-4
   102d4:	df000015 	stw	fp,0(sp)
   102d8:	d839883a 	mov	fp,sp
	return;
   102dc:	0001883a 	nop
} 
   102e0:	e037883a 	mov	sp,fp
   102e4:	df000017 	ldw	fp,0(sp)
   102e8:	dec00104 	addi	sp,sp,4
   102ec:	f800283a 	ret

000102f0 <init_RLED>:
void init_RLED(void) {
   102f0:	deffff04 	addi	sp,sp,-4
   102f4:	df000015 	stw	fp,0(sp)
   102f8:	d839883a 	mov	fp,sp
	return;
   102fc:	0001883a 	nop
}
   10300:	e037883a 	mov	sp,fp
   10304:	df000017 	ldw	fp,0(sp)
   10308:	dec00104 	addi	sp,sp,4
   1030c:	f800283a 	ret

00010310 <init_SevenSeg>:
void init_SevenSeg(void) {
   10310:	deffff04 	addi	sp,sp,-4
   10314:	df000015 	stw	fp,0(sp)
   10318:	d839883a 	mov	fp,sp
	return;
   1031c:	0001883a 	nop
} 
   10320:	e037883a 	mov	sp,fp
   10324:	df000017 	ldw	fp,0(sp)
   10328:	dec00104 	addi	sp,sp,4
   1032c:	f800283a 	ret

00010330 <init_Switches>:
void init_Switches(void) {
   10330:	deffff04 	addi	sp,sp,-4
   10334:	df000015 	stw	fp,0(sp)
   10338:	d839883a 	mov	fp,sp
	return;
   1033c:	0001883a 	nop
}
   10340:	e037883a 	mov	sp,fp
   10344:	df000017 	ldw	fp,0(sp)
   10348:	dec00104 	addi	sp,sp,4
   1034c:	f800283a 	ret

00010350 <init_Keys>:
void init_Keys(void) {
   10350:	deffff04 	addi	sp,sp,-4
   10354:	df000015 	stw	fp,0(sp)
   10358:	d839883a 	mov	fp,sp
	return;
   1035c:	0001883a 	nop
}
   10360:	e037883a 	mov	sp,fp
   10364:	df000017 	ldw	fp,0(sp)
   10368:	dec00104 	addi	sp,sp,4
   1036c:	f800283a 	ret

00010370 <init_LCD>:
void init_LCD(void) {
   10370:	deffff04 	addi	sp,sp,-4
   10374:	df000015 	stw	fp,0(sp)
   10378:	d839883a 	mov	fp,sp
	return;
   1037c:	0001883a 	nop
}
   10380:	e037883a 	mov	sp,fp
   10384:	df000017 	ldw	fp,0(sp)
   10388:	dec00104 	addi	sp,sp,4
   1038c:	f800283a 	ret

00010390 <readSwitches>:


/************************************************************
 Game State
*************************************************************/ 
void readSwitches(void) {
   10390:	deffff04 	addi	sp,sp,-4
   10394:	df000015 	stw	fp,0(sp)
   10398:	d839883a 	mov	fp,sp
	// play if SW0 = 1
	// display instructions if SW1 = 1 
	// display bankroll if SW2 = 1
	return;
   1039c:	0001883a 	nop
}
   103a0:	e037883a 	mov	sp,fp
   103a4:	df000017 	ldw	fp,0(sp)
   103a8:	dec00104 	addi	sp,sp,4
   103ac:	f800283a 	ret

000103b0 <play>:
void play(void) {
   103b0:	defffe04 	addi	sp,sp,-8
   103b4:	dfc00115 	stw	ra,4(sp)
   103b8:	df000015 	stw	fp,0(sp)
   103bc:	d839883a 	mov	fp,sp
	gameInitialization(); 
   103c0:	00104080 	call	10408 <gameInitialization>
		// Player Turn
		// Player Bust or Dealer Turn
		// Dealer Bust or Compare Sums
		// Update Bankroll
		// Reset Deck or Begin Next Round
	}
   103c4:	003fff06 	br	103c4 <__alt_data_end+0xffff03c4>

000103c8 <dispInstructions>:
} 
void dispInstructions(void) {
   103c8:	deffff04 	addi	sp,sp,-4
   103cc:	df000015 	stw	fp,0(sp)
   103d0:	d839883a 	mov	fp,sp
	return;
   103d4:	0001883a 	nop
} 
   103d8:	e037883a 	mov	sp,fp
   103dc:	df000017 	ldw	fp,0(sp)
   103e0:	dec00104 	addi	sp,sp,4
   103e4:	f800283a 	ret

000103e8 <dispBankroll>:
void dispBankroll(void) {
   103e8:	deffff04 	addi	sp,sp,-4
   103ec:	df000015 	stw	fp,0(sp)
   103f0:	d839883a 	mov	fp,sp
	return;
   103f4:	0001883a 	nop
} 
   103f8:	e037883a 	mov	sp,fp
   103fc:	df000017 	ldw	fp,0(sp)
   10400:	dec00104 	addi	sp,sp,4
   10404:	f800283a 	ret

00010408 <gameInitialization>:


/************************************************************
 Game Flow
*************************************************************/ 
void gameInitialization(void) {
   10408:	deffff04 	addi	sp,sp,-4
   1040c:	df000015 	stw	fp,0(sp)
   10410:	d839883a 	mov	fp,sp
	bankRoll = 1000;
   10414:	0080fa04 	movi	r2,1000
   10418:	d0a00015 	stw	r2,-32768(gp)
	dealerSum = 0; 
   1041c:	d026b815 	stw	zero,-25888(gp)
	playerSum = 0; 
   10420:	d026b915 	stw	zero,-25884(gp)
	gamesPlayed = 0;  
   10424:	d026ba15 	stw	zero,-25880(gp)
}  
   10428:	0001883a 	nop
   1042c:	e037883a 	mov	sp,fp
   10430:	df000017 	ldw	fp,0(sp)
   10434:	dec00104 	addi	sp,sp,4
   10438:	f800283a 	ret

0001043c <playerBet>:
void playerBet(void) {
   1043c:	deffff04 	addi	sp,sp,-4
   10440:	df000015 	stw	fp,0(sp)
   10444:	d839883a 	mov	fp,sp
	// Read Switches once KEY0 is pressed
	return;
   10448:	0001883a 	nop
} 
   1044c:	e037883a 	mov	sp,fp
   10450:	df000017 	ldw	fp,0(sp)
   10454:	dec00104 	addi	sp,sp,4
   10458:	f800283a 	ret

0001045c <dealInitialCards>:
void dealInitialCards(void) {
   1045c:	deffff04 	addi	sp,sp,-4
   10460:	df000015 	stw	fp,0(sp)
   10464:	d839883a 	mov	fp,sp
	// Generate Dealer First Card and Player Cards
	// Update and Display Dealer Sum
	// Update and Display Player Sum
	return;
   10468:	0001883a 	nop
} 
   1046c:	e037883a 	mov	sp,fp
   10470:	df000017 	ldw	fp,0(sp)
   10474:	dec00104 	addi	sp,sp,4
   10478:	f800283a 	ret

0001047c <playerTurn>:
void playerTurn(void) {
   1047c:	deffff04 	addi	sp,sp,-4
   10480:	df000015 	stw	fp,0(sp)
   10484:	d839883a 	mov	fp,sp
	// Wait for Key Press (hit or stay)
	// Calculate
	// Bust?
	// Wait for Key Press...
	return;
   10488:	0001883a 	nop
} 
   1048c:	e037883a 	mov	sp,fp
   10490:	df000017 	ldw	fp,0(sp)
   10494:	dec00104 	addi	sp,sp,4
   10498:	f800283a 	ret

0001049c <playerBust>:
int playerBust(int playerSum) {
   1049c:	defffd04 	addi	sp,sp,-12
   104a0:	df000215 	stw	fp,8(sp)
   104a4:	df000204 	addi	fp,sp,8
   104a8:	e13fff15 	stw	r4,-4(fp)
	// Check if Player sum <= 21
	int busted = 0;
   104ac:	e03ffe15 	stw	zero,-8(fp)
	return busted;
   104b0:	e0bffe17 	ldw	r2,-8(fp)
} 
   104b4:	e037883a 	mov	sp,fp
   104b8:	df000017 	ldw	fp,0(sp)
   104bc:	dec00104 	addi	sp,sp,4
   104c0:	f800283a 	ret

000104c4 <dealerTurn>:
void dealerTurn(void) {
   104c4:	deffff04 	addi	sp,sp,-4
   104c8:	df000015 	stw	fp,0(sp)
   104cc:	d839883a 	mov	fp,sp
	// Automatic cycle
	// Implement wait time for each card
	return; 
   104d0:	0001883a 	nop
} 
   104d4:	e037883a 	mov	sp,fp
   104d8:	df000017 	ldw	fp,0(sp)
   104dc:	dec00104 	addi	sp,sp,4
   104e0:	f800283a 	ret

000104e4 <dealerBust>:
int dealerBust(int dealerSum) {
   104e4:	defffd04 	addi	sp,sp,-12
   104e8:	df000215 	stw	fp,8(sp)
   104ec:	df000204 	addi	fp,sp,8
   104f0:	e13fff15 	stw	r4,-4(fp)
	// Check if Dealer sum <= 21
	int busted = 0;
   104f4:	e03ffe15 	stw	zero,-8(fp)
	return busted;
   104f8:	e0bffe17 	ldw	r2,-8(fp)
} 
   104fc:	e037883a 	mov	sp,fp
   10500:	df000017 	ldw	fp,0(sp)
   10504:	dec00104 	addi	sp,sp,4
   10508:	f800283a 	ret

0001050c <updateBankroll>:
void updateBankroll(int busted, int playerBet) {
   1050c:	defffd04 	addi	sp,sp,-12
   10510:	df000215 	stw	fp,8(sp)
   10514:	df000204 	addi	fp,sp,8
   10518:	e13ffe15 	stw	r4,-8(fp)
   1051c:	e17fff15 	stw	r5,-4(fp)
	return; 
   10520:	0001883a 	nop
} 
   10524:	e037883a 	mov	sp,fp
   10528:	df000017 	ldw	fp,0(sp)
   1052c:	dec00104 	addi	sp,sp,4
   10530:	f800283a 	ret

00010534 <GenerateRandomCard>:


/************************************************************
 Game Functionality
*************************************************************/ 
int GenerateRandomCard(void) {
   10534:	defffd04 	addi	sp,sp,-12
   10538:	dfc00215 	stw	ra,8(sp)
   1053c:	df000115 	stw	fp,4(sp)
   10540:	df000104 	addi	fp,sp,4
	int random_num = IORD_ALTERA_AVALON_PIO_DATA(RANDOMS_BASE);
   10544:	008000b4 	movhi	r2,2
   10548:	10840004 	addi	r2,r2,4096
   1054c:	10800037 	ldwio	r2,0(r2)
   10550:	e0bfff15 	stw	r2,-4(fp)
	return abs(random_num %52);
   10554:	e0bfff17 	ldw	r2,-4(fp)
   10558:	01400d04 	movi	r5,52
   1055c:	1009883a 	mov	r4,r2
   10560:	00107100 	call	10710 <__modsi3>
   10564:	1000010e 	bge	r2,zero,1056c <GenerateRandomCard+0x38>
   10568:	0085c83a 	sub	r2,zero,r2
} 
   1056c:	e037883a 	mov	sp,fp
   10570:	dfc00117 	ldw	ra,4(sp)
   10574:	df000017 	ldw	fp,0(sp)
   10578:	dec00204 	addi	sp,sp,8
   1057c:	f800283a 	ret

00010580 <updateDeck>:
void updateDeck(void) {
   10580:	deffff04 	addi	sp,sp,-4
   10584:	df000015 	stw	fp,0(sp)
   10588:	d839883a 	mov	fp,sp
	// set 0 -> 1 in cardDeck array
	return;
   1058c:	0001883a 	nop
} 
   10590:	e037883a 	mov	sp,fp
   10594:	df000017 	ldw	fp,0(sp)
   10598:	dec00104 	addi	sp,sp,4
   1059c:	f800283a 	ret

000105a0 <resetDeck>:
void resetDeck(void) {
   105a0:	deffff04 	addi	sp,sp,-4
   105a4:	df000015 	stw	fp,0(sp)
   105a8:	d839883a 	mov	fp,sp
	// set all indicies of cardDeck array back to 0
	return;
   105ac:	0001883a 	nop
} 
   105b0:	e037883a 	mov	sp,fp
   105b4:	df000017 	ldw	fp,0(sp)
   105b8:	dec00104 	addi	sp,sp,4
   105bc:	f800283a 	ret

000105c0 <displayPlayerSum>:
void displayPlayerSum(int playerSum) {
   105c0:	defffe04 	addi	sp,sp,-8
   105c4:	df000115 	stw	fp,4(sp)
   105c8:	df000104 	addi	fp,sp,4
   105cc:	e13fff15 	stw	r4,-4(fp)
	// display sum to HEX7 and HEX6 on seven seg display
	return;
   105d0:	0001883a 	nop
} 
   105d4:	e037883a 	mov	sp,fp
   105d8:	df000017 	ldw	fp,0(sp)
   105dc:	dec00104 	addi	sp,sp,4
   105e0:	f800283a 	ret

000105e4 <displayDealerSum>:
void displayDealerSum(int dealerSum) {
   105e4:	defffe04 	addi	sp,sp,-8
   105e8:	df000115 	stw	fp,4(sp)
   105ec:	df000104 	addi	fp,sp,4
   105f0:	e13fff15 	stw	r4,-4(fp)
	// display sum to HEX5 and HEX4 on seven seg display
	return;
   105f4:	0001883a 	nop
} 
   105f8:	e037883a 	mov	sp,fp
   105fc:	df000017 	ldw	fp,0(sp)
   10600:	dec00104 	addi	sp,sp,4
   10604:	f800283a 	ret

00010608 <displayResult>:
void displayResult(int result) {
   10608:	defffe04 	addi	sp,sp,-8
   1060c:	df000115 	stw	fp,4(sp)
   10610:	df000104 	addi	fp,sp,4
   10614:	e13fff15 	stw	r4,-4(fp)
	// display message on LCD
	return;
   10618:	0001883a 	nop
}
   1061c:	e037883a 	mov	sp,fp
   10620:	df000017 	ldw	fp,0(sp)
   10624:	dec00104 	addi	sp,sp,4
   10628:	f800283a 	ret

0001062c <hit>:


/************************************************************
 Player Actions
*************************************************************/ 
void hit(void) {
   1062c:	deffff04 	addi	sp,sp,-4
   10630:	df000015 	stw	fp,0(sp)
   10634:	d839883a 	mov	fp,sp
	// Generate Random Card
	// Update Deck
	// Update playerSum
	return;
   10638:	0001883a 	nop
} 
   1063c:	e037883a 	mov	sp,fp
   10640:	df000017 	ldw	fp,0(sp)
   10644:	dec00104 	addi	sp,sp,4
   10648:	f800283a 	ret

0001064c <stay>:
void stay(void) {
   1064c:	deffff04 	addi	sp,sp,-4
   10650:	df000015 	stw	fp,0(sp)
   10654:	d839883a 	mov	fp,sp
	// Dealer Turn
	return;
   10658:	0001883a 	nop
}
   1065c:	e037883a 	mov	sp,fp
   10660:	df000017 	ldw	fp,0(sp)
   10664:	dec00104 	addi	sp,sp,4
   10668:	f800283a 	ret

0001066c <submitBet>:
void submitBet(void) {
   1066c:	deffff04 	addi	sp,sp,-4
   10670:	df000015 	stw	fp,0(sp)
   10674:	d839883a 	mov	fp,sp
	// ReadSwitches
	// KEY0 Press for Enter
	return;
   10678:	0001883a 	nop
}
   1067c:	e037883a 	mov	sp,fp
   10680:	df000017 	ldw	fp,0(sp)
   10684:	dec00104 	addi	sp,sp,4
   10688:	f800283a 	ret

0001068c <__divsi3>:
   1068c:	20001b16 	blt	r4,zero,106fc <__divsi3+0x70>
   10690:	000f883a 	mov	r7,zero
   10694:	28001616 	blt	r5,zero,106f0 <__divsi3+0x64>
   10698:	200d883a 	mov	r6,r4
   1069c:	29001a2e 	bgeu	r5,r4,10708 <__divsi3+0x7c>
   106a0:	00800804 	movi	r2,32
   106a4:	00c00044 	movi	r3,1
   106a8:	00000106 	br	106b0 <__divsi3+0x24>
   106ac:	10000d26 	beq	r2,zero,106e4 <__divsi3+0x58>
   106b0:	294b883a 	add	r5,r5,r5
   106b4:	10bfffc4 	addi	r2,r2,-1
   106b8:	18c7883a 	add	r3,r3,r3
   106bc:	293ffb36 	bltu	r5,r4,106ac <__alt_data_end+0xffff06ac>
   106c0:	0005883a 	mov	r2,zero
   106c4:	18000726 	beq	r3,zero,106e4 <__divsi3+0x58>
   106c8:	0005883a 	mov	r2,zero
   106cc:	31400236 	bltu	r6,r5,106d8 <__divsi3+0x4c>
   106d0:	314dc83a 	sub	r6,r6,r5
   106d4:	10c4b03a 	or	r2,r2,r3
   106d8:	1806d07a 	srli	r3,r3,1
   106dc:	280ad07a 	srli	r5,r5,1
   106e0:	183ffa1e 	bne	r3,zero,106cc <__alt_data_end+0xffff06cc>
   106e4:	38000126 	beq	r7,zero,106ec <__divsi3+0x60>
   106e8:	0085c83a 	sub	r2,zero,r2
   106ec:	f800283a 	ret
   106f0:	014bc83a 	sub	r5,zero,r5
   106f4:	39c0005c 	xori	r7,r7,1
   106f8:	003fe706 	br	10698 <__alt_data_end+0xffff0698>
   106fc:	0109c83a 	sub	r4,zero,r4
   10700:	01c00044 	movi	r7,1
   10704:	003fe306 	br	10694 <__alt_data_end+0xffff0694>
   10708:	00c00044 	movi	r3,1
   1070c:	003fee06 	br	106c8 <__alt_data_end+0xffff06c8>

00010710 <__modsi3>:
   10710:	20001716 	blt	r4,zero,10770 <__modsi3+0x60>
   10714:	000f883a 	mov	r7,zero
   10718:	2005883a 	mov	r2,r4
   1071c:	28001216 	blt	r5,zero,10768 <__modsi3+0x58>
   10720:	2900162e 	bgeu	r5,r4,1077c <__modsi3+0x6c>
   10724:	01800804 	movi	r6,32
   10728:	00c00044 	movi	r3,1
   1072c:	00000106 	br	10734 <__modsi3+0x24>
   10730:	30000a26 	beq	r6,zero,1075c <__modsi3+0x4c>
   10734:	294b883a 	add	r5,r5,r5
   10738:	31bfffc4 	addi	r6,r6,-1
   1073c:	18c7883a 	add	r3,r3,r3
   10740:	293ffb36 	bltu	r5,r4,10730 <__alt_data_end+0xffff0730>
   10744:	18000526 	beq	r3,zero,1075c <__modsi3+0x4c>
   10748:	1806d07a 	srli	r3,r3,1
   1074c:	11400136 	bltu	r2,r5,10754 <__modsi3+0x44>
   10750:	1145c83a 	sub	r2,r2,r5
   10754:	280ad07a 	srli	r5,r5,1
   10758:	183ffb1e 	bne	r3,zero,10748 <__alt_data_end+0xffff0748>
   1075c:	38000126 	beq	r7,zero,10764 <__modsi3+0x54>
   10760:	0085c83a 	sub	r2,zero,r2
   10764:	f800283a 	ret
   10768:	014bc83a 	sub	r5,zero,r5
   1076c:	003fec06 	br	10720 <__alt_data_end+0xffff0720>
   10770:	0109c83a 	sub	r4,zero,r4
   10774:	01c00044 	movi	r7,1
   10778:	003fe706 	br	10718 <__alt_data_end+0xffff0718>
   1077c:	00c00044 	movi	r3,1
   10780:	003ff106 	br	10748 <__alt_data_end+0xffff0748>

00010784 <__udivsi3>:
   10784:	200d883a 	mov	r6,r4
   10788:	2900152e 	bgeu	r5,r4,107e0 <__udivsi3+0x5c>
   1078c:	28001416 	blt	r5,zero,107e0 <__udivsi3+0x5c>
   10790:	00800804 	movi	r2,32
   10794:	00c00044 	movi	r3,1
   10798:	00000206 	br	107a4 <__udivsi3+0x20>
   1079c:	10000e26 	beq	r2,zero,107d8 <__udivsi3+0x54>
   107a0:	28000516 	blt	r5,zero,107b8 <__udivsi3+0x34>
   107a4:	294b883a 	add	r5,r5,r5
   107a8:	10bfffc4 	addi	r2,r2,-1
   107ac:	18c7883a 	add	r3,r3,r3
   107b0:	293ffa36 	bltu	r5,r4,1079c <__alt_data_end+0xffff079c>
   107b4:	18000826 	beq	r3,zero,107d8 <__udivsi3+0x54>
   107b8:	0005883a 	mov	r2,zero
   107bc:	31400236 	bltu	r6,r5,107c8 <__udivsi3+0x44>
   107c0:	314dc83a 	sub	r6,r6,r5
   107c4:	10c4b03a 	or	r2,r2,r3
   107c8:	1806d07a 	srli	r3,r3,1
   107cc:	280ad07a 	srli	r5,r5,1
   107d0:	183ffa1e 	bne	r3,zero,107bc <__alt_data_end+0xffff07bc>
   107d4:	f800283a 	ret
   107d8:	0005883a 	mov	r2,zero
   107dc:	f800283a 	ret
   107e0:	00c00044 	movi	r3,1
   107e4:	003ff406 	br	107b8 <__alt_data_end+0xffff07b8>

000107e8 <__umodsi3>:
   107e8:	2005883a 	mov	r2,r4
   107ec:	2900122e 	bgeu	r5,r4,10838 <__umodsi3+0x50>
   107f0:	28001116 	blt	r5,zero,10838 <__umodsi3+0x50>
   107f4:	01800804 	movi	r6,32
   107f8:	00c00044 	movi	r3,1
   107fc:	00000206 	br	10808 <__umodsi3+0x20>
   10800:	30000c26 	beq	r6,zero,10834 <__umodsi3+0x4c>
   10804:	28000516 	blt	r5,zero,1081c <__umodsi3+0x34>
   10808:	294b883a 	add	r5,r5,r5
   1080c:	31bfffc4 	addi	r6,r6,-1
   10810:	18c7883a 	add	r3,r3,r3
   10814:	293ffa36 	bltu	r5,r4,10800 <__alt_data_end+0xffff0800>
   10818:	18000626 	beq	r3,zero,10834 <__umodsi3+0x4c>
   1081c:	1806d07a 	srli	r3,r3,1
   10820:	11400136 	bltu	r2,r5,10828 <__umodsi3+0x40>
   10824:	1145c83a 	sub	r2,r2,r5
   10828:	280ad07a 	srli	r5,r5,1
   1082c:	183ffb1e 	bne	r3,zero,1081c <__alt_data_end+0xffff081c>
   10830:	f800283a 	ret
   10834:	f800283a 	ret
   10838:	00c00044 	movi	r3,1
   1083c:	003ff706 	br	1081c <__alt_data_end+0xffff081c>

00010840 <__itoa>:
   10840:	30bfff84 	addi	r2,r6,-2
   10844:	00c00884 	movi	r3,34
   10848:	18801436 	bltu	r3,r2,1089c <__itoa+0x5c>
   1084c:	defffe04 	addi	sp,sp,-8
   10850:	dfc00115 	stw	ra,4(sp)
   10854:	dc000015 	stw	r16,0(sp)
   10858:	00800284 	movi	r2,10
   1085c:	30800926 	beq	r6,r2,10884 <__itoa+0x44>
   10860:	0005883a 	mov	r2,zero
   10864:	2821883a 	mov	r16,r5
   10868:	288b883a 	add	r5,r5,r2
   1086c:	0010a180 	call	10a18 <__utoa>
   10870:	8005883a 	mov	r2,r16
   10874:	dfc00117 	ldw	ra,4(sp)
   10878:	dc000017 	ldw	r16,0(sp)
   1087c:	dec00204 	addi	sp,sp,8
   10880:	f800283a 	ret
   10884:	203ff60e 	bge	r4,zero,10860 <__alt_data_end+0xffff0860>
   10888:	00800b44 	movi	r2,45
   1088c:	28800005 	stb	r2,0(r5)
   10890:	0109c83a 	sub	r4,zero,r4
   10894:	00800044 	movi	r2,1
   10898:	003ff206 	br	10864 <__alt_data_end+0xffff0864>
   1089c:	28000005 	stb	zero,0(r5)
   108a0:	0005883a 	mov	r2,zero
   108a4:	f800283a 	ret

000108a8 <itoa>:
   108a8:	00108401 	jmpi	10840 <__itoa>

000108ac <_puts_r>:
   108ac:	defff604 	addi	sp,sp,-40
   108b0:	dc000715 	stw	r16,28(sp)
   108b4:	2021883a 	mov	r16,r4
   108b8:	2809883a 	mov	r4,r5
   108bc:	dc400815 	stw	r17,32(sp)
   108c0:	dfc00915 	stw	ra,36(sp)
   108c4:	2823883a 	mov	r17,r5
   108c8:	00109800 	call	10980 <strlen>
   108cc:	10c00044 	addi	r3,r2,1
   108d0:	d8800115 	stw	r2,4(sp)
   108d4:	00800074 	movhi	r2,1
   108d8:	10978304 	addi	r2,r2,24076
   108dc:	d8800215 	stw	r2,8(sp)
   108e0:	00800044 	movi	r2,1
   108e4:	d8800315 	stw	r2,12(sp)
   108e8:	00800084 	movi	r2,2
   108ec:	dc400015 	stw	r17,0(sp)
   108f0:	d8c00615 	stw	r3,24(sp)
   108f4:	dec00415 	stw	sp,16(sp)
   108f8:	d8800515 	stw	r2,20(sp)
   108fc:	80000226 	beq	r16,zero,10908 <_puts_r+0x5c>
   10900:	80800e17 	ldw	r2,56(r16)
   10904:	10001426 	beq	r2,zero,10958 <_puts_r+0xac>
   10908:	81400217 	ldw	r5,8(r16)
   1090c:	2880030b 	ldhu	r2,12(r5)
   10910:	10c8000c 	andi	r3,r2,8192
   10914:	1800061e 	bne	r3,zero,10930 <_puts_r+0x84>
   10918:	29001917 	ldw	r4,100(r5)
   1091c:	00f7ffc4 	movi	r3,-8193
   10920:	10880014 	ori	r2,r2,8192
   10924:	20c6703a 	and	r3,r4,r3
   10928:	2880030d 	sth	r2,12(r5)
   1092c:	28c01915 	stw	r3,100(r5)
   10930:	d9800404 	addi	r6,sp,16
   10934:	8009883a 	mov	r4,r16
   10938:	0010f240 	call	10f24 <__sfvwrite_r>
   1093c:	1000091e 	bne	r2,zero,10964 <_puts_r+0xb8>
   10940:	00800284 	movi	r2,10
   10944:	dfc00917 	ldw	ra,36(sp)
   10948:	dc400817 	ldw	r17,32(sp)
   1094c:	dc000717 	ldw	r16,28(sp)
   10950:	dec00a04 	addi	sp,sp,40
   10954:	f800283a 	ret
   10958:	8009883a 	mov	r4,r16
   1095c:	0010ed40 	call	10ed4 <__sinit>
   10960:	003fe906 	br	10908 <__alt_data_end+0xffff0908>
   10964:	00bfffc4 	movi	r2,-1
   10968:	003ff606 	br	10944 <__alt_data_end+0xffff0944>

0001096c <puts>:
   1096c:	00800074 	movhi	r2,1
   10970:	109e2c04 	addi	r2,r2,30896
   10974:	200b883a 	mov	r5,r4
   10978:	11000017 	ldw	r4,0(r2)
   1097c:	00108ac1 	jmpi	108ac <_puts_r>

00010980 <strlen>:
   10980:	208000cc 	andi	r2,r4,3
   10984:	10002026 	beq	r2,zero,10a08 <strlen+0x88>
   10988:	20800007 	ldb	r2,0(r4)
   1098c:	10002026 	beq	r2,zero,10a10 <strlen+0x90>
   10990:	2005883a 	mov	r2,r4
   10994:	00000206 	br	109a0 <strlen+0x20>
   10998:	10c00007 	ldb	r3,0(r2)
   1099c:	18001826 	beq	r3,zero,10a00 <strlen+0x80>
   109a0:	10800044 	addi	r2,r2,1
   109a4:	10c000cc 	andi	r3,r2,3
   109a8:	183ffb1e 	bne	r3,zero,10998 <__alt_data_end+0xffff0998>
   109ac:	10c00017 	ldw	r3,0(r2)
   109b0:	01ffbff4 	movhi	r7,65279
   109b4:	39ffbfc4 	addi	r7,r7,-257
   109b8:	00ca303a 	nor	r5,zero,r3
   109bc:	01a02074 	movhi	r6,32897
   109c0:	19c7883a 	add	r3,r3,r7
   109c4:	31a02004 	addi	r6,r6,-32640
   109c8:	1946703a 	and	r3,r3,r5
   109cc:	1986703a 	and	r3,r3,r6
   109d0:	1800091e 	bne	r3,zero,109f8 <strlen+0x78>
   109d4:	10800104 	addi	r2,r2,4
   109d8:	10c00017 	ldw	r3,0(r2)
   109dc:	19cb883a 	add	r5,r3,r7
   109e0:	00c6303a 	nor	r3,zero,r3
   109e4:	28c6703a 	and	r3,r5,r3
   109e8:	1986703a 	and	r3,r3,r6
   109ec:	183ff926 	beq	r3,zero,109d4 <__alt_data_end+0xffff09d4>
   109f0:	00000106 	br	109f8 <strlen+0x78>
   109f4:	10800044 	addi	r2,r2,1
   109f8:	10c00007 	ldb	r3,0(r2)
   109fc:	183ffd1e 	bne	r3,zero,109f4 <__alt_data_end+0xffff09f4>
   10a00:	1105c83a 	sub	r2,r2,r4
   10a04:	f800283a 	ret
   10a08:	2005883a 	mov	r2,r4
   10a0c:	003fe706 	br	109ac <__alt_data_end+0xffff09ac>
   10a10:	0005883a 	mov	r2,zero
   10a14:	f800283a 	ret

00010a18 <__utoa>:
   10a18:	008cccb4 	movhi	r2,13106
   10a1c:	defff004 	addi	sp,sp,-64
   10a20:	108c4c04 	addi	r2,r2,12592
   10a24:	d8800015 	stw	r2,0(sp)
   10a28:	008dcdb4 	movhi	r2,14134
   10a2c:	108d4d04 	addi	r2,r2,13620
   10a30:	d8800115 	stw	r2,4(sp)
   10a34:	00989874 	movhi	r2,25185
   10a38:	108e4e04 	addi	r2,r2,14648
   10a3c:	d8800215 	stw	r2,8(sp)
   10a40:	00999974 	movhi	r2,26213
   10a44:	109918c4 	addi	r2,r2,25699
   10a48:	d8800315 	stw	r2,12(sp)
   10a4c:	009a9a74 	movhi	r2,27241
   10a50:	109a19c4 	addi	r2,r2,26727
   10a54:	d8800415 	stw	r2,16(sp)
   10a58:	009b9b74 	movhi	r2,28269
   10a5c:	109b1ac4 	addi	r2,r2,27755
   10a60:	d8800515 	stw	r2,20(sp)
   10a64:	009c9c74 	movhi	r2,29297
   10a68:	109c1bc4 	addi	r2,r2,28783
   10a6c:	d8800615 	stw	r2,24(sp)
   10a70:	009d9d74 	movhi	r2,30325
   10a74:	109d1cc4 	addi	r2,r2,29811
   10a78:	d8800715 	stw	r2,28(sp)
   10a7c:	009e9e74 	movhi	r2,31353
   10a80:	109e1dc4 	addi	r2,r2,30839
   10a84:	dd000e15 	stw	r20,56(sp)
   10a88:	d8800815 	stw	r2,32(sp)
   10a8c:	dfc00f15 	stw	ra,60(sp)
   10a90:	dcc00d15 	stw	r19,52(sp)
   10a94:	dc800c15 	stw	r18,48(sp)
   10a98:	dc400b15 	stw	r17,44(sp)
   10a9c:	dc000a15 	stw	r16,40(sp)
   10aa0:	d8000905 	stb	zero,36(sp)
   10aa4:	30bfff84 	addi	r2,r6,-2
   10aa8:	00c00884 	movi	r3,34
   10aac:	2829883a 	mov	r20,r5
   10ab0:	18802c36 	bltu	r3,r2,10b64 <__utoa+0x14c>
   10ab4:	3027883a 	mov	r19,r6
   10ab8:	2023883a 	mov	r17,r4
   10abc:	2825883a 	mov	r18,r5
   10ac0:	0021883a 	mov	r16,zero
   10ac4:	00000106 	br	10acc <__utoa+0xb4>
   10ac8:	1821883a 	mov	r16,r3
   10acc:	8809883a 	mov	r4,r17
   10ad0:	980b883a 	mov	r5,r19
   10ad4:	00107e80 	call	107e8 <__umodsi3>
   10ad8:	d885883a 	add	r2,sp,r2
   10adc:	10800003 	ldbu	r2,0(r2)
   10ae0:	8809883a 	mov	r4,r17
   10ae4:	980b883a 	mov	r5,r19
   10ae8:	90800005 	stb	r2,0(r18)
   10aec:	00107840 	call	10784 <__udivsi3>
   10af0:	1023883a 	mov	r17,r2
   10af4:	80c00044 	addi	r3,r16,1
   10af8:	94800044 	addi	r18,r18,1
   10afc:	103ff21e 	bne	r2,zero,10ac8 <__alt_data_end+0xffff0ac8>
   10b00:	a0c7883a 	add	r3,r20,r3
   10b04:	18000005 	stb	zero,0(r3)
   10b08:	80000d26 	beq	r16,zero,10b40 <__utoa+0x128>
   10b0c:	01c00044 	movi	r7,1
   10b10:	a409883a 	add	r4,r20,r16
   10b14:	a007883a 	mov	r3,r20
   10b18:	3d0fc83a 	sub	r7,r7,r20
   10b1c:	21800003 	ldbu	r6,0(r4)
   10b20:	19400003 	ldbu	r5,0(r3)
   10b24:	38c5883a 	add	r2,r7,r3
   10b28:	19800005 	stb	r6,0(r3)
   10b2c:	21400005 	stb	r5,0(r4)
   10b30:	843fffc4 	addi	r16,r16,-1
   10b34:	18c00044 	addi	r3,r3,1
   10b38:	213fffc4 	addi	r4,r4,-1
   10b3c:	143ff716 	blt	r2,r16,10b1c <__alt_data_end+0xffff0b1c>
   10b40:	a005883a 	mov	r2,r20
   10b44:	dfc00f17 	ldw	ra,60(sp)
   10b48:	dd000e17 	ldw	r20,56(sp)
   10b4c:	dcc00d17 	ldw	r19,52(sp)
   10b50:	dc800c17 	ldw	r18,48(sp)
   10b54:	dc400b17 	ldw	r17,44(sp)
   10b58:	dc000a17 	ldw	r16,40(sp)
   10b5c:	dec01004 	addi	sp,sp,64
   10b60:	f800283a 	ret
   10b64:	28000005 	stb	zero,0(r5)
   10b68:	0005883a 	mov	r2,zero
   10b6c:	003ff506 	br	10b44 <__alt_data_end+0xffff0b44>

00010b70 <utoa>:
   10b70:	0010a181 	jmpi	10a18 <__utoa>

00010b74 <__fp_unlock>:
   10b74:	0005883a 	mov	r2,zero
   10b78:	f800283a 	ret

00010b7c <_cleanup_r>:
   10b7c:	01400074 	movhi	r5,1
   10b80:	294acb04 	addi	r5,r5,11052
   10b84:	00114b01 	jmpi	114b0 <_fwalk_reent>

00010b88 <__sinit.part.1>:
   10b88:	defff704 	addi	sp,sp,-36
   10b8c:	00c00074 	movhi	r3,1
   10b90:	dfc00815 	stw	ra,32(sp)
   10b94:	ddc00715 	stw	r23,28(sp)
   10b98:	dd800615 	stw	r22,24(sp)
   10b9c:	dd400515 	stw	r21,20(sp)
   10ba0:	dd000415 	stw	r20,16(sp)
   10ba4:	dcc00315 	stw	r19,12(sp)
   10ba8:	dc800215 	stw	r18,8(sp)
   10bac:	dc400115 	stw	r17,4(sp)
   10bb0:	dc000015 	stw	r16,0(sp)
   10bb4:	18c2df04 	addi	r3,r3,2940
   10bb8:	24000117 	ldw	r16,4(r4)
   10bbc:	20c00f15 	stw	r3,60(r4)
   10bc0:	2080bb04 	addi	r2,r4,748
   10bc4:	00c000c4 	movi	r3,3
   10bc8:	20c0b915 	stw	r3,740(r4)
   10bcc:	2080ba15 	stw	r2,744(r4)
   10bd0:	2000b815 	stw	zero,736(r4)
   10bd4:	05c00204 	movi	r23,8
   10bd8:	00800104 	movi	r2,4
   10bdc:	2025883a 	mov	r18,r4
   10be0:	b80d883a 	mov	r6,r23
   10be4:	81001704 	addi	r4,r16,92
   10be8:	000b883a 	mov	r5,zero
   10bec:	80000015 	stw	zero,0(r16)
   10bf0:	80000115 	stw	zero,4(r16)
   10bf4:	80000215 	stw	zero,8(r16)
   10bf8:	8080030d 	sth	r2,12(r16)
   10bfc:	80001915 	stw	zero,100(r16)
   10c00:	8000038d 	sth	zero,14(r16)
   10c04:	80000415 	stw	zero,16(r16)
   10c08:	80000515 	stw	zero,20(r16)
   10c0c:	80000615 	stw	zero,24(r16)
   10c10:	00121080 	call	12108 <memset>
   10c14:	05800074 	movhi	r22,1
   10c18:	94400217 	ldw	r17,8(r18)
   10c1c:	05400074 	movhi	r21,1
   10c20:	05000074 	movhi	r20,1
   10c24:	04c00074 	movhi	r19,1
   10c28:	b589fa04 	addi	r22,r22,10216
   10c2c:	ad4a1104 	addi	r21,r21,10308
   10c30:	a50a3004 	addi	r20,r20,10432
   10c34:	9cca4704 	addi	r19,r19,10524
   10c38:	85800815 	stw	r22,32(r16)
   10c3c:	85400915 	stw	r21,36(r16)
   10c40:	85000a15 	stw	r20,40(r16)
   10c44:	84c00b15 	stw	r19,44(r16)
   10c48:	84000715 	stw	r16,28(r16)
   10c4c:	00800284 	movi	r2,10
   10c50:	8880030d 	sth	r2,12(r17)
   10c54:	00800044 	movi	r2,1
   10c58:	b80d883a 	mov	r6,r23
   10c5c:	89001704 	addi	r4,r17,92
   10c60:	000b883a 	mov	r5,zero
   10c64:	88000015 	stw	zero,0(r17)
   10c68:	88000115 	stw	zero,4(r17)
   10c6c:	88000215 	stw	zero,8(r17)
   10c70:	88001915 	stw	zero,100(r17)
   10c74:	8880038d 	sth	r2,14(r17)
   10c78:	88000415 	stw	zero,16(r17)
   10c7c:	88000515 	stw	zero,20(r17)
   10c80:	88000615 	stw	zero,24(r17)
   10c84:	00121080 	call	12108 <memset>
   10c88:	94000317 	ldw	r16,12(r18)
   10c8c:	00800484 	movi	r2,18
   10c90:	8c400715 	stw	r17,28(r17)
   10c94:	8d800815 	stw	r22,32(r17)
   10c98:	8d400915 	stw	r21,36(r17)
   10c9c:	8d000a15 	stw	r20,40(r17)
   10ca0:	8cc00b15 	stw	r19,44(r17)
   10ca4:	8080030d 	sth	r2,12(r16)
   10ca8:	00800084 	movi	r2,2
   10cac:	80000015 	stw	zero,0(r16)
   10cb0:	80000115 	stw	zero,4(r16)
   10cb4:	80000215 	stw	zero,8(r16)
   10cb8:	80001915 	stw	zero,100(r16)
   10cbc:	8080038d 	sth	r2,14(r16)
   10cc0:	80000415 	stw	zero,16(r16)
   10cc4:	80000515 	stw	zero,20(r16)
   10cc8:	80000615 	stw	zero,24(r16)
   10ccc:	b80d883a 	mov	r6,r23
   10cd0:	000b883a 	mov	r5,zero
   10cd4:	81001704 	addi	r4,r16,92
   10cd8:	00121080 	call	12108 <memset>
   10cdc:	00800044 	movi	r2,1
   10ce0:	84000715 	stw	r16,28(r16)
   10ce4:	85800815 	stw	r22,32(r16)
   10ce8:	85400915 	stw	r21,36(r16)
   10cec:	85000a15 	stw	r20,40(r16)
   10cf0:	84c00b15 	stw	r19,44(r16)
   10cf4:	90800e15 	stw	r2,56(r18)
   10cf8:	dfc00817 	ldw	ra,32(sp)
   10cfc:	ddc00717 	ldw	r23,28(sp)
   10d00:	dd800617 	ldw	r22,24(sp)
   10d04:	dd400517 	ldw	r21,20(sp)
   10d08:	dd000417 	ldw	r20,16(sp)
   10d0c:	dcc00317 	ldw	r19,12(sp)
   10d10:	dc800217 	ldw	r18,8(sp)
   10d14:	dc400117 	ldw	r17,4(sp)
   10d18:	dc000017 	ldw	r16,0(sp)
   10d1c:	dec00904 	addi	sp,sp,36
   10d20:	f800283a 	ret

00010d24 <__fp_lock>:
   10d24:	0005883a 	mov	r2,zero
   10d28:	f800283a 	ret

00010d2c <__sfmoreglue>:
   10d2c:	defffc04 	addi	sp,sp,-16
   10d30:	dc800215 	stw	r18,8(sp)
   10d34:	2825883a 	mov	r18,r5
   10d38:	dc000015 	stw	r16,0(sp)
   10d3c:	01401a04 	movi	r5,104
   10d40:	2021883a 	mov	r16,r4
   10d44:	913fffc4 	addi	r4,r18,-1
   10d48:	dfc00315 	stw	ra,12(sp)
   10d4c:	dc400115 	stw	r17,4(sp)
   10d50:	00136380 	call	13638 <__mulsi3>
   10d54:	8009883a 	mov	r4,r16
   10d58:	11401d04 	addi	r5,r2,116
   10d5c:	1023883a 	mov	r17,r2
   10d60:	00115740 	call	11574 <_malloc_r>
   10d64:	1021883a 	mov	r16,r2
   10d68:	10000726 	beq	r2,zero,10d88 <__sfmoreglue+0x5c>
   10d6c:	11000304 	addi	r4,r2,12
   10d70:	10000015 	stw	zero,0(r2)
   10d74:	14800115 	stw	r18,4(r2)
   10d78:	11000215 	stw	r4,8(r2)
   10d7c:	89801a04 	addi	r6,r17,104
   10d80:	000b883a 	mov	r5,zero
   10d84:	00121080 	call	12108 <memset>
   10d88:	8005883a 	mov	r2,r16
   10d8c:	dfc00317 	ldw	ra,12(sp)
   10d90:	dc800217 	ldw	r18,8(sp)
   10d94:	dc400117 	ldw	r17,4(sp)
   10d98:	dc000017 	ldw	r16,0(sp)
   10d9c:	dec00404 	addi	sp,sp,16
   10da0:	f800283a 	ret

00010da4 <__sfp>:
   10da4:	defffb04 	addi	sp,sp,-20
   10da8:	dc000015 	stw	r16,0(sp)
   10dac:	04000074 	movhi	r16,1
   10db0:	841e2b04 	addi	r16,r16,30892
   10db4:	dcc00315 	stw	r19,12(sp)
   10db8:	2027883a 	mov	r19,r4
   10dbc:	81000017 	ldw	r4,0(r16)
   10dc0:	dfc00415 	stw	ra,16(sp)
   10dc4:	dc800215 	stw	r18,8(sp)
   10dc8:	20800e17 	ldw	r2,56(r4)
   10dcc:	dc400115 	stw	r17,4(sp)
   10dd0:	1000021e 	bne	r2,zero,10ddc <__sfp+0x38>
   10dd4:	0010b880 	call	10b88 <__sinit.part.1>
   10dd8:	81000017 	ldw	r4,0(r16)
   10ddc:	2480b804 	addi	r18,r4,736
   10de0:	047fffc4 	movi	r17,-1
   10de4:	91000117 	ldw	r4,4(r18)
   10de8:	94000217 	ldw	r16,8(r18)
   10dec:	213fffc4 	addi	r4,r4,-1
   10df0:	20000a16 	blt	r4,zero,10e1c <__sfp+0x78>
   10df4:	8080030f 	ldh	r2,12(r16)
   10df8:	10000c26 	beq	r2,zero,10e2c <__sfp+0x88>
   10dfc:	80c01d04 	addi	r3,r16,116
   10e00:	00000206 	br	10e0c <__sfp+0x68>
   10e04:	18bfe60f 	ldh	r2,-104(r3)
   10e08:	10000826 	beq	r2,zero,10e2c <__sfp+0x88>
   10e0c:	213fffc4 	addi	r4,r4,-1
   10e10:	1c3ffd04 	addi	r16,r3,-12
   10e14:	18c01a04 	addi	r3,r3,104
   10e18:	247ffa1e 	bne	r4,r17,10e04 <__alt_data_end+0xffff0e04>
   10e1c:	90800017 	ldw	r2,0(r18)
   10e20:	10001d26 	beq	r2,zero,10e98 <__sfp+0xf4>
   10e24:	1025883a 	mov	r18,r2
   10e28:	003fee06 	br	10de4 <__alt_data_end+0xffff0de4>
   10e2c:	00bfffc4 	movi	r2,-1
   10e30:	8080038d 	sth	r2,14(r16)
   10e34:	00800044 	movi	r2,1
   10e38:	8080030d 	sth	r2,12(r16)
   10e3c:	80001915 	stw	zero,100(r16)
   10e40:	80000015 	stw	zero,0(r16)
   10e44:	80000215 	stw	zero,8(r16)
   10e48:	80000115 	stw	zero,4(r16)
   10e4c:	80000415 	stw	zero,16(r16)
   10e50:	80000515 	stw	zero,20(r16)
   10e54:	80000615 	stw	zero,24(r16)
   10e58:	01800204 	movi	r6,8
   10e5c:	000b883a 	mov	r5,zero
   10e60:	81001704 	addi	r4,r16,92
   10e64:	00121080 	call	12108 <memset>
   10e68:	8005883a 	mov	r2,r16
   10e6c:	80000c15 	stw	zero,48(r16)
   10e70:	80000d15 	stw	zero,52(r16)
   10e74:	80001115 	stw	zero,68(r16)
   10e78:	80001215 	stw	zero,72(r16)
   10e7c:	dfc00417 	ldw	ra,16(sp)
   10e80:	dcc00317 	ldw	r19,12(sp)
   10e84:	dc800217 	ldw	r18,8(sp)
   10e88:	dc400117 	ldw	r17,4(sp)
   10e8c:	dc000017 	ldw	r16,0(sp)
   10e90:	dec00504 	addi	sp,sp,20
   10e94:	f800283a 	ret
   10e98:	01400104 	movi	r5,4
   10e9c:	9809883a 	mov	r4,r19
   10ea0:	0010d2c0 	call	10d2c <__sfmoreglue>
   10ea4:	90800015 	stw	r2,0(r18)
   10ea8:	103fde1e 	bne	r2,zero,10e24 <__alt_data_end+0xffff0e24>
   10eac:	00800304 	movi	r2,12
   10eb0:	98800015 	stw	r2,0(r19)
   10eb4:	0005883a 	mov	r2,zero
   10eb8:	003ff006 	br	10e7c <__alt_data_end+0xffff0e7c>

00010ebc <_cleanup>:
   10ebc:	00800074 	movhi	r2,1
   10ec0:	109e2b04 	addi	r2,r2,30892
   10ec4:	11000017 	ldw	r4,0(r2)
   10ec8:	01400074 	movhi	r5,1
   10ecc:	294acb04 	addi	r5,r5,11052
   10ed0:	00114b01 	jmpi	114b0 <_fwalk_reent>

00010ed4 <__sinit>:
   10ed4:	20800e17 	ldw	r2,56(r4)
   10ed8:	10000126 	beq	r2,zero,10ee0 <__sinit+0xc>
   10edc:	f800283a 	ret
   10ee0:	0010b881 	jmpi	10b88 <__sinit.part.1>

00010ee4 <__sfp_lock_acquire>:
   10ee4:	f800283a 	ret

00010ee8 <__sfp_lock_release>:
   10ee8:	f800283a 	ret

00010eec <__sinit_lock_acquire>:
   10eec:	f800283a 	ret

00010ef0 <__sinit_lock_release>:
   10ef0:	f800283a 	ret

00010ef4 <__fp_lock_all>:
   10ef4:	00800074 	movhi	r2,1
   10ef8:	109e2c04 	addi	r2,r2,30896
   10efc:	11000017 	ldw	r4,0(r2)
   10f00:	01400074 	movhi	r5,1
   10f04:	29434904 	addi	r5,r5,3364
   10f08:	00113ec1 	jmpi	113ec <_fwalk>

00010f0c <__fp_unlock_all>:
   10f0c:	00800074 	movhi	r2,1
   10f10:	109e2c04 	addi	r2,r2,30896
   10f14:	11000017 	ldw	r4,0(r2)
   10f18:	01400074 	movhi	r5,1
   10f1c:	2942dd04 	addi	r5,r5,2932
   10f20:	00113ec1 	jmpi	113ec <_fwalk>

00010f24 <__sfvwrite_r>:
   10f24:	30800217 	ldw	r2,8(r6)
   10f28:	10006726 	beq	r2,zero,110c8 <__sfvwrite_r+0x1a4>
   10f2c:	28c0030b 	ldhu	r3,12(r5)
   10f30:	defff404 	addi	sp,sp,-48
   10f34:	dd400715 	stw	r21,28(sp)
   10f38:	dd000615 	stw	r20,24(sp)
   10f3c:	dc000215 	stw	r16,8(sp)
   10f40:	dfc00b15 	stw	ra,44(sp)
   10f44:	df000a15 	stw	fp,40(sp)
   10f48:	ddc00915 	stw	r23,36(sp)
   10f4c:	dd800815 	stw	r22,32(sp)
   10f50:	dcc00515 	stw	r19,20(sp)
   10f54:	dc800415 	stw	r18,16(sp)
   10f58:	dc400315 	stw	r17,12(sp)
   10f5c:	1880020c 	andi	r2,r3,8
   10f60:	2821883a 	mov	r16,r5
   10f64:	202b883a 	mov	r21,r4
   10f68:	3029883a 	mov	r20,r6
   10f6c:	10002726 	beq	r2,zero,1100c <__sfvwrite_r+0xe8>
   10f70:	28800417 	ldw	r2,16(r5)
   10f74:	10002526 	beq	r2,zero,1100c <__sfvwrite_r+0xe8>
   10f78:	1880008c 	andi	r2,r3,2
   10f7c:	a4400017 	ldw	r17,0(r20)
   10f80:	10002a26 	beq	r2,zero,1102c <__sfvwrite_r+0x108>
   10f84:	05a00034 	movhi	r22,32768
   10f88:	0027883a 	mov	r19,zero
   10f8c:	0025883a 	mov	r18,zero
   10f90:	b5bf0004 	addi	r22,r22,-1024
   10f94:	980d883a 	mov	r6,r19
   10f98:	a809883a 	mov	r4,r21
   10f9c:	90004626 	beq	r18,zero,110b8 <__sfvwrite_r+0x194>
   10fa0:	900f883a 	mov	r7,r18
   10fa4:	b480022e 	bgeu	r22,r18,10fb0 <__sfvwrite_r+0x8c>
   10fa8:	01e00034 	movhi	r7,32768
   10fac:	39ff0004 	addi	r7,r7,-1024
   10fb0:	80800917 	ldw	r2,36(r16)
   10fb4:	81400717 	ldw	r5,28(r16)
   10fb8:	103ee83a 	callr	r2
   10fbc:	00805a0e 	bge	zero,r2,11128 <__sfvwrite_r+0x204>
   10fc0:	a0c00217 	ldw	r3,8(r20)
   10fc4:	98a7883a 	add	r19,r19,r2
   10fc8:	90a5c83a 	sub	r18,r18,r2
   10fcc:	1885c83a 	sub	r2,r3,r2
   10fd0:	a0800215 	stw	r2,8(r20)
   10fd4:	103fef1e 	bne	r2,zero,10f94 <__alt_data_end+0xffff0f94>
   10fd8:	0005883a 	mov	r2,zero
   10fdc:	dfc00b17 	ldw	ra,44(sp)
   10fe0:	df000a17 	ldw	fp,40(sp)
   10fe4:	ddc00917 	ldw	r23,36(sp)
   10fe8:	dd800817 	ldw	r22,32(sp)
   10fec:	dd400717 	ldw	r21,28(sp)
   10ff0:	dd000617 	ldw	r20,24(sp)
   10ff4:	dcc00517 	ldw	r19,20(sp)
   10ff8:	dc800417 	ldw	r18,16(sp)
   10ffc:	dc400317 	ldw	r17,12(sp)
   11000:	dc000217 	ldw	r16,8(sp)
   11004:	dec00c04 	addi	sp,sp,48
   11008:	f800283a 	ret
   1100c:	800b883a 	mov	r5,r16
   11010:	a809883a 	mov	r4,r21
   11014:	00129840 	call	12984 <__swsetup_r>
   11018:	1000ee1e 	bne	r2,zero,113d4 <__sfvwrite_r+0x4b0>
   1101c:	80c0030b 	ldhu	r3,12(r16)
   11020:	a4400017 	ldw	r17,0(r20)
   11024:	1880008c 	andi	r2,r3,2
   11028:	103fd61e 	bne	r2,zero,10f84 <__alt_data_end+0xffff0f84>
   1102c:	1880004c 	andi	r2,r3,1
   11030:	1000421e 	bne	r2,zero,1113c <__sfvwrite_r+0x218>
   11034:	0039883a 	mov	fp,zero
   11038:	0025883a 	mov	r18,zero
   1103c:	90001a26 	beq	r18,zero,110a8 <__sfvwrite_r+0x184>
   11040:	1880800c 	andi	r2,r3,512
   11044:	84c00217 	ldw	r19,8(r16)
   11048:	10002126 	beq	r2,zero,110d0 <__sfvwrite_r+0x1ac>
   1104c:	982f883a 	mov	r23,r19
   11050:	94c09636 	bltu	r18,r19,112ac <__sfvwrite_r+0x388>
   11054:	1881200c 	andi	r2,r3,1152
   11058:	1000a11e 	bne	r2,zero,112e0 <__sfvwrite_r+0x3bc>
   1105c:	81000017 	ldw	r4,0(r16)
   11060:	b80d883a 	mov	r6,r23
   11064:	e00b883a 	mov	r5,fp
   11068:	0011fac0 	call	11fac <memmove>
   1106c:	80c00217 	ldw	r3,8(r16)
   11070:	81000017 	ldw	r4,0(r16)
   11074:	9005883a 	mov	r2,r18
   11078:	1ce7c83a 	sub	r19,r3,r19
   1107c:	25cf883a 	add	r7,r4,r23
   11080:	84c00215 	stw	r19,8(r16)
   11084:	81c00015 	stw	r7,0(r16)
   11088:	a0c00217 	ldw	r3,8(r20)
   1108c:	e0b9883a 	add	fp,fp,r2
   11090:	90a5c83a 	sub	r18,r18,r2
   11094:	18a7c83a 	sub	r19,r3,r2
   11098:	a4c00215 	stw	r19,8(r20)
   1109c:	983fce26 	beq	r19,zero,10fd8 <__alt_data_end+0xffff0fd8>
   110a0:	80c0030b 	ldhu	r3,12(r16)
   110a4:	903fe61e 	bne	r18,zero,11040 <__alt_data_end+0xffff1040>
   110a8:	8f000017 	ldw	fp,0(r17)
   110ac:	8c800117 	ldw	r18,4(r17)
   110b0:	8c400204 	addi	r17,r17,8
   110b4:	003fe106 	br	1103c <__alt_data_end+0xffff103c>
   110b8:	8cc00017 	ldw	r19,0(r17)
   110bc:	8c800117 	ldw	r18,4(r17)
   110c0:	8c400204 	addi	r17,r17,8
   110c4:	003fb306 	br	10f94 <__alt_data_end+0xffff0f94>
   110c8:	0005883a 	mov	r2,zero
   110cc:	f800283a 	ret
   110d0:	81000017 	ldw	r4,0(r16)
   110d4:	80800417 	ldw	r2,16(r16)
   110d8:	11005a36 	bltu	r2,r4,11244 <__sfvwrite_r+0x320>
   110dc:	85c00517 	ldw	r23,20(r16)
   110e0:	95c05836 	bltu	r18,r23,11244 <__sfvwrite_r+0x320>
   110e4:	00a00034 	movhi	r2,32768
   110e8:	10bfffc4 	addi	r2,r2,-1
   110ec:	9009883a 	mov	r4,r18
   110f0:	1480012e 	bgeu	r2,r18,110f8 <__sfvwrite_r+0x1d4>
   110f4:	1009883a 	mov	r4,r2
   110f8:	b80b883a 	mov	r5,r23
   110fc:	001068c0 	call	1068c <__divsi3>
   11100:	b80b883a 	mov	r5,r23
   11104:	1009883a 	mov	r4,r2
   11108:	00136380 	call	13638 <__mulsi3>
   1110c:	81400717 	ldw	r5,28(r16)
   11110:	80c00917 	ldw	r3,36(r16)
   11114:	100f883a 	mov	r7,r2
   11118:	e00d883a 	mov	r6,fp
   1111c:	a809883a 	mov	r4,r21
   11120:	183ee83a 	callr	r3
   11124:	00bfd816 	blt	zero,r2,11088 <__alt_data_end+0xffff1088>
   11128:	8080030b 	ldhu	r2,12(r16)
   1112c:	10801014 	ori	r2,r2,64
   11130:	8080030d 	sth	r2,12(r16)
   11134:	00bfffc4 	movi	r2,-1
   11138:	003fa806 	br	10fdc <__alt_data_end+0xffff0fdc>
   1113c:	0027883a 	mov	r19,zero
   11140:	0011883a 	mov	r8,zero
   11144:	0039883a 	mov	fp,zero
   11148:	0025883a 	mov	r18,zero
   1114c:	90001f26 	beq	r18,zero,111cc <__sfvwrite_r+0x2a8>
   11150:	40005a26 	beq	r8,zero,112bc <__sfvwrite_r+0x398>
   11154:	982d883a 	mov	r22,r19
   11158:	94c0012e 	bgeu	r18,r19,11160 <__sfvwrite_r+0x23c>
   1115c:	902d883a 	mov	r22,r18
   11160:	81000017 	ldw	r4,0(r16)
   11164:	80800417 	ldw	r2,16(r16)
   11168:	b02f883a 	mov	r23,r22
   1116c:	81c00517 	ldw	r7,20(r16)
   11170:	1100032e 	bgeu	r2,r4,11180 <__sfvwrite_r+0x25c>
   11174:	80c00217 	ldw	r3,8(r16)
   11178:	38c7883a 	add	r3,r7,r3
   1117c:	1d801816 	blt	r3,r22,111e0 <__sfvwrite_r+0x2bc>
   11180:	b1c03e16 	blt	r22,r7,1127c <__sfvwrite_r+0x358>
   11184:	80800917 	ldw	r2,36(r16)
   11188:	81400717 	ldw	r5,28(r16)
   1118c:	e00d883a 	mov	r6,fp
   11190:	da000115 	stw	r8,4(sp)
   11194:	a809883a 	mov	r4,r21
   11198:	103ee83a 	callr	r2
   1119c:	102f883a 	mov	r23,r2
   111a0:	da000117 	ldw	r8,4(sp)
   111a4:	00bfe00e 	bge	zero,r2,11128 <__alt_data_end+0xffff1128>
   111a8:	9de7c83a 	sub	r19,r19,r23
   111ac:	98001f26 	beq	r19,zero,1122c <__sfvwrite_r+0x308>
   111b0:	a0800217 	ldw	r2,8(r20)
   111b4:	e5f9883a 	add	fp,fp,r23
   111b8:	95e5c83a 	sub	r18,r18,r23
   111bc:	15efc83a 	sub	r23,r2,r23
   111c0:	a5c00215 	stw	r23,8(r20)
   111c4:	b83f8426 	beq	r23,zero,10fd8 <__alt_data_end+0xffff0fd8>
   111c8:	903fe11e 	bne	r18,zero,11150 <__alt_data_end+0xffff1150>
   111cc:	8f000017 	ldw	fp,0(r17)
   111d0:	8c800117 	ldw	r18,4(r17)
   111d4:	0011883a 	mov	r8,zero
   111d8:	8c400204 	addi	r17,r17,8
   111dc:	003fdb06 	br	1114c <__alt_data_end+0xffff114c>
   111e0:	180d883a 	mov	r6,r3
   111e4:	e00b883a 	mov	r5,fp
   111e8:	da000115 	stw	r8,4(sp)
   111ec:	d8c00015 	stw	r3,0(sp)
   111f0:	0011fac0 	call	11fac <memmove>
   111f4:	d8c00017 	ldw	r3,0(sp)
   111f8:	80800017 	ldw	r2,0(r16)
   111fc:	800b883a 	mov	r5,r16
   11200:	a809883a 	mov	r4,r21
   11204:	10c5883a 	add	r2,r2,r3
   11208:	80800015 	stw	r2,0(r16)
   1120c:	d8c00015 	stw	r3,0(sp)
   11210:	0012e4c0 	call	12e4c <_fflush_r>
   11214:	d8c00017 	ldw	r3,0(sp)
   11218:	da000117 	ldw	r8,4(sp)
   1121c:	103fc21e 	bne	r2,zero,11128 <__alt_data_end+0xffff1128>
   11220:	182f883a 	mov	r23,r3
   11224:	9de7c83a 	sub	r19,r19,r23
   11228:	983fe11e 	bne	r19,zero,111b0 <__alt_data_end+0xffff11b0>
   1122c:	800b883a 	mov	r5,r16
   11230:	a809883a 	mov	r4,r21
   11234:	0012e4c0 	call	12e4c <_fflush_r>
   11238:	103fbb1e 	bne	r2,zero,11128 <__alt_data_end+0xffff1128>
   1123c:	0011883a 	mov	r8,zero
   11240:	003fdb06 	br	111b0 <__alt_data_end+0xffff11b0>
   11244:	94c0012e 	bgeu	r18,r19,1124c <__sfvwrite_r+0x328>
   11248:	9027883a 	mov	r19,r18
   1124c:	980d883a 	mov	r6,r19
   11250:	e00b883a 	mov	r5,fp
   11254:	0011fac0 	call	11fac <memmove>
   11258:	80800217 	ldw	r2,8(r16)
   1125c:	80c00017 	ldw	r3,0(r16)
   11260:	14c5c83a 	sub	r2,r2,r19
   11264:	1cc7883a 	add	r3,r3,r19
   11268:	80800215 	stw	r2,8(r16)
   1126c:	80c00015 	stw	r3,0(r16)
   11270:	10004326 	beq	r2,zero,11380 <__sfvwrite_r+0x45c>
   11274:	9805883a 	mov	r2,r19
   11278:	003f8306 	br	11088 <__alt_data_end+0xffff1088>
   1127c:	b00d883a 	mov	r6,r22
   11280:	e00b883a 	mov	r5,fp
   11284:	da000115 	stw	r8,4(sp)
   11288:	0011fac0 	call	11fac <memmove>
   1128c:	80800217 	ldw	r2,8(r16)
   11290:	80c00017 	ldw	r3,0(r16)
   11294:	da000117 	ldw	r8,4(sp)
   11298:	1585c83a 	sub	r2,r2,r22
   1129c:	1dad883a 	add	r22,r3,r22
   112a0:	80800215 	stw	r2,8(r16)
   112a4:	85800015 	stw	r22,0(r16)
   112a8:	003fbf06 	br	111a8 <__alt_data_end+0xffff11a8>
   112ac:	81000017 	ldw	r4,0(r16)
   112b0:	9027883a 	mov	r19,r18
   112b4:	902f883a 	mov	r23,r18
   112b8:	003f6906 	br	11060 <__alt_data_end+0xffff1060>
   112bc:	900d883a 	mov	r6,r18
   112c0:	01400284 	movi	r5,10
   112c4:	e009883a 	mov	r4,fp
   112c8:	0011d800 	call	11d80 <memchr>
   112cc:	10003e26 	beq	r2,zero,113c8 <__sfvwrite_r+0x4a4>
   112d0:	10800044 	addi	r2,r2,1
   112d4:	1727c83a 	sub	r19,r2,fp
   112d8:	02000044 	movi	r8,1
   112dc:	003f9d06 	br	11154 <__alt_data_end+0xffff1154>
   112e0:	80800517 	ldw	r2,20(r16)
   112e4:	81400417 	ldw	r5,16(r16)
   112e8:	81c00017 	ldw	r7,0(r16)
   112ec:	10a7883a 	add	r19,r2,r2
   112f0:	9885883a 	add	r2,r19,r2
   112f4:	1026d7fa 	srli	r19,r2,31
   112f8:	396dc83a 	sub	r22,r7,r5
   112fc:	b1000044 	addi	r4,r22,1
   11300:	9885883a 	add	r2,r19,r2
   11304:	1027d07a 	srai	r19,r2,1
   11308:	2485883a 	add	r2,r4,r18
   1130c:	980d883a 	mov	r6,r19
   11310:	9880022e 	bgeu	r19,r2,1131c <__sfvwrite_r+0x3f8>
   11314:	1027883a 	mov	r19,r2
   11318:	100d883a 	mov	r6,r2
   1131c:	18c1000c 	andi	r3,r3,1024
   11320:	18001c26 	beq	r3,zero,11394 <__sfvwrite_r+0x470>
   11324:	300b883a 	mov	r5,r6
   11328:	a809883a 	mov	r4,r21
   1132c:	00115740 	call	11574 <_malloc_r>
   11330:	102f883a 	mov	r23,r2
   11334:	10002926 	beq	r2,zero,113dc <__sfvwrite_r+0x4b8>
   11338:	81400417 	ldw	r5,16(r16)
   1133c:	b00d883a 	mov	r6,r22
   11340:	1009883a 	mov	r4,r2
   11344:	0011e640 	call	11e64 <memcpy>
   11348:	8080030b 	ldhu	r2,12(r16)
   1134c:	00fedfc4 	movi	r3,-1153
   11350:	10c4703a 	and	r2,r2,r3
   11354:	10802014 	ori	r2,r2,128
   11358:	8080030d 	sth	r2,12(r16)
   1135c:	bd89883a 	add	r4,r23,r22
   11360:	9d8fc83a 	sub	r7,r19,r22
   11364:	85c00415 	stw	r23,16(r16)
   11368:	84c00515 	stw	r19,20(r16)
   1136c:	81000015 	stw	r4,0(r16)
   11370:	9027883a 	mov	r19,r18
   11374:	81c00215 	stw	r7,8(r16)
   11378:	902f883a 	mov	r23,r18
   1137c:	003f3806 	br	11060 <__alt_data_end+0xffff1060>
   11380:	800b883a 	mov	r5,r16
   11384:	a809883a 	mov	r4,r21
   11388:	0012e4c0 	call	12e4c <_fflush_r>
   1138c:	103fb926 	beq	r2,zero,11274 <__alt_data_end+0xffff1274>
   11390:	003f6506 	br	11128 <__alt_data_end+0xffff1128>
   11394:	a809883a 	mov	r4,r21
   11398:	00122300 	call	12230 <_realloc_r>
   1139c:	102f883a 	mov	r23,r2
   113a0:	103fee1e 	bne	r2,zero,1135c <__alt_data_end+0xffff135c>
   113a4:	81400417 	ldw	r5,16(r16)
   113a8:	a809883a 	mov	r4,r21
   113ac:	0012ffc0 	call	12ffc <_free_r>
   113b0:	8080030b 	ldhu	r2,12(r16)
   113b4:	00ffdfc4 	movi	r3,-129
   113b8:	1884703a 	and	r2,r3,r2
   113bc:	00c00304 	movi	r3,12
   113c0:	a8c00015 	stw	r3,0(r21)
   113c4:	003f5906 	br	1112c <__alt_data_end+0xffff112c>
   113c8:	94c00044 	addi	r19,r18,1
   113cc:	02000044 	movi	r8,1
   113d0:	003f6006 	br	11154 <__alt_data_end+0xffff1154>
   113d4:	00bfffc4 	movi	r2,-1
   113d8:	003f0006 	br	10fdc <__alt_data_end+0xffff0fdc>
   113dc:	00800304 	movi	r2,12
   113e0:	a8800015 	stw	r2,0(r21)
   113e4:	8080030b 	ldhu	r2,12(r16)
   113e8:	003f5006 	br	1112c <__alt_data_end+0xffff112c>

000113ec <_fwalk>:
   113ec:	defff704 	addi	sp,sp,-36
   113f0:	dd000415 	stw	r20,16(sp)
   113f4:	dfc00815 	stw	ra,32(sp)
   113f8:	ddc00715 	stw	r23,28(sp)
   113fc:	dd800615 	stw	r22,24(sp)
   11400:	dd400515 	stw	r21,20(sp)
   11404:	dcc00315 	stw	r19,12(sp)
   11408:	dc800215 	stw	r18,8(sp)
   1140c:	dc400115 	stw	r17,4(sp)
   11410:	dc000015 	stw	r16,0(sp)
   11414:	2500b804 	addi	r20,r4,736
   11418:	a0002326 	beq	r20,zero,114a8 <_fwalk+0xbc>
   1141c:	282b883a 	mov	r21,r5
   11420:	002f883a 	mov	r23,zero
   11424:	05800044 	movi	r22,1
   11428:	04ffffc4 	movi	r19,-1
   1142c:	a4400117 	ldw	r17,4(r20)
   11430:	a4800217 	ldw	r18,8(r20)
   11434:	8c7fffc4 	addi	r17,r17,-1
   11438:	88000d16 	blt	r17,zero,11470 <_fwalk+0x84>
   1143c:	94000304 	addi	r16,r18,12
   11440:	94800384 	addi	r18,r18,14
   11444:	8080000b 	ldhu	r2,0(r16)
   11448:	8c7fffc4 	addi	r17,r17,-1
   1144c:	813ffd04 	addi	r4,r16,-12
   11450:	b080042e 	bgeu	r22,r2,11464 <_fwalk+0x78>
   11454:	9080000f 	ldh	r2,0(r18)
   11458:	14c00226 	beq	r2,r19,11464 <_fwalk+0x78>
   1145c:	a83ee83a 	callr	r21
   11460:	b8aeb03a 	or	r23,r23,r2
   11464:	84001a04 	addi	r16,r16,104
   11468:	94801a04 	addi	r18,r18,104
   1146c:	8cfff51e 	bne	r17,r19,11444 <__alt_data_end+0xffff1444>
   11470:	a5000017 	ldw	r20,0(r20)
   11474:	a03fed1e 	bne	r20,zero,1142c <__alt_data_end+0xffff142c>
   11478:	b805883a 	mov	r2,r23
   1147c:	dfc00817 	ldw	ra,32(sp)
   11480:	ddc00717 	ldw	r23,28(sp)
   11484:	dd800617 	ldw	r22,24(sp)
   11488:	dd400517 	ldw	r21,20(sp)
   1148c:	dd000417 	ldw	r20,16(sp)
   11490:	dcc00317 	ldw	r19,12(sp)
   11494:	dc800217 	ldw	r18,8(sp)
   11498:	dc400117 	ldw	r17,4(sp)
   1149c:	dc000017 	ldw	r16,0(sp)
   114a0:	dec00904 	addi	sp,sp,36
   114a4:	f800283a 	ret
   114a8:	002f883a 	mov	r23,zero
   114ac:	003ff206 	br	11478 <__alt_data_end+0xffff1478>

000114b0 <_fwalk_reent>:
   114b0:	defff704 	addi	sp,sp,-36
   114b4:	dd000415 	stw	r20,16(sp)
   114b8:	dfc00815 	stw	ra,32(sp)
   114bc:	ddc00715 	stw	r23,28(sp)
   114c0:	dd800615 	stw	r22,24(sp)
   114c4:	dd400515 	stw	r21,20(sp)
   114c8:	dcc00315 	stw	r19,12(sp)
   114cc:	dc800215 	stw	r18,8(sp)
   114d0:	dc400115 	stw	r17,4(sp)
   114d4:	dc000015 	stw	r16,0(sp)
   114d8:	2500b804 	addi	r20,r4,736
   114dc:	a0002326 	beq	r20,zero,1156c <_fwalk_reent+0xbc>
   114e0:	282b883a 	mov	r21,r5
   114e4:	2027883a 	mov	r19,r4
   114e8:	002f883a 	mov	r23,zero
   114ec:	05800044 	movi	r22,1
   114f0:	04bfffc4 	movi	r18,-1
   114f4:	a4400117 	ldw	r17,4(r20)
   114f8:	a4000217 	ldw	r16,8(r20)
   114fc:	8c7fffc4 	addi	r17,r17,-1
   11500:	88000c16 	blt	r17,zero,11534 <_fwalk_reent+0x84>
   11504:	84000304 	addi	r16,r16,12
   11508:	8080000b 	ldhu	r2,0(r16)
   1150c:	8c7fffc4 	addi	r17,r17,-1
   11510:	817ffd04 	addi	r5,r16,-12
   11514:	b080052e 	bgeu	r22,r2,1152c <_fwalk_reent+0x7c>
   11518:	8080008f 	ldh	r2,2(r16)
   1151c:	9809883a 	mov	r4,r19
   11520:	14800226 	beq	r2,r18,1152c <_fwalk_reent+0x7c>
   11524:	a83ee83a 	callr	r21
   11528:	b8aeb03a 	or	r23,r23,r2
   1152c:	84001a04 	addi	r16,r16,104
   11530:	8cbff51e 	bne	r17,r18,11508 <__alt_data_end+0xffff1508>
   11534:	a5000017 	ldw	r20,0(r20)
   11538:	a03fee1e 	bne	r20,zero,114f4 <__alt_data_end+0xffff14f4>
   1153c:	b805883a 	mov	r2,r23
   11540:	dfc00817 	ldw	ra,32(sp)
   11544:	ddc00717 	ldw	r23,28(sp)
   11548:	dd800617 	ldw	r22,24(sp)
   1154c:	dd400517 	ldw	r21,20(sp)
   11550:	dd000417 	ldw	r20,16(sp)
   11554:	dcc00317 	ldw	r19,12(sp)
   11558:	dc800217 	ldw	r18,8(sp)
   1155c:	dc400117 	ldw	r17,4(sp)
   11560:	dc000017 	ldw	r16,0(sp)
   11564:	dec00904 	addi	sp,sp,36
   11568:	f800283a 	ret
   1156c:	002f883a 	mov	r23,zero
   11570:	003ff206 	br	1153c <__alt_data_end+0xffff153c>

00011574 <_malloc_r>:
   11574:	defff504 	addi	sp,sp,-44
   11578:	dc800315 	stw	r18,12(sp)
   1157c:	dfc00a15 	stw	ra,40(sp)
   11580:	df000915 	stw	fp,36(sp)
   11584:	ddc00815 	stw	r23,32(sp)
   11588:	dd800715 	stw	r22,28(sp)
   1158c:	dd400615 	stw	r21,24(sp)
   11590:	dd000515 	stw	r20,20(sp)
   11594:	dcc00415 	stw	r19,16(sp)
   11598:	dc400215 	stw	r17,8(sp)
   1159c:	dc000115 	stw	r16,4(sp)
   115a0:	288002c4 	addi	r2,r5,11
   115a4:	00c00584 	movi	r3,22
   115a8:	2025883a 	mov	r18,r4
   115ac:	18807f2e 	bgeu	r3,r2,117ac <_malloc_r+0x238>
   115b0:	047ffe04 	movi	r17,-8
   115b4:	1462703a 	and	r17,r2,r17
   115b8:	8800a316 	blt	r17,zero,11848 <_malloc_r+0x2d4>
   115bc:	8940a236 	bltu	r17,r5,11848 <_malloc_r+0x2d4>
   115c0:	0013bfc0 	call	13bfc <__malloc_lock>
   115c4:	00807dc4 	movi	r2,503
   115c8:	1441e92e 	bgeu	r2,r17,11d70 <_malloc_r+0x7fc>
   115cc:	8804d27a 	srli	r2,r17,9
   115d0:	1000a126 	beq	r2,zero,11858 <_malloc_r+0x2e4>
   115d4:	00c00104 	movi	r3,4
   115d8:	18811e36 	bltu	r3,r2,11a54 <_malloc_r+0x4e0>
   115dc:	8804d1ba 	srli	r2,r17,6
   115e0:	12000e44 	addi	r8,r2,57
   115e4:	11c00e04 	addi	r7,r2,56
   115e8:	4209883a 	add	r4,r8,r8
   115ec:	04c00074 	movhi	r19,1
   115f0:	2109883a 	add	r4,r4,r4
   115f4:	9cd8a604 	addi	r19,r19,25240
   115f8:	2109883a 	add	r4,r4,r4
   115fc:	9909883a 	add	r4,r19,r4
   11600:	24000117 	ldw	r16,4(r4)
   11604:	213ffe04 	addi	r4,r4,-8
   11608:	24009726 	beq	r4,r16,11868 <_malloc_r+0x2f4>
   1160c:	80800117 	ldw	r2,4(r16)
   11610:	01bfff04 	movi	r6,-4
   11614:	014003c4 	movi	r5,15
   11618:	1184703a 	and	r2,r2,r6
   1161c:	1447c83a 	sub	r3,r2,r17
   11620:	28c00716 	blt	r5,r3,11640 <_malloc_r+0xcc>
   11624:	1800920e 	bge	r3,zero,11870 <_malloc_r+0x2fc>
   11628:	84000317 	ldw	r16,12(r16)
   1162c:	24008e26 	beq	r4,r16,11868 <_malloc_r+0x2f4>
   11630:	80800117 	ldw	r2,4(r16)
   11634:	1184703a 	and	r2,r2,r6
   11638:	1447c83a 	sub	r3,r2,r17
   1163c:	28fff90e 	bge	r5,r3,11624 <__alt_data_end+0xffff1624>
   11640:	3809883a 	mov	r4,r7
   11644:	01800074 	movhi	r6,1
   11648:	9c000417 	ldw	r16,16(r19)
   1164c:	3198a604 	addi	r6,r6,25240
   11650:	32000204 	addi	r8,r6,8
   11654:	82013426 	beq	r16,r8,11b28 <_malloc_r+0x5b4>
   11658:	80c00117 	ldw	r3,4(r16)
   1165c:	00bfff04 	movi	r2,-4
   11660:	188e703a 	and	r7,r3,r2
   11664:	3c45c83a 	sub	r2,r7,r17
   11668:	00c003c4 	movi	r3,15
   1166c:	18811f16 	blt	r3,r2,11aec <_malloc_r+0x578>
   11670:	32000515 	stw	r8,20(r6)
   11674:	32000415 	stw	r8,16(r6)
   11678:	10007f0e 	bge	r2,zero,11878 <_malloc_r+0x304>
   1167c:	00807fc4 	movi	r2,511
   11680:	11c0fd36 	bltu	r2,r7,11a78 <_malloc_r+0x504>
   11684:	3806d0fa 	srli	r3,r7,3
   11688:	01c00044 	movi	r7,1
   1168c:	30800117 	ldw	r2,4(r6)
   11690:	19400044 	addi	r5,r3,1
   11694:	294b883a 	add	r5,r5,r5
   11698:	1807d0ba 	srai	r3,r3,2
   1169c:	294b883a 	add	r5,r5,r5
   116a0:	294b883a 	add	r5,r5,r5
   116a4:	298b883a 	add	r5,r5,r6
   116a8:	38c6983a 	sll	r3,r7,r3
   116ac:	29c00017 	ldw	r7,0(r5)
   116b0:	2a7ffe04 	addi	r9,r5,-8
   116b4:	1886b03a 	or	r3,r3,r2
   116b8:	82400315 	stw	r9,12(r16)
   116bc:	81c00215 	stw	r7,8(r16)
   116c0:	30c00115 	stw	r3,4(r6)
   116c4:	2c000015 	stw	r16,0(r5)
   116c8:	3c000315 	stw	r16,12(r7)
   116cc:	2005d0ba 	srai	r2,r4,2
   116d0:	01400044 	movi	r5,1
   116d4:	288a983a 	sll	r5,r5,r2
   116d8:	19406f36 	bltu	r3,r5,11898 <_malloc_r+0x324>
   116dc:	28c4703a 	and	r2,r5,r3
   116e0:	10000a1e 	bne	r2,zero,1170c <_malloc_r+0x198>
   116e4:	00bfff04 	movi	r2,-4
   116e8:	294b883a 	add	r5,r5,r5
   116ec:	2088703a 	and	r4,r4,r2
   116f0:	28c4703a 	and	r2,r5,r3
   116f4:	21000104 	addi	r4,r4,4
   116f8:	1000041e 	bne	r2,zero,1170c <_malloc_r+0x198>
   116fc:	294b883a 	add	r5,r5,r5
   11700:	28c4703a 	and	r2,r5,r3
   11704:	21000104 	addi	r4,r4,4
   11708:	103ffc26 	beq	r2,zero,116fc <__alt_data_end+0xffff16fc>
   1170c:	02bfff04 	movi	r10,-4
   11710:	024003c4 	movi	r9,15
   11714:	21800044 	addi	r6,r4,1
   11718:	318d883a 	add	r6,r6,r6
   1171c:	318d883a 	add	r6,r6,r6
   11720:	318d883a 	add	r6,r6,r6
   11724:	998d883a 	add	r6,r19,r6
   11728:	333ffe04 	addi	r12,r6,-8
   1172c:	2017883a 	mov	r11,r4
   11730:	31800104 	addi	r6,r6,4
   11734:	34000017 	ldw	r16,0(r6)
   11738:	31fffd04 	addi	r7,r6,-12
   1173c:	81c0041e 	bne	r16,r7,11750 <_malloc_r+0x1dc>
   11740:	0000fb06 	br	11b30 <_malloc_r+0x5bc>
   11744:	1801030e 	bge	r3,zero,11b54 <_malloc_r+0x5e0>
   11748:	84000317 	ldw	r16,12(r16)
   1174c:	81c0f826 	beq	r16,r7,11b30 <_malloc_r+0x5bc>
   11750:	80800117 	ldw	r2,4(r16)
   11754:	1284703a 	and	r2,r2,r10
   11758:	1447c83a 	sub	r3,r2,r17
   1175c:	48fff90e 	bge	r9,r3,11744 <__alt_data_end+0xffff1744>
   11760:	80800317 	ldw	r2,12(r16)
   11764:	81000217 	ldw	r4,8(r16)
   11768:	89400054 	ori	r5,r17,1
   1176c:	81400115 	stw	r5,4(r16)
   11770:	20800315 	stw	r2,12(r4)
   11774:	11000215 	stw	r4,8(r2)
   11778:	8463883a 	add	r17,r16,r17
   1177c:	9c400515 	stw	r17,20(r19)
   11780:	9c400415 	stw	r17,16(r19)
   11784:	18800054 	ori	r2,r3,1
   11788:	88800115 	stw	r2,4(r17)
   1178c:	8a000315 	stw	r8,12(r17)
   11790:	8a000215 	stw	r8,8(r17)
   11794:	88e3883a 	add	r17,r17,r3
   11798:	88c00015 	stw	r3,0(r17)
   1179c:	9009883a 	mov	r4,r18
   117a0:	0013c200 	call	13c20 <__malloc_unlock>
   117a4:	80800204 	addi	r2,r16,8
   117a8:	00001b06 	br	11818 <_malloc_r+0x2a4>
   117ac:	04400404 	movi	r17,16
   117b0:	89402536 	bltu	r17,r5,11848 <_malloc_r+0x2d4>
   117b4:	0013bfc0 	call	13bfc <__malloc_lock>
   117b8:	00800184 	movi	r2,6
   117bc:	01000084 	movi	r4,2
   117c0:	04c00074 	movhi	r19,1
   117c4:	1085883a 	add	r2,r2,r2
   117c8:	9cd8a604 	addi	r19,r19,25240
   117cc:	1085883a 	add	r2,r2,r2
   117d0:	9885883a 	add	r2,r19,r2
   117d4:	14000117 	ldw	r16,4(r2)
   117d8:	10fffe04 	addi	r3,r2,-8
   117dc:	80c0d926 	beq	r16,r3,11b44 <_malloc_r+0x5d0>
   117e0:	80c00117 	ldw	r3,4(r16)
   117e4:	81000317 	ldw	r4,12(r16)
   117e8:	00bfff04 	movi	r2,-4
   117ec:	1884703a 	and	r2,r3,r2
   117f0:	81400217 	ldw	r5,8(r16)
   117f4:	8085883a 	add	r2,r16,r2
   117f8:	10c00117 	ldw	r3,4(r2)
   117fc:	29000315 	stw	r4,12(r5)
   11800:	21400215 	stw	r5,8(r4)
   11804:	18c00054 	ori	r3,r3,1
   11808:	10c00115 	stw	r3,4(r2)
   1180c:	9009883a 	mov	r4,r18
   11810:	0013c200 	call	13c20 <__malloc_unlock>
   11814:	80800204 	addi	r2,r16,8
   11818:	dfc00a17 	ldw	ra,40(sp)
   1181c:	df000917 	ldw	fp,36(sp)
   11820:	ddc00817 	ldw	r23,32(sp)
   11824:	dd800717 	ldw	r22,28(sp)
   11828:	dd400617 	ldw	r21,24(sp)
   1182c:	dd000517 	ldw	r20,20(sp)
   11830:	dcc00417 	ldw	r19,16(sp)
   11834:	dc800317 	ldw	r18,12(sp)
   11838:	dc400217 	ldw	r17,8(sp)
   1183c:	dc000117 	ldw	r16,4(sp)
   11840:	dec00b04 	addi	sp,sp,44
   11844:	f800283a 	ret
   11848:	00800304 	movi	r2,12
   1184c:	90800015 	stw	r2,0(r18)
   11850:	0005883a 	mov	r2,zero
   11854:	003ff006 	br	11818 <__alt_data_end+0xffff1818>
   11858:	01002004 	movi	r4,128
   1185c:	02001004 	movi	r8,64
   11860:	01c00fc4 	movi	r7,63
   11864:	003f6106 	br	115ec <__alt_data_end+0xffff15ec>
   11868:	4009883a 	mov	r4,r8
   1186c:	003f7506 	br	11644 <__alt_data_end+0xffff1644>
   11870:	81000317 	ldw	r4,12(r16)
   11874:	003fde06 	br	117f0 <__alt_data_end+0xffff17f0>
   11878:	81c5883a 	add	r2,r16,r7
   1187c:	11400117 	ldw	r5,4(r2)
   11880:	9009883a 	mov	r4,r18
   11884:	29400054 	ori	r5,r5,1
   11888:	11400115 	stw	r5,4(r2)
   1188c:	0013c200 	call	13c20 <__malloc_unlock>
   11890:	80800204 	addi	r2,r16,8
   11894:	003fe006 	br	11818 <__alt_data_end+0xffff1818>
   11898:	9c000217 	ldw	r16,8(r19)
   1189c:	00bfff04 	movi	r2,-4
   118a0:	85800117 	ldw	r22,4(r16)
   118a4:	b0ac703a 	and	r22,r22,r2
   118a8:	b4400336 	bltu	r22,r17,118b8 <_malloc_r+0x344>
   118ac:	b445c83a 	sub	r2,r22,r17
   118b0:	00c003c4 	movi	r3,15
   118b4:	18805d16 	blt	r3,r2,11a2c <_malloc_r+0x4b8>
   118b8:	05c00074 	movhi	r23,1
   118bc:	008000b4 	movhi	r2,2
   118c0:	10a4e704 	addi	r2,r2,-27748
   118c4:	bdde2d04 	addi	r23,r23,30900
   118c8:	15400017 	ldw	r21,0(r2)
   118cc:	b8c00017 	ldw	r3,0(r23)
   118d0:	00bfffc4 	movi	r2,-1
   118d4:	858d883a 	add	r6,r16,r22
   118d8:	8d6b883a 	add	r21,r17,r21
   118dc:	1880ea26 	beq	r3,r2,11c88 <_malloc_r+0x714>
   118e0:	ad4403c4 	addi	r21,r21,4111
   118e4:	00bc0004 	movi	r2,-4096
   118e8:	a8aa703a 	and	r21,r21,r2
   118ec:	a80b883a 	mov	r5,r21
   118f0:	9009883a 	mov	r4,r18
   118f4:	d9800015 	stw	r6,0(sp)
   118f8:	00127940 	call	12794 <_sbrk_r>
   118fc:	1029883a 	mov	r20,r2
   11900:	00bfffc4 	movi	r2,-1
   11904:	d9800017 	ldw	r6,0(sp)
   11908:	a080e826 	beq	r20,r2,11cac <_malloc_r+0x738>
   1190c:	a180a636 	bltu	r20,r6,11ba8 <_malloc_r+0x634>
   11910:	070000b4 	movhi	fp,2
   11914:	e7252404 	addi	fp,fp,-27504
   11918:	e0800017 	ldw	r2,0(fp)
   1191c:	a887883a 	add	r3,r21,r2
   11920:	e0c00015 	stw	r3,0(fp)
   11924:	3500e626 	beq	r6,r20,11cc0 <_malloc_r+0x74c>
   11928:	b9000017 	ldw	r4,0(r23)
   1192c:	00bfffc4 	movi	r2,-1
   11930:	2080ee26 	beq	r4,r2,11cec <_malloc_r+0x778>
   11934:	a185c83a 	sub	r2,r20,r6
   11938:	10c5883a 	add	r2,r2,r3
   1193c:	e0800015 	stw	r2,0(fp)
   11940:	a0c001cc 	andi	r3,r20,7
   11944:	1800bc26 	beq	r3,zero,11c38 <_malloc_r+0x6c4>
   11948:	a0e9c83a 	sub	r20,r20,r3
   1194c:	00840204 	movi	r2,4104
   11950:	a5000204 	addi	r20,r20,8
   11954:	10c7c83a 	sub	r3,r2,r3
   11958:	a545883a 	add	r2,r20,r21
   1195c:	1083ffcc 	andi	r2,r2,4095
   11960:	18abc83a 	sub	r21,r3,r2
   11964:	a80b883a 	mov	r5,r21
   11968:	9009883a 	mov	r4,r18
   1196c:	00127940 	call	12794 <_sbrk_r>
   11970:	00ffffc4 	movi	r3,-1
   11974:	10c0e126 	beq	r2,r3,11cfc <_malloc_r+0x788>
   11978:	1505c83a 	sub	r2,r2,r20
   1197c:	1545883a 	add	r2,r2,r21
   11980:	10800054 	ori	r2,r2,1
   11984:	e0c00017 	ldw	r3,0(fp)
   11988:	9d000215 	stw	r20,8(r19)
   1198c:	a0800115 	stw	r2,4(r20)
   11990:	a8c7883a 	add	r3,r21,r3
   11994:	e0c00015 	stw	r3,0(fp)
   11998:	84c00e26 	beq	r16,r19,119d4 <_malloc_r+0x460>
   1199c:	018003c4 	movi	r6,15
   119a0:	3580a72e 	bgeu	r6,r22,11c40 <_malloc_r+0x6cc>
   119a4:	81400117 	ldw	r5,4(r16)
   119a8:	013ffe04 	movi	r4,-8
   119ac:	b0bffd04 	addi	r2,r22,-12
   119b0:	1104703a 	and	r2,r2,r4
   119b4:	2900004c 	andi	r4,r5,1
   119b8:	2088b03a 	or	r4,r4,r2
   119bc:	81000115 	stw	r4,4(r16)
   119c0:	01400144 	movi	r5,5
   119c4:	8089883a 	add	r4,r16,r2
   119c8:	21400115 	stw	r5,4(r4)
   119cc:	21400215 	stw	r5,8(r4)
   119d0:	3080cd36 	bltu	r6,r2,11d08 <_malloc_r+0x794>
   119d4:	008000b4 	movhi	r2,2
   119d8:	10a4e604 	addi	r2,r2,-27752
   119dc:	11000017 	ldw	r4,0(r2)
   119e0:	20c0012e 	bgeu	r4,r3,119e8 <_malloc_r+0x474>
   119e4:	10c00015 	stw	r3,0(r2)
   119e8:	008000b4 	movhi	r2,2
   119ec:	10a4e504 	addi	r2,r2,-27756
   119f0:	11000017 	ldw	r4,0(r2)
   119f4:	9c000217 	ldw	r16,8(r19)
   119f8:	20c0012e 	bgeu	r4,r3,11a00 <_malloc_r+0x48c>
   119fc:	10c00015 	stw	r3,0(r2)
   11a00:	80c00117 	ldw	r3,4(r16)
   11a04:	00bfff04 	movi	r2,-4
   11a08:	1886703a 	and	r3,r3,r2
   11a0c:	1c45c83a 	sub	r2,r3,r17
   11a10:	1c400236 	bltu	r3,r17,11a1c <_malloc_r+0x4a8>
   11a14:	00c003c4 	movi	r3,15
   11a18:	18800416 	blt	r3,r2,11a2c <_malloc_r+0x4b8>
   11a1c:	9009883a 	mov	r4,r18
   11a20:	0013c200 	call	13c20 <__malloc_unlock>
   11a24:	0005883a 	mov	r2,zero
   11a28:	003f7b06 	br	11818 <__alt_data_end+0xffff1818>
   11a2c:	88c00054 	ori	r3,r17,1
   11a30:	80c00115 	stw	r3,4(r16)
   11a34:	8463883a 	add	r17,r16,r17
   11a38:	10800054 	ori	r2,r2,1
   11a3c:	9c400215 	stw	r17,8(r19)
   11a40:	88800115 	stw	r2,4(r17)
   11a44:	9009883a 	mov	r4,r18
   11a48:	0013c200 	call	13c20 <__malloc_unlock>
   11a4c:	80800204 	addi	r2,r16,8
   11a50:	003f7106 	br	11818 <__alt_data_end+0xffff1818>
   11a54:	00c00504 	movi	r3,20
   11a58:	18804a2e 	bgeu	r3,r2,11b84 <_malloc_r+0x610>
   11a5c:	00c01504 	movi	r3,84
   11a60:	18806e36 	bltu	r3,r2,11c1c <_malloc_r+0x6a8>
   11a64:	8804d33a 	srli	r2,r17,12
   11a68:	12001bc4 	addi	r8,r2,111
   11a6c:	11c01b84 	addi	r7,r2,110
   11a70:	4209883a 	add	r4,r8,r8
   11a74:	003edd06 	br	115ec <__alt_data_end+0xffff15ec>
   11a78:	3804d27a 	srli	r2,r7,9
   11a7c:	00c00104 	movi	r3,4
   11a80:	1880442e 	bgeu	r3,r2,11b94 <_malloc_r+0x620>
   11a84:	00c00504 	movi	r3,20
   11a88:	18808136 	bltu	r3,r2,11c90 <_malloc_r+0x71c>
   11a8c:	11401704 	addi	r5,r2,92
   11a90:	10c016c4 	addi	r3,r2,91
   11a94:	294b883a 	add	r5,r5,r5
   11a98:	294b883a 	add	r5,r5,r5
   11a9c:	294b883a 	add	r5,r5,r5
   11aa0:	994b883a 	add	r5,r19,r5
   11aa4:	28800017 	ldw	r2,0(r5)
   11aa8:	01800074 	movhi	r6,1
   11aac:	297ffe04 	addi	r5,r5,-8
   11ab0:	3198a604 	addi	r6,r6,25240
   11ab4:	28806526 	beq	r5,r2,11c4c <_malloc_r+0x6d8>
   11ab8:	01bfff04 	movi	r6,-4
   11abc:	10c00117 	ldw	r3,4(r2)
   11ac0:	1986703a 	and	r3,r3,r6
   11ac4:	38c0022e 	bgeu	r7,r3,11ad0 <_malloc_r+0x55c>
   11ac8:	10800217 	ldw	r2,8(r2)
   11acc:	28bffb1e 	bne	r5,r2,11abc <__alt_data_end+0xffff1abc>
   11ad0:	11400317 	ldw	r5,12(r2)
   11ad4:	98c00117 	ldw	r3,4(r19)
   11ad8:	81400315 	stw	r5,12(r16)
   11adc:	80800215 	stw	r2,8(r16)
   11ae0:	2c000215 	stw	r16,8(r5)
   11ae4:	14000315 	stw	r16,12(r2)
   11ae8:	003ef806 	br	116cc <__alt_data_end+0xffff16cc>
   11aec:	88c00054 	ori	r3,r17,1
   11af0:	80c00115 	stw	r3,4(r16)
   11af4:	8463883a 	add	r17,r16,r17
   11af8:	34400515 	stw	r17,20(r6)
   11afc:	34400415 	stw	r17,16(r6)
   11b00:	10c00054 	ori	r3,r2,1
   11b04:	8a000315 	stw	r8,12(r17)
   11b08:	8a000215 	stw	r8,8(r17)
   11b0c:	88c00115 	stw	r3,4(r17)
   11b10:	88a3883a 	add	r17,r17,r2
   11b14:	88800015 	stw	r2,0(r17)
   11b18:	9009883a 	mov	r4,r18
   11b1c:	0013c200 	call	13c20 <__malloc_unlock>
   11b20:	80800204 	addi	r2,r16,8
   11b24:	003f3c06 	br	11818 <__alt_data_end+0xffff1818>
   11b28:	30c00117 	ldw	r3,4(r6)
   11b2c:	003ee706 	br	116cc <__alt_data_end+0xffff16cc>
   11b30:	5ac00044 	addi	r11,r11,1
   11b34:	588000cc 	andi	r2,r11,3
   11b38:	31800204 	addi	r6,r6,8
   11b3c:	103efd1e 	bne	r2,zero,11734 <__alt_data_end+0xffff1734>
   11b40:	00002406 	br	11bd4 <_malloc_r+0x660>
   11b44:	14000317 	ldw	r16,12(r2)
   11b48:	143f251e 	bne	r2,r16,117e0 <__alt_data_end+0xffff17e0>
   11b4c:	21000084 	addi	r4,r4,2
   11b50:	003ebc06 	br	11644 <__alt_data_end+0xffff1644>
   11b54:	8085883a 	add	r2,r16,r2
   11b58:	10c00117 	ldw	r3,4(r2)
   11b5c:	81000317 	ldw	r4,12(r16)
   11b60:	81400217 	ldw	r5,8(r16)
   11b64:	18c00054 	ori	r3,r3,1
   11b68:	10c00115 	stw	r3,4(r2)
   11b6c:	29000315 	stw	r4,12(r5)
   11b70:	21400215 	stw	r5,8(r4)
   11b74:	9009883a 	mov	r4,r18
   11b78:	0013c200 	call	13c20 <__malloc_unlock>
   11b7c:	80800204 	addi	r2,r16,8
   11b80:	003f2506 	br	11818 <__alt_data_end+0xffff1818>
   11b84:	12001704 	addi	r8,r2,92
   11b88:	11c016c4 	addi	r7,r2,91
   11b8c:	4209883a 	add	r4,r8,r8
   11b90:	003e9606 	br	115ec <__alt_data_end+0xffff15ec>
   11b94:	3804d1ba 	srli	r2,r7,6
   11b98:	11400e44 	addi	r5,r2,57
   11b9c:	10c00e04 	addi	r3,r2,56
   11ba0:	294b883a 	add	r5,r5,r5
   11ba4:	003fbc06 	br	11a98 <__alt_data_end+0xffff1a98>
   11ba8:	84ff5926 	beq	r16,r19,11910 <__alt_data_end+0xffff1910>
   11bac:	00800074 	movhi	r2,1
   11bb0:	1098a604 	addi	r2,r2,25240
   11bb4:	14000217 	ldw	r16,8(r2)
   11bb8:	00bfff04 	movi	r2,-4
   11bbc:	80c00117 	ldw	r3,4(r16)
   11bc0:	1886703a 	and	r3,r3,r2
   11bc4:	003f9106 	br	11a0c <__alt_data_end+0xffff1a0c>
   11bc8:	60800217 	ldw	r2,8(r12)
   11bcc:	213fffc4 	addi	r4,r4,-1
   11bd0:	1300651e 	bne	r2,r12,11d68 <_malloc_r+0x7f4>
   11bd4:	208000cc 	andi	r2,r4,3
   11bd8:	633ffe04 	addi	r12,r12,-8
   11bdc:	103ffa1e 	bne	r2,zero,11bc8 <__alt_data_end+0xffff1bc8>
   11be0:	98800117 	ldw	r2,4(r19)
   11be4:	0146303a 	nor	r3,zero,r5
   11be8:	1884703a 	and	r2,r3,r2
   11bec:	98800115 	stw	r2,4(r19)
   11bf0:	294b883a 	add	r5,r5,r5
   11bf4:	117f2836 	bltu	r2,r5,11898 <__alt_data_end+0xffff1898>
   11bf8:	283f2726 	beq	r5,zero,11898 <__alt_data_end+0xffff1898>
   11bfc:	2886703a 	and	r3,r5,r2
   11c00:	5809883a 	mov	r4,r11
   11c04:	183ec31e 	bne	r3,zero,11714 <__alt_data_end+0xffff1714>
   11c08:	294b883a 	add	r5,r5,r5
   11c0c:	2886703a 	and	r3,r5,r2
   11c10:	21000104 	addi	r4,r4,4
   11c14:	183ffc26 	beq	r3,zero,11c08 <__alt_data_end+0xffff1c08>
   11c18:	003ebe06 	br	11714 <__alt_data_end+0xffff1714>
   11c1c:	00c05504 	movi	r3,340
   11c20:	18801236 	bltu	r3,r2,11c6c <_malloc_r+0x6f8>
   11c24:	8804d3fa 	srli	r2,r17,15
   11c28:	12001e04 	addi	r8,r2,120
   11c2c:	11c01dc4 	addi	r7,r2,119
   11c30:	4209883a 	add	r4,r8,r8
   11c34:	003e6d06 	br	115ec <__alt_data_end+0xffff15ec>
   11c38:	00c40004 	movi	r3,4096
   11c3c:	003f4606 	br	11958 <__alt_data_end+0xffff1958>
   11c40:	00800044 	movi	r2,1
   11c44:	a0800115 	stw	r2,4(r20)
   11c48:	003f7406 	br	11a1c <__alt_data_end+0xffff1a1c>
   11c4c:	1805d0ba 	srai	r2,r3,2
   11c50:	01c00044 	movi	r7,1
   11c54:	30c00117 	ldw	r3,4(r6)
   11c58:	388e983a 	sll	r7,r7,r2
   11c5c:	2805883a 	mov	r2,r5
   11c60:	38c6b03a 	or	r3,r7,r3
   11c64:	30c00115 	stw	r3,4(r6)
   11c68:	003f9b06 	br	11ad8 <__alt_data_end+0xffff1ad8>
   11c6c:	00c15504 	movi	r3,1364
   11c70:	18801a36 	bltu	r3,r2,11cdc <_malloc_r+0x768>
   11c74:	8804d4ba 	srli	r2,r17,18
   11c78:	12001f44 	addi	r8,r2,125
   11c7c:	11c01f04 	addi	r7,r2,124
   11c80:	4209883a 	add	r4,r8,r8
   11c84:	003e5906 	br	115ec <__alt_data_end+0xffff15ec>
   11c88:	ad400404 	addi	r21,r21,16
   11c8c:	003f1706 	br	118ec <__alt_data_end+0xffff18ec>
   11c90:	00c01504 	movi	r3,84
   11c94:	18802336 	bltu	r3,r2,11d24 <_malloc_r+0x7b0>
   11c98:	3804d33a 	srli	r2,r7,12
   11c9c:	11401bc4 	addi	r5,r2,111
   11ca0:	10c01b84 	addi	r3,r2,110
   11ca4:	294b883a 	add	r5,r5,r5
   11ca8:	003f7b06 	br	11a98 <__alt_data_end+0xffff1a98>
   11cac:	9c000217 	ldw	r16,8(r19)
   11cb0:	00bfff04 	movi	r2,-4
   11cb4:	80c00117 	ldw	r3,4(r16)
   11cb8:	1886703a 	and	r3,r3,r2
   11cbc:	003f5306 	br	11a0c <__alt_data_end+0xffff1a0c>
   11cc0:	3083ffcc 	andi	r2,r6,4095
   11cc4:	103f181e 	bne	r2,zero,11928 <__alt_data_end+0xffff1928>
   11cc8:	99000217 	ldw	r4,8(r19)
   11ccc:	b545883a 	add	r2,r22,r21
   11cd0:	10800054 	ori	r2,r2,1
   11cd4:	20800115 	stw	r2,4(r4)
   11cd8:	003f3e06 	br	119d4 <__alt_data_end+0xffff19d4>
   11cdc:	01003f84 	movi	r4,254
   11ce0:	02001fc4 	movi	r8,127
   11ce4:	01c01f84 	movi	r7,126
   11ce8:	003e4006 	br	115ec <__alt_data_end+0xffff15ec>
   11cec:	00800074 	movhi	r2,1
   11cf0:	109e2d04 	addi	r2,r2,30900
   11cf4:	15000015 	stw	r20,0(r2)
   11cf8:	003f1106 	br	11940 <__alt_data_end+0xffff1940>
   11cfc:	00800044 	movi	r2,1
   11d00:	002b883a 	mov	r21,zero
   11d04:	003f1f06 	br	11984 <__alt_data_end+0xffff1984>
   11d08:	81400204 	addi	r5,r16,8
   11d0c:	9009883a 	mov	r4,r18
   11d10:	0012ffc0 	call	12ffc <_free_r>
   11d14:	008000b4 	movhi	r2,2
   11d18:	10a52404 	addi	r2,r2,-27504
   11d1c:	10c00017 	ldw	r3,0(r2)
   11d20:	003f2c06 	br	119d4 <__alt_data_end+0xffff19d4>
   11d24:	00c05504 	movi	r3,340
   11d28:	18800536 	bltu	r3,r2,11d40 <_malloc_r+0x7cc>
   11d2c:	3804d3fa 	srli	r2,r7,15
   11d30:	11401e04 	addi	r5,r2,120
   11d34:	10c01dc4 	addi	r3,r2,119
   11d38:	294b883a 	add	r5,r5,r5
   11d3c:	003f5606 	br	11a98 <__alt_data_end+0xffff1a98>
   11d40:	00c15504 	movi	r3,1364
   11d44:	18800536 	bltu	r3,r2,11d5c <_malloc_r+0x7e8>
   11d48:	3804d4ba 	srli	r2,r7,18
   11d4c:	11401f44 	addi	r5,r2,125
   11d50:	10c01f04 	addi	r3,r2,124
   11d54:	294b883a 	add	r5,r5,r5
   11d58:	003f4f06 	br	11a98 <__alt_data_end+0xffff1a98>
   11d5c:	01403f84 	movi	r5,254
   11d60:	00c01f84 	movi	r3,126
   11d64:	003f4c06 	br	11a98 <__alt_data_end+0xffff1a98>
   11d68:	98800117 	ldw	r2,4(r19)
   11d6c:	003fa006 	br	11bf0 <__alt_data_end+0xffff1bf0>
   11d70:	8808d0fa 	srli	r4,r17,3
   11d74:	20800044 	addi	r2,r4,1
   11d78:	1085883a 	add	r2,r2,r2
   11d7c:	003e9006 	br	117c0 <__alt_data_end+0xffff17c0>

00011d80 <memchr>:
   11d80:	208000cc 	andi	r2,r4,3
   11d84:	280f883a 	mov	r7,r5
   11d88:	10003426 	beq	r2,zero,11e5c <memchr+0xdc>
   11d8c:	30bfffc4 	addi	r2,r6,-1
   11d90:	30001a26 	beq	r6,zero,11dfc <memchr+0x7c>
   11d94:	20c00003 	ldbu	r3,0(r4)
   11d98:	29803fcc 	andi	r6,r5,255
   11d9c:	30c0051e 	bne	r6,r3,11db4 <memchr+0x34>
   11da0:	00001806 	br	11e04 <memchr+0x84>
   11da4:	10001526 	beq	r2,zero,11dfc <memchr+0x7c>
   11da8:	20c00003 	ldbu	r3,0(r4)
   11dac:	10bfffc4 	addi	r2,r2,-1
   11db0:	30c01426 	beq	r6,r3,11e04 <memchr+0x84>
   11db4:	21000044 	addi	r4,r4,1
   11db8:	20c000cc 	andi	r3,r4,3
   11dbc:	183ff91e 	bne	r3,zero,11da4 <__alt_data_end+0xffff1da4>
   11dc0:	020000c4 	movi	r8,3
   11dc4:	40801136 	bltu	r8,r2,11e0c <memchr+0x8c>
   11dc8:	10000c26 	beq	r2,zero,11dfc <memchr+0x7c>
   11dcc:	20c00003 	ldbu	r3,0(r4)
   11dd0:	29403fcc 	andi	r5,r5,255
   11dd4:	28c00b26 	beq	r5,r3,11e04 <memchr+0x84>
   11dd8:	20c00044 	addi	r3,r4,1
   11ddc:	39803fcc 	andi	r6,r7,255
   11de0:	2089883a 	add	r4,r4,r2
   11de4:	00000306 	br	11df4 <memchr+0x74>
   11de8:	18c00044 	addi	r3,r3,1
   11dec:	197fffc3 	ldbu	r5,-1(r3)
   11df0:	31400526 	beq	r6,r5,11e08 <memchr+0x88>
   11df4:	1805883a 	mov	r2,r3
   11df8:	20fffb1e 	bne	r4,r3,11de8 <__alt_data_end+0xffff1de8>
   11dfc:	0005883a 	mov	r2,zero
   11e00:	f800283a 	ret
   11e04:	2005883a 	mov	r2,r4
   11e08:	f800283a 	ret
   11e0c:	28c03fcc 	andi	r3,r5,255
   11e10:	1812923a 	slli	r9,r3,8
   11e14:	02ffbff4 	movhi	r11,65279
   11e18:	02a02074 	movhi	r10,32897
   11e1c:	48d2b03a 	or	r9,r9,r3
   11e20:	4806943a 	slli	r3,r9,16
   11e24:	5affbfc4 	addi	r11,r11,-257
   11e28:	52a02004 	addi	r10,r10,-32640
   11e2c:	48d2b03a 	or	r9,r9,r3
   11e30:	20c00017 	ldw	r3,0(r4)
   11e34:	48c6f03a 	xor	r3,r9,r3
   11e38:	1acd883a 	add	r6,r3,r11
   11e3c:	00c6303a 	nor	r3,zero,r3
   11e40:	30c6703a 	and	r3,r6,r3
   11e44:	1a86703a 	and	r3,r3,r10
   11e48:	183fe01e 	bne	r3,zero,11dcc <__alt_data_end+0xffff1dcc>
   11e4c:	10bfff04 	addi	r2,r2,-4
   11e50:	21000104 	addi	r4,r4,4
   11e54:	40bff636 	bltu	r8,r2,11e30 <__alt_data_end+0xffff1e30>
   11e58:	003fdb06 	br	11dc8 <__alt_data_end+0xffff1dc8>
   11e5c:	3005883a 	mov	r2,r6
   11e60:	003fd706 	br	11dc0 <__alt_data_end+0xffff1dc0>

00011e64 <memcpy>:
   11e64:	defffd04 	addi	sp,sp,-12
   11e68:	dfc00215 	stw	ra,8(sp)
   11e6c:	dc400115 	stw	r17,4(sp)
   11e70:	dc000015 	stw	r16,0(sp)
   11e74:	00c003c4 	movi	r3,15
   11e78:	2005883a 	mov	r2,r4
   11e7c:	1980452e 	bgeu	r3,r6,11f94 <memcpy+0x130>
   11e80:	2906b03a 	or	r3,r5,r4
   11e84:	18c000cc 	andi	r3,r3,3
   11e88:	1800441e 	bne	r3,zero,11f9c <memcpy+0x138>
   11e8c:	347ffc04 	addi	r17,r6,-16
   11e90:	8822d13a 	srli	r17,r17,4
   11e94:	28c00104 	addi	r3,r5,4
   11e98:	23400104 	addi	r13,r4,4
   11e9c:	8820913a 	slli	r16,r17,4
   11ea0:	2b000204 	addi	r12,r5,8
   11ea4:	22c00204 	addi	r11,r4,8
   11ea8:	84000504 	addi	r16,r16,20
   11eac:	2a800304 	addi	r10,r5,12
   11eb0:	22400304 	addi	r9,r4,12
   11eb4:	2c21883a 	add	r16,r5,r16
   11eb8:	2811883a 	mov	r8,r5
   11ebc:	200f883a 	mov	r7,r4
   11ec0:	41000017 	ldw	r4,0(r8)
   11ec4:	1fc00017 	ldw	ra,0(r3)
   11ec8:	63c00017 	ldw	r15,0(r12)
   11ecc:	39000015 	stw	r4,0(r7)
   11ed0:	53800017 	ldw	r14,0(r10)
   11ed4:	6fc00015 	stw	ra,0(r13)
   11ed8:	5bc00015 	stw	r15,0(r11)
   11edc:	4b800015 	stw	r14,0(r9)
   11ee0:	18c00404 	addi	r3,r3,16
   11ee4:	39c00404 	addi	r7,r7,16
   11ee8:	42000404 	addi	r8,r8,16
   11eec:	6b400404 	addi	r13,r13,16
   11ef0:	63000404 	addi	r12,r12,16
   11ef4:	5ac00404 	addi	r11,r11,16
   11ef8:	52800404 	addi	r10,r10,16
   11efc:	4a400404 	addi	r9,r9,16
   11f00:	1c3fef1e 	bne	r3,r16,11ec0 <__alt_data_end+0xffff1ec0>
   11f04:	89c00044 	addi	r7,r17,1
   11f08:	380e913a 	slli	r7,r7,4
   11f0c:	310003cc 	andi	r4,r6,15
   11f10:	02c000c4 	movi	r11,3
   11f14:	11c7883a 	add	r3,r2,r7
   11f18:	29cb883a 	add	r5,r5,r7
   11f1c:	5900212e 	bgeu	r11,r4,11fa4 <memcpy+0x140>
   11f20:	1813883a 	mov	r9,r3
   11f24:	2811883a 	mov	r8,r5
   11f28:	200f883a 	mov	r7,r4
   11f2c:	42800017 	ldw	r10,0(r8)
   11f30:	4a400104 	addi	r9,r9,4
   11f34:	39ffff04 	addi	r7,r7,-4
   11f38:	4abfff15 	stw	r10,-4(r9)
   11f3c:	42000104 	addi	r8,r8,4
   11f40:	59fffa36 	bltu	r11,r7,11f2c <__alt_data_end+0xffff1f2c>
   11f44:	213fff04 	addi	r4,r4,-4
   11f48:	2008d0ba 	srli	r4,r4,2
   11f4c:	318000cc 	andi	r6,r6,3
   11f50:	21000044 	addi	r4,r4,1
   11f54:	2109883a 	add	r4,r4,r4
   11f58:	2109883a 	add	r4,r4,r4
   11f5c:	1907883a 	add	r3,r3,r4
   11f60:	290b883a 	add	r5,r5,r4
   11f64:	30000626 	beq	r6,zero,11f80 <memcpy+0x11c>
   11f68:	198d883a 	add	r6,r3,r6
   11f6c:	29c00003 	ldbu	r7,0(r5)
   11f70:	18c00044 	addi	r3,r3,1
   11f74:	29400044 	addi	r5,r5,1
   11f78:	19ffffc5 	stb	r7,-1(r3)
   11f7c:	19bffb1e 	bne	r3,r6,11f6c <__alt_data_end+0xffff1f6c>
   11f80:	dfc00217 	ldw	ra,8(sp)
   11f84:	dc400117 	ldw	r17,4(sp)
   11f88:	dc000017 	ldw	r16,0(sp)
   11f8c:	dec00304 	addi	sp,sp,12
   11f90:	f800283a 	ret
   11f94:	2007883a 	mov	r3,r4
   11f98:	003ff206 	br	11f64 <__alt_data_end+0xffff1f64>
   11f9c:	2007883a 	mov	r3,r4
   11fa0:	003ff106 	br	11f68 <__alt_data_end+0xffff1f68>
   11fa4:	200d883a 	mov	r6,r4
   11fa8:	003fee06 	br	11f64 <__alt_data_end+0xffff1f64>

00011fac <memmove>:
   11fac:	2005883a 	mov	r2,r4
   11fb0:	29000b2e 	bgeu	r5,r4,11fe0 <memmove+0x34>
   11fb4:	298f883a 	add	r7,r5,r6
   11fb8:	21c0092e 	bgeu	r4,r7,11fe0 <memmove+0x34>
   11fbc:	2187883a 	add	r3,r4,r6
   11fc0:	198bc83a 	sub	r5,r3,r6
   11fc4:	30004826 	beq	r6,zero,120e8 <memmove+0x13c>
   11fc8:	39ffffc4 	addi	r7,r7,-1
   11fcc:	39000003 	ldbu	r4,0(r7)
   11fd0:	18ffffc4 	addi	r3,r3,-1
   11fd4:	19000005 	stb	r4,0(r3)
   11fd8:	28fffb1e 	bne	r5,r3,11fc8 <__alt_data_end+0xffff1fc8>
   11fdc:	f800283a 	ret
   11fe0:	00c003c4 	movi	r3,15
   11fe4:	1980412e 	bgeu	r3,r6,120ec <memmove+0x140>
   11fe8:	2886b03a 	or	r3,r5,r2
   11fec:	18c000cc 	andi	r3,r3,3
   11ff0:	1800401e 	bne	r3,zero,120f4 <memmove+0x148>
   11ff4:	33fffc04 	addi	r15,r6,-16
   11ff8:	781ed13a 	srli	r15,r15,4
   11ffc:	28c00104 	addi	r3,r5,4
   12000:	13400104 	addi	r13,r2,4
   12004:	781c913a 	slli	r14,r15,4
   12008:	2b000204 	addi	r12,r5,8
   1200c:	12c00204 	addi	r11,r2,8
   12010:	73800504 	addi	r14,r14,20
   12014:	2a800304 	addi	r10,r5,12
   12018:	12400304 	addi	r9,r2,12
   1201c:	2b9d883a 	add	r14,r5,r14
   12020:	2811883a 	mov	r8,r5
   12024:	100f883a 	mov	r7,r2
   12028:	41000017 	ldw	r4,0(r8)
   1202c:	39c00404 	addi	r7,r7,16
   12030:	18c00404 	addi	r3,r3,16
   12034:	393ffc15 	stw	r4,-16(r7)
   12038:	193ffc17 	ldw	r4,-16(r3)
   1203c:	6b400404 	addi	r13,r13,16
   12040:	5ac00404 	addi	r11,r11,16
   12044:	693ffc15 	stw	r4,-16(r13)
   12048:	61000017 	ldw	r4,0(r12)
   1204c:	4a400404 	addi	r9,r9,16
   12050:	42000404 	addi	r8,r8,16
   12054:	593ffc15 	stw	r4,-16(r11)
   12058:	51000017 	ldw	r4,0(r10)
   1205c:	63000404 	addi	r12,r12,16
   12060:	52800404 	addi	r10,r10,16
   12064:	493ffc15 	stw	r4,-16(r9)
   12068:	1bbfef1e 	bne	r3,r14,12028 <__alt_data_end+0xffff2028>
   1206c:	79000044 	addi	r4,r15,1
   12070:	2008913a 	slli	r4,r4,4
   12074:	328003cc 	andi	r10,r6,15
   12078:	02c000c4 	movi	r11,3
   1207c:	1107883a 	add	r3,r2,r4
   12080:	290b883a 	add	r5,r5,r4
   12084:	5a801e2e 	bgeu	r11,r10,12100 <memmove+0x154>
   12088:	1813883a 	mov	r9,r3
   1208c:	2811883a 	mov	r8,r5
   12090:	500f883a 	mov	r7,r10
   12094:	41000017 	ldw	r4,0(r8)
   12098:	4a400104 	addi	r9,r9,4
   1209c:	39ffff04 	addi	r7,r7,-4
   120a0:	493fff15 	stw	r4,-4(r9)
   120a4:	42000104 	addi	r8,r8,4
   120a8:	59fffa36 	bltu	r11,r7,12094 <__alt_data_end+0xffff2094>
   120ac:	513fff04 	addi	r4,r10,-4
   120b0:	2008d0ba 	srli	r4,r4,2
   120b4:	318000cc 	andi	r6,r6,3
   120b8:	21000044 	addi	r4,r4,1
   120bc:	2109883a 	add	r4,r4,r4
   120c0:	2109883a 	add	r4,r4,r4
   120c4:	1907883a 	add	r3,r3,r4
   120c8:	290b883a 	add	r5,r5,r4
   120cc:	30000b26 	beq	r6,zero,120fc <memmove+0x150>
   120d0:	198d883a 	add	r6,r3,r6
   120d4:	29c00003 	ldbu	r7,0(r5)
   120d8:	18c00044 	addi	r3,r3,1
   120dc:	29400044 	addi	r5,r5,1
   120e0:	19ffffc5 	stb	r7,-1(r3)
   120e4:	19bffb1e 	bne	r3,r6,120d4 <__alt_data_end+0xffff20d4>
   120e8:	f800283a 	ret
   120ec:	1007883a 	mov	r3,r2
   120f0:	003ff606 	br	120cc <__alt_data_end+0xffff20cc>
   120f4:	1007883a 	mov	r3,r2
   120f8:	003ff506 	br	120d0 <__alt_data_end+0xffff20d0>
   120fc:	f800283a 	ret
   12100:	500d883a 	mov	r6,r10
   12104:	003ff106 	br	120cc <__alt_data_end+0xffff20cc>

00012108 <memset>:
   12108:	20c000cc 	andi	r3,r4,3
   1210c:	2005883a 	mov	r2,r4
   12110:	18004426 	beq	r3,zero,12224 <memset+0x11c>
   12114:	31ffffc4 	addi	r7,r6,-1
   12118:	30004026 	beq	r6,zero,1221c <memset+0x114>
   1211c:	2813883a 	mov	r9,r5
   12120:	200d883a 	mov	r6,r4
   12124:	2007883a 	mov	r3,r4
   12128:	00000406 	br	1213c <memset+0x34>
   1212c:	3a3fffc4 	addi	r8,r7,-1
   12130:	31800044 	addi	r6,r6,1
   12134:	38003926 	beq	r7,zero,1221c <memset+0x114>
   12138:	400f883a 	mov	r7,r8
   1213c:	18c00044 	addi	r3,r3,1
   12140:	32400005 	stb	r9,0(r6)
   12144:	1a0000cc 	andi	r8,r3,3
   12148:	403ff81e 	bne	r8,zero,1212c <__alt_data_end+0xffff212c>
   1214c:	010000c4 	movi	r4,3
   12150:	21c02d2e 	bgeu	r4,r7,12208 <memset+0x100>
   12154:	29003fcc 	andi	r4,r5,255
   12158:	200c923a 	slli	r6,r4,8
   1215c:	3108b03a 	or	r4,r6,r4
   12160:	200c943a 	slli	r6,r4,16
   12164:	218cb03a 	or	r6,r4,r6
   12168:	010003c4 	movi	r4,15
   1216c:	21c0182e 	bgeu	r4,r7,121d0 <memset+0xc8>
   12170:	3b3ffc04 	addi	r12,r7,-16
   12174:	6018d13a 	srli	r12,r12,4
   12178:	1a000104 	addi	r8,r3,4
   1217c:	1ac00204 	addi	r11,r3,8
   12180:	6008913a 	slli	r4,r12,4
   12184:	1a800304 	addi	r10,r3,12
   12188:	1813883a 	mov	r9,r3
   1218c:	21000504 	addi	r4,r4,20
   12190:	1909883a 	add	r4,r3,r4
   12194:	49800015 	stw	r6,0(r9)
   12198:	41800015 	stw	r6,0(r8)
   1219c:	59800015 	stw	r6,0(r11)
   121a0:	51800015 	stw	r6,0(r10)
   121a4:	42000404 	addi	r8,r8,16
   121a8:	4a400404 	addi	r9,r9,16
   121ac:	5ac00404 	addi	r11,r11,16
   121b0:	52800404 	addi	r10,r10,16
   121b4:	413ff71e 	bne	r8,r4,12194 <__alt_data_end+0xffff2194>
   121b8:	63000044 	addi	r12,r12,1
   121bc:	6018913a 	slli	r12,r12,4
   121c0:	39c003cc 	andi	r7,r7,15
   121c4:	010000c4 	movi	r4,3
   121c8:	1b07883a 	add	r3,r3,r12
   121cc:	21c00e2e 	bgeu	r4,r7,12208 <memset+0x100>
   121d0:	1813883a 	mov	r9,r3
   121d4:	3811883a 	mov	r8,r7
   121d8:	010000c4 	movi	r4,3
   121dc:	49800015 	stw	r6,0(r9)
   121e0:	423fff04 	addi	r8,r8,-4
   121e4:	4a400104 	addi	r9,r9,4
   121e8:	223ffc36 	bltu	r4,r8,121dc <__alt_data_end+0xffff21dc>
   121ec:	393fff04 	addi	r4,r7,-4
   121f0:	2008d0ba 	srli	r4,r4,2
   121f4:	39c000cc 	andi	r7,r7,3
   121f8:	21000044 	addi	r4,r4,1
   121fc:	2109883a 	add	r4,r4,r4
   12200:	2109883a 	add	r4,r4,r4
   12204:	1907883a 	add	r3,r3,r4
   12208:	38000526 	beq	r7,zero,12220 <memset+0x118>
   1220c:	19cf883a 	add	r7,r3,r7
   12210:	19400005 	stb	r5,0(r3)
   12214:	18c00044 	addi	r3,r3,1
   12218:	38fffd1e 	bne	r7,r3,12210 <__alt_data_end+0xffff2210>
   1221c:	f800283a 	ret
   12220:	f800283a 	ret
   12224:	2007883a 	mov	r3,r4
   12228:	300f883a 	mov	r7,r6
   1222c:	003fc706 	br	1214c <__alt_data_end+0xffff214c>

00012230 <_realloc_r>:
   12230:	defff604 	addi	sp,sp,-40
   12234:	dc800215 	stw	r18,8(sp)
   12238:	dfc00915 	stw	ra,36(sp)
   1223c:	df000815 	stw	fp,32(sp)
   12240:	ddc00715 	stw	r23,28(sp)
   12244:	dd800615 	stw	r22,24(sp)
   12248:	dd400515 	stw	r21,20(sp)
   1224c:	dd000415 	stw	r20,16(sp)
   12250:	dcc00315 	stw	r19,12(sp)
   12254:	dc400115 	stw	r17,4(sp)
   12258:	dc000015 	stw	r16,0(sp)
   1225c:	3025883a 	mov	r18,r6
   12260:	2800b726 	beq	r5,zero,12540 <_realloc_r+0x310>
   12264:	282b883a 	mov	r21,r5
   12268:	2029883a 	mov	r20,r4
   1226c:	0013bfc0 	call	13bfc <__malloc_lock>
   12270:	a8bfff17 	ldw	r2,-4(r21)
   12274:	043fff04 	movi	r16,-4
   12278:	90c002c4 	addi	r3,r18,11
   1227c:	01000584 	movi	r4,22
   12280:	acfffe04 	addi	r19,r21,-8
   12284:	1420703a 	and	r16,r2,r16
   12288:	20c0332e 	bgeu	r4,r3,12358 <_realloc_r+0x128>
   1228c:	047ffe04 	movi	r17,-8
   12290:	1c62703a 	and	r17,r3,r17
   12294:	8807883a 	mov	r3,r17
   12298:	88005816 	blt	r17,zero,123fc <_realloc_r+0x1cc>
   1229c:	8c805736 	bltu	r17,r18,123fc <_realloc_r+0x1cc>
   122a0:	80c0300e 	bge	r16,r3,12364 <_realloc_r+0x134>
   122a4:	07000074 	movhi	fp,1
   122a8:	e718a604 	addi	fp,fp,25240
   122ac:	e1c00217 	ldw	r7,8(fp)
   122b0:	9c09883a 	add	r4,r19,r16
   122b4:	22000117 	ldw	r8,4(r4)
   122b8:	21c06326 	beq	r4,r7,12448 <_realloc_r+0x218>
   122bc:	017fff84 	movi	r5,-2
   122c0:	414a703a 	and	r5,r8,r5
   122c4:	214b883a 	add	r5,r4,r5
   122c8:	29800117 	ldw	r6,4(r5)
   122cc:	3180004c 	andi	r6,r6,1
   122d0:	30003f26 	beq	r6,zero,123d0 <_realloc_r+0x1a0>
   122d4:	1080004c 	andi	r2,r2,1
   122d8:	10008326 	beq	r2,zero,124e8 <_realloc_r+0x2b8>
   122dc:	900b883a 	mov	r5,r18
   122e0:	a009883a 	mov	r4,r20
   122e4:	00115740 	call	11574 <_malloc_r>
   122e8:	1025883a 	mov	r18,r2
   122ec:	10011e26 	beq	r2,zero,12768 <_realloc_r+0x538>
   122f0:	a93fff17 	ldw	r4,-4(r21)
   122f4:	10fffe04 	addi	r3,r2,-8
   122f8:	00bfff84 	movi	r2,-2
   122fc:	2084703a 	and	r2,r4,r2
   12300:	9885883a 	add	r2,r19,r2
   12304:	1880ee26 	beq	r3,r2,126c0 <_realloc_r+0x490>
   12308:	81bfff04 	addi	r6,r16,-4
   1230c:	00800904 	movi	r2,36
   12310:	1180b836 	bltu	r2,r6,125f4 <_realloc_r+0x3c4>
   12314:	00c004c4 	movi	r3,19
   12318:	19809636 	bltu	r3,r6,12574 <_realloc_r+0x344>
   1231c:	9005883a 	mov	r2,r18
   12320:	a807883a 	mov	r3,r21
   12324:	19000017 	ldw	r4,0(r3)
   12328:	11000015 	stw	r4,0(r2)
   1232c:	19000117 	ldw	r4,4(r3)
   12330:	11000115 	stw	r4,4(r2)
   12334:	18c00217 	ldw	r3,8(r3)
   12338:	10c00215 	stw	r3,8(r2)
   1233c:	a80b883a 	mov	r5,r21
   12340:	a009883a 	mov	r4,r20
   12344:	0012ffc0 	call	12ffc <_free_r>
   12348:	a009883a 	mov	r4,r20
   1234c:	0013c200 	call	13c20 <__malloc_unlock>
   12350:	9005883a 	mov	r2,r18
   12354:	00001206 	br	123a0 <_realloc_r+0x170>
   12358:	00c00404 	movi	r3,16
   1235c:	1823883a 	mov	r17,r3
   12360:	003fce06 	br	1229c <__alt_data_end+0xffff229c>
   12364:	a825883a 	mov	r18,r21
   12368:	8445c83a 	sub	r2,r16,r17
   1236c:	00c003c4 	movi	r3,15
   12370:	18802636 	bltu	r3,r2,1240c <_realloc_r+0x1dc>
   12374:	99800117 	ldw	r6,4(r19)
   12378:	9c07883a 	add	r3,r19,r16
   1237c:	3180004c 	andi	r6,r6,1
   12380:	3420b03a 	or	r16,r6,r16
   12384:	9c000115 	stw	r16,4(r19)
   12388:	18800117 	ldw	r2,4(r3)
   1238c:	10800054 	ori	r2,r2,1
   12390:	18800115 	stw	r2,4(r3)
   12394:	a009883a 	mov	r4,r20
   12398:	0013c200 	call	13c20 <__malloc_unlock>
   1239c:	9005883a 	mov	r2,r18
   123a0:	dfc00917 	ldw	ra,36(sp)
   123a4:	df000817 	ldw	fp,32(sp)
   123a8:	ddc00717 	ldw	r23,28(sp)
   123ac:	dd800617 	ldw	r22,24(sp)
   123b0:	dd400517 	ldw	r21,20(sp)
   123b4:	dd000417 	ldw	r20,16(sp)
   123b8:	dcc00317 	ldw	r19,12(sp)
   123bc:	dc800217 	ldw	r18,8(sp)
   123c0:	dc400117 	ldw	r17,4(sp)
   123c4:	dc000017 	ldw	r16,0(sp)
   123c8:	dec00a04 	addi	sp,sp,40
   123cc:	f800283a 	ret
   123d0:	017fff04 	movi	r5,-4
   123d4:	414a703a 	and	r5,r8,r5
   123d8:	814d883a 	add	r6,r16,r5
   123dc:	30c01f16 	blt	r6,r3,1245c <_realloc_r+0x22c>
   123e0:	20800317 	ldw	r2,12(r4)
   123e4:	20c00217 	ldw	r3,8(r4)
   123e8:	a825883a 	mov	r18,r21
   123ec:	3021883a 	mov	r16,r6
   123f0:	18800315 	stw	r2,12(r3)
   123f4:	10c00215 	stw	r3,8(r2)
   123f8:	003fdb06 	br	12368 <__alt_data_end+0xffff2368>
   123fc:	00800304 	movi	r2,12
   12400:	a0800015 	stw	r2,0(r20)
   12404:	0005883a 	mov	r2,zero
   12408:	003fe506 	br	123a0 <__alt_data_end+0xffff23a0>
   1240c:	98c00117 	ldw	r3,4(r19)
   12410:	9c4b883a 	add	r5,r19,r17
   12414:	11000054 	ori	r4,r2,1
   12418:	18c0004c 	andi	r3,r3,1
   1241c:	1c62b03a 	or	r17,r3,r17
   12420:	9c400115 	stw	r17,4(r19)
   12424:	29000115 	stw	r4,4(r5)
   12428:	2885883a 	add	r2,r5,r2
   1242c:	10c00117 	ldw	r3,4(r2)
   12430:	29400204 	addi	r5,r5,8
   12434:	a009883a 	mov	r4,r20
   12438:	18c00054 	ori	r3,r3,1
   1243c:	10c00115 	stw	r3,4(r2)
   12440:	0012ffc0 	call	12ffc <_free_r>
   12444:	003fd306 	br	12394 <__alt_data_end+0xffff2394>
   12448:	017fff04 	movi	r5,-4
   1244c:	414a703a 	and	r5,r8,r5
   12450:	89800404 	addi	r6,r17,16
   12454:	8151883a 	add	r8,r16,r5
   12458:	4180590e 	bge	r8,r6,125c0 <_realloc_r+0x390>
   1245c:	1080004c 	andi	r2,r2,1
   12460:	103f9e1e 	bne	r2,zero,122dc <__alt_data_end+0xffff22dc>
   12464:	adbffe17 	ldw	r22,-8(r21)
   12468:	00bfff04 	movi	r2,-4
   1246c:	9dadc83a 	sub	r22,r19,r22
   12470:	b1800117 	ldw	r6,4(r22)
   12474:	3084703a 	and	r2,r6,r2
   12478:	20002026 	beq	r4,zero,124fc <_realloc_r+0x2cc>
   1247c:	80af883a 	add	r23,r16,r2
   12480:	b96f883a 	add	r23,r23,r5
   12484:	21c05f26 	beq	r4,r7,12604 <_realloc_r+0x3d4>
   12488:	b8c01c16 	blt	r23,r3,124fc <_realloc_r+0x2cc>
   1248c:	20800317 	ldw	r2,12(r4)
   12490:	20c00217 	ldw	r3,8(r4)
   12494:	81bfff04 	addi	r6,r16,-4
   12498:	01000904 	movi	r4,36
   1249c:	18800315 	stw	r2,12(r3)
   124a0:	10c00215 	stw	r3,8(r2)
   124a4:	b0c00217 	ldw	r3,8(r22)
   124a8:	b0800317 	ldw	r2,12(r22)
   124ac:	b4800204 	addi	r18,r22,8
   124b0:	18800315 	stw	r2,12(r3)
   124b4:	10c00215 	stw	r3,8(r2)
   124b8:	21801b36 	bltu	r4,r6,12528 <_realloc_r+0x2f8>
   124bc:	008004c4 	movi	r2,19
   124c0:	1180352e 	bgeu	r2,r6,12598 <_realloc_r+0x368>
   124c4:	a8800017 	ldw	r2,0(r21)
   124c8:	b0800215 	stw	r2,8(r22)
   124cc:	a8800117 	ldw	r2,4(r21)
   124d0:	b0800315 	stw	r2,12(r22)
   124d4:	008006c4 	movi	r2,27
   124d8:	11807f36 	bltu	r2,r6,126d8 <_realloc_r+0x4a8>
   124dc:	b0800404 	addi	r2,r22,16
   124e0:	ad400204 	addi	r21,r21,8
   124e4:	00002d06 	br	1259c <_realloc_r+0x36c>
   124e8:	adbffe17 	ldw	r22,-8(r21)
   124ec:	00bfff04 	movi	r2,-4
   124f0:	9dadc83a 	sub	r22,r19,r22
   124f4:	b1000117 	ldw	r4,4(r22)
   124f8:	2084703a 	and	r2,r4,r2
   124fc:	b03f7726 	beq	r22,zero,122dc <__alt_data_end+0xffff22dc>
   12500:	80af883a 	add	r23,r16,r2
   12504:	b8ff7516 	blt	r23,r3,122dc <__alt_data_end+0xffff22dc>
   12508:	b0800317 	ldw	r2,12(r22)
   1250c:	b0c00217 	ldw	r3,8(r22)
   12510:	81bfff04 	addi	r6,r16,-4
   12514:	01000904 	movi	r4,36
   12518:	18800315 	stw	r2,12(r3)
   1251c:	10c00215 	stw	r3,8(r2)
   12520:	b4800204 	addi	r18,r22,8
   12524:	21bfe52e 	bgeu	r4,r6,124bc <__alt_data_end+0xffff24bc>
   12528:	a80b883a 	mov	r5,r21
   1252c:	9009883a 	mov	r4,r18
   12530:	0011fac0 	call	11fac <memmove>
   12534:	b821883a 	mov	r16,r23
   12538:	b027883a 	mov	r19,r22
   1253c:	003f8a06 	br	12368 <__alt_data_end+0xffff2368>
   12540:	300b883a 	mov	r5,r6
   12544:	dfc00917 	ldw	ra,36(sp)
   12548:	df000817 	ldw	fp,32(sp)
   1254c:	ddc00717 	ldw	r23,28(sp)
   12550:	dd800617 	ldw	r22,24(sp)
   12554:	dd400517 	ldw	r21,20(sp)
   12558:	dd000417 	ldw	r20,16(sp)
   1255c:	dcc00317 	ldw	r19,12(sp)
   12560:	dc800217 	ldw	r18,8(sp)
   12564:	dc400117 	ldw	r17,4(sp)
   12568:	dc000017 	ldw	r16,0(sp)
   1256c:	dec00a04 	addi	sp,sp,40
   12570:	00115741 	jmpi	11574 <_malloc_r>
   12574:	a8c00017 	ldw	r3,0(r21)
   12578:	90c00015 	stw	r3,0(r18)
   1257c:	a8c00117 	ldw	r3,4(r21)
   12580:	90c00115 	stw	r3,4(r18)
   12584:	00c006c4 	movi	r3,27
   12588:	19804536 	bltu	r3,r6,126a0 <_realloc_r+0x470>
   1258c:	90800204 	addi	r2,r18,8
   12590:	a8c00204 	addi	r3,r21,8
   12594:	003f6306 	br	12324 <__alt_data_end+0xffff2324>
   12598:	9005883a 	mov	r2,r18
   1259c:	a8c00017 	ldw	r3,0(r21)
   125a0:	b821883a 	mov	r16,r23
   125a4:	b027883a 	mov	r19,r22
   125a8:	10c00015 	stw	r3,0(r2)
   125ac:	a8c00117 	ldw	r3,4(r21)
   125b0:	10c00115 	stw	r3,4(r2)
   125b4:	a8c00217 	ldw	r3,8(r21)
   125b8:	10c00215 	stw	r3,8(r2)
   125bc:	003f6a06 	br	12368 <__alt_data_end+0xffff2368>
   125c0:	9c67883a 	add	r19,r19,r17
   125c4:	4445c83a 	sub	r2,r8,r17
   125c8:	e4c00215 	stw	r19,8(fp)
   125cc:	10800054 	ori	r2,r2,1
   125d0:	98800115 	stw	r2,4(r19)
   125d4:	a8bfff17 	ldw	r2,-4(r21)
   125d8:	a009883a 	mov	r4,r20
   125dc:	1080004c 	andi	r2,r2,1
   125e0:	1462b03a 	or	r17,r2,r17
   125e4:	ac7fff15 	stw	r17,-4(r21)
   125e8:	0013c200 	call	13c20 <__malloc_unlock>
   125ec:	a805883a 	mov	r2,r21
   125f0:	003f6b06 	br	123a0 <__alt_data_end+0xffff23a0>
   125f4:	a80b883a 	mov	r5,r21
   125f8:	9009883a 	mov	r4,r18
   125fc:	0011fac0 	call	11fac <memmove>
   12600:	003f4e06 	br	1233c <__alt_data_end+0xffff233c>
   12604:	89000404 	addi	r4,r17,16
   12608:	b93fbc16 	blt	r23,r4,124fc <__alt_data_end+0xffff24fc>
   1260c:	b0800317 	ldw	r2,12(r22)
   12610:	b0c00217 	ldw	r3,8(r22)
   12614:	81bfff04 	addi	r6,r16,-4
   12618:	01000904 	movi	r4,36
   1261c:	18800315 	stw	r2,12(r3)
   12620:	10c00215 	stw	r3,8(r2)
   12624:	b4800204 	addi	r18,r22,8
   12628:	21804336 	bltu	r4,r6,12738 <_realloc_r+0x508>
   1262c:	008004c4 	movi	r2,19
   12630:	11803f2e 	bgeu	r2,r6,12730 <_realloc_r+0x500>
   12634:	a8800017 	ldw	r2,0(r21)
   12638:	b0800215 	stw	r2,8(r22)
   1263c:	a8800117 	ldw	r2,4(r21)
   12640:	b0800315 	stw	r2,12(r22)
   12644:	008006c4 	movi	r2,27
   12648:	11803f36 	bltu	r2,r6,12748 <_realloc_r+0x518>
   1264c:	b0800404 	addi	r2,r22,16
   12650:	ad400204 	addi	r21,r21,8
   12654:	a8c00017 	ldw	r3,0(r21)
   12658:	10c00015 	stw	r3,0(r2)
   1265c:	a8c00117 	ldw	r3,4(r21)
   12660:	10c00115 	stw	r3,4(r2)
   12664:	a8c00217 	ldw	r3,8(r21)
   12668:	10c00215 	stw	r3,8(r2)
   1266c:	b447883a 	add	r3,r22,r17
   12670:	bc45c83a 	sub	r2,r23,r17
   12674:	e0c00215 	stw	r3,8(fp)
   12678:	10800054 	ori	r2,r2,1
   1267c:	18800115 	stw	r2,4(r3)
   12680:	b0800117 	ldw	r2,4(r22)
   12684:	a009883a 	mov	r4,r20
   12688:	1080004c 	andi	r2,r2,1
   1268c:	1462b03a 	or	r17,r2,r17
   12690:	b4400115 	stw	r17,4(r22)
   12694:	0013c200 	call	13c20 <__malloc_unlock>
   12698:	9005883a 	mov	r2,r18
   1269c:	003f4006 	br	123a0 <__alt_data_end+0xffff23a0>
   126a0:	a8c00217 	ldw	r3,8(r21)
   126a4:	90c00215 	stw	r3,8(r18)
   126a8:	a8c00317 	ldw	r3,12(r21)
   126ac:	90c00315 	stw	r3,12(r18)
   126b0:	30801126 	beq	r6,r2,126f8 <_realloc_r+0x4c8>
   126b4:	90800404 	addi	r2,r18,16
   126b8:	a8c00404 	addi	r3,r21,16
   126bc:	003f1906 	br	12324 <__alt_data_end+0xffff2324>
   126c0:	90ffff17 	ldw	r3,-4(r18)
   126c4:	00bfff04 	movi	r2,-4
   126c8:	a825883a 	mov	r18,r21
   126cc:	1884703a 	and	r2,r3,r2
   126d0:	80a1883a 	add	r16,r16,r2
   126d4:	003f2406 	br	12368 <__alt_data_end+0xffff2368>
   126d8:	a8800217 	ldw	r2,8(r21)
   126dc:	b0800415 	stw	r2,16(r22)
   126e0:	a8800317 	ldw	r2,12(r21)
   126e4:	b0800515 	stw	r2,20(r22)
   126e8:	31000a26 	beq	r6,r4,12714 <_realloc_r+0x4e4>
   126ec:	b0800604 	addi	r2,r22,24
   126f0:	ad400404 	addi	r21,r21,16
   126f4:	003fa906 	br	1259c <__alt_data_end+0xffff259c>
   126f8:	a9000417 	ldw	r4,16(r21)
   126fc:	90800604 	addi	r2,r18,24
   12700:	a8c00604 	addi	r3,r21,24
   12704:	91000415 	stw	r4,16(r18)
   12708:	a9000517 	ldw	r4,20(r21)
   1270c:	91000515 	stw	r4,20(r18)
   12710:	003f0406 	br	12324 <__alt_data_end+0xffff2324>
   12714:	a8c00417 	ldw	r3,16(r21)
   12718:	ad400604 	addi	r21,r21,24
   1271c:	b0800804 	addi	r2,r22,32
   12720:	b0c00615 	stw	r3,24(r22)
   12724:	a8ffff17 	ldw	r3,-4(r21)
   12728:	b0c00715 	stw	r3,28(r22)
   1272c:	003f9b06 	br	1259c <__alt_data_end+0xffff259c>
   12730:	9005883a 	mov	r2,r18
   12734:	003fc706 	br	12654 <__alt_data_end+0xffff2654>
   12738:	a80b883a 	mov	r5,r21
   1273c:	9009883a 	mov	r4,r18
   12740:	0011fac0 	call	11fac <memmove>
   12744:	003fc906 	br	1266c <__alt_data_end+0xffff266c>
   12748:	a8800217 	ldw	r2,8(r21)
   1274c:	b0800415 	stw	r2,16(r22)
   12750:	a8800317 	ldw	r2,12(r21)
   12754:	b0800515 	stw	r2,20(r22)
   12758:	31000726 	beq	r6,r4,12778 <_realloc_r+0x548>
   1275c:	b0800604 	addi	r2,r22,24
   12760:	ad400404 	addi	r21,r21,16
   12764:	003fbb06 	br	12654 <__alt_data_end+0xffff2654>
   12768:	a009883a 	mov	r4,r20
   1276c:	0013c200 	call	13c20 <__malloc_unlock>
   12770:	0005883a 	mov	r2,zero
   12774:	003f0a06 	br	123a0 <__alt_data_end+0xffff23a0>
   12778:	a8c00417 	ldw	r3,16(r21)
   1277c:	ad400604 	addi	r21,r21,24
   12780:	b0800804 	addi	r2,r22,32
   12784:	b0c00615 	stw	r3,24(r22)
   12788:	a8ffff17 	ldw	r3,-4(r21)
   1278c:	b0c00715 	stw	r3,28(r22)
   12790:	003fb006 	br	12654 <__alt_data_end+0xffff2654>

00012794 <_sbrk_r>:
   12794:	defffd04 	addi	sp,sp,-12
   12798:	dc000015 	stw	r16,0(sp)
   1279c:	040000b4 	movhi	r16,2
   127a0:	dc400115 	stw	r17,4(sp)
   127a4:	8424e804 	addi	r16,r16,-27744
   127a8:	2023883a 	mov	r17,r4
   127ac:	2809883a 	mov	r4,r5
   127b0:	dfc00215 	stw	ra,8(sp)
   127b4:	80000015 	stw	zero,0(r16)
   127b8:	0013e440 	call	13e44 <sbrk>
   127bc:	00ffffc4 	movi	r3,-1
   127c0:	10c00526 	beq	r2,r3,127d8 <_sbrk_r+0x44>
   127c4:	dfc00217 	ldw	ra,8(sp)
   127c8:	dc400117 	ldw	r17,4(sp)
   127cc:	dc000017 	ldw	r16,0(sp)
   127d0:	dec00304 	addi	sp,sp,12
   127d4:	f800283a 	ret
   127d8:	80c00017 	ldw	r3,0(r16)
   127dc:	183ff926 	beq	r3,zero,127c4 <__alt_data_end+0xffff27c4>
   127e0:	88c00015 	stw	r3,0(r17)
   127e4:	003ff706 	br	127c4 <__alt_data_end+0xffff27c4>

000127e8 <__sread>:
   127e8:	defffe04 	addi	sp,sp,-8
   127ec:	dc000015 	stw	r16,0(sp)
   127f0:	2821883a 	mov	r16,r5
   127f4:	2940038f 	ldh	r5,14(r5)
   127f8:	dfc00115 	stw	ra,4(sp)
   127fc:	00135280 	call	13528 <_read_r>
   12800:	10000716 	blt	r2,zero,12820 <__sread+0x38>
   12804:	80c01417 	ldw	r3,80(r16)
   12808:	1887883a 	add	r3,r3,r2
   1280c:	80c01415 	stw	r3,80(r16)
   12810:	dfc00117 	ldw	ra,4(sp)
   12814:	dc000017 	ldw	r16,0(sp)
   12818:	dec00204 	addi	sp,sp,8
   1281c:	f800283a 	ret
   12820:	80c0030b 	ldhu	r3,12(r16)
   12824:	18fbffcc 	andi	r3,r3,61439
   12828:	80c0030d 	sth	r3,12(r16)
   1282c:	dfc00117 	ldw	ra,4(sp)
   12830:	dc000017 	ldw	r16,0(sp)
   12834:	dec00204 	addi	sp,sp,8
   12838:	f800283a 	ret

0001283c <__seofread>:
   1283c:	0005883a 	mov	r2,zero
   12840:	f800283a 	ret

00012844 <__swrite>:
   12844:	2880030b 	ldhu	r2,12(r5)
   12848:	defffb04 	addi	sp,sp,-20
   1284c:	dcc00315 	stw	r19,12(sp)
   12850:	dc800215 	stw	r18,8(sp)
   12854:	dc400115 	stw	r17,4(sp)
   12858:	dc000015 	stw	r16,0(sp)
   1285c:	dfc00415 	stw	ra,16(sp)
   12860:	10c0400c 	andi	r3,r2,256
   12864:	2821883a 	mov	r16,r5
   12868:	2023883a 	mov	r17,r4
   1286c:	3025883a 	mov	r18,r6
   12870:	3827883a 	mov	r19,r7
   12874:	18000526 	beq	r3,zero,1288c <__swrite+0x48>
   12878:	2940038f 	ldh	r5,14(r5)
   1287c:	01c00084 	movi	r7,2
   12880:	000d883a 	mov	r6,zero
   12884:	001330c0 	call	1330c <_lseek_r>
   12888:	8080030b 	ldhu	r2,12(r16)
   1288c:	8140038f 	ldh	r5,14(r16)
   12890:	10bbffcc 	andi	r2,r2,61439
   12894:	980f883a 	mov	r7,r19
   12898:	900d883a 	mov	r6,r18
   1289c:	8809883a 	mov	r4,r17
   128a0:	8080030d 	sth	r2,12(r16)
   128a4:	dfc00417 	ldw	ra,16(sp)
   128a8:	dcc00317 	ldw	r19,12(sp)
   128ac:	dc800217 	ldw	r18,8(sp)
   128b0:	dc400117 	ldw	r17,4(sp)
   128b4:	dc000017 	ldw	r16,0(sp)
   128b8:	dec00504 	addi	sp,sp,20
   128bc:	00129241 	jmpi	12924 <_write_r>

000128c0 <__sseek>:
   128c0:	defffe04 	addi	sp,sp,-8
   128c4:	dc000015 	stw	r16,0(sp)
   128c8:	2821883a 	mov	r16,r5
   128cc:	2940038f 	ldh	r5,14(r5)
   128d0:	dfc00115 	stw	ra,4(sp)
   128d4:	001330c0 	call	1330c <_lseek_r>
   128d8:	00ffffc4 	movi	r3,-1
   128dc:	10c00826 	beq	r2,r3,12900 <__sseek+0x40>
   128e0:	80c0030b 	ldhu	r3,12(r16)
   128e4:	80801415 	stw	r2,80(r16)
   128e8:	18c40014 	ori	r3,r3,4096
   128ec:	80c0030d 	sth	r3,12(r16)
   128f0:	dfc00117 	ldw	ra,4(sp)
   128f4:	dc000017 	ldw	r16,0(sp)
   128f8:	dec00204 	addi	sp,sp,8
   128fc:	f800283a 	ret
   12900:	80c0030b 	ldhu	r3,12(r16)
   12904:	18fbffcc 	andi	r3,r3,61439
   12908:	80c0030d 	sth	r3,12(r16)
   1290c:	dfc00117 	ldw	ra,4(sp)
   12910:	dc000017 	ldw	r16,0(sp)
   12914:	dec00204 	addi	sp,sp,8
   12918:	f800283a 	ret

0001291c <__sclose>:
   1291c:	2940038f 	ldh	r5,14(r5)
   12920:	0012ad81 	jmpi	12ad8 <_close_r>

00012924 <_write_r>:
   12924:	defffd04 	addi	sp,sp,-12
   12928:	2805883a 	mov	r2,r5
   1292c:	dc000015 	stw	r16,0(sp)
   12930:	040000b4 	movhi	r16,2
   12934:	dc400115 	stw	r17,4(sp)
   12938:	300b883a 	mov	r5,r6
   1293c:	8424e804 	addi	r16,r16,-27744
   12940:	2023883a 	mov	r17,r4
   12944:	380d883a 	mov	r6,r7
   12948:	1009883a 	mov	r4,r2
   1294c:	dfc00215 	stw	ra,8(sp)
   12950:	80000015 	stw	zero,0(r16)
   12954:	0013f300 	call	13f30 <write>
   12958:	00ffffc4 	movi	r3,-1
   1295c:	10c00526 	beq	r2,r3,12974 <_write_r+0x50>
   12960:	dfc00217 	ldw	ra,8(sp)
   12964:	dc400117 	ldw	r17,4(sp)
   12968:	dc000017 	ldw	r16,0(sp)
   1296c:	dec00304 	addi	sp,sp,12
   12970:	f800283a 	ret
   12974:	80c00017 	ldw	r3,0(r16)
   12978:	183ff926 	beq	r3,zero,12960 <__alt_data_end+0xffff2960>
   1297c:	88c00015 	stw	r3,0(r17)
   12980:	003ff706 	br	12960 <__alt_data_end+0xffff2960>

00012984 <__swsetup_r>:
   12984:	00800074 	movhi	r2,1
   12988:	defffd04 	addi	sp,sp,-12
   1298c:	109e2c04 	addi	r2,r2,30896
   12990:	dc400115 	stw	r17,4(sp)
   12994:	2023883a 	mov	r17,r4
   12998:	11000017 	ldw	r4,0(r2)
   1299c:	dc000015 	stw	r16,0(sp)
   129a0:	dfc00215 	stw	ra,8(sp)
   129a4:	2821883a 	mov	r16,r5
   129a8:	20000226 	beq	r4,zero,129b4 <__swsetup_r+0x30>
   129ac:	20800e17 	ldw	r2,56(r4)
   129b0:	10003126 	beq	r2,zero,12a78 <__swsetup_r+0xf4>
   129b4:	8080030b 	ldhu	r2,12(r16)
   129b8:	10c0020c 	andi	r3,r2,8
   129bc:	1009883a 	mov	r4,r2
   129c0:	18000f26 	beq	r3,zero,12a00 <__swsetup_r+0x7c>
   129c4:	80c00417 	ldw	r3,16(r16)
   129c8:	18001526 	beq	r3,zero,12a20 <__swsetup_r+0x9c>
   129cc:	1100004c 	andi	r4,r2,1
   129d0:	20001c1e 	bne	r4,zero,12a44 <__swsetup_r+0xc0>
   129d4:	1080008c 	andi	r2,r2,2
   129d8:	1000291e 	bne	r2,zero,12a80 <__swsetup_r+0xfc>
   129dc:	80800517 	ldw	r2,20(r16)
   129e0:	80800215 	stw	r2,8(r16)
   129e4:	18001c26 	beq	r3,zero,12a58 <__swsetup_r+0xd4>
   129e8:	0005883a 	mov	r2,zero
   129ec:	dfc00217 	ldw	ra,8(sp)
   129f0:	dc400117 	ldw	r17,4(sp)
   129f4:	dc000017 	ldw	r16,0(sp)
   129f8:	dec00304 	addi	sp,sp,12
   129fc:	f800283a 	ret
   12a00:	2080040c 	andi	r2,r4,16
   12a04:	10002e26 	beq	r2,zero,12ac0 <__swsetup_r+0x13c>
   12a08:	2080010c 	andi	r2,r4,4
   12a0c:	10001e1e 	bne	r2,zero,12a88 <__swsetup_r+0x104>
   12a10:	80c00417 	ldw	r3,16(r16)
   12a14:	20800214 	ori	r2,r4,8
   12a18:	8080030d 	sth	r2,12(r16)
   12a1c:	183feb1e 	bne	r3,zero,129cc <__alt_data_end+0xffff29cc>
   12a20:	1100a00c 	andi	r4,r2,640
   12a24:	01408004 	movi	r5,512
   12a28:	217fe826 	beq	r4,r5,129cc <__alt_data_end+0xffff29cc>
   12a2c:	800b883a 	mov	r5,r16
   12a30:	8809883a 	mov	r4,r17
   12a34:	001336c0 	call	1336c <__smakebuf_r>
   12a38:	8080030b 	ldhu	r2,12(r16)
   12a3c:	80c00417 	ldw	r3,16(r16)
   12a40:	003fe206 	br	129cc <__alt_data_end+0xffff29cc>
   12a44:	80800517 	ldw	r2,20(r16)
   12a48:	80000215 	stw	zero,8(r16)
   12a4c:	0085c83a 	sub	r2,zero,r2
   12a50:	80800615 	stw	r2,24(r16)
   12a54:	183fe41e 	bne	r3,zero,129e8 <__alt_data_end+0xffff29e8>
   12a58:	80c0030b 	ldhu	r3,12(r16)
   12a5c:	0005883a 	mov	r2,zero
   12a60:	1900200c 	andi	r4,r3,128
   12a64:	203fe126 	beq	r4,zero,129ec <__alt_data_end+0xffff29ec>
   12a68:	18c01014 	ori	r3,r3,64
   12a6c:	80c0030d 	sth	r3,12(r16)
   12a70:	00bfffc4 	movi	r2,-1
   12a74:	003fdd06 	br	129ec <__alt_data_end+0xffff29ec>
   12a78:	0010ed40 	call	10ed4 <__sinit>
   12a7c:	003fcd06 	br	129b4 <__alt_data_end+0xffff29b4>
   12a80:	0005883a 	mov	r2,zero
   12a84:	003fd606 	br	129e0 <__alt_data_end+0xffff29e0>
   12a88:	81400c17 	ldw	r5,48(r16)
   12a8c:	28000626 	beq	r5,zero,12aa8 <__swsetup_r+0x124>
   12a90:	80801004 	addi	r2,r16,64
   12a94:	28800326 	beq	r5,r2,12aa4 <__swsetup_r+0x120>
   12a98:	8809883a 	mov	r4,r17
   12a9c:	0012ffc0 	call	12ffc <_free_r>
   12aa0:	8100030b 	ldhu	r4,12(r16)
   12aa4:	80000c15 	stw	zero,48(r16)
   12aa8:	80c00417 	ldw	r3,16(r16)
   12aac:	00bff6c4 	movi	r2,-37
   12ab0:	1108703a 	and	r4,r2,r4
   12ab4:	80000115 	stw	zero,4(r16)
   12ab8:	80c00015 	stw	r3,0(r16)
   12abc:	003fd506 	br	12a14 <__alt_data_end+0xffff2a14>
   12ac0:	00800244 	movi	r2,9
   12ac4:	88800015 	stw	r2,0(r17)
   12ac8:	20801014 	ori	r2,r4,64
   12acc:	8080030d 	sth	r2,12(r16)
   12ad0:	00bfffc4 	movi	r2,-1
   12ad4:	003fc506 	br	129ec <__alt_data_end+0xffff29ec>

00012ad8 <_close_r>:
   12ad8:	defffd04 	addi	sp,sp,-12
   12adc:	dc000015 	stw	r16,0(sp)
   12ae0:	040000b4 	movhi	r16,2
   12ae4:	dc400115 	stw	r17,4(sp)
   12ae8:	8424e804 	addi	r16,r16,-27744
   12aec:	2023883a 	mov	r17,r4
   12af0:	2809883a 	mov	r4,r5
   12af4:	dfc00215 	stw	ra,8(sp)
   12af8:	80000015 	stw	zero,0(r16)
   12afc:	001369c0 	call	1369c <close>
   12b00:	00ffffc4 	movi	r3,-1
   12b04:	10c00526 	beq	r2,r3,12b1c <_close_r+0x44>
   12b08:	dfc00217 	ldw	ra,8(sp)
   12b0c:	dc400117 	ldw	r17,4(sp)
   12b10:	dc000017 	ldw	r16,0(sp)
   12b14:	dec00304 	addi	sp,sp,12
   12b18:	f800283a 	ret
   12b1c:	80c00017 	ldw	r3,0(r16)
   12b20:	183ff926 	beq	r3,zero,12b08 <__alt_data_end+0xffff2b08>
   12b24:	88c00015 	stw	r3,0(r17)
   12b28:	003ff706 	br	12b08 <__alt_data_end+0xffff2b08>

00012b2c <_fclose_r>:
   12b2c:	28003926 	beq	r5,zero,12c14 <_fclose_r+0xe8>
   12b30:	defffc04 	addi	sp,sp,-16
   12b34:	dc400115 	stw	r17,4(sp)
   12b38:	dc000015 	stw	r16,0(sp)
   12b3c:	dfc00315 	stw	ra,12(sp)
   12b40:	dc800215 	stw	r18,8(sp)
   12b44:	2023883a 	mov	r17,r4
   12b48:	2821883a 	mov	r16,r5
   12b4c:	20000226 	beq	r4,zero,12b58 <_fclose_r+0x2c>
   12b50:	20800e17 	ldw	r2,56(r4)
   12b54:	10002726 	beq	r2,zero,12bf4 <_fclose_r+0xc8>
   12b58:	8080030f 	ldh	r2,12(r16)
   12b5c:	1000071e 	bne	r2,zero,12b7c <_fclose_r+0x50>
   12b60:	0005883a 	mov	r2,zero
   12b64:	dfc00317 	ldw	ra,12(sp)
   12b68:	dc800217 	ldw	r18,8(sp)
   12b6c:	dc400117 	ldw	r17,4(sp)
   12b70:	dc000017 	ldw	r16,0(sp)
   12b74:	dec00404 	addi	sp,sp,16
   12b78:	f800283a 	ret
   12b7c:	800b883a 	mov	r5,r16
   12b80:	8809883a 	mov	r4,r17
   12b84:	0012c300 	call	12c30 <__sflush_r>
   12b88:	1025883a 	mov	r18,r2
   12b8c:	80800b17 	ldw	r2,44(r16)
   12b90:	10000426 	beq	r2,zero,12ba4 <_fclose_r+0x78>
   12b94:	81400717 	ldw	r5,28(r16)
   12b98:	8809883a 	mov	r4,r17
   12b9c:	103ee83a 	callr	r2
   12ba0:	10001616 	blt	r2,zero,12bfc <_fclose_r+0xd0>
   12ba4:	8080030b 	ldhu	r2,12(r16)
   12ba8:	1080200c 	andi	r2,r2,128
   12bac:	1000151e 	bne	r2,zero,12c04 <_fclose_r+0xd8>
   12bb0:	81400c17 	ldw	r5,48(r16)
   12bb4:	28000526 	beq	r5,zero,12bcc <_fclose_r+0xa0>
   12bb8:	80801004 	addi	r2,r16,64
   12bbc:	28800226 	beq	r5,r2,12bc8 <_fclose_r+0x9c>
   12bc0:	8809883a 	mov	r4,r17
   12bc4:	0012ffc0 	call	12ffc <_free_r>
   12bc8:	80000c15 	stw	zero,48(r16)
   12bcc:	81401117 	ldw	r5,68(r16)
   12bd0:	28000326 	beq	r5,zero,12be0 <_fclose_r+0xb4>
   12bd4:	8809883a 	mov	r4,r17
   12bd8:	0012ffc0 	call	12ffc <_free_r>
   12bdc:	80001115 	stw	zero,68(r16)
   12be0:	0010ee40 	call	10ee4 <__sfp_lock_acquire>
   12be4:	8000030d 	sth	zero,12(r16)
   12be8:	0010ee80 	call	10ee8 <__sfp_lock_release>
   12bec:	9005883a 	mov	r2,r18
   12bf0:	003fdc06 	br	12b64 <__alt_data_end+0xffff2b64>
   12bf4:	0010ed40 	call	10ed4 <__sinit>
   12bf8:	003fd706 	br	12b58 <__alt_data_end+0xffff2b58>
   12bfc:	04bfffc4 	movi	r18,-1
   12c00:	003fe806 	br	12ba4 <__alt_data_end+0xffff2ba4>
   12c04:	81400417 	ldw	r5,16(r16)
   12c08:	8809883a 	mov	r4,r17
   12c0c:	0012ffc0 	call	12ffc <_free_r>
   12c10:	003fe706 	br	12bb0 <__alt_data_end+0xffff2bb0>
   12c14:	0005883a 	mov	r2,zero
   12c18:	f800283a 	ret

00012c1c <fclose>:
   12c1c:	00800074 	movhi	r2,1
   12c20:	109e2c04 	addi	r2,r2,30896
   12c24:	200b883a 	mov	r5,r4
   12c28:	11000017 	ldw	r4,0(r2)
   12c2c:	0012b2c1 	jmpi	12b2c <_fclose_r>

00012c30 <__sflush_r>:
   12c30:	2880030b 	ldhu	r2,12(r5)
   12c34:	defffb04 	addi	sp,sp,-20
   12c38:	dcc00315 	stw	r19,12(sp)
   12c3c:	dc400115 	stw	r17,4(sp)
   12c40:	dfc00415 	stw	ra,16(sp)
   12c44:	dc800215 	stw	r18,8(sp)
   12c48:	dc000015 	stw	r16,0(sp)
   12c4c:	10c0020c 	andi	r3,r2,8
   12c50:	2823883a 	mov	r17,r5
   12c54:	2027883a 	mov	r19,r4
   12c58:	1800311e 	bne	r3,zero,12d20 <__sflush_r+0xf0>
   12c5c:	28c00117 	ldw	r3,4(r5)
   12c60:	10820014 	ori	r2,r2,2048
   12c64:	2880030d 	sth	r2,12(r5)
   12c68:	00c04b0e 	bge	zero,r3,12d98 <__sflush_r+0x168>
   12c6c:	8a000a17 	ldw	r8,40(r17)
   12c70:	40002326 	beq	r8,zero,12d00 <__sflush_r+0xd0>
   12c74:	9c000017 	ldw	r16,0(r19)
   12c78:	10c4000c 	andi	r3,r2,4096
   12c7c:	98000015 	stw	zero,0(r19)
   12c80:	18004826 	beq	r3,zero,12da4 <__sflush_r+0x174>
   12c84:	89801417 	ldw	r6,80(r17)
   12c88:	10c0010c 	andi	r3,r2,4
   12c8c:	18000626 	beq	r3,zero,12ca8 <__sflush_r+0x78>
   12c90:	88c00117 	ldw	r3,4(r17)
   12c94:	88800c17 	ldw	r2,48(r17)
   12c98:	30cdc83a 	sub	r6,r6,r3
   12c9c:	10000226 	beq	r2,zero,12ca8 <__sflush_r+0x78>
   12ca0:	88800f17 	ldw	r2,60(r17)
   12ca4:	308dc83a 	sub	r6,r6,r2
   12ca8:	89400717 	ldw	r5,28(r17)
   12cac:	000f883a 	mov	r7,zero
   12cb0:	9809883a 	mov	r4,r19
   12cb4:	403ee83a 	callr	r8
   12cb8:	00ffffc4 	movi	r3,-1
   12cbc:	10c04426 	beq	r2,r3,12dd0 <__sflush_r+0x1a0>
   12cc0:	88c0030b 	ldhu	r3,12(r17)
   12cc4:	89000417 	ldw	r4,16(r17)
   12cc8:	88000115 	stw	zero,4(r17)
   12ccc:	197dffcc 	andi	r5,r3,63487
   12cd0:	8940030d 	sth	r5,12(r17)
   12cd4:	89000015 	stw	r4,0(r17)
   12cd8:	18c4000c 	andi	r3,r3,4096
   12cdc:	18002c1e 	bne	r3,zero,12d90 <__sflush_r+0x160>
   12ce0:	89400c17 	ldw	r5,48(r17)
   12ce4:	9c000015 	stw	r16,0(r19)
   12ce8:	28000526 	beq	r5,zero,12d00 <__sflush_r+0xd0>
   12cec:	88801004 	addi	r2,r17,64
   12cf0:	28800226 	beq	r5,r2,12cfc <__sflush_r+0xcc>
   12cf4:	9809883a 	mov	r4,r19
   12cf8:	0012ffc0 	call	12ffc <_free_r>
   12cfc:	88000c15 	stw	zero,48(r17)
   12d00:	0005883a 	mov	r2,zero
   12d04:	dfc00417 	ldw	ra,16(sp)
   12d08:	dcc00317 	ldw	r19,12(sp)
   12d0c:	dc800217 	ldw	r18,8(sp)
   12d10:	dc400117 	ldw	r17,4(sp)
   12d14:	dc000017 	ldw	r16,0(sp)
   12d18:	dec00504 	addi	sp,sp,20
   12d1c:	f800283a 	ret
   12d20:	2c800417 	ldw	r18,16(r5)
   12d24:	903ff626 	beq	r18,zero,12d00 <__alt_data_end+0xffff2d00>
   12d28:	2c000017 	ldw	r16,0(r5)
   12d2c:	108000cc 	andi	r2,r2,3
   12d30:	2c800015 	stw	r18,0(r5)
   12d34:	84a1c83a 	sub	r16,r16,r18
   12d38:	1000131e 	bne	r2,zero,12d88 <__sflush_r+0x158>
   12d3c:	28800517 	ldw	r2,20(r5)
   12d40:	88800215 	stw	r2,8(r17)
   12d44:	04000316 	blt	zero,r16,12d54 <__sflush_r+0x124>
   12d48:	003fed06 	br	12d00 <__alt_data_end+0xffff2d00>
   12d4c:	90a5883a 	add	r18,r18,r2
   12d50:	043feb0e 	bge	zero,r16,12d00 <__alt_data_end+0xffff2d00>
   12d54:	88800917 	ldw	r2,36(r17)
   12d58:	89400717 	ldw	r5,28(r17)
   12d5c:	800f883a 	mov	r7,r16
   12d60:	900d883a 	mov	r6,r18
   12d64:	9809883a 	mov	r4,r19
   12d68:	103ee83a 	callr	r2
   12d6c:	80a1c83a 	sub	r16,r16,r2
   12d70:	00bff616 	blt	zero,r2,12d4c <__alt_data_end+0xffff2d4c>
   12d74:	88c0030b 	ldhu	r3,12(r17)
   12d78:	00bfffc4 	movi	r2,-1
   12d7c:	18c01014 	ori	r3,r3,64
   12d80:	88c0030d 	sth	r3,12(r17)
   12d84:	003fdf06 	br	12d04 <__alt_data_end+0xffff2d04>
   12d88:	0005883a 	mov	r2,zero
   12d8c:	003fec06 	br	12d40 <__alt_data_end+0xffff2d40>
   12d90:	88801415 	stw	r2,80(r17)
   12d94:	003fd206 	br	12ce0 <__alt_data_end+0xffff2ce0>
   12d98:	28c00f17 	ldw	r3,60(r5)
   12d9c:	00ffb316 	blt	zero,r3,12c6c <__alt_data_end+0xffff2c6c>
   12da0:	003fd706 	br	12d00 <__alt_data_end+0xffff2d00>
   12da4:	89400717 	ldw	r5,28(r17)
   12da8:	000d883a 	mov	r6,zero
   12dac:	01c00044 	movi	r7,1
   12db0:	9809883a 	mov	r4,r19
   12db4:	403ee83a 	callr	r8
   12db8:	100d883a 	mov	r6,r2
   12dbc:	00bfffc4 	movi	r2,-1
   12dc0:	30801426 	beq	r6,r2,12e14 <__sflush_r+0x1e4>
   12dc4:	8880030b 	ldhu	r2,12(r17)
   12dc8:	8a000a17 	ldw	r8,40(r17)
   12dcc:	003fae06 	br	12c88 <__alt_data_end+0xffff2c88>
   12dd0:	98c00017 	ldw	r3,0(r19)
   12dd4:	183fba26 	beq	r3,zero,12cc0 <__alt_data_end+0xffff2cc0>
   12dd8:	01000744 	movi	r4,29
   12ddc:	19000626 	beq	r3,r4,12df8 <__sflush_r+0x1c8>
   12de0:	01000584 	movi	r4,22
   12de4:	19000426 	beq	r3,r4,12df8 <__sflush_r+0x1c8>
   12de8:	88c0030b 	ldhu	r3,12(r17)
   12dec:	18c01014 	ori	r3,r3,64
   12df0:	88c0030d 	sth	r3,12(r17)
   12df4:	003fc306 	br	12d04 <__alt_data_end+0xffff2d04>
   12df8:	8880030b 	ldhu	r2,12(r17)
   12dfc:	88c00417 	ldw	r3,16(r17)
   12e00:	88000115 	stw	zero,4(r17)
   12e04:	10bdffcc 	andi	r2,r2,63487
   12e08:	8880030d 	sth	r2,12(r17)
   12e0c:	88c00015 	stw	r3,0(r17)
   12e10:	003fb306 	br	12ce0 <__alt_data_end+0xffff2ce0>
   12e14:	98800017 	ldw	r2,0(r19)
   12e18:	103fea26 	beq	r2,zero,12dc4 <__alt_data_end+0xffff2dc4>
   12e1c:	00c00744 	movi	r3,29
   12e20:	10c00226 	beq	r2,r3,12e2c <__sflush_r+0x1fc>
   12e24:	00c00584 	movi	r3,22
   12e28:	10c0031e 	bne	r2,r3,12e38 <__sflush_r+0x208>
   12e2c:	9c000015 	stw	r16,0(r19)
   12e30:	0005883a 	mov	r2,zero
   12e34:	003fb306 	br	12d04 <__alt_data_end+0xffff2d04>
   12e38:	88c0030b 	ldhu	r3,12(r17)
   12e3c:	3005883a 	mov	r2,r6
   12e40:	18c01014 	ori	r3,r3,64
   12e44:	88c0030d 	sth	r3,12(r17)
   12e48:	003fae06 	br	12d04 <__alt_data_end+0xffff2d04>

00012e4c <_fflush_r>:
   12e4c:	defffd04 	addi	sp,sp,-12
   12e50:	dc000115 	stw	r16,4(sp)
   12e54:	dfc00215 	stw	ra,8(sp)
   12e58:	2021883a 	mov	r16,r4
   12e5c:	20000226 	beq	r4,zero,12e68 <_fflush_r+0x1c>
   12e60:	20800e17 	ldw	r2,56(r4)
   12e64:	10000c26 	beq	r2,zero,12e98 <_fflush_r+0x4c>
   12e68:	2880030f 	ldh	r2,12(r5)
   12e6c:	1000051e 	bne	r2,zero,12e84 <_fflush_r+0x38>
   12e70:	0005883a 	mov	r2,zero
   12e74:	dfc00217 	ldw	ra,8(sp)
   12e78:	dc000117 	ldw	r16,4(sp)
   12e7c:	dec00304 	addi	sp,sp,12
   12e80:	f800283a 	ret
   12e84:	8009883a 	mov	r4,r16
   12e88:	dfc00217 	ldw	ra,8(sp)
   12e8c:	dc000117 	ldw	r16,4(sp)
   12e90:	dec00304 	addi	sp,sp,12
   12e94:	0012c301 	jmpi	12c30 <__sflush_r>
   12e98:	d9400015 	stw	r5,0(sp)
   12e9c:	0010ed40 	call	10ed4 <__sinit>
   12ea0:	d9400017 	ldw	r5,0(sp)
   12ea4:	003ff006 	br	12e68 <__alt_data_end+0xffff2e68>

00012ea8 <fflush>:
   12ea8:	20000526 	beq	r4,zero,12ec0 <fflush+0x18>
   12eac:	00800074 	movhi	r2,1
   12eb0:	109e2c04 	addi	r2,r2,30896
   12eb4:	200b883a 	mov	r5,r4
   12eb8:	11000017 	ldw	r4,0(r2)
   12ebc:	0012e4c1 	jmpi	12e4c <_fflush_r>
   12ec0:	00800074 	movhi	r2,1
   12ec4:	109e2b04 	addi	r2,r2,30892
   12ec8:	11000017 	ldw	r4,0(r2)
   12ecc:	01400074 	movhi	r5,1
   12ed0:	294b9304 	addi	r5,r5,11852
   12ed4:	00114b01 	jmpi	114b0 <_fwalk_reent>

00012ed8 <_malloc_trim_r>:
   12ed8:	defffb04 	addi	sp,sp,-20
   12edc:	dcc00315 	stw	r19,12(sp)
   12ee0:	04c00074 	movhi	r19,1
   12ee4:	dc800215 	stw	r18,8(sp)
   12ee8:	dc400115 	stw	r17,4(sp)
   12eec:	dc000015 	stw	r16,0(sp)
   12ef0:	dfc00415 	stw	ra,16(sp)
   12ef4:	2821883a 	mov	r16,r5
   12ef8:	9cd8a604 	addi	r19,r19,25240
   12efc:	2025883a 	mov	r18,r4
   12f00:	0013bfc0 	call	13bfc <__malloc_lock>
   12f04:	98800217 	ldw	r2,8(r19)
   12f08:	14400117 	ldw	r17,4(r2)
   12f0c:	00bfff04 	movi	r2,-4
   12f10:	88a2703a 	and	r17,r17,r2
   12f14:	8c21c83a 	sub	r16,r17,r16
   12f18:	8403fbc4 	addi	r16,r16,4079
   12f1c:	8020d33a 	srli	r16,r16,12
   12f20:	0083ffc4 	movi	r2,4095
   12f24:	843fffc4 	addi	r16,r16,-1
   12f28:	8020933a 	slli	r16,r16,12
   12f2c:	1400060e 	bge	r2,r16,12f48 <_malloc_trim_r+0x70>
   12f30:	000b883a 	mov	r5,zero
   12f34:	9009883a 	mov	r4,r18
   12f38:	00127940 	call	12794 <_sbrk_r>
   12f3c:	98c00217 	ldw	r3,8(r19)
   12f40:	1c47883a 	add	r3,r3,r17
   12f44:	10c00a26 	beq	r2,r3,12f70 <_malloc_trim_r+0x98>
   12f48:	9009883a 	mov	r4,r18
   12f4c:	0013c200 	call	13c20 <__malloc_unlock>
   12f50:	0005883a 	mov	r2,zero
   12f54:	dfc00417 	ldw	ra,16(sp)
   12f58:	dcc00317 	ldw	r19,12(sp)
   12f5c:	dc800217 	ldw	r18,8(sp)
   12f60:	dc400117 	ldw	r17,4(sp)
   12f64:	dc000017 	ldw	r16,0(sp)
   12f68:	dec00504 	addi	sp,sp,20
   12f6c:	f800283a 	ret
   12f70:	040bc83a 	sub	r5,zero,r16
   12f74:	9009883a 	mov	r4,r18
   12f78:	00127940 	call	12794 <_sbrk_r>
   12f7c:	00ffffc4 	movi	r3,-1
   12f80:	10c00d26 	beq	r2,r3,12fb8 <_malloc_trim_r+0xe0>
   12f84:	00c000b4 	movhi	r3,2
   12f88:	18e52404 	addi	r3,r3,-27504
   12f8c:	18800017 	ldw	r2,0(r3)
   12f90:	99000217 	ldw	r4,8(r19)
   12f94:	8c23c83a 	sub	r17,r17,r16
   12f98:	8c400054 	ori	r17,r17,1
   12f9c:	1421c83a 	sub	r16,r2,r16
   12fa0:	24400115 	stw	r17,4(r4)
   12fa4:	9009883a 	mov	r4,r18
   12fa8:	1c000015 	stw	r16,0(r3)
   12fac:	0013c200 	call	13c20 <__malloc_unlock>
   12fb0:	00800044 	movi	r2,1
   12fb4:	003fe706 	br	12f54 <__alt_data_end+0xffff2f54>
   12fb8:	000b883a 	mov	r5,zero
   12fbc:	9009883a 	mov	r4,r18
   12fc0:	00127940 	call	12794 <_sbrk_r>
   12fc4:	99000217 	ldw	r4,8(r19)
   12fc8:	014003c4 	movi	r5,15
   12fcc:	1107c83a 	sub	r3,r2,r4
   12fd0:	28ffdd0e 	bge	r5,r3,12f48 <__alt_data_end+0xffff2f48>
   12fd4:	01400074 	movhi	r5,1
   12fd8:	295e2d04 	addi	r5,r5,30900
   12fdc:	29400017 	ldw	r5,0(r5)
   12fe0:	18c00054 	ori	r3,r3,1
   12fe4:	20c00115 	stw	r3,4(r4)
   12fe8:	00c000b4 	movhi	r3,2
   12fec:	1145c83a 	sub	r2,r2,r5
   12ff0:	18e52404 	addi	r3,r3,-27504
   12ff4:	18800015 	stw	r2,0(r3)
   12ff8:	003fd306 	br	12f48 <__alt_data_end+0xffff2f48>

00012ffc <_free_r>:
   12ffc:	28004126 	beq	r5,zero,13104 <_free_r+0x108>
   13000:	defffd04 	addi	sp,sp,-12
   13004:	dc400115 	stw	r17,4(sp)
   13008:	dc000015 	stw	r16,0(sp)
   1300c:	2023883a 	mov	r17,r4
   13010:	2821883a 	mov	r16,r5
   13014:	dfc00215 	stw	ra,8(sp)
   13018:	0013bfc0 	call	13bfc <__malloc_lock>
   1301c:	81ffff17 	ldw	r7,-4(r16)
   13020:	00bfff84 	movi	r2,-2
   13024:	01000074 	movhi	r4,1
   13028:	81bffe04 	addi	r6,r16,-8
   1302c:	3884703a 	and	r2,r7,r2
   13030:	2118a604 	addi	r4,r4,25240
   13034:	308b883a 	add	r5,r6,r2
   13038:	2a400117 	ldw	r9,4(r5)
   1303c:	22000217 	ldw	r8,8(r4)
   13040:	00ffff04 	movi	r3,-4
   13044:	48c6703a 	and	r3,r9,r3
   13048:	2a005726 	beq	r5,r8,131a8 <_free_r+0x1ac>
   1304c:	28c00115 	stw	r3,4(r5)
   13050:	39c0004c 	andi	r7,r7,1
   13054:	3800091e 	bne	r7,zero,1307c <_free_r+0x80>
   13058:	823ffe17 	ldw	r8,-8(r16)
   1305c:	22400204 	addi	r9,r4,8
   13060:	320dc83a 	sub	r6,r6,r8
   13064:	31c00217 	ldw	r7,8(r6)
   13068:	1205883a 	add	r2,r2,r8
   1306c:	3a406526 	beq	r7,r9,13204 <_free_r+0x208>
   13070:	32000317 	ldw	r8,12(r6)
   13074:	3a000315 	stw	r8,12(r7)
   13078:	41c00215 	stw	r7,8(r8)
   1307c:	28cf883a 	add	r7,r5,r3
   13080:	39c00117 	ldw	r7,4(r7)
   13084:	39c0004c 	andi	r7,r7,1
   13088:	38003a26 	beq	r7,zero,13174 <_free_r+0x178>
   1308c:	10c00054 	ori	r3,r2,1
   13090:	30c00115 	stw	r3,4(r6)
   13094:	3087883a 	add	r3,r6,r2
   13098:	18800015 	stw	r2,0(r3)
   1309c:	00c07fc4 	movi	r3,511
   130a0:	18801936 	bltu	r3,r2,13108 <_free_r+0x10c>
   130a4:	1004d0fa 	srli	r2,r2,3
   130a8:	01c00044 	movi	r7,1
   130ac:	21400117 	ldw	r5,4(r4)
   130b0:	10c00044 	addi	r3,r2,1
   130b4:	18c7883a 	add	r3,r3,r3
   130b8:	1005d0ba 	srai	r2,r2,2
   130bc:	18c7883a 	add	r3,r3,r3
   130c0:	18c7883a 	add	r3,r3,r3
   130c4:	1907883a 	add	r3,r3,r4
   130c8:	3884983a 	sll	r2,r7,r2
   130cc:	19c00017 	ldw	r7,0(r3)
   130d0:	1a3ffe04 	addi	r8,r3,-8
   130d4:	1144b03a 	or	r2,r2,r5
   130d8:	32000315 	stw	r8,12(r6)
   130dc:	31c00215 	stw	r7,8(r6)
   130e0:	20800115 	stw	r2,4(r4)
   130e4:	19800015 	stw	r6,0(r3)
   130e8:	39800315 	stw	r6,12(r7)
   130ec:	8809883a 	mov	r4,r17
   130f0:	dfc00217 	ldw	ra,8(sp)
   130f4:	dc400117 	ldw	r17,4(sp)
   130f8:	dc000017 	ldw	r16,0(sp)
   130fc:	dec00304 	addi	sp,sp,12
   13100:	0013c201 	jmpi	13c20 <__malloc_unlock>
   13104:	f800283a 	ret
   13108:	100ad27a 	srli	r5,r2,9
   1310c:	00c00104 	movi	r3,4
   13110:	19404a36 	bltu	r3,r5,1323c <_free_r+0x240>
   13114:	100ad1ba 	srli	r5,r2,6
   13118:	28c00e44 	addi	r3,r5,57
   1311c:	18c7883a 	add	r3,r3,r3
   13120:	29400e04 	addi	r5,r5,56
   13124:	18c7883a 	add	r3,r3,r3
   13128:	18c7883a 	add	r3,r3,r3
   1312c:	1909883a 	add	r4,r3,r4
   13130:	20c00017 	ldw	r3,0(r4)
   13134:	01c00074 	movhi	r7,1
   13138:	213ffe04 	addi	r4,r4,-8
   1313c:	39d8a604 	addi	r7,r7,25240
   13140:	20c04426 	beq	r4,r3,13254 <_free_r+0x258>
   13144:	01ffff04 	movi	r7,-4
   13148:	19400117 	ldw	r5,4(r3)
   1314c:	29ca703a 	and	r5,r5,r7
   13150:	1140022e 	bgeu	r2,r5,1315c <_free_r+0x160>
   13154:	18c00217 	ldw	r3,8(r3)
   13158:	20fffb1e 	bne	r4,r3,13148 <__alt_data_end+0xffff3148>
   1315c:	19000317 	ldw	r4,12(r3)
   13160:	31000315 	stw	r4,12(r6)
   13164:	30c00215 	stw	r3,8(r6)
   13168:	21800215 	stw	r6,8(r4)
   1316c:	19800315 	stw	r6,12(r3)
   13170:	003fde06 	br	130ec <__alt_data_end+0xffff30ec>
   13174:	29c00217 	ldw	r7,8(r5)
   13178:	10c5883a 	add	r2,r2,r3
   1317c:	00c00074 	movhi	r3,1
   13180:	18d8a804 	addi	r3,r3,25248
   13184:	38c03b26 	beq	r7,r3,13274 <_free_r+0x278>
   13188:	2a000317 	ldw	r8,12(r5)
   1318c:	11400054 	ori	r5,r2,1
   13190:	3087883a 	add	r3,r6,r2
   13194:	3a000315 	stw	r8,12(r7)
   13198:	41c00215 	stw	r7,8(r8)
   1319c:	31400115 	stw	r5,4(r6)
   131a0:	18800015 	stw	r2,0(r3)
   131a4:	003fbd06 	br	1309c <__alt_data_end+0xffff309c>
   131a8:	39c0004c 	andi	r7,r7,1
   131ac:	10c5883a 	add	r2,r2,r3
   131b0:	3800071e 	bne	r7,zero,131d0 <_free_r+0x1d4>
   131b4:	81fffe17 	ldw	r7,-8(r16)
   131b8:	31cdc83a 	sub	r6,r6,r7
   131bc:	30c00317 	ldw	r3,12(r6)
   131c0:	31400217 	ldw	r5,8(r6)
   131c4:	11c5883a 	add	r2,r2,r7
   131c8:	28c00315 	stw	r3,12(r5)
   131cc:	19400215 	stw	r5,8(r3)
   131d0:	10c00054 	ori	r3,r2,1
   131d4:	30c00115 	stw	r3,4(r6)
   131d8:	00c00074 	movhi	r3,1
   131dc:	18de2e04 	addi	r3,r3,30904
   131e0:	18c00017 	ldw	r3,0(r3)
   131e4:	21800215 	stw	r6,8(r4)
   131e8:	10ffc036 	bltu	r2,r3,130ec <__alt_data_end+0xffff30ec>
   131ec:	008000b4 	movhi	r2,2
   131f0:	10a4e704 	addi	r2,r2,-27748
   131f4:	11400017 	ldw	r5,0(r2)
   131f8:	8809883a 	mov	r4,r17
   131fc:	0012ed80 	call	12ed8 <_malloc_trim_r>
   13200:	003fba06 	br	130ec <__alt_data_end+0xffff30ec>
   13204:	28c9883a 	add	r4,r5,r3
   13208:	21000117 	ldw	r4,4(r4)
   1320c:	2100004c 	andi	r4,r4,1
   13210:	2000391e 	bne	r4,zero,132f8 <_free_r+0x2fc>
   13214:	29c00217 	ldw	r7,8(r5)
   13218:	29000317 	ldw	r4,12(r5)
   1321c:	1885883a 	add	r2,r3,r2
   13220:	10c00054 	ori	r3,r2,1
   13224:	39000315 	stw	r4,12(r7)
   13228:	21c00215 	stw	r7,8(r4)
   1322c:	30c00115 	stw	r3,4(r6)
   13230:	308d883a 	add	r6,r6,r2
   13234:	30800015 	stw	r2,0(r6)
   13238:	003fac06 	br	130ec <__alt_data_end+0xffff30ec>
   1323c:	00c00504 	movi	r3,20
   13240:	19401536 	bltu	r3,r5,13298 <_free_r+0x29c>
   13244:	28c01704 	addi	r3,r5,92
   13248:	18c7883a 	add	r3,r3,r3
   1324c:	294016c4 	addi	r5,r5,91
   13250:	003fb406 	br	13124 <__alt_data_end+0xffff3124>
   13254:	280bd0ba 	srai	r5,r5,2
   13258:	00c00044 	movi	r3,1
   1325c:	38800117 	ldw	r2,4(r7)
   13260:	194a983a 	sll	r5,r3,r5
   13264:	2007883a 	mov	r3,r4
   13268:	2884b03a 	or	r2,r5,r2
   1326c:	38800115 	stw	r2,4(r7)
   13270:	003fbb06 	br	13160 <__alt_data_end+0xffff3160>
   13274:	21800515 	stw	r6,20(r4)
   13278:	21800415 	stw	r6,16(r4)
   1327c:	10c00054 	ori	r3,r2,1
   13280:	31c00315 	stw	r7,12(r6)
   13284:	31c00215 	stw	r7,8(r6)
   13288:	30c00115 	stw	r3,4(r6)
   1328c:	308d883a 	add	r6,r6,r2
   13290:	30800015 	stw	r2,0(r6)
   13294:	003f9506 	br	130ec <__alt_data_end+0xffff30ec>
   13298:	00c01504 	movi	r3,84
   1329c:	19400536 	bltu	r3,r5,132b4 <_free_r+0x2b8>
   132a0:	100ad33a 	srli	r5,r2,12
   132a4:	28c01bc4 	addi	r3,r5,111
   132a8:	18c7883a 	add	r3,r3,r3
   132ac:	29401b84 	addi	r5,r5,110
   132b0:	003f9c06 	br	13124 <__alt_data_end+0xffff3124>
   132b4:	00c05504 	movi	r3,340
   132b8:	19400536 	bltu	r3,r5,132d0 <_free_r+0x2d4>
   132bc:	100ad3fa 	srli	r5,r2,15
   132c0:	28c01e04 	addi	r3,r5,120
   132c4:	18c7883a 	add	r3,r3,r3
   132c8:	29401dc4 	addi	r5,r5,119
   132cc:	003f9506 	br	13124 <__alt_data_end+0xffff3124>
   132d0:	00c15504 	movi	r3,1364
   132d4:	19400536 	bltu	r3,r5,132ec <_free_r+0x2f0>
   132d8:	100ad4ba 	srli	r5,r2,18
   132dc:	28c01f44 	addi	r3,r5,125
   132e0:	18c7883a 	add	r3,r3,r3
   132e4:	29401f04 	addi	r5,r5,124
   132e8:	003f8e06 	br	13124 <__alt_data_end+0xffff3124>
   132ec:	00c03f84 	movi	r3,254
   132f0:	01401f84 	movi	r5,126
   132f4:	003f8b06 	br	13124 <__alt_data_end+0xffff3124>
   132f8:	10c00054 	ori	r3,r2,1
   132fc:	30c00115 	stw	r3,4(r6)
   13300:	308d883a 	add	r6,r6,r2
   13304:	30800015 	stw	r2,0(r6)
   13308:	003f7806 	br	130ec <__alt_data_end+0xffff30ec>

0001330c <_lseek_r>:
   1330c:	defffd04 	addi	sp,sp,-12
   13310:	2805883a 	mov	r2,r5
   13314:	dc000015 	stw	r16,0(sp)
   13318:	040000b4 	movhi	r16,2
   1331c:	dc400115 	stw	r17,4(sp)
   13320:	300b883a 	mov	r5,r6
   13324:	8424e804 	addi	r16,r16,-27744
   13328:	2023883a 	mov	r17,r4
   1332c:	380d883a 	mov	r6,r7
   13330:	1009883a 	mov	r4,r2
   13334:	dfc00215 	stw	ra,8(sp)
   13338:	80000015 	stw	zero,0(r16)
   1333c:	0013aa40 	call	13aa4 <lseek>
   13340:	00ffffc4 	movi	r3,-1
   13344:	10c00526 	beq	r2,r3,1335c <_lseek_r+0x50>
   13348:	dfc00217 	ldw	ra,8(sp)
   1334c:	dc400117 	ldw	r17,4(sp)
   13350:	dc000017 	ldw	r16,0(sp)
   13354:	dec00304 	addi	sp,sp,12
   13358:	f800283a 	ret
   1335c:	80c00017 	ldw	r3,0(r16)
   13360:	183ff926 	beq	r3,zero,13348 <__alt_data_end+0xffff3348>
   13364:	88c00015 	stw	r3,0(r17)
   13368:	003ff706 	br	13348 <__alt_data_end+0xffff3348>

0001336c <__smakebuf_r>:
   1336c:	2880030b 	ldhu	r2,12(r5)
   13370:	10c0008c 	andi	r3,r2,2
   13374:	1800411e 	bne	r3,zero,1347c <__smakebuf_r+0x110>
   13378:	deffec04 	addi	sp,sp,-80
   1337c:	dc000f15 	stw	r16,60(sp)
   13380:	2821883a 	mov	r16,r5
   13384:	2940038f 	ldh	r5,14(r5)
   13388:	dc401015 	stw	r17,64(sp)
   1338c:	dfc01315 	stw	ra,76(sp)
   13390:	dcc01215 	stw	r19,72(sp)
   13394:	dc801115 	stw	r18,68(sp)
   13398:	2023883a 	mov	r17,r4
   1339c:	28001c16 	blt	r5,zero,13410 <__smakebuf_r+0xa4>
   133a0:	d80d883a 	mov	r6,sp
   133a4:	00135880 	call	13588 <_fstat_r>
   133a8:	10001816 	blt	r2,zero,1340c <__smakebuf_r+0xa0>
   133ac:	d8800117 	ldw	r2,4(sp)
   133b0:	00e00014 	movui	r3,32768
   133b4:	10bc000c 	andi	r2,r2,61440
   133b8:	14c80020 	cmpeqi	r19,r2,8192
   133bc:	10c03726 	beq	r2,r3,1349c <__smakebuf_r+0x130>
   133c0:	80c0030b 	ldhu	r3,12(r16)
   133c4:	18c20014 	ori	r3,r3,2048
   133c8:	80c0030d 	sth	r3,12(r16)
   133cc:	00c80004 	movi	r3,8192
   133d0:	10c0521e 	bne	r2,r3,1351c <__smakebuf_r+0x1b0>
   133d4:	8140038f 	ldh	r5,14(r16)
   133d8:	8809883a 	mov	r4,r17
   133dc:	00135e40 	call	135e4 <_isatty_r>
   133e0:	10004c26 	beq	r2,zero,13514 <__smakebuf_r+0x1a8>
   133e4:	8080030b 	ldhu	r2,12(r16)
   133e8:	80c010c4 	addi	r3,r16,67
   133ec:	80c00015 	stw	r3,0(r16)
   133f0:	10800054 	ori	r2,r2,1
   133f4:	8080030d 	sth	r2,12(r16)
   133f8:	00800044 	movi	r2,1
   133fc:	80c00415 	stw	r3,16(r16)
   13400:	80800515 	stw	r2,20(r16)
   13404:	04810004 	movi	r18,1024
   13408:	00000706 	br	13428 <__smakebuf_r+0xbc>
   1340c:	8080030b 	ldhu	r2,12(r16)
   13410:	10c0200c 	andi	r3,r2,128
   13414:	18001f1e 	bne	r3,zero,13494 <__smakebuf_r+0x128>
   13418:	04810004 	movi	r18,1024
   1341c:	10820014 	ori	r2,r2,2048
   13420:	8080030d 	sth	r2,12(r16)
   13424:	0027883a 	mov	r19,zero
   13428:	900b883a 	mov	r5,r18
   1342c:	8809883a 	mov	r4,r17
   13430:	00115740 	call	11574 <_malloc_r>
   13434:	10002c26 	beq	r2,zero,134e8 <__smakebuf_r+0x17c>
   13438:	80c0030b 	ldhu	r3,12(r16)
   1343c:	01000074 	movhi	r4,1
   13440:	2102df04 	addi	r4,r4,2940
   13444:	89000f15 	stw	r4,60(r17)
   13448:	18c02014 	ori	r3,r3,128
   1344c:	80c0030d 	sth	r3,12(r16)
   13450:	80800015 	stw	r2,0(r16)
   13454:	80800415 	stw	r2,16(r16)
   13458:	84800515 	stw	r18,20(r16)
   1345c:	98001a1e 	bne	r19,zero,134c8 <__smakebuf_r+0x15c>
   13460:	dfc01317 	ldw	ra,76(sp)
   13464:	dcc01217 	ldw	r19,72(sp)
   13468:	dc801117 	ldw	r18,68(sp)
   1346c:	dc401017 	ldw	r17,64(sp)
   13470:	dc000f17 	ldw	r16,60(sp)
   13474:	dec01404 	addi	sp,sp,80
   13478:	f800283a 	ret
   1347c:	288010c4 	addi	r2,r5,67
   13480:	28800015 	stw	r2,0(r5)
   13484:	28800415 	stw	r2,16(r5)
   13488:	00800044 	movi	r2,1
   1348c:	28800515 	stw	r2,20(r5)
   13490:	f800283a 	ret
   13494:	04801004 	movi	r18,64
   13498:	003fe006 	br	1341c <__alt_data_end+0xffff341c>
   1349c:	81000a17 	ldw	r4,40(r16)
   134a0:	00c00074 	movhi	r3,1
   134a4:	18ca3004 	addi	r3,r3,10432
   134a8:	20ffc51e 	bne	r4,r3,133c0 <__alt_data_end+0xffff33c0>
   134ac:	8080030b 	ldhu	r2,12(r16)
   134b0:	04810004 	movi	r18,1024
   134b4:	84801315 	stw	r18,76(r16)
   134b8:	1484b03a 	or	r2,r2,r18
   134bc:	8080030d 	sth	r2,12(r16)
   134c0:	0027883a 	mov	r19,zero
   134c4:	003fd806 	br	13428 <__alt_data_end+0xffff3428>
   134c8:	8140038f 	ldh	r5,14(r16)
   134cc:	8809883a 	mov	r4,r17
   134d0:	00135e40 	call	135e4 <_isatty_r>
   134d4:	103fe226 	beq	r2,zero,13460 <__alt_data_end+0xffff3460>
   134d8:	8080030b 	ldhu	r2,12(r16)
   134dc:	10800054 	ori	r2,r2,1
   134e0:	8080030d 	sth	r2,12(r16)
   134e4:	003fde06 	br	13460 <__alt_data_end+0xffff3460>
   134e8:	8080030b 	ldhu	r2,12(r16)
   134ec:	10c0800c 	andi	r3,r2,512
   134f0:	183fdb1e 	bne	r3,zero,13460 <__alt_data_end+0xffff3460>
   134f4:	10800094 	ori	r2,r2,2
   134f8:	80c010c4 	addi	r3,r16,67
   134fc:	8080030d 	sth	r2,12(r16)
   13500:	00800044 	movi	r2,1
   13504:	80c00015 	stw	r3,0(r16)
   13508:	80c00415 	stw	r3,16(r16)
   1350c:	80800515 	stw	r2,20(r16)
   13510:	003fd306 	br	13460 <__alt_data_end+0xffff3460>
   13514:	04810004 	movi	r18,1024
   13518:	003fc306 	br	13428 <__alt_data_end+0xffff3428>
   1351c:	0027883a 	mov	r19,zero
   13520:	04810004 	movi	r18,1024
   13524:	003fc006 	br	13428 <__alt_data_end+0xffff3428>

00013528 <_read_r>:
   13528:	defffd04 	addi	sp,sp,-12
   1352c:	2805883a 	mov	r2,r5
   13530:	dc000015 	stw	r16,0(sp)
   13534:	040000b4 	movhi	r16,2
   13538:	dc400115 	stw	r17,4(sp)
   1353c:	300b883a 	mov	r5,r6
   13540:	8424e804 	addi	r16,r16,-27744
   13544:	2023883a 	mov	r17,r4
   13548:	380d883a 	mov	r6,r7
   1354c:	1009883a 	mov	r4,r2
   13550:	dfc00215 	stw	ra,8(sp)
   13554:	80000015 	stw	zero,0(r16)
   13558:	0013cbc0 	call	13cbc <read>
   1355c:	00ffffc4 	movi	r3,-1
   13560:	10c00526 	beq	r2,r3,13578 <_read_r+0x50>
   13564:	dfc00217 	ldw	ra,8(sp)
   13568:	dc400117 	ldw	r17,4(sp)
   1356c:	dc000017 	ldw	r16,0(sp)
   13570:	dec00304 	addi	sp,sp,12
   13574:	f800283a 	ret
   13578:	80c00017 	ldw	r3,0(r16)
   1357c:	183ff926 	beq	r3,zero,13564 <__alt_data_end+0xffff3564>
   13580:	88c00015 	stw	r3,0(r17)
   13584:	003ff706 	br	13564 <__alt_data_end+0xffff3564>

00013588 <_fstat_r>:
   13588:	defffd04 	addi	sp,sp,-12
   1358c:	2805883a 	mov	r2,r5
   13590:	dc000015 	stw	r16,0(sp)
   13594:	040000b4 	movhi	r16,2
   13598:	dc400115 	stw	r17,4(sp)
   1359c:	8424e804 	addi	r16,r16,-27744
   135a0:	2023883a 	mov	r17,r4
   135a4:	300b883a 	mov	r5,r6
   135a8:	1009883a 	mov	r4,r2
   135ac:	dfc00215 	stw	ra,8(sp)
   135b0:	80000015 	stw	zero,0(r16)
   135b4:	00137dc0 	call	137dc <fstat>
   135b8:	00ffffc4 	movi	r3,-1
   135bc:	10c00526 	beq	r2,r3,135d4 <_fstat_r+0x4c>
   135c0:	dfc00217 	ldw	ra,8(sp)
   135c4:	dc400117 	ldw	r17,4(sp)
   135c8:	dc000017 	ldw	r16,0(sp)
   135cc:	dec00304 	addi	sp,sp,12
   135d0:	f800283a 	ret
   135d4:	80c00017 	ldw	r3,0(r16)
   135d8:	183ff926 	beq	r3,zero,135c0 <__alt_data_end+0xffff35c0>
   135dc:	88c00015 	stw	r3,0(r17)
   135e0:	003ff706 	br	135c0 <__alt_data_end+0xffff35c0>

000135e4 <_isatty_r>:
   135e4:	defffd04 	addi	sp,sp,-12
   135e8:	dc000015 	stw	r16,0(sp)
   135ec:	040000b4 	movhi	r16,2
   135f0:	dc400115 	stw	r17,4(sp)
   135f4:	8424e804 	addi	r16,r16,-27744
   135f8:	2023883a 	mov	r17,r4
   135fc:	2809883a 	mov	r4,r5
   13600:	dfc00215 	stw	ra,8(sp)
   13604:	80000015 	stw	zero,0(r16)
   13608:	00138d00 	call	138d0 <isatty>
   1360c:	00ffffc4 	movi	r3,-1
   13610:	10c00526 	beq	r2,r3,13628 <_isatty_r+0x44>
   13614:	dfc00217 	ldw	ra,8(sp)
   13618:	dc400117 	ldw	r17,4(sp)
   1361c:	dc000017 	ldw	r16,0(sp)
   13620:	dec00304 	addi	sp,sp,12
   13624:	f800283a 	ret
   13628:	80c00017 	ldw	r3,0(r16)
   1362c:	183ff926 	beq	r3,zero,13614 <__alt_data_end+0xffff3614>
   13630:	88c00015 	stw	r3,0(r17)
   13634:	003ff706 	br	13614 <__alt_data_end+0xffff3614>

00013638 <__mulsi3>:
   13638:	0005883a 	mov	r2,zero
   1363c:	20000726 	beq	r4,zero,1365c <__mulsi3+0x24>
   13640:	20c0004c 	andi	r3,r4,1
   13644:	2008d07a 	srli	r4,r4,1
   13648:	18000126 	beq	r3,zero,13650 <__mulsi3+0x18>
   1364c:	1145883a 	add	r2,r2,r5
   13650:	294b883a 	add	r5,r5,r5
   13654:	203ffa1e 	bne	r4,zero,13640 <__alt_data_end+0xffff3640>
   13658:	f800283a 	ret
   1365c:	f800283a 	ret

00013660 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13660:	defffe04 	addi	sp,sp,-8
   13664:	dfc00115 	stw	ra,4(sp)
   13668:	df000015 	stw	fp,0(sp)
   1366c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13670:	d0a00a17 	ldw	r2,-32728(gp)
   13674:	10000326 	beq	r2,zero,13684 <alt_get_errno+0x24>
   13678:	d0a00a17 	ldw	r2,-32728(gp)
   1367c:	103ee83a 	callr	r2
   13680:	00000106 	br	13688 <alt_get_errno+0x28>
   13684:	d0a6be04 	addi	r2,gp,-25864
}
   13688:	e037883a 	mov	sp,fp
   1368c:	dfc00117 	ldw	ra,4(sp)
   13690:	df000017 	ldw	fp,0(sp)
   13694:	dec00204 	addi	sp,sp,8
   13698:	f800283a 	ret

0001369c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   1369c:	defffb04 	addi	sp,sp,-20
   136a0:	dfc00415 	stw	ra,16(sp)
   136a4:	df000315 	stw	fp,12(sp)
   136a8:	df000304 	addi	fp,sp,12
   136ac:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   136b0:	e0bfff17 	ldw	r2,-4(fp)
   136b4:	10000816 	blt	r2,zero,136d8 <close+0x3c>
   136b8:	01400304 	movi	r5,12
   136bc:	e13fff17 	ldw	r4,-4(fp)
   136c0:	00136380 	call	13638 <__mulsi3>
   136c4:	1007883a 	mov	r3,r2
   136c8:	00800074 	movhi	r2,1
   136cc:	1099b204 	addi	r2,r2,26312
   136d0:	1885883a 	add	r2,r3,r2
   136d4:	00000106 	br	136dc <close+0x40>
   136d8:	0005883a 	mov	r2,zero
   136dc:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   136e0:	e0bffd17 	ldw	r2,-12(fp)
   136e4:	10001926 	beq	r2,zero,1374c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   136e8:	e0bffd17 	ldw	r2,-12(fp)
   136ec:	10800017 	ldw	r2,0(r2)
   136f0:	10800417 	ldw	r2,16(r2)
   136f4:	10000626 	beq	r2,zero,13710 <close+0x74>
   136f8:	e0bffd17 	ldw	r2,-12(fp)
   136fc:	10800017 	ldw	r2,0(r2)
   13700:	10800417 	ldw	r2,16(r2)
   13704:	e13ffd17 	ldw	r4,-12(fp)
   13708:	103ee83a 	callr	r2
   1370c:	00000106 	br	13714 <close+0x78>
   13710:	0005883a 	mov	r2,zero
   13714:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   13718:	e13fff17 	ldw	r4,-4(fp)
   1371c:	0013dc00 	call	13dc0 <alt_release_fd>
    if (rval < 0)
   13720:	e0bffe17 	ldw	r2,-8(fp)
   13724:	1000070e 	bge	r2,zero,13744 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   13728:	00136600 	call	13660 <alt_get_errno>
   1372c:	1007883a 	mov	r3,r2
   13730:	e0bffe17 	ldw	r2,-8(fp)
   13734:	0085c83a 	sub	r2,zero,r2
   13738:	18800015 	stw	r2,0(r3)
      return -1;
   1373c:	00bfffc4 	movi	r2,-1
   13740:	00000706 	br	13760 <close+0xc4>
    }
    return 0;
   13744:	0005883a 	mov	r2,zero
   13748:	00000506 	br	13760 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1374c:	00136600 	call	13660 <alt_get_errno>
   13750:	1007883a 	mov	r3,r2
   13754:	00801444 	movi	r2,81
   13758:	18800015 	stw	r2,0(r3)
    return -1;
   1375c:	00bfffc4 	movi	r2,-1
  }
}
   13760:	e037883a 	mov	sp,fp
   13764:	dfc00117 	ldw	ra,4(sp)
   13768:	df000017 	ldw	fp,0(sp)
   1376c:	dec00204 	addi	sp,sp,8
   13770:	f800283a 	ret

00013774 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   13774:	defffc04 	addi	sp,sp,-16
   13778:	df000315 	stw	fp,12(sp)
   1377c:	df000304 	addi	fp,sp,12
   13780:	e13ffd15 	stw	r4,-12(fp)
   13784:	e17ffe15 	stw	r5,-8(fp)
   13788:	e1bfff15 	stw	r6,-4(fp)
  return len;
   1378c:	e0bfff17 	ldw	r2,-4(fp)
}
   13790:	e037883a 	mov	sp,fp
   13794:	df000017 	ldw	fp,0(sp)
   13798:	dec00104 	addi	sp,sp,4
   1379c:	f800283a 	ret

000137a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   137a0:	defffe04 	addi	sp,sp,-8
   137a4:	dfc00115 	stw	ra,4(sp)
   137a8:	df000015 	stw	fp,0(sp)
   137ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   137b0:	d0a00a17 	ldw	r2,-32728(gp)
   137b4:	10000326 	beq	r2,zero,137c4 <alt_get_errno+0x24>
   137b8:	d0a00a17 	ldw	r2,-32728(gp)
   137bc:	103ee83a 	callr	r2
   137c0:	00000106 	br	137c8 <alt_get_errno+0x28>
   137c4:	d0a6be04 	addi	r2,gp,-25864
}
   137c8:	e037883a 	mov	sp,fp
   137cc:	dfc00117 	ldw	ra,4(sp)
   137d0:	df000017 	ldw	fp,0(sp)
   137d4:	dec00204 	addi	sp,sp,8
   137d8:	f800283a 	ret

000137dc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   137dc:	defffb04 	addi	sp,sp,-20
   137e0:	dfc00415 	stw	ra,16(sp)
   137e4:	df000315 	stw	fp,12(sp)
   137e8:	df000304 	addi	fp,sp,12
   137ec:	e13ffe15 	stw	r4,-8(fp)
   137f0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   137f4:	e0bffe17 	ldw	r2,-8(fp)
   137f8:	10000816 	blt	r2,zero,1381c <fstat+0x40>
   137fc:	01400304 	movi	r5,12
   13800:	e13ffe17 	ldw	r4,-8(fp)
   13804:	00136380 	call	13638 <__mulsi3>
   13808:	1007883a 	mov	r3,r2
   1380c:	00800074 	movhi	r2,1
   13810:	1099b204 	addi	r2,r2,26312
   13814:	1885883a 	add	r2,r3,r2
   13818:	00000106 	br	13820 <fstat+0x44>
   1381c:	0005883a 	mov	r2,zero
   13820:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   13824:	e0bffd17 	ldw	r2,-12(fp)
   13828:	10001026 	beq	r2,zero,1386c <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   1382c:	e0bffd17 	ldw	r2,-12(fp)
   13830:	10800017 	ldw	r2,0(r2)
   13834:	10800817 	ldw	r2,32(r2)
   13838:	10000726 	beq	r2,zero,13858 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   1383c:	e0bffd17 	ldw	r2,-12(fp)
   13840:	10800017 	ldw	r2,0(r2)
   13844:	10800817 	ldw	r2,32(r2)
   13848:	e17fff17 	ldw	r5,-4(fp)
   1384c:	e13ffd17 	ldw	r4,-12(fp)
   13850:	103ee83a 	callr	r2
   13854:	00000a06 	br	13880 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   13858:	e0bfff17 	ldw	r2,-4(fp)
   1385c:	00c80004 	movi	r3,8192
   13860:	10c00115 	stw	r3,4(r2)
      return 0;
   13864:	0005883a 	mov	r2,zero
   13868:	00000506 	br	13880 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1386c:	00137a00 	call	137a0 <alt_get_errno>
   13870:	1007883a 	mov	r3,r2
   13874:	00801444 	movi	r2,81
   13878:	18800015 	stw	r2,0(r3)
    return -1;
   1387c:	00bfffc4 	movi	r2,-1
  }
}
   13880:	e037883a 	mov	sp,fp
   13884:	dfc00117 	ldw	ra,4(sp)
   13888:	df000017 	ldw	fp,0(sp)
   1388c:	dec00204 	addi	sp,sp,8
   13890:	f800283a 	ret

00013894 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13894:	defffe04 	addi	sp,sp,-8
   13898:	dfc00115 	stw	ra,4(sp)
   1389c:	df000015 	stw	fp,0(sp)
   138a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   138a4:	d0a00a17 	ldw	r2,-32728(gp)
   138a8:	10000326 	beq	r2,zero,138b8 <alt_get_errno+0x24>
   138ac:	d0a00a17 	ldw	r2,-32728(gp)
   138b0:	103ee83a 	callr	r2
   138b4:	00000106 	br	138bc <alt_get_errno+0x28>
   138b8:	d0a6be04 	addi	r2,gp,-25864
}
   138bc:	e037883a 	mov	sp,fp
   138c0:	dfc00117 	ldw	ra,4(sp)
   138c4:	df000017 	ldw	fp,0(sp)
   138c8:	dec00204 	addi	sp,sp,8
   138cc:	f800283a 	ret

000138d0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   138d0:	deffed04 	addi	sp,sp,-76
   138d4:	dfc01215 	stw	ra,72(sp)
   138d8:	df001115 	stw	fp,68(sp)
   138dc:	df001104 	addi	fp,sp,68
   138e0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   138e4:	e0bfff17 	ldw	r2,-4(fp)
   138e8:	10000816 	blt	r2,zero,1390c <isatty+0x3c>
   138ec:	01400304 	movi	r5,12
   138f0:	e13fff17 	ldw	r4,-4(fp)
   138f4:	00136380 	call	13638 <__mulsi3>
   138f8:	1007883a 	mov	r3,r2
   138fc:	00800074 	movhi	r2,1
   13900:	1099b204 	addi	r2,r2,26312
   13904:	1885883a 	add	r2,r3,r2
   13908:	00000106 	br	13910 <isatty+0x40>
   1390c:	0005883a 	mov	r2,zero
   13910:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   13914:	e0bfef17 	ldw	r2,-68(fp)
   13918:	10000e26 	beq	r2,zero,13954 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   1391c:	e0bfef17 	ldw	r2,-68(fp)
   13920:	10800017 	ldw	r2,0(r2)
   13924:	10800817 	ldw	r2,32(r2)
   13928:	1000021e 	bne	r2,zero,13934 <isatty+0x64>
    {
      return 1;
   1392c:	00800044 	movi	r2,1
   13930:	00000d06 	br	13968 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   13934:	e0bff004 	addi	r2,fp,-64
   13938:	100b883a 	mov	r5,r2
   1393c:	e13fff17 	ldw	r4,-4(fp)
   13940:	00137dc0 	call	137dc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   13944:	e0bff117 	ldw	r2,-60(fp)
   13948:	10880020 	cmpeqi	r2,r2,8192
   1394c:	10803fcc 	andi	r2,r2,255
   13950:	00000506 	br	13968 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   13954:	00138940 	call	13894 <alt_get_errno>
   13958:	1007883a 	mov	r3,r2
   1395c:	00801444 	movi	r2,81
   13960:	18800015 	stw	r2,0(r3)
    return 0;
   13964:	0005883a 	mov	r2,zero
  }
}
   13968:	e037883a 	mov	sp,fp
   1396c:	dfc00117 	ldw	ra,4(sp)
   13970:	df000017 	ldw	fp,0(sp)
   13974:	dec00204 	addi	sp,sp,8
   13978:	f800283a 	ret

0001397c <alt_load_section>:
   1397c:	defffc04 	addi	sp,sp,-16
   13980:	df000315 	stw	fp,12(sp)
   13984:	df000304 	addi	fp,sp,12
   13988:	e13ffd15 	stw	r4,-12(fp)
   1398c:	e17ffe15 	stw	r5,-8(fp)
   13990:	e1bfff15 	stw	r6,-4(fp)
   13994:	e0fffe17 	ldw	r3,-8(fp)
   13998:	e0bffd17 	ldw	r2,-12(fp)
   1399c:	18800c26 	beq	r3,r2,139d0 <alt_load_section+0x54>
   139a0:	00000806 	br	139c4 <alt_load_section+0x48>
   139a4:	e0bffe17 	ldw	r2,-8(fp)
   139a8:	10c00104 	addi	r3,r2,4
   139ac:	e0fffe15 	stw	r3,-8(fp)
   139b0:	e0fffd17 	ldw	r3,-12(fp)
   139b4:	19000104 	addi	r4,r3,4
   139b8:	e13ffd15 	stw	r4,-12(fp)
   139bc:	18c00017 	ldw	r3,0(r3)
   139c0:	10c00015 	stw	r3,0(r2)
   139c4:	e0fffe17 	ldw	r3,-8(fp)
   139c8:	e0bfff17 	ldw	r2,-4(fp)
   139cc:	18bff51e 	bne	r3,r2,139a4 <__alt_data_end+0xffff39a4>
   139d0:	0001883a 	nop
   139d4:	e037883a 	mov	sp,fp
   139d8:	df000017 	ldw	fp,0(sp)
   139dc:	dec00104 	addi	sp,sp,4
   139e0:	f800283a 	ret

000139e4 <alt_load>:
   139e4:	defffe04 	addi	sp,sp,-8
   139e8:	dfc00115 	stw	ra,4(sp)
   139ec:	df000015 	stw	fp,0(sp)
   139f0:	d839883a 	mov	fp,sp
   139f4:	01800074 	movhi	r6,1
   139f8:	319e3904 	addi	r6,r6,30948
   139fc:	01400074 	movhi	r5,1
   13a00:	29579004 	addi	r5,r5,24128
   13a04:	01000074 	movhi	r4,1
   13a08:	211e3904 	addi	r4,r4,30948
   13a0c:	001397c0 	call	1397c <alt_load_section>
   13a10:	01800074 	movhi	r6,1
   13a14:	31808c04 	addi	r6,r6,560
   13a18:	01400074 	movhi	r5,1
   13a1c:	29400804 	addi	r5,r5,32
   13a20:	01000074 	movhi	r4,1
   13a24:	21000804 	addi	r4,r4,32
   13a28:	001397c0 	call	1397c <alt_load_section>
   13a2c:	01800074 	movhi	r6,1
   13a30:	31979004 	addi	r6,r6,24128
   13a34:	01400074 	movhi	r5,1
   13a38:	29577904 	addi	r5,r5,24036
   13a3c:	01000074 	movhi	r4,1
   13a40:	21177904 	addi	r4,r4,24036
   13a44:	001397c0 	call	1397c <alt_load_section>
   13a48:	0014c780 	call	14c78 <alt_dcache_flush_all>
   13a4c:	0014e380 	call	14e38 <alt_icache_flush_all>
   13a50:	0001883a 	nop
   13a54:	e037883a 	mov	sp,fp
   13a58:	dfc00117 	ldw	ra,4(sp)
   13a5c:	df000017 	ldw	fp,0(sp)
   13a60:	dec00204 	addi	sp,sp,8
   13a64:	f800283a 	ret

00013a68 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13a68:	defffe04 	addi	sp,sp,-8
   13a6c:	dfc00115 	stw	ra,4(sp)
   13a70:	df000015 	stw	fp,0(sp)
   13a74:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13a78:	d0a00a17 	ldw	r2,-32728(gp)
   13a7c:	10000326 	beq	r2,zero,13a8c <alt_get_errno+0x24>
   13a80:	d0a00a17 	ldw	r2,-32728(gp)
   13a84:	103ee83a 	callr	r2
   13a88:	00000106 	br	13a90 <alt_get_errno+0x28>
   13a8c:	d0a6be04 	addi	r2,gp,-25864
}
   13a90:	e037883a 	mov	sp,fp
   13a94:	dfc00117 	ldw	ra,4(sp)
   13a98:	df000017 	ldw	fp,0(sp)
   13a9c:	dec00204 	addi	sp,sp,8
   13aa0:	f800283a 	ret

00013aa4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   13aa4:	defff904 	addi	sp,sp,-28
   13aa8:	dfc00615 	stw	ra,24(sp)
   13aac:	df000515 	stw	fp,20(sp)
   13ab0:	df000504 	addi	fp,sp,20
   13ab4:	e13ffd15 	stw	r4,-12(fp)
   13ab8:	e17ffe15 	stw	r5,-8(fp)
   13abc:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   13ac0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13ac4:	e0bffd17 	ldw	r2,-12(fp)
   13ac8:	10000816 	blt	r2,zero,13aec <lseek+0x48>
   13acc:	01400304 	movi	r5,12
   13ad0:	e13ffd17 	ldw	r4,-12(fp)
   13ad4:	00136380 	call	13638 <__mulsi3>
   13ad8:	1007883a 	mov	r3,r2
   13adc:	00800074 	movhi	r2,1
   13ae0:	1099b204 	addi	r2,r2,26312
   13ae4:	1885883a 	add	r2,r3,r2
   13ae8:	00000106 	br	13af0 <lseek+0x4c>
   13aec:	0005883a 	mov	r2,zero
   13af0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   13af4:	e0bffc17 	ldw	r2,-16(fp)
   13af8:	10001026 	beq	r2,zero,13b3c <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   13afc:	e0bffc17 	ldw	r2,-16(fp)
   13b00:	10800017 	ldw	r2,0(r2)
   13b04:	10800717 	ldw	r2,28(r2)
   13b08:	10000926 	beq	r2,zero,13b30 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   13b0c:	e0bffc17 	ldw	r2,-16(fp)
   13b10:	10800017 	ldw	r2,0(r2)
   13b14:	10800717 	ldw	r2,28(r2)
   13b18:	e1bfff17 	ldw	r6,-4(fp)
   13b1c:	e17ffe17 	ldw	r5,-8(fp)
   13b20:	e13ffc17 	ldw	r4,-16(fp)
   13b24:	103ee83a 	callr	r2
   13b28:	e0bffb15 	stw	r2,-20(fp)
   13b2c:	00000506 	br	13b44 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   13b30:	00bfde84 	movi	r2,-134
   13b34:	e0bffb15 	stw	r2,-20(fp)
   13b38:	00000206 	br	13b44 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   13b3c:	00bfebc4 	movi	r2,-81
   13b40:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   13b44:	e0bffb17 	ldw	r2,-20(fp)
   13b48:	1000070e 	bge	r2,zero,13b68 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   13b4c:	0013a680 	call	13a68 <alt_get_errno>
   13b50:	1007883a 	mov	r3,r2
   13b54:	e0bffb17 	ldw	r2,-20(fp)
   13b58:	0085c83a 	sub	r2,zero,r2
   13b5c:	18800015 	stw	r2,0(r3)
    rc = -1;
   13b60:	00bfffc4 	movi	r2,-1
   13b64:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   13b68:	e0bffb17 	ldw	r2,-20(fp)
}
   13b6c:	e037883a 	mov	sp,fp
   13b70:	dfc00117 	ldw	ra,4(sp)
   13b74:	df000017 	ldw	fp,0(sp)
   13b78:	dec00204 	addi	sp,sp,8
   13b7c:	f800283a 	ret

00013b80 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   13b80:	defffd04 	addi	sp,sp,-12
   13b84:	dfc00215 	stw	ra,8(sp)
   13b88:	df000115 	stw	fp,4(sp)
   13b8c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   13b90:	0009883a 	mov	r4,zero
   13b94:	00140640 	call	14064 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   13b98:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   13b9c:	001409c0 	call	1409c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   13ba0:	01800074 	movhi	r6,1
   13ba4:	31978804 	addi	r6,r6,24096
   13ba8:	01400074 	movhi	r5,1
   13bac:	29578804 	addi	r5,r5,24096
   13bb0:	01000074 	movhi	r4,1
   13bb4:	21178804 	addi	r4,r4,24096
   13bb8:	00151dc0 	call	151dc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   13bbc:	0014d780 	call	14d78 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   13bc0:	01000074 	movhi	r4,1
   13bc4:	21137604 	addi	r4,r4,19928
   13bc8:	001599c0 	call	1599c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   13bcc:	d0a6bf17 	ldw	r2,-25860(gp)
   13bd0:	d0e6c017 	ldw	r3,-25856(gp)
   13bd4:	d126c117 	ldw	r4,-25852(gp)
   13bd8:	200d883a 	mov	r6,r4
   13bdc:	180b883a 	mov	r5,r3
   13be0:	1009883a 	mov	r4,r2
   13be4:	001026c0 	call	1026c <main>
   13be8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   13bec:	01000044 	movi	r4,1
   13bf0:	001369c0 	call	1369c <close>
  exit (result);
   13bf4:	e13fff17 	ldw	r4,-4(fp)
   13bf8:	00159b00 	call	159b0 <exit>

00013bfc <__malloc_lock>:
   13bfc:	defffe04 	addi	sp,sp,-8
   13c00:	df000115 	stw	fp,4(sp)
   13c04:	df000104 	addi	fp,sp,4
   13c08:	e13fff15 	stw	r4,-4(fp)
   13c0c:	0001883a 	nop
   13c10:	e037883a 	mov	sp,fp
   13c14:	df000017 	ldw	fp,0(sp)
   13c18:	dec00104 	addi	sp,sp,4
   13c1c:	f800283a 	ret

00013c20 <__malloc_unlock>:
   13c20:	defffe04 	addi	sp,sp,-8
   13c24:	df000115 	stw	fp,4(sp)
   13c28:	df000104 	addi	fp,sp,4
   13c2c:	e13fff15 	stw	r4,-4(fp)
   13c30:	0001883a 	nop
   13c34:	e037883a 	mov	sp,fp
   13c38:	df000017 	ldw	fp,0(sp)
   13c3c:	dec00104 	addi	sp,sp,4
   13c40:	f800283a 	ret

00013c44 <alt_putstr>:
   13c44:	defffd04 	addi	sp,sp,-12
   13c48:	dfc00215 	stw	ra,8(sp)
   13c4c:	df000115 	stw	fp,4(sp)
   13c50:	df000104 	addi	fp,sp,4
   13c54:	e13fff15 	stw	r4,-4(fp)
   13c58:	d0a00217 	ldw	r2,-32760(gp)
   13c5c:	10800217 	ldw	r2,8(r2)
   13c60:	100b883a 	mov	r5,r2
   13c64:	e13fff17 	ldw	r4,-4(fp)
   13c68:	0015a840 	call	15a84 <fputs>
   13c6c:	e037883a 	mov	sp,fp
   13c70:	dfc00117 	ldw	ra,4(sp)
   13c74:	df000017 	ldw	fp,0(sp)
   13c78:	dec00204 	addi	sp,sp,8
   13c7c:	f800283a 	ret

00013c80 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13c80:	defffe04 	addi	sp,sp,-8
   13c84:	dfc00115 	stw	ra,4(sp)
   13c88:	df000015 	stw	fp,0(sp)
   13c8c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13c90:	d0a00a17 	ldw	r2,-32728(gp)
   13c94:	10000326 	beq	r2,zero,13ca4 <alt_get_errno+0x24>
   13c98:	d0a00a17 	ldw	r2,-32728(gp)
   13c9c:	103ee83a 	callr	r2
   13ca0:	00000106 	br	13ca8 <alt_get_errno+0x28>
   13ca4:	d0a6be04 	addi	r2,gp,-25864
}
   13ca8:	e037883a 	mov	sp,fp
   13cac:	dfc00117 	ldw	ra,4(sp)
   13cb0:	df000017 	ldw	fp,0(sp)
   13cb4:	dec00204 	addi	sp,sp,8
   13cb8:	f800283a 	ret

00013cbc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   13cbc:	defff904 	addi	sp,sp,-28
   13cc0:	dfc00615 	stw	ra,24(sp)
   13cc4:	df000515 	stw	fp,20(sp)
   13cc8:	df000504 	addi	fp,sp,20
   13ccc:	e13ffd15 	stw	r4,-12(fp)
   13cd0:	e17ffe15 	stw	r5,-8(fp)
   13cd4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13cd8:	e0bffd17 	ldw	r2,-12(fp)
   13cdc:	10000816 	blt	r2,zero,13d00 <read+0x44>
   13ce0:	01400304 	movi	r5,12
   13ce4:	e13ffd17 	ldw	r4,-12(fp)
   13ce8:	00136380 	call	13638 <__mulsi3>
   13cec:	1007883a 	mov	r3,r2
   13cf0:	00800074 	movhi	r2,1
   13cf4:	1099b204 	addi	r2,r2,26312
   13cf8:	1885883a 	add	r2,r3,r2
   13cfc:	00000106 	br	13d04 <read+0x48>
   13d00:	0005883a 	mov	r2,zero
   13d04:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   13d08:	e0bffb17 	ldw	r2,-20(fp)
   13d0c:	10002226 	beq	r2,zero,13d98 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   13d10:	e0bffb17 	ldw	r2,-20(fp)
   13d14:	10800217 	ldw	r2,8(r2)
   13d18:	108000cc 	andi	r2,r2,3
   13d1c:	10800060 	cmpeqi	r2,r2,1
   13d20:	1000181e 	bne	r2,zero,13d84 <read+0xc8>
        (fd->dev->read))
   13d24:	e0bffb17 	ldw	r2,-20(fp)
   13d28:	10800017 	ldw	r2,0(r2)
   13d2c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   13d30:	10001426 	beq	r2,zero,13d84 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   13d34:	e0bffb17 	ldw	r2,-20(fp)
   13d38:	10800017 	ldw	r2,0(r2)
   13d3c:	10800517 	ldw	r2,20(r2)
   13d40:	e0ffff17 	ldw	r3,-4(fp)
   13d44:	180d883a 	mov	r6,r3
   13d48:	e17ffe17 	ldw	r5,-8(fp)
   13d4c:	e13ffb17 	ldw	r4,-20(fp)
   13d50:	103ee83a 	callr	r2
   13d54:	e0bffc15 	stw	r2,-16(fp)
   13d58:	e0bffc17 	ldw	r2,-16(fp)
   13d5c:	1000070e 	bge	r2,zero,13d7c <read+0xc0>
        {
          ALT_ERRNO = -rval;
   13d60:	0013c800 	call	13c80 <alt_get_errno>
   13d64:	1007883a 	mov	r3,r2
   13d68:	e0bffc17 	ldw	r2,-16(fp)
   13d6c:	0085c83a 	sub	r2,zero,r2
   13d70:	18800015 	stw	r2,0(r3)
          return -1;
   13d74:	00bfffc4 	movi	r2,-1
   13d78:	00000c06 	br	13dac <read+0xf0>
        }
        return rval;
   13d7c:	e0bffc17 	ldw	r2,-16(fp)
   13d80:	00000a06 	br	13dac <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   13d84:	0013c800 	call	13c80 <alt_get_errno>
   13d88:	1007883a 	mov	r3,r2
   13d8c:	00800344 	movi	r2,13
   13d90:	18800015 	stw	r2,0(r3)
   13d94:	00000406 	br	13da8 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   13d98:	0013c800 	call	13c80 <alt_get_errno>
   13d9c:	1007883a 	mov	r3,r2
   13da0:	00801444 	movi	r2,81
   13da4:	18800015 	stw	r2,0(r3)
  }
  return -1;
   13da8:	00bfffc4 	movi	r2,-1
}
   13dac:	e037883a 	mov	sp,fp
   13db0:	dfc00117 	ldw	ra,4(sp)
   13db4:	df000017 	ldw	fp,0(sp)
   13db8:	dec00204 	addi	sp,sp,8
   13dbc:	f800283a 	ret

00013dc0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   13dc0:	defffc04 	addi	sp,sp,-16
   13dc4:	dfc00315 	stw	ra,12(sp)
   13dc8:	df000215 	stw	fp,8(sp)
   13dcc:	dc000115 	stw	r16,4(sp)
   13dd0:	df000204 	addi	fp,sp,8
   13dd4:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   13dd8:	e0bffe17 	ldw	r2,-8(fp)
   13ddc:	108000d0 	cmplti	r2,r2,3
   13de0:	1000111e 	bne	r2,zero,13e28 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   13de4:	04000074 	movhi	r16,1
   13de8:	8419b204 	addi	r16,r16,26312
   13dec:	e0bffe17 	ldw	r2,-8(fp)
   13df0:	01400304 	movi	r5,12
   13df4:	1009883a 	mov	r4,r2
   13df8:	00136380 	call	13638 <__mulsi3>
   13dfc:	8085883a 	add	r2,r16,r2
   13e00:	10800204 	addi	r2,r2,8
   13e04:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   13e08:	04000074 	movhi	r16,1
   13e0c:	8419b204 	addi	r16,r16,26312
   13e10:	e0bffe17 	ldw	r2,-8(fp)
   13e14:	01400304 	movi	r5,12
   13e18:	1009883a 	mov	r4,r2
   13e1c:	00136380 	call	13638 <__mulsi3>
   13e20:	8085883a 	add	r2,r16,r2
   13e24:	10000015 	stw	zero,0(r2)
  }
}
   13e28:	0001883a 	nop
   13e2c:	e6ffff04 	addi	sp,fp,-4
   13e30:	dfc00217 	ldw	ra,8(sp)
   13e34:	df000117 	ldw	fp,4(sp)
   13e38:	dc000017 	ldw	r16,0(sp)
   13e3c:	dec00304 	addi	sp,sp,12
   13e40:	f800283a 	ret

00013e44 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   13e44:	defff904 	addi	sp,sp,-28
   13e48:	df000615 	stw	fp,24(sp)
   13e4c:	df000604 	addi	fp,sp,24
   13e50:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13e54:	0005303a 	rdctl	r2,status
   13e58:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13e5c:	e0fffe17 	ldw	r3,-8(fp)
   13e60:	00bfff84 	movi	r2,-2
   13e64:	1884703a 	and	r2,r3,r2
   13e68:	1001703a 	wrctl	status,r2
  
  return context;
   13e6c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   13e70:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   13e74:	d0a00b17 	ldw	r2,-32724(gp)
   13e78:	10c000c4 	addi	r3,r2,3
   13e7c:	00bfff04 	movi	r2,-4
   13e80:	1884703a 	and	r2,r3,r2
   13e84:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   13e88:	d0e00b17 	ldw	r3,-32724(gp)
   13e8c:	e0bfff17 	ldw	r2,-4(fp)
   13e90:	1887883a 	add	r3,r3,r2
   13e94:	008000b4 	movhi	r2,2
   13e98:	10800004 	addi	r2,r2,0
   13e9c:	10c0062e 	bgeu	r2,r3,13eb8 <sbrk+0x74>
   13ea0:	e0bffb17 	ldw	r2,-20(fp)
   13ea4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13ea8:	e0bffa17 	ldw	r2,-24(fp)
   13eac:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   13eb0:	00bfffc4 	movi	r2,-1
   13eb4:	00000b06 	br	13ee4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   13eb8:	d0a00b17 	ldw	r2,-32724(gp)
   13ebc:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   13ec0:	d0e00b17 	ldw	r3,-32724(gp)
   13ec4:	e0bfff17 	ldw	r2,-4(fp)
   13ec8:	1885883a 	add	r2,r3,r2
   13ecc:	d0a00b15 	stw	r2,-32724(gp)
   13ed0:	e0bffb17 	ldw	r2,-20(fp)
   13ed4:	e0bffc15 	stw	r2,-16(fp)
   13ed8:	e0bffc17 	ldw	r2,-16(fp)
   13edc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   13ee0:	e0bffd17 	ldw	r2,-12(fp)
} 
   13ee4:	e037883a 	mov	sp,fp
   13ee8:	df000017 	ldw	fp,0(sp)
   13eec:	dec00104 	addi	sp,sp,4
   13ef0:	f800283a 	ret

00013ef4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13ef4:	defffe04 	addi	sp,sp,-8
   13ef8:	dfc00115 	stw	ra,4(sp)
   13efc:	df000015 	stw	fp,0(sp)
   13f00:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13f04:	d0a00a17 	ldw	r2,-32728(gp)
   13f08:	10000326 	beq	r2,zero,13f18 <alt_get_errno+0x24>
   13f0c:	d0a00a17 	ldw	r2,-32728(gp)
   13f10:	103ee83a 	callr	r2
   13f14:	00000106 	br	13f1c <alt_get_errno+0x28>
   13f18:	d0a6be04 	addi	r2,gp,-25864
}
   13f1c:	e037883a 	mov	sp,fp
   13f20:	dfc00117 	ldw	ra,4(sp)
   13f24:	df000017 	ldw	fp,0(sp)
   13f28:	dec00204 	addi	sp,sp,8
   13f2c:	f800283a 	ret

00013f30 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   13f30:	defff904 	addi	sp,sp,-28
   13f34:	dfc00615 	stw	ra,24(sp)
   13f38:	df000515 	stw	fp,20(sp)
   13f3c:	df000504 	addi	fp,sp,20
   13f40:	e13ffd15 	stw	r4,-12(fp)
   13f44:	e17ffe15 	stw	r5,-8(fp)
   13f48:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13f4c:	e0bffd17 	ldw	r2,-12(fp)
   13f50:	10000816 	blt	r2,zero,13f74 <write+0x44>
   13f54:	01400304 	movi	r5,12
   13f58:	e13ffd17 	ldw	r4,-12(fp)
   13f5c:	00136380 	call	13638 <__mulsi3>
   13f60:	1007883a 	mov	r3,r2
   13f64:	00800074 	movhi	r2,1
   13f68:	1099b204 	addi	r2,r2,26312
   13f6c:	1885883a 	add	r2,r3,r2
   13f70:	00000106 	br	13f78 <write+0x48>
   13f74:	0005883a 	mov	r2,zero
   13f78:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   13f7c:	e0bffb17 	ldw	r2,-20(fp)
   13f80:	10002126 	beq	r2,zero,14008 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   13f84:	e0bffb17 	ldw	r2,-20(fp)
   13f88:	10800217 	ldw	r2,8(r2)
   13f8c:	108000cc 	andi	r2,r2,3
   13f90:	10001826 	beq	r2,zero,13ff4 <write+0xc4>
   13f94:	e0bffb17 	ldw	r2,-20(fp)
   13f98:	10800017 	ldw	r2,0(r2)
   13f9c:	10800617 	ldw	r2,24(r2)
   13fa0:	10001426 	beq	r2,zero,13ff4 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   13fa4:	e0bffb17 	ldw	r2,-20(fp)
   13fa8:	10800017 	ldw	r2,0(r2)
   13fac:	10800617 	ldw	r2,24(r2)
   13fb0:	e0ffff17 	ldw	r3,-4(fp)
   13fb4:	180d883a 	mov	r6,r3
   13fb8:	e17ffe17 	ldw	r5,-8(fp)
   13fbc:	e13ffb17 	ldw	r4,-20(fp)
   13fc0:	103ee83a 	callr	r2
   13fc4:	e0bffc15 	stw	r2,-16(fp)
   13fc8:	e0bffc17 	ldw	r2,-16(fp)
   13fcc:	1000070e 	bge	r2,zero,13fec <write+0xbc>
      {
        ALT_ERRNO = -rval;
   13fd0:	0013ef40 	call	13ef4 <alt_get_errno>
   13fd4:	1007883a 	mov	r3,r2
   13fd8:	e0bffc17 	ldw	r2,-16(fp)
   13fdc:	0085c83a 	sub	r2,zero,r2
   13fe0:	18800015 	stw	r2,0(r3)
        return -1;
   13fe4:	00bfffc4 	movi	r2,-1
   13fe8:	00000c06 	br	1401c <write+0xec>
      }
      return rval;
   13fec:	e0bffc17 	ldw	r2,-16(fp)
   13ff0:	00000a06 	br	1401c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   13ff4:	0013ef40 	call	13ef4 <alt_get_errno>
   13ff8:	1007883a 	mov	r3,r2
   13ffc:	00800344 	movi	r2,13
   14000:	18800015 	stw	r2,0(r3)
   14004:	00000406 	br	14018 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   14008:	0013ef40 	call	13ef4 <alt_get_errno>
   1400c:	1007883a 	mov	r3,r2
   14010:	00801444 	movi	r2,81
   14014:	18800015 	stw	r2,0(r3)
  }
  return -1;
   14018:	00bfffc4 	movi	r2,-1
}
   1401c:	e037883a 	mov	sp,fp
   14020:	dfc00117 	ldw	ra,4(sp)
   14024:	df000017 	ldw	fp,0(sp)
   14028:	dec00204 	addi	sp,sp,8
   1402c:	f800283a 	ret

00014030 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   14030:	defffd04 	addi	sp,sp,-12
   14034:	dfc00215 	stw	ra,8(sp)
   14038:	df000115 	stw	fp,4(sp)
   1403c:	df000104 	addi	fp,sp,4
   14040:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   14044:	d1600704 	addi	r5,gp,-32740
   14048:	e13fff17 	ldw	r4,-4(fp)
   1404c:	0014cd40 	call	14cd4 <alt_dev_llist_insert>
}
   14050:	e037883a 	mov	sp,fp
   14054:	dfc00117 	ldw	ra,4(sp)
   14058:	df000017 	ldw	fp,0(sp)
   1405c:	dec00204 	addi	sp,sp,8
   14060:	f800283a 	ret

00014064 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   14064:	defffd04 	addi	sp,sp,-12
   14068:	dfc00215 	stw	ra,8(sp)
   1406c:	df000115 	stw	fp,4(sp)
   14070:	df000104 	addi	fp,sp,4
   14074:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   14078:	00156800 	call	15680 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   1407c:	00800044 	movi	r2,1
   14080:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   14084:	0001883a 	nop
   14088:	e037883a 	mov	sp,fp
   1408c:	dfc00117 	ldw	ra,4(sp)
   14090:	df000017 	ldw	fp,0(sp)
   14094:	dec00204 	addi	sp,sp,8
   14098:	f800283a 	ret

0001409c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   1409c:	defffe04 	addi	sp,sp,-8
   140a0:	dfc00115 	stw	ra,4(sp)
   140a4:	df000015 	stw	fp,0(sp)
   140a8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   140ac:	000d883a 	mov	r6,zero
   140b0:	000b883a 	mov	r5,zero
   140b4:	01000074 	movhi	r4,1
   140b8:	211a1c04 	addi	r4,r4,26736
   140bc:	00142480 	call	14248 <altera_avalon_jtag_uart_init>
   140c0:	01000074 	movhi	r4,1
   140c4:	211a1204 	addi	r4,r4,26696
   140c8:	00140300 	call	14030 <alt_dev_reg>
}
   140cc:	0001883a 	nop
   140d0:	e037883a 	mov	sp,fp
   140d4:	dfc00117 	ldw	ra,4(sp)
   140d8:	df000017 	ldw	fp,0(sp)
   140dc:	dec00204 	addi	sp,sp,8
   140e0:	f800283a 	ret

000140e4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   140e4:	defffa04 	addi	sp,sp,-24
   140e8:	dfc00515 	stw	ra,20(sp)
   140ec:	df000415 	stw	fp,16(sp)
   140f0:	df000404 	addi	fp,sp,16
   140f4:	e13ffd15 	stw	r4,-12(fp)
   140f8:	e17ffe15 	stw	r5,-8(fp)
   140fc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   14100:	e0bffd17 	ldw	r2,-12(fp)
   14104:	10800017 	ldw	r2,0(r2)
   14108:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   1410c:	e0bffc17 	ldw	r2,-16(fp)
   14110:	10c00a04 	addi	r3,r2,40
   14114:	e0bffd17 	ldw	r2,-12(fp)
   14118:	10800217 	ldw	r2,8(r2)
   1411c:	100f883a 	mov	r7,r2
   14120:	e1bfff17 	ldw	r6,-4(fp)
   14124:	e17ffe17 	ldw	r5,-8(fp)
   14128:	1809883a 	mov	r4,r3
   1412c:	001470c0 	call	1470c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   14130:	e037883a 	mov	sp,fp
   14134:	dfc00117 	ldw	ra,4(sp)
   14138:	df000017 	ldw	fp,0(sp)
   1413c:	dec00204 	addi	sp,sp,8
   14140:	f800283a 	ret

00014144 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   14144:	defffa04 	addi	sp,sp,-24
   14148:	dfc00515 	stw	ra,20(sp)
   1414c:	df000415 	stw	fp,16(sp)
   14150:	df000404 	addi	fp,sp,16
   14154:	e13ffd15 	stw	r4,-12(fp)
   14158:	e17ffe15 	stw	r5,-8(fp)
   1415c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   14160:	e0bffd17 	ldw	r2,-12(fp)
   14164:	10800017 	ldw	r2,0(r2)
   14168:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   1416c:	e0bffc17 	ldw	r2,-16(fp)
   14170:	10c00a04 	addi	r3,r2,40
   14174:	e0bffd17 	ldw	r2,-12(fp)
   14178:	10800217 	ldw	r2,8(r2)
   1417c:	100f883a 	mov	r7,r2
   14180:	e1bfff17 	ldw	r6,-4(fp)
   14184:	e17ffe17 	ldw	r5,-8(fp)
   14188:	1809883a 	mov	r4,r3
   1418c:	00149280 	call	14928 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   14190:	e037883a 	mov	sp,fp
   14194:	dfc00117 	ldw	ra,4(sp)
   14198:	df000017 	ldw	fp,0(sp)
   1419c:	dec00204 	addi	sp,sp,8
   141a0:	f800283a 	ret

000141a4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   141a4:	defffc04 	addi	sp,sp,-16
   141a8:	dfc00315 	stw	ra,12(sp)
   141ac:	df000215 	stw	fp,8(sp)
   141b0:	df000204 	addi	fp,sp,8
   141b4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   141b8:	e0bfff17 	ldw	r2,-4(fp)
   141bc:	10800017 	ldw	r2,0(r2)
   141c0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   141c4:	e0bffe17 	ldw	r2,-8(fp)
   141c8:	10c00a04 	addi	r3,r2,40
   141cc:	e0bfff17 	ldw	r2,-4(fp)
   141d0:	10800217 	ldw	r2,8(r2)
   141d4:	100b883a 	mov	r5,r2
   141d8:	1809883a 	mov	r4,r3
   141dc:	00145b40 	call	145b4 <altera_avalon_jtag_uart_close>
}
   141e0:	e037883a 	mov	sp,fp
   141e4:	dfc00117 	ldw	ra,4(sp)
   141e8:	df000017 	ldw	fp,0(sp)
   141ec:	dec00204 	addi	sp,sp,8
   141f0:	f800283a 	ret

000141f4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   141f4:	defffa04 	addi	sp,sp,-24
   141f8:	dfc00515 	stw	ra,20(sp)
   141fc:	df000415 	stw	fp,16(sp)
   14200:	df000404 	addi	fp,sp,16
   14204:	e13ffd15 	stw	r4,-12(fp)
   14208:	e17ffe15 	stw	r5,-8(fp)
   1420c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   14210:	e0bffd17 	ldw	r2,-12(fp)
   14214:	10800017 	ldw	r2,0(r2)
   14218:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   1421c:	e0bffc17 	ldw	r2,-16(fp)
   14220:	10800a04 	addi	r2,r2,40
   14224:	e1bfff17 	ldw	r6,-4(fp)
   14228:	e17ffe17 	ldw	r5,-8(fp)
   1422c:	1009883a 	mov	r4,r2
   14230:	001461c0 	call	1461c <altera_avalon_jtag_uart_ioctl>
}
   14234:	e037883a 	mov	sp,fp
   14238:	dfc00117 	ldw	ra,4(sp)
   1423c:	df000017 	ldw	fp,0(sp)
   14240:	dec00204 	addi	sp,sp,8
   14244:	f800283a 	ret

00014248 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   14248:	defffa04 	addi	sp,sp,-24
   1424c:	dfc00515 	stw	ra,20(sp)
   14250:	df000415 	stw	fp,16(sp)
   14254:	df000404 	addi	fp,sp,16
   14258:	e13ffd15 	stw	r4,-12(fp)
   1425c:	e17ffe15 	stw	r5,-8(fp)
   14260:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   14264:	e0bffd17 	ldw	r2,-12(fp)
   14268:	00c00044 	movi	r3,1
   1426c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   14270:	e0bffd17 	ldw	r2,-12(fp)
   14274:	10800017 	ldw	r2,0(r2)
   14278:	10800104 	addi	r2,r2,4
   1427c:	1007883a 	mov	r3,r2
   14280:	e0bffd17 	ldw	r2,-12(fp)
   14284:	10800817 	ldw	r2,32(r2)
   14288:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   1428c:	e0bffe17 	ldw	r2,-8(fp)
   14290:	e0ffff17 	ldw	r3,-4(fp)
   14294:	d8000015 	stw	zero,0(sp)
   14298:	e1fffd17 	ldw	r7,-12(fp)
   1429c:	01800074 	movhi	r6,1
   142a0:	3190c204 	addi	r6,r6,17160
   142a4:	180b883a 	mov	r5,r3
   142a8:	1009883a 	mov	r4,r2
   142ac:	0014e580 	call	14e58 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   142b0:	e0bffd17 	ldw	r2,-12(fp)
   142b4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   142b8:	e0bffd17 	ldw	r2,-12(fp)
   142bc:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   142c0:	d0e6c317 	ldw	r3,-25844(gp)
   142c4:	e1fffd17 	ldw	r7,-12(fp)
   142c8:	01800074 	movhi	r6,1
   142cc:	31914504 	addi	r6,r6,17684
   142d0:	180b883a 	mov	r5,r3
   142d4:	1009883a 	mov	r4,r2
   142d8:	0014b4c0 	call	14b4c <alt_alarm_start>
   142dc:	1000040e 	bge	r2,zero,142f0 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   142e0:	e0fffd17 	ldw	r3,-12(fp)
   142e4:	00a00034 	movhi	r2,32768
   142e8:	10bfffc4 	addi	r2,r2,-1
   142ec:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   142f0:	0001883a 	nop
   142f4:	e037883a 	mov	sp,fp
   142f8:	dfc00117 	ldw	ra,4(sp)
   142fc:	df000017 	ldw	fp,0(sp)
   14300:	dec00204 	addi	sp,sp,8
   14304:	f800283a 	ret

00014308 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   14308:	defff804 	addi	sp,sp,-32
   1430c:	df000715 	stw	fp,28(sp)
   14310:	df000704 	addi	fp,sp,28
   14314:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   14318:	e0bfff17 	ldw	r2,-4(fp)
   1431c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   14320:	e0bffb17 	ldw	r2,-20(fp)
   14324:	10800017 	ldw	r2,0(r2)
   14328:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1432c:	e0bffc17 	ldw	r2,-16(fp)
   14330:	10800104 	addi	r2,r2,4
   14334:	10800037 	ldwio	r2,0(r2)
   14338:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   1433c:	e0bffd17 	ldw	r2,-12(fp)
   14340:	1080c00c 	andi	r2,r2,768
   14344:	10006d26 	beq	r2,zero,144fc <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   14348:	e0bffd17 	ldw	r2,-12(fp)
   1434c:	1080400c 	andi	r2,r2,256
   14350:	10003526 	beq	r2,zero,14428 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   14354:	00800074 	movhi	r2,1
   14358:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1435c:	e0bffb17 	ldw	r2,-20(fp)
   14360:	10800a17 	ldw	r2,40(r2)
   14364:	10800044 	addi	r2,r2,1
   14368:	1081ffcc 	andi	r2,r2,2047
   1436c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   14370:	e0bffb17 	ldw	r2,-20(fp)
   14374:	10c00b17 	ldw	r3,44(r2)
   14378:	e0bffe17 	ldw	r2,-8(fp)
   1437c:	18801526 	beq	r3,r2,143d4 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   14380:	e0bffc17 	ldw	r2,-16(fp)
   14384:	10800037 	ldwio	r2,0(r2)
   14388:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   1438c:	e0bff917 	ldw	r2,-28(fp)
   14390:	10a0000c 	andi	r2,r2,32768
   14394:	10001126 	beq	r2,zero,143dc <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   14398:	e0bffb17 	ldw	r2,-20(fp)
   1439c:	10800a17 	ldw	r2,40(r2)
   143a0:	e0fff917 	ldw	r3,-28(fp)
   143a4:	1809883a 	mov	r4,r3
   143a8:	e0fffb17 	ldw	r3,-20(fp)
   143ac:	1885883a 	add	r2,r3,r2
   143b0:	10800e04 	addi	r2,r2,56
   143b4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   143b8:	e0bffb17 	ldw	r2,-20(fp)
   143bc:	10800a17 	ldw	r2,40(r2)
   143c0:	10800044 	addi	r2,r2,1
   143c4:	10c1ffcc 	andi	r3,r2,2047
   143c8:	e0bffb17 	ldw	r2,-20(fp)
   143cc:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   143d0:	003fe206 	br	1435c <__alt_data_end+0xffff435c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   143d4:	0001883a 	nop
   143d8:	00000106 	br	143e0 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   143dc:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   143e0:	e0bff917 	ldw	r2,-28(fp)
   143e4:	10bfffec 	andhi	r2,r2,65535
   143e8:	10000f26 	beq	r2,zero,14428 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   143ec:	e0bffb17 	ldw	r2,-20(fp)
   143f0:	10c00817 	ldw	r3,32(r2)
   143f4:	00bfff84 	movi	r2,-2
   143f8:	1886703a 	and	r3,r3,r2
   143fc:	e0bffb17 	ldw	r2,-20(fp)
   14400:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   14404:	e0bffc17 	ldw	r2,-16(fp)
   14408:	10800104 	addi	r2,r2,4
   1440c:	1007883a 	mov	r3,r2
   14410:	e0bffb17 	ldw	r2,-20(fp)
   14414:	10800817 	ldw	r2,32(r2)
   14418:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1441c:	e0bffc17 	ldw	r2,-16(fp)
   14420:	10800104 	addi	r2,r2,4
   14424:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   14428:	e0bffd17 	ldw	r2,-12(fp)
   1442c:	1080800c 	andi	r2,r2,512
   14430:	103fbe26 	beq	r2,zero,1432c <__alt_data_end+0xffff432c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   14434:	e0bffd17 	ldw	r2,-12(fp)
   14438:	1004d43a 	srli	r2,r2,16
   1443c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   14440:	00001406 	br	14494 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   14444:	e0bffc17 	ldw	r2,-16(fp)
   14448:	e0fffb17 	ldw	r3,-20(fp)
   1444c:	18c00d17 	ldw	r3,52(r3)
   14450:	e13ffb17 	ldw	r4,-20(fp)
   14454:	20c7883a 	add	r3,r4,r3
   14458:	18c20e04 	addi	r3,r3,2104
   1445c:	18c00003 	ldbu	r3,0(r3)
   14460:	18c03fcc 	andi	r3,r3,255
   14464:	18c0201c 	xori	r3,r3,128
   14468:	18ffe004 	addi	r3,r3,-128
   1446c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   14470:	e0bffb17 	ldw	r2,-20(fp)
   14474:	10800d17 	ldw	r2,52(r2)
   14478:	10800044 	addi	r2,r2,1
   1447c:	10c1ffcc 	andi	r3,r2,2047
   14480:	e0bffb17 	ldw	r2,-20(fp)
   14484:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   14488:	e0bffa17 	ldw	r2,-24(fp)
   1448c:	10bfffc4 	addi	r2,r2,-1
   14490:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   14494:	e0bffa17 	ldw	r2,-24(fp)
   14498:	10000526 	beq	r2,zero,144b0 <altera_avalon_jtag_uart_irq+0x1a8>
   1449c:	e0bffb17 	ldw	r2,-20(fp)
   144a0:	10c00d17 	ldw	r3,52(r2)
   144a4:	e0bffb17 	ldw	r2,-20(fp)
   144a8:	10800c17 	ldw	r2,48(r2)
   144ac:	18bfe51e 	bne	r3,r2,14444 <__alt_data_end+0xffff4444>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   144b0:	e0bffa17 	ldw	r2,-24(fp)
   144b4:	103f9d26 	beq	r2,zero,1432c <__alt_data_end+0xffff432c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   144b8:	e0bffb17 	ldw	r2,-20(fp)
   144bc:	10c00817 	ldw	r3,32(r2)
   144c0:	00bfff44 	movi	r2,-3
   144c4:	1886703a 	and	r3,r3,r2
   144c8:	e0bffb17 	ldw	r2,-20(fp)
   144cc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   144d0:	e0bffb17 	ldw	r2,-20(fp)
   144d4:	10800017 	ldw	r2,0(r2)
   144d8:	10800104 	addi	r2,r2,4
   144dc:	1007883a 	mov	r3,r2
   144e0:	e0bffb17 	ldw	r2,-20(fp)
   144e4:	10800817 	ldw	r2,32(r2)
   144e8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   144ec:	e0bffc17 	ldw	r2,-16(fp)
   144f0:	10800104 	addi	r2,r2,4
   144f4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   144f8:	003f8c06 	br	1432c <__alt_data_end+0xffff432c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   144fc:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   14500:	0001883a 	nop
   14504:	e037883a 	mov	sp,fp
   14508:	df000017 	ldw	fp,0(sp)
   1450c:	dec00104 	addi	sp,sp,4
   14510:	f800283a 	ret

00014514 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   14514:	defff804 	addi	sp,sp,-32
   14518:	df000715 	stw	fp,28(sp)
   1451c:	df000704 	addi	fp,sp,28
   14520:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   14524:	e0bffb17 	ldw	r2,-20(fp)
   14528:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   1452c:	e0bff917 	ldw	r2,-28(fp)
   14530:	10800017 	ldw	r2,0(r2)
   14534:	10800104 	addi	r2,r2,4
   14538:	10800037 	ldwio	r2,0(r2)
   1453c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   14540:	e0bffa17 	ldw	r2,-24(fp)
   14544:	1081000c 	andi	r2,r2,1024
   14548:	10000b26 	beq	r2,zero,14578 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   1454c:	e0bff917 	ldw	r2,-28(fp)
   14550:	10800017 	ldw	r2,0(r2)
   14554:	10800104 	addi	r2,r2,4
   14558:	1007883a 	mov	r3,r2
   1455c:	e0bff917 	ldw	r2,-28(fp)
   14560:	10800817 	ldw	r2,32(r2)
   14564:	10810014 	ori	r2,r2,1024
   14568:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   1456c:	e0bff917 	ldw	r2,-28(fp)
   14570:	10000915 	stw	zero,36(r2)
   14574:	00000a06 	br	145a0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   14578:	e0bff917 	ldw	r2,-28(fp)
   1457c:	10c00917 	ldw	r3,36(r2)
   14580:	00a00034 	movhi	r2,32768
   14584:	10bfff04 	addi	r2,r2,-4
   14588:	10c00536 	bltu	r2,r3,145a0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   1458c:	e0bff917 	ldw	r2,-28(fp)
   14590:	10800917 	ldw	r2,36(r2)
   14594:	10c00044 	addi	r3,r2,1
   14598:	e0bff917 	ldw	r2,-28(fp)
   1459c:	10c00915 	stw	r3,36(r2)
   145a0:	d0a6c317 	ldw	r2,-25844(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   145a4:	e037883a 	mov	sp,fp
   145a8:	df000017 	ldw	fp,0(sp)
   145ac:	dec00104 	addi	sp,sp,4
   145b0:	f800283a 	ret

000145b4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   145b4:	defffd04 	addi	sp,sp,-12
   145b8:	df000215 	stw	fp,8(sp)
   145bc:	df000204 	addi	fp,sp,8
   145c0:	e13ffe15 	stw	r4,-8(fp)
   145c4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   145c8:	00000506 	br	145e0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   145cc:	e0bfff17 	ldw	r2,-4(fp)
   145d0:	1090000c 	andi	r2,r2,16384
   145d4:	10000226 	beq	r2,zero,145e0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   145d8:	00bffd44 	movi	r2,-11
   145dc:	00000b06 	br	1460c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   145e0:	e0bffe17 	ldw	r2,-8(fp)
   145e4:	10c00d17 	ldw	r3,52(r2)
   145e8:	e0bffe17 	ldw	r2,-8(fp)
   145ec:	10800c17 	ldw	r2,48(r2)
   145f0:	18800526 	beq	r3,r2,14608 <altera_avalon_jtag_uart_close+0x54>
   145f4:	e0bffe17 	ldw	r2,-8(fp)
   145f8:	10c00917 	ldw	r3,36(r2)
   145fc:	e0bffe17 	ldw	r2,-8(fp)
   14600:	10800117 	ldw	r2,4(r2)
   14604:	18bff136 	bltu	r3,r2,145cc <__alt_data_end+0xffff45cc>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   14608:	0005883a 	mov	r2,zero
}
   1460c:	e037883a 	mov	sp,fp
   14610:	df000017 	ldw	fp,0(sp)
   14614:	dec00104 	addi	sp,sp,4
   14618:	f800283a 	ret

0001461c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   1461c:	defffa04 	addi	sp,sp,-24
   14620:	df000515 	stw	fp,20(sp)
   14624:	df000504 	addi	fp,sp,20
   14628:	e13ffd15 	stw	r4,-12(fp)
   1462c:	e17ffe15 	stw	r5,-8(fp)
   14630:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   14634:	00bff9c4 	movi	r2,-25
   14638:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   1463c:	e0bffe17 	ldw	r2,-8(fp)
   14640:	10da8060 	cmpeqi	r3,r2,27137
   14644:	1800031e 	bne	r3,zero,14654 <altera_avalon_jtag_uart_ioctl+0x38>
   14648:	109a80a0 	cmpeqi	r2,r2,27138
   1464c:	1000181e 	bne	r2,zero,146b0 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   14650:	00002906 	br	146f8 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   14654:	e0bffd17 	ldw	r2,-12(fp)
   14658:	10c00117 	ldw	r3,4(r2)
   1465c:	00a00034 	movhi	r2,32768
   14660:	10bfffc4 	addi	r2,r2,-1
   14664:	18802126 	beq	r3,r2,146ec <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   14668:	e0bfff17 	ldw	r2,-4(fp)
   1466c:	10800017 	ldw	r2,0(r2)
   14670:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   14674:	e0bffc17 	ldw	r2,-16(fp)
   14678:	10800090 	cmplti	r2,r2,2
   1467c:	1000061e 	bne	r2,zero,14698 <altera_avalon_jtag_uart_ioctl+0x7c>
   14680:	e0fffc17 	ldw	r3,-16(fp)
   14684:	00a00034 	movhi	r2,32768
   14688:	10bfffc4 	addi	r2,r2,-1
   1468c:	18800226 	beq	r3,r2,14698 <altera_avalon_jtag_uart_ioctl+0x7c>
   14690:	e0bffc17 	ldw	r2,-16(fp)
   14694:	00000206 	br	146a0 <altera_avalon_jtag_uart_ioctl+0x84>
   14698:	00a00034 	movhi	r2,32768
   1469c:	10bfff84 	addi	r2,r2,-2
   146a0:	e0fffd17 	ldw	r3,-12(fp)
   146a4:	18800115 	stw	r2,4(r3)
      rc = 0;
   146a8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   146ac:	00000f06 	br	146ec <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   146b0:	e0bffd17 	ldw	r2,-12(fp)
   146b4:	10c00117 	ldw	r3,4(r2)
   146b8:	00a00034 	movhi	r2,32768
   146bc:	10bfffc4 	addi	r2,r2,-1
   146c0:	18800c26 	beq	r3,r2,146f4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   146c4:	e0bffd17 	ldw	r2,-12(fp)
   146c8:	10c00917 	ldw	r3,36(r2)
   146cc:	e0bffd17 	ldw	r2,-12(fp)
   146d0:	10800117 	ldw	r2,4(r2)
   146d4:	1885803a 	cmpltu	r2,r3,r2
   146d8:	10c03fcc 	andi	r3,r2,255
   146dc:	e0bfff17 	ldw	r2,-4(fp)
   146e0:	10c00015 	stw	r3,0(r2)
      rc = 0;
   146e4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   146e8:	00000206 	br	146f4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   146ec:	0001883a 	nop
   146f0:	00000106 	br	146f8 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   146f4:	0001883a 	nop

  default:
    break;
  }

  return rc;
   146f8:	e0bffb17 	ldw	r2,-20(fp)
}
   146fc:	e037883a 	mov	sp,fp
   14700:	df000017 	ldw	fp,0(sp)
   14704:	dec00104 	addi	sp,sp,4
   14708:	f800283a 	ret

0001470c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   1470c:	defff304 	addi	sp,sp,-52
   14710:	dfc00c15 	stw	ra,48(sp)
   14714:	df000b15 	stw	fp,44(sp)
   14718:	df000b04 	addi	fp,sp,44
   1471c:	e13ffc15 	stw	r4,-16(fp)
   14720:	e17ffd15 	stw	r5,-12(fp)
   14724:	e1bffe15 	stw	r6,-8(fp)
   14728:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   1472c:	e0bffd17 	ldw	r2,-12(fp)
   14730:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   14734:	00004706 	br	14854 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   14738:	e0bffc17 	ldw	r2,-16(fp)
   1473c:	10800a17 	ldw	r2,40(r2)
   14740:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   14744:	e0bffc17 	ldw	r2,-16(fp)
   14748:	10800b17 	ldw	r2,44(r2)
   1474c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   14750:	e0fff717 	ldw	r3,-36(fp)
   14754:	e0bff817 	ldw	r2,-32(fp)
   14758:	18800536 	bltu	r3,r2,14770 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   1475c:	e0fff717 	ldw	r3,-36(fp)
   14760:	e0bff817 	ldw	r2,-32(fp)
   14764:	1885c83a 	sub	r2,r3,r2
   14768:	e0bff615 	stw	r2,-40(fp)
   1476c:	00000406 	br	14780 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   14770:	00c20004 	movi	r3,2048
   14774:	e0bff817 	ldw	r2,-32(fp)
   14778:	1885c83a 	sub	r2,r3,r2
   1477c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   14780:	e0bff617 	ldw	r2,-40(fp)
   14784:	10001e26 	beq	r2,zero,14800 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   14788:	e0fffe17 	ldw	r3,-8(fp)
   1478c:	e0bff617 	ldw	r2,-40(fp)
   14790:	1880022e 	bgeu	r3,r2,1479c <altera_avalon_jtag_uart_read+0x90>
        n = space;
   14794:	e0bffe17 	ldw	r2,-8(fp)
   14798:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   1479c:	e0bffc17 	ldw	r2,-16(fp)
   147a0:	10c00e04 	addi	r3,r2,56
   147a4:	e0bff817 	ldw	r2,-32(fp)
   147a8:	1885883a 	add	r2,r3,r2
   147ac:	e1bff617 	ldw	r6,-40(fp)
   147b0:	100b883a 	mov	r5,r2
   147b4:	e13ff517 	ldw	r4,-44(fp)
   147b8:	0011e640 	call	11e64 <memcpy>
      ptr   += n;
   147bc:	e0fff517 	ldw	r3,-44(fp)
   147c0:	e0bff617 	ldw	r2,-40(fp)
   147c4:	1885883a 	add	r2,r3,r2
   147c8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   147cc:	e0fffe17 	ldw	r3,-8(fp)
   147d0:	e0bff617 	ldw	r2,-40(fp)
   147d4:	1885c83a 	sub	r2,r3,r2
   147d8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   147dc:	e0fff817 	ldw	r3,-32(fp)
   147e0:	e0bff617 	ldw	r2,-40(fp)
   147e4:	1885883a 	add	r2,r3,r2
   147e8:	10c1ffcc 	andi	r3,r2,2047
   147ec:	e0bffc17 	ldw	r2,-16(fp)
   147f0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   147f4:	e0bffe17 	ldw	r2,-8(fp)
   147f8:	00bfcf16 	blt	zero,r2,14738 <__alt_data_end+0xffff4738>
   147fc:	00000106 	br	14804 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   14800:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   14804:	e0fff517 	ldw	r3,-44(fp)
   14808:	e0bffd17 	ldw	r2,-12(fp)
   1480c:	1880141e 	bne	r3,r2,14860 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   14810:	e0bfff17 	ldw	r2,-4(fp)
   14814:	1090000c 	andi	r2,r2,16384
   14818:	1000131e 	bne	r2,zero,14868 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   1481c:	0001883a 	nop
   14820:	e0bffc17 	ldw	r2,-16(fp)
   14824:	10c00a17 	ldw	r3,40(r2)
   14828:	e0bff717 	ldw	r2,-36(fp)
   1482c:	1880051e 	bne	r3,r2,14844 <altera_avalon_jtag_uart_read+0x138>
   14830:	e0bffc17 	ldw	r2,-16(fp)
   14834:	10c00917 	ldw	r3,36(r2)
   14838:	e0bffc17 	ldw	r2,-16(fp)
   1483c:	10800117 	ldw	r2,4(r2)
   14840:	18bff736 	bltu	r3,r2,14820 <__alt_data_end+0xffff4820>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   14844:	e0bffc17 	ldw	r2,-16(fp)
   14848:	10c00a17 	ldw	r3,40(r2)
   1484c:	e0bff717 	ldw	r2,-36(fp)
   14850:	18800726 	beq	r3,r2,14870 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   14854:	e0bffe17 	ldw	r2,-8(fp)
   14858:	00bfb716 	blt	zero,r2,14738 <__alt_data_end+0xffff4738>
   1485c:	00000506 	br	14874 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   14860:	0001883a 	nop
   14864:	00000306 	br	14874 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   14868:	0001883a 	nop
   1486c:	00000106 	br	14874 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   14870:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   14874:	e0fff517 	ldw	r3,-44(fp)
   14878:	e0bffd17 	ldw	r2,-12(fp)
   1487c:	18801826 	beq	r3,r2,148e0 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14880:	0005303a 	rdctl	r2,status
   14884:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14888:	e0fffb17 	ldw	r3,-20(fp)
   1488c:	00bfff84 	movi	r2,-2
   14890:	1884703a 	and	r2,r3,r2
   14894:	1001703a 	wrctl	status,r2
  
  return context;
   14898:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   1489c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   148a0:	e0bffc17 	ldw	r2,-16(fp)
   148a4:	10800817 	ldw	r2,32(r2)
   148a8:	10c00054 	ori	r3,r2,1
   148ac:	e0bffc17 	ldw	r2,-16(fp)
   148b0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   148b4:	e0bffc17 	ldw	r2,-16(fp)
   148b8:	10800017 	ldw	r2,0(r2)
   148bc:	10800104 	addi	r2,r2,4
   148c0:	1007883a 	mov	r3,r2
   148c4:	e0bffc17 	ldw	r2,-16(fp)
   148c8:	10800817 	ldw	r2,32(r2)
   148cc:	18800035 	stwio	r2,0(r3)
   148d0:	e0bffa17 	ldw	r2,-24(fp)
   148d4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   148d8:	e0bff917 	ldw	r2,-28(fp)
   148dc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   148e0:	e0fff517 	ldw	r3,-44(fp)
   148e4:	e0bffd17 	ldw	r2,-12(fp)
   148e8:	18800426 	beq	r3,r2,148fc <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   148ec:	e0fff517 	ldw	r3,-44(fp)
   148f0:	e0bffd17 	ldw	r2,-12(fp)
   148f4:	1885c83a 	sub	r2,r3,r2
   148f8:	00000606 	br	14914 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   148fc:	e0bfff17 	ldw	r2,-4(fp)
   14900:	1090000c 	andi	r2,r2,16384
   14904:	10000226 	beq	r2,zero,14910 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   14908:	00bffd44 	movi	r2,-11
   1490c:	00000106 	br	14914 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   14910:	00bffec4 	movi	r2,-5
}
   14914:	e037883a 	mov	sp,fp
   14918:	dfc00117 	ldw	ra,4(sp)
   1491c:	df000017 	ldw	fp,0(sp)
   14920:	dec00204 	addi	sp,sp,8
   14924:	f800283a 	ret

00014928 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   14928:	defff304 	addi	sp,sp,-52
   1492c:	dfc00c15 	stw	ra,48(sp)
   14930:	df000b15 	stw	fp,44(sp)
   14934:	df000b04 	addi	fp,sp,44
   14938:	e13ffc15 	stw	r4,-16(fp)
   1493c:	e17ffd15 	stw	r5,-12(fp)
   14940:	e1bffe15 	stw	r6,-8(fp)
   14944:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   14948:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   1494c:	e0bffd17 	ldw	r2,-12(fp)
   14950:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   14954:	00003706 	br	14a34 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   14958:	e0bffc17 	ldw	r2,-16(fp)
   1495c:	10800c17 	ldw	r2,48(r2)
   14960:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   14964:	e0bffc17 	ldw	r2,-16(fp)
   14968:	10800d17 	ldw	r2,52(r2)
   1496c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   14970:	e0fff917 	ldw	r3,-28(fp)
   14974:	e0bff517 	ldw	r2,-44(fp)
   14978:	1880062e 	bgeu	r3,r2,14994 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   1497c:	e0fff517 	ldw	r3,-44(fp)
   14980:	e0bff917 	ldw	r2,-28(fp)
   14984:	1885c83a 	sub	r2,r3,r2
   14988:	10bfffc4 	addi	r2,r2,-1
   1498c:	e0bff615 	stw	r2,-40(fp)
   14990:	00000b06 	br	149c0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   14994:	e0bff517 	ldw	r2,-44(fp)
   14998:	10000526 	beq	r2,zero,149b0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   1499c:	00c20004 	movi	r3,2048
   149a0:	e0bff917 	ldw	r2,-28(fp)
   149a4:	1885c83a 	sub	r2,r3,r2
   149a8:	e0bff615 	stw	r2,-40(fp)
   149ac:	00000406 	br	149c0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   149b0:	00c1ffc4 	movi	r3,2047
   149b4:	e0bff917 	ldw	r2,-28(fp)
   149b8:	1885c83a 	sub	r2,r3,r2
   149bc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   149c0:	e0bff617 	ldw	r2,-40(fp)
   149c4:	10001e26 	beq	r2,zero,14a40 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   149c8:	e0fffe17 	ldw	r3,-8(fp)
   149cc:	e0bff617 	ldw	r2,-40(fp)
   149d0:	1880022e 	bgeu	r3,r2,149dc <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   149d4:	e0bffe17 	ldw	r2,-8(fp)
   149d8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   149dc:	e0bffc17 	ldw	r2,-16(fp)
   149e0:	10c20e04 	addi	r3,r2,2104
   149e4:	e0bff917 	ldw	r2,-28(fp)
   149e8:	1885883a 	add	r2,r3,r2
   149ec:	e1bff617 	ldw	r6,-40(fp)
   149f0:	e17ffd17 	ldw	r5,-12(fp)
   149f4:	1009883a 	mov	r4,r2
   149f8:	0011e640 	call	11e64 <memcpy>
      ptr   += n;
   149fc:	e0fffd17 	ldw	r3,-12(fp)
   14a00:	e0bff617 	ldw	r2,-40(fp)
   14a04:	1885883a 	add	r2,r3,r2
   14a08:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   14a0c:	e0fffe17 	ldw	r3,-8(fp)
   14a10:	e0bff617 	ldw	r2,-40(fp)
   14a14:	1885c83a 	sub	r2,r3,r2
   14a18:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   14a1c:	e0fff917 	ldw	r3,-28(fp)
   14a20:	e0bff617 	ldw	r2,-40(fp)
   14a24:	1885883a 	add	r2,r3,r2
   14a28:	10c1ffcc 	andi	r3,r2,2047
   14a2c:	e0bffc17 	ldw	r2,-16(fp)
   14a30:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   14a34:	e0bffe17 	ldw	r2,-8(fp)
   14a38:	00bfc716 	blt	zero,r2,14958 <__alt_data_end+0xffff4958>
   14a3c:	00000106 	br	14a44 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   14a40:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14a44:	0005303a 	rdctl	r2,status
   14a48:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14a4c:	e0fffb17 	ldw	r3,-20(fp)
   14a50:	00bfff84 	movi	r2,-2
   14a54:	1884703a 	and	r2,r3,r2
   14a58:	1001703a 	wrctl	status,r2
  
  return context;
   14a5c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   14a60:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   14a64:	e0bffc17 	ldw	r2,-16(fp)
   14a68:	10800817 	ldw	r2,32(r2)
   14a6c:	10c00094 	ori	r3,r2,2
   14a70:	e0bffc17 	ldw	r2,-16(fp)
   14a74:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   14a78:	e0bffc17 	ldw	r2,-16(fp)
   14a7c:	10800017 	ldw	r2,0(r2)
   14a80:	10800104 	addi	r2,r2,4
   14a84:	1007883a 	mov	r3,r2
   14a88:	e0bffc17 	ldw	r2,-16(fp)
   14a8c:	10800817 	ldw	r2,32(r2)
   14a90:	18800035 	stwio	r2,0(r3)
   14a94:	e0bffa17 	ldw	r2,-24(fp)
   14a98:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14a9c:	e0bff817 	ldw	r2,-32(fp)
   14aa0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   14aa4:	e0bffe17 	ldw	r2,-8(fp)
   14aa8:	0080100e 	bge	zero,r2,14aec <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   14aac:	e0bfff17 	ldw	r2,-4(fp)
   14ab0:	1090000c 	andi	r2,r2,16384
   14ab4:	1000101e 	bne	r2,zero,14af8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   14ab8:	0001883a 	nop
   14abc:	e0bffc17 	ldw	r2,-16(fp)
   14ac0:	10c00d17 	ldw	r3,52(r2)
   14ac4:	e0bff517 	ldw	r2,-44(fp)
   14ac8:	1880051e 	bne	r3,r2,14ae0 <altera_avalon_jtag_uart_write+0x1b8>
   14acc:	e0bffc17 	ldw	r2,-16(fp)
   14ad0:	10c00917 	ldw	r3,36(r2)
   14ad4:	e0bffc17 	ldw	r2,-16(fp)
   14ad8:	10800117 	ldw	r2,4(r2)
   14adc:	18bff736 	bltu	r3,r2,14abc <__alt_data_end+0xffff4abc>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   14ae0:	e0bffc17 	ldw	r2,-16(fp)
   14ae4:	10800917 	ldw	r2,36(r2)
   14ae8:	1000051e 	bne	r2,zero,14b00 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   14aec:	e0bffe17 	ldw	r2,-8(fp)
   14af0:	00bfd016 	blt	zero,r2,14a34 <__alt_data_end+0xffff4a34>
   14af4:	00000306 	br	14b04 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   14af8:	0001883a 	nop
   14afc:	00000106 	br	14b04 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   14b00:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   14b04:	e0fffd17 	ldw	r3,-12(fp)
   14b08:	e0bff717 	ldw	r2,-36(fp)
   14b0c:	18800426 	beq	r3,r2,14b20 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   14b10:	e0fffd17 	ldw	r3,-12(fp)
   14b14:	e0bff717 	ldw	r2,-36(fp)
   14b18:	1885c83a 	sub	r2,r3,r2
   14b1c:	00000606 	br	14b38 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   14b20:	e0bfff17 	ldw	r2,-4(fp)
   14b24:	1090000c 	andi	r2,r2,16384
   14b28:	10000226 	beq	r2,zero,14b34 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   14b2c:	00bffd44 	movi	r2,-11
   14b30:	00000106 	br	14b38 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   14b34:	00bffec4 	movi	r2,-5
}
   14b38:	e037883a 	mov	sp,fp
   14b3c:	dfc00117 	ldw	ra,4(sp)
   14b40:	df000017 	ldw	fp,0(sp)
   14b44:	dec00204 	addi	sp,sp,8
   14b48:	f800283a 	ret

00014b4c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   14b4c:	defff504 	addi	sp,sp,-44
   14b50:	df000a15 	stw	fp,40(sp)
   14b54:	df000a04 	addi	fp,sp,40
   14b58:	e13ffc15 	stw	r4,-16(fp)
   14b5c:	e17ffd15 	stw	r5,-12(fp)
   14b60:	e1bffe15 	stw	r6,-8(fp)
   14b64:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   14b68:	e03ff615 	stw	zero,-40(fp)
   14b6c:	d0a6c317 	ldw	r2,-25844(gp)
  
  if (alt_ticks_per_second ())
   14b70:	10003c26 	beq	r2,zero,14c64 <alt_alarm_start+0x118>
  {
    if (alarm)
   14b74:	e0bffc17 	ldw	r2,-16(fp)
   14b78:	10003826 	beq	r2,zero,14c5c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   14b7c:	e0bffc17 	ldw	r2,-16(fp)
   14b80:	e0fffe17 	ldw	r3,-8(fp)
   14b84:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   14b88:	e0bffc17 	ldw	r2,-16(fp)
   14b8c:	e0ffff17 	ldw	r3,-4(fp)
   14b90:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14b94:	0005303a 	rdctl	r2,status
   14b98:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14b9c:	e0fff917 	ldw	r3,-28(fp)
   14ba0:	00bfff84 	movi	r2,-2
   14ba4:	1884703a 	and	r2,r3,r2
   14ba8:	1001703a 	wrctl	status,r2
  
  return context;
   14bac:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   14bb0:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   14bb4:	d0a6c417 	ldw	r2,-25840(gp)
      
      current_nticks = alt_nticks();
   14bb8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   14bbc:	e0fffd17 	ldw	r3,-12(fp)
   14bc0:	e0bff617 	ldw	r2,-40(fp)
   14bc4:	1885883a 	add	r2,r3,r2
   14bc8:	10c00044 	addi	r3,r2,1
   14bcc:	e0bffc17 	ldw	r2,-16(fp)
   14bd0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   14bd4:	e0bffc17 	ldw	r2,-16(fp)
   14bd8:	10c00217 	ldw	r3,8(r2)
   14bdc:	e0bff617 	ldw	r2,-40(fp)
   14be0:	1880042e 	bgeu	r3,r2,14bf4 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   14be4:	e0bffc17 	ldw	r2,-16(fp)
   14be8:	00c00044 	movi	r3,1
   14bec:	10c00405 	stb	r3,16(r2)
   14bf0:	00000206 	br	14bfc <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   14bf4:	e0bffc17 	ldw	r2,-16(fp)
   14bf8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   14bfc:	e0bffc17 	ldw	r2,-16(fp)
   14c00:	d0e00d04 	addi	r3,gp,-32716
   14c04:	e0fffa15 	stw	r3,-24(fp)
   14c08:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   14c0c:	e0bffb17 	ldw	r2,-20(fp)
   14c10:	e0fffa17 	ldw	r3,-24(fp)
   14c14:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   14c18:	e0bffa17 	ldw	r2,-24(fp)
   14c1c:	10c00017 	ldw	r3,0(r2)
   14c20:	e0bffb17 	ldw	r2,-20(fp)
   14c24:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   14c28:	e0bffa17 	ldw	r2,-24(fp)
   14c2c:	10800017 	ldw	r2,0(r2)
   14c30:	e0fffb17 	ldw	r3,-20(fp)
   14c34:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   14c38:	e0bffa17 	ldw	r2,-24(fp)
   14c3c:	e0fffb17 	ldw	r3,-20(fp)
   14c40:	10c00015 	stw	r3,0(r2)
   14c44:	e0bff817 	ldw	r2,-32(fp)
   14c48:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14c4c:	e0bff717 	ldw	r2,-36(fp)
   14c50:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   14c54:	0005883a 	mov	r2,zero
   14c58:	00000306 	br	14c68 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   14c5c:	00bffa84 	movi	r2,-22
   14c60:	00000106 	br	14c68 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   14c64:	00bfde84 	movi	r2,-134
  }
}
   14c68:	e037883a 	mov	sp,fp
   14c6c:	df000017 	ldw	fp,0(sp)
   14c70:	dec00104 	addi	sp,sp,4
   14c74:	f800283a 	ret

00014c78 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   14c78:	deffff04 	addi	sp,sp,-4
   14c7c:	df000015 	stw	fp,0(sp)
   14c80:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   14c84:	0001883a 	nop
   14c88:	e037883a 	mov	sp,fp
   14c8c:	df000017 	ldw	fp,0(sp)
   14c90:	dec00104 	addi	sp,sp,4
   14c94:	f800283a 	ret

00014c98 <alt_get_errno>:
   14c98:	defffe04 	addi	sp,sp,-8
   14c9c:	dfc00115 	stw	ra,4(sp)
   14ca0:	df000015 	stw	fp,0(sp)
   14ca4:	d839883a 	mov	fp,sp
   14ca8:	d0a00a17 	ldw	r2,-32728(gp)
   14cac:	10000326 	beq	r2,zero,14cbc <alt_get_errno+0x24>
   14cb0:	d0a00a17 	ldw	r2,-32728(gp)
   14cb4:	103ee83a 	callr	r2
   14cb8:	00000106 	br	14cc0 <alt_get_errno+0x28>
   14cbc:	d0a6be04 	addi	r2,gp,-25864
   14cc0:	e037883a 	mov	sp,fp
   14cc4:	dfc00117 	ldw	ra,4(sp)
   14cc8:	df000017 	ldw	fp,0(sp)
   14ccc:	dec00204 	addi	sp,sp,8
   14cd0:	f800283a 	ret

00014cd4 <alt_dev_llist_insert>:
   14cd4:	defffa04 	addi	sp,sp,-24
   14cd8:	dfc00515 	stw	ra,20(sp)
   14cdc:	df000415 	stw	fp,16(sp)
   14ce0:	df000404 	addi	fp,sp,16
   14ce4:	e13ffe15 	stw	r4,-8(fp)
   14ce8:	e17fff15 	stw	r5,-4(fp)
   14cec:	e0bffe17 	ldw	r2,-8(fp)
   14cf0:	10000326 	beq	r2,zero,14d00 <alt_dev_llist_insert+0x2c>
   14cf4:	e0bffe17 	ldw	r2,-8(fp)
   14cf8:	10800217 	ldw	r2,8(r2)
   14cfc:	1000061e 	bne	r2,zero,14d18 <alt_dev_llist_insert+0x44>
   14d00:	0014c980 	call	14c98 <alt_get_errno>
   14d04:	1007883a 	mov	r3,r2
   14d08:	00800584 	movi	r2,22
   14d0c:	18800015 	stw	r2,0(r3)
   14d10:	00bffa84 	movi	r2,-22
   14d14:	00001306 	br	14d64 <alt_dev_llist_insert+0x90>
   14d18:	e0bffe17 	ldw	r2,-8(fp)
   14d1c:	e0ffff17 	ldw	r3,-4(fp)
   14d20:	e0fffc15 	stw	r3,-16(fp)
   14d24:	e0bffd15 	stw	r2,-12(fp)
   14d28:	e0bffd17 	ldw	r2,-12(fp)
   14d2c:	e0fffc17 	ldw	r3,-16(fp)
   14d30:	10c00115 	stw	r3,4(r2)
   14d34:	e0bffc17 	ldw	r2,-16(fp)
   14d38:	10c00017 	ldw	r3,0(r2)
   14d3c:	e0bffd17 	ldw	r2,-12(fp)
   14d40:	10c00015 	stw	r3,0(r2)
   14d44:	e0bffc17 	ldw	r2,-16(fp)
   14d48:	10800017 	ldw	r2,0(r2)
   14d4c:	e0fffd17 	ldw	r3,-12(fp)
   14d50:	10c00115 	stw	r3,4(r2)
   14d54:	e0bffc17 	ldw	r2,-16(fp)
   14d58:	e0fffd17 	ldw	r3,-12(fp)
   14d5c:	10c00015 	stw	r3,0(r2)
   14d60:	0005883a 	mov	r2,zero
   14d64:	e037883a 	mov	sp,fp
   14d68:	dfc00117 	ldw	ra,4(sp)
   14d6c:	df000017 	ldw	fp,0(sp)
   14d70:	dec00204 	addi	sp,sp,8
   14d74:	f800283a 	ret

00014d78 <_do_ctors>:
   14d78:	defffd04 	addi	sp,sp,-12
   14d7c:	dfc00215 	stw	ra,8(sp)
   14d80:	df000115 	stw	fp,4(sp)
   14d84:	df000104 	addi	fp,sp,4
   14d88:	00800074 	movhi	r2,1
   14d8c:	10977804 	addi	r2,r2,24032
   14d90:	e0bfff15 	stw	r2,-4(fp)
   14d94:	00000606 	br	14db0 <_do_ctors+0x38>
   14d98:	e0bfff17 	ldw	r2,-4(fp)
   14d9c:	10800017 	ldw	r2,0(r2)
   14da0:	103ee83a 	callr	r2
   14da4:	e0bfff17 	ldw	r2,-4(fp)
   14da8:	10bfff04 	addi	r2,r2,-4
   14dac:	e0bfff15 	stw	r2,-4(fp)
   14db0:	e0ffff17 	ldw	r3,-4(fp)
   14db4:	00800074 	movhi	r2,1
   14db8:	10977904 	addi	r2,r2,24036
   14dbc:	18bff62e 	bgeu	r3,r2,14d98 <__alt_data_end+0xffff4d98>
   14dc0:	0001883a 	nop
   14dc4:	e037883a 	mov	sp,fp
   14dc8:	dfc00117 	ldw	ra,4(sp)
   14dcc:	df000017 	ldw	fp,0(sp)
   14dd0:	dec00204 	addi	sp,sp,8
   14dd4:	f800283a 	ret

00014dd8 <_do_dtors>:
   14dd8:	defffd04 	addi	sp,sp,-12
   14ddc:	dfc00215 	stw	ra,8(sp)
   14de0:	df000115 	stw	fp,4(sp)
   14de4:	df000104 	addi	fp,sp,4
   14de8:	00800074 	movhi	r2,1
   14dec:	10977804 	addi	r2,r2,24032
   14df0:	e0bfff15 	stw	r2,-4(fp)
   14df4:	00000606 	br	14e10 <_do_dtors+0x38>
   14df8:	e0bfff17 	ldw	r2,-4(fp)
   14dfc:	10800017 	ldw	r2,0(r2)
   14e00:	103ee83a 	callr	r2
   14e04:	e0bfff17 	ldw	r2,-4(fp)
   14e08:	10bfff04 	addi	r2,r2,-4
   14e0c:	e0bfff15 	stw	r2,-4(fp)
   14e10:	e0ffff17 	ldw	r3,-4(fp)
   14e14:	00800074 	movhi	r2,1
   14e18:	10977904 	addi	r2,r2,24036
   14e1c:	18bff62e 	bgeu	r3,r2,14df8 <__alt_data_end+0xffff4df8>
   14e20:	0001883a 	nop
   14e24:	e037883a 	mov	sp,fp
   14e28:	dfc00117 	ldw	ra,4(sp)
   14e2c:	df000017 	ldw	fp,0(sp)
   14e30:	dec00204 	addi	sp,sp,8
   14e34:	f800283a 	ret

00014e38 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   14e38:	deffff04 	addi	sp,sp,-4
   14e3c:	df000015 	stw	fp,0(sp)
   14e40:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   14e44:	0001883a 	nop
   14e48:	e037883a 	mov	sp,fp
   14e4c:	df000017 	ldw	fp,0(sp)
   14e50:	dec00104 	addi	sp,sp,4
   14e54:	f800283a 	ret

00014e58 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   14e58:	defff904 	addi	sp,sp,-28
   14e5c:	dfc00615 	stw	ra,24(sp)
   14e60:	df000515 	stw	fp,20(sp)
   14e64:	df000504 	addi	fp,sp,20
   14e68:	e13ffc15 	stw	r4,-16(fp)
   14e6c:	e17ffd15 	stw	r5,-12(fp)
   14e70:	e1bffe15 	stw	r6,-8(fp)
   14e74:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   14e78:	e0800217 	ldw	r2,8(fp)
   14e7c:	d8800015 	stw	r2,0(sp)
   14e80:	e1ffff17 	ldw	r7,-4(fp)
   14e84:	e1bffe17 	ldw	r6,-8(fp)
   14e88:	e17ffd17 	ldw	r5,-12(fp)
   14e8c:	e13ffc17 	ldw	r4,-16(fp)
   14e90:	00150080 	call	15008 <alt_iic_isr_register>
}  
   14e94:	e037883a 	mov	sp,fp
   14e98:	dfc00117 	ldw	ra,4(sp)
   14e9c:	df000017 	ldw	fp,0(sp)
   14ea0:	dec00204 	addi	sp,sp,8
   14ea4:	f800283a 	ret

00014ea8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   14ea8:	defff904 	addi	sp,sp,-28
   14eac:	df000615 	stw	fp,24(sp)
   14eb0:	df000604 	addi	fp,sp,24
   14eb4:	e13ffe15 	stw	r4,-8(fp)
   14eb8:	e17fff15 	stw	r5,-4(fp)
   14ebc:	e0bfff17 	ldw	r2,-4(fp)
   14ec0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14ec4:	0005303a 	rdctl	r2,status
   14ec8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14ecc:	e0fffb17 	ldw	r3,-20(fp)
   14ed0:	00bfff84 	movi	r2,-2
   14ed4:	1884703a 	and	r2,r3,r2
   14ed8:	1001703a 	wrctl	status,r2
  
  return context;
   14edc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   14ee0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   14ee4:	00c00044 	movi	r3,1
   14ee8:	e0bffa17 	ldw	r2,-24(fp)
   14eec:	1884983a 	sll	r2,r3,r2
   14ef0:	1007883a 	mov	r3,r2
   14ef4:	d0a6c217 	ldw	r2,-25848(gp)
   14ef8:	1884b03a 	or	r2,r3,r2
   14efc:	d0a6c215 	stw	r2,-25848(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   14f00:	d0a6c217 	ldw	r2,-25848(gp)
   14f04:	100170fa 	wrctl	ienable,r2
   14f08:	e0bffc17 	ldw	r2,-16(fp)
   14f0c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14f10:	e0bffd17 	ldw	r2,-12(fp)
   14f14:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   14f18:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   14f1c:	0001883a 	nop
}
   14f20:	e037883a 	mov	sp,fp
   14f24:	df000017 	ldw	fp,0(sp)
   14f28:	dec00104 	addi	sp,sp,4
   14f2c:	f800283a 	ret

00014f30 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   14f30:	defff904 	addi	sp,sp,-28
   14f34:	df000615 	stw	fp,24(sp)
   14f38:	df000604 	addi	fp,sp,24
   14f3c:	e13ffe15 	stw	r4,-8(fp)
   14f40:	e17fff15 	stw	r5,-4(fp)
   14f44:	e0bfff17 	ldw	r2,-4(fp)
   14f48:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14f4c:	0005303a 	rdctl	r2,status
   14f50:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14f54:	e0fffb17 	ldw	r3,-20(fp)
   14f58:	00bfff84 	movi	r2,-2
   14f5c:	1884703a 	and	r2,r3,r2
   14f60:	1001703a 	wrctl	status,r2
  
  return context;
   14f64:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   14f68:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   14f6c:	00c00044 	movi	r3,1
   14f70:	e0bffa17 	ldw	r2,-24(fp)
   14f74:	1884983a 	sll	r2,r3,r2
   14f78:	0084303a 	nor	r2,zero,r2
   14f7c:	1007883a 	mov	r3,r2
   14f80:	d0a6c217 	ldw	r2,-25848(gp)
   14f84:	1884703a 	and	r2,r3,r2
   14f88:	d0a6c215 	stw	r2,-25848(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   14f8c:	d0a6c217 	ldw	r2,-25848(gp)
   14f90:	100170fa 	wrctl	ienable,r2
   14f94:	e0bffc17 	ldw	r2,-16(fp)
   14f98:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14f9c:	e0bffd17 	ldw	r2,-12(fp)
   14fa0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   14fa4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   14fa8:	0001883a 	nop
}
   14fac:	e037883a 	mov	sp,fp
   14fb0:	df000017 	ldw	fp,0(sp)
   14fb4:	dec00104 	addi	sp,sp,4
   14fb8:	f800283a 	ret

00014fbc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   14fbc:	defffc04 	addi	sp,sp,-16
   14fc0:	df000315 	stw	fp,12(sp)
   14fc4:	df000304 	addi	fp,sp,12
   14fc8:	e13ffe15 	stw	r4,-8(fp)
   14fcc:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   14fd0:	000530fa 	rdctl	r2,ienable
   14fd4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   14fd8:	00c00044 	movi	r3,1
   14fdc:	e0bfff17 	ldw	r2,-4(fp)
   14fe0:	1884983a 	sll	r2,r3,r2
   14fe4:	1007883a 	mov	r3,r2
   14fe8:	e0bffd17 	ldw	r2,-12(fp)
   14fec:	1884703a 	and	r2,r3,r2
   14ff0:	1004c03a 	cmpne	r2,r2,zero
   14ff4:	10803fcc 	andi	r2,r2,255
}
   14ff8:	e037883a 	mov	sp,fp
   14ffc:	df000017 	ldw	fp,0(sp)
   15000:	dec00104 	addi	sp,sp,4
   15004:	f800283a 	ret

00015008 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   15008:	defff504 	addi	sp,sp,-44
   1500c:	dfc00a15 	stw	ra,40(sp)
   15010:	df000915 	stw	fp,36(sp)
   15014:	df000904 	addi	fp,sp,36
   15018:	e13ffc15 	stw	r4,-16(fp)
   1501c:	e17ffd15 	stw	r5,-12(fp)
   15020:	e1bffe15 	stw	r6,-8(fp)
   15024:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   15028:	00bffa84 	movi	r2,-22
   1502c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   15030:	e0bffd17 	ldw	r2,-12(fp)
   15034:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   15038:	e0bff817 	ldw	r2,-32(fp)
   1503c:	10800808 	cmpgei	r2,r2,32
   15040:	1000271e 	bne	r2,zero,150e0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15044:	0005303a 	rdctl	r2,status
   15048:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1504c:	e0fffb17 	ldw	r3,-20(fp)
   15050:	00bfff84 	movi	r2,-2
   15054:	1884703a 	and	r2,r3,r2
   15058:	1001703a 	wrctl	status,r2
  
  return context;
   1505c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   15060:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   15064:	008000b4 	movhi	r2,2
   15068:	10a52e04 	addi	r2,r2,-27464
   1506c:	e0fff817 	ldw	r3,-32(fp)
   15070:	180690fa 	slli	r3,r3,3
   15074:	10c5883a 	add	r2,r2,r3
   15078:	e0fffe17 	ldw	r3,-8(fp)
   1507c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   15080:	008000b4 	movhi	r2,2
   15084:	10a52e04 	addi	r2,r2,-27464
   15088:	e0fff817 	ldw	r3,-32(fp)
   1508c:	180690fa 	slli	r3,r3,3
   15090:	10c5883a 	add	r2,r2,r3
   15094:	10800104 	addi	r2,r2,4
   15098:	e0ffff17 	ldw	r3,-4(fp)
   1509c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   150a0:	e0bffe17 	ldw	r2,-8(fp)
   150a4:	10000526 	beq	r2,zero,150bc <alt_iic_isr_register+0xb4>
   150a8:	e0bff817 	ldw	r2,-32(fp)
   150ac:	100b883a 	mov	r5,r2
   150b0:	e13ffc17 	ldw	r4,-16(fp)
   150b4:	0014ea80 	call	14ea8 <alt_ic_irq_enable>
   150b8:	00000406 	br	150cc <alt_iic_isr_register+0xc4>
   150bc:	e0bff817 	ldw	r2,-32(fp)
   150c0:	100b883a 	mov	r5,r2
   150c4:	e13ffc17 	ldw	r4,-16(fp)
   150c8:	0014f300 	call	14f30 <alt_ic_irq_disable>
   150cc:	e0bff715 	stw	r2,-36(fp)
   150d0:	e0bffa17 	ldw	r2,-24(fp)
   150d4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   150d8:	e0bff917 	ldw	r2,-28(fp)
   150dc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   150e0:	e0bff717 	ldw	r2,-36(fp)
}
   150e4:	e037883a 	mov	sp,fp
   150e8:	dfc00117 	ldw	ra,4(sp)
   150ec:	df000017 	ldw	fp,0(sp)
   150f0:	dec00204 	addi	sp,sp,8
   150f4:	f800283a 	ret

000150f8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   150f8:	defff804 	addi	sp,sp,-32
   150fc:	dfc00715 	stw	ra,28(sp)
   15100:	df000615 	stw	fp,24(sp)
   15104:	dc000515 	stw	r16,20(sp)
   15108:	df000604 	addi	fp,sp,24
   1510c:	e13ffb15 	stw	r4,-20(fp)
   15110:	e17ffc15 	stw	r5,-16(fp)
   15114:	e1bffd15 	stw	r6,-12(fp)
   15118:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   1511c:	e1bffe17 	ldw	r6,-8(fp)
   15120:	e17ffd17 	ldw	r5,-12(fp)
   15124:	e13ffc17 	ldw	r4,-16(fp)
   15128:	00153800 	call	15380 <open>
   1512c:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   15130:	e0bffa17 	ldw	r2,-24(fp)
   15134:	10002216 	blt	r2,zero,151c0 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   15138:	04000074 	movhi	r16,1
   1513c:	8419b204 	addi	r16,r16,26312
   15140:	e0bffa17 	ldw	r2,-24(fp)
   15144:	01400304 	movi	r5,12
   15148:	1009883a 	mov	r4,r2
   1514c:	00136380 	call	13638 <__mulsi3>
   15150:	8085883a 	add	r2,r16,r2
   15154:	10c00017 	ldw	r3,0(r2)
   15158:	e0bffb17 	ldw	r2,-20(fp)
   1515c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   15160:	04000074 	movhi	r16,1
   15164:	8419b204 	addi	r16,r16,26312
   15168:	e0bffa17 	ldw	r2,-24(fp)
   1516c:	01400304 	movi	r5,12
   15170:	1009883a 	mov	r4,r2
   15174:	00136380 	call	13638 <__mulsi3>
   15178:	8085883a 	add	r2,r16,r2
   1517c:	10800104 	addi	r2,r2,4
   15180:	10c00017 	ldw	r3,0(r2)
   15184:	e0bffb17 	ldw	r2,-20(fp)
   15188:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   1518c:	04000074 	movhi	r16,1
   15190:	8419b204 	addi	r16,r16,26312
   15194:	e0bffa17 	ldw	r2,-24(fp)
   15198:	01400304 	movi	r5,12
   1519c:	1009883a 	mov	r4,r2
   151a0:	00136380 	call	13638 <__mulsi3>
   151a4:	8085883a 	add	r2,r16,r2
   151a8:	10800204 	addi	r2,r2,8
   151ac:	10c00017 	ldw	r3,0(r2)
   151b0:	e0bffb17 	ldw	r2,-20(fp)
   151b4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   151b8:	e13ffa17 	ldw	r4,-24(fp)
   151bc:	0013dc00 	call	13dc0 <alt_release_fd>
  }
} 
   151c0:	0001883a 	nop
   151c4:	e6ffff04 	addi	sp,fp,-4
   151c8:	dfc00217 	ldw	ra,8(sp)
   151cc:	df000117 	ldw	fp,4(sp)
   151d0:	dc000017 	ldw	r16,0(sp)
   151d4:	dec00304 	addi	sp,sp,12
   151d8:	f800283a 	ret

000151dc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   151dc:	defffb04 	addi	sp,sp,-20
   151e0:	dfc00415 	stw	ra,16(sp)
   151e4:	df000315 	stw	fp,12(sp)
   151e8:	df000304 	addi	fp,sp,12
   151ec:	e13ffd15 	stw	r4,-12(fp)
   151f0:	e17ffe15 	stw	r5,-8(fp)
   151f4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   151f8:	01c07fc4 	movi	r7,511
   151fc:	01800044 	movi	r6,1
   15200:	e17ffd17 	ldw	r5,-12(fp)
   15204:	01000074 	movhi	r4,1
   15208:	2119b504 	addi	r4,r4,26324
   1520c:	00150f80 	call	150f8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   15210:	01c07fc4 	movi	r7,511
   15214:	000d883a 	mov	r6,zero
   15218:	e17ffe17 	ldw	r5,-8(fp)
   1521c:	01000074 	movhi	r4,1
   15220:	2119b204 	addi	r4,r4,26312
   15224:	00150f80 	call	150f8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   15228:	01c07fc4 	movi	r7,511
   1522c:	01800044 	movi	r6,1
   15230:	e17fff17 	ldw	r5,-4(fp)
   15234:	01000074 	movhi	r4,1
   15238:	2119b804 	addi	r4,r4,26336
   1523c:	00150f80 	call	150f8 <alt_open_fd>
}  
   15240:	0001883a 	nop
   15244:	e037883a 	mov	sp,fp
   15248:	dfc00117 	ldw	ra,4(sp)
   1524c:	df000017 	ldw	fp,0(sp)
   15250:	dec00204 	addi	sp,sp,8
   15254:	f800283a 	ret

00015258 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   15258:	defffe04 	addi	sp,sp,-8
   1525c:	dfc00115 	stw	ra,4(sp)
   15260:	df000015 	stw	fp,0(sp)
   15264:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   15268:	d0a00a17 	ldw	r2,-32728(gp)
   1526c:	10000326 	beq	r2,zero,1527c <alt_get_errno+0x24>
   15270:	d0a00a17 	ldw	r2,-32728(gp)
   15274:	103ee83a 	callr	r2
   15278:	00000106 	br	15280 <alt_get_errno+0x28>
   1527c:	d0a6be04 	addi	r2,gp,-25864
}
   15280:	e037883a 	mov	sp,fp
   15284:	dfc00117 	ldw	ra,4(sp)
   15288:	df000017 	ldw	fp,0(sp)
   1528c:	dec00204 	addi	sp,sp,8
   15290:	f800283a 	ret

00015294 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   15294:	defffb04 	addi	sp,sp,-20
   15298:	dfc00415 	stw	ra,16(sp)
   1529c:	df000315 	stw	fp,12(sp)
   152a0:	dc000215 	stw	r16,8(sp)
   152a4:	df000304 	addi	fp,sp,12
   152a8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   152ac:	e0bffe17 	ldw	r2,-8(fp)
   152b0:	10800217 	ldw	r2,8(r2)
   152b4:	10d00034 	orhi	r3,r2,16384
   152b8:	e0bffe17 	ldw	r2,-8(fp)
   152bc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   152c0:	e03ffd15 	stw	zero,-12(fp)
   152c4:	00002306 	br	15354 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   152c8:	04000074 	movhi	r16,1
   152cc:	8419b204 	addi	r16,r16,26312
   152d0:	e0bffd17 	ldw	r2,-12(fp)
   152d4:	01400304 	movi	r5,12
   152d8:	1009883a 	mov	r4,r2
   152dc:	00136380 	call	13638 <__mulsi3>
   152e0:	8085883a 	add	r2,r16,r2
   152e4:	10c00017 	ldw	r3,0(r2)
   152e8:	e0bffe17 	ldw	r2,-8(fp)
   152ec:	10800017 	ldw	r2,0(r2)
   152f0:	1880151e 	bne	r3,r2,15348 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   152f4:	04000074 	movhi	r16,1
   152f8:	8419b204 	addi	r16,r16,26312
   152fc:	e0bffd17 	ldw	r2,-12(fp)
   15300:	01400304 	movi	r5,12
   15304:	1009883a 	mov	r4,r2
   15308:	00136380 	call	13638 <__mulsi3>
   1530c:	8085883a 	add	r2,r16,r2
   15310:	10800204 	addi	r2,r2,8
   15314:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   15318:	10000b0e 	bge	r2,zero,15348 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   1531c:	01400304 	movi	r5,12
   15320:	e13ffd17 	ldw	r4,-12(fp)
   15324:	00136380 	call	13638 <__mulsi3>
   15328:	1007883a 	mov	r3,r2
   1532c:	00800074 	movhi	r2,1
   15330:	1099b204 	addi	r2,r2,26312
   15334:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   15338:	e0bffe17 	ldw	r2,-8(fp)
   1533c:	18800226 	beq	r3,r2,15348 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   15340:	00bffcc4 	movi	r2,-13
   15344:	00000806 	br	15368 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   15348:	e0bffd17 	ldw	r2,-12(fp)
   1534c:	10800044 	addi	r2,r2,1
   15350:	e0bffd15 	stw	r2,-12(fp)
   15354:	d0a00917 	ldw	r2,-32732(gp)
   15358:	1007883a 	mov	r3,r2
   1535c:	e0bffd17 	ldw	r2,-12(fp)
   15360:	18bfd92e 	bgeu	r3,r2,152c8 <__alt_data_end+0xffff52c8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   15364:	0005883a 	mov	r2,zero
}
   15368:	e6ffff04 	addi	sp,fp,-4
   1536c:	dfc00217 	ldw	ra,8(sp)
   15370:	df000117 	ldw	fp,4(sp)
   15374:	dc000017 	ldw	r16,0(sp)
   15378:	dec00304 	addi	sp,sp,12
   1537c:	f800283a 	ret

00015380 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   15380:	defff604 	addi	sp,sp,-40
   15384:	dfc00915 	stw	ra,36(sp)
   15388:	df000815 	stw	fp,32(sp)
   1538c:	df000804 	addi	fp,sp,32
   15390:	e13ffd15 	stw	r4,-12(fp)
   15394:	e17ffe15 	stw	r5,-8(fp)
   15398:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   1539c:	00bfffc4 	movi	r2,-1
   153a0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   153a4:	00bffb44 	movi	r2,-19
   153a8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   153ac:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   153b0:	d1600704 	addi	r5,gp,-32740
   153b4:	e13ffd17 	ldw	r4,-12(fp)
   153b8:	00156a40 	call	156a4 <alt_find_dev>
   153bc:	e0bff815 	stw	r2,-32(fp)
   153c0:	e0bff817 	ldw	r2,-32(fp)
   153c4:	1000051e 	bne	r2,zero,153dc <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   153c8:	e13ffd17 	ldw	r4,-12(fp)
   153cc:	00157340 	call	15734 <alt_find_file>
   153d0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   153d4:	00800044 	movi	r2,1
   153d8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   153dc:	e0bff817 	ldw	r2,-32(fp)
   153e0:	10002b26 	beq	r2,zero,15490 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   153e4:	e13ff817 	ldw	r4,-32(fp)
   153e8:	001583c0 	call	1583c <alt_get_fd>
   153ec:	e0bff915 	stw	r2,-28(fp)
   153f0:	e0bff917 	ldw	r2,-28(fp)
   153f4:	1000030e 	bge	r2,zero,15404 <open+0x84>
    {
      status = index;
   153f8:	e0bff917 	ldw	r2,-28(fp)
   153fc:	e0bffa15 	stw	r2,-24(fp)
   15400:	00002506 	br	15498 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   15404:	01400304 	movi	r5,12
   15408:	e13ff917 	ldw	r4,-28(fp)
   1540c:	00136380 	call	13638 <__mulsi3>
   15410:	1007883a 	mov	r3,r2
   15414:	00800074 	movhi	r2,1
   15418:	1099b204 	addi	r2,r2,26312
   1541c:	1885883a 	add	r2,r3,r2
   15420:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   15424:	e0fffe17 	ldw	r3,-8(fp)
   15428:	00900034 	movhi	r2,16384
   1542c:	10bfffc4 	addi	r2,r2,-1
   15430:	1886703a 	and	r3,r3,r2
   15434:	e0bffc17 	ldw	r2,-16(fp)
   15438:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   1543c:	e0bffb17 	ldw	r2,-20(fp)
   15440:	1000051e 	bne	r2,zero,15458 <open+0xd8>
   15444:	e13ffc17 	ldw	r4,-16(fp)
   15448:	00152940 	call	15294 <alt_file_locked>
   1544c:	e0bffa15 	stw	r2,-24(fp)
   15450:	e0bffa17 	ldw	r2,-24(fp)
   15454:	10001016 	blt	r2,zero,15498 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   15458:	e0bff817 	ldw	r2,-32(fp)
   1545c:	10800317 	ldw	r2,12(r2)
   15460:	10000826 	beq	r2,zero,15484 <open+0x104>
   15464:	e0bff817 	ldw	r2,-32(fp)
   15468:	10800317 	ldw	r2,12(r2)
   1546c:	e1ffff17 	ldw	r7,-4(fp)
   15470:	e1bffe17 	ldw	r6,-8(fp)
   15474:	e17ffd17 	ldw	r5,-12(fp)
   15478:	e13ffc17 	ldw	r4,-16(fp)
   1547c:	103ee83a 	callr	r2
   15480:	00000106 	br	15488 <open+0x108>
   15484:	0005883a 	mov	r2,zero
   15488:	e0bffa15 	stw	r2,-24(fp)
   1548c:	00000206 	br	15498 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   15490:	00bffb44 	movi	r2,-19
   15494:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   15498:	e0bffa17 	ldw	r2,-24(fp)
   1549c:	1000090e 	bge	r2,zero,154c4 <open+0x144>
  {
    alt_release_fd (index);  
   154a0:	e13ff917 	ldw	r4,-28(fp)
   154a4:	0013dc00 	call	13dc0 <alt_release_fd>
    ALT_ERRNO = -status;
   154a8:	00152580 	call	15258 <alt_get_errno>
   154ac:	1007883a 	mov	r3,r2
   154b0:	e0bffa17 	ldw	r2,-24(fp)
   154b4:	0085c83a 	sub	r2,zero,r2
   154b8:	18800015 	stw	r2,0(r3)
    return -1;
   154bc:	00bfffc4 	movi	r2,-1
   154c0:	00000106 	br	154c8 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   154c4:	e0bff917 	ldw	r2,-28(fp)
}
   154c8:	e037883a 	mov	sp,fp
   154cc:	dfc00117 	ldw	ra,4(sp)
   154d0:	df000017 	ldw	fp,0(sp)
   154d4:	dec00204 	addi	sp,sp,8
   154d8:	f800283a 	ret

000154dc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   154dc:	defffa04 	addi	sp,sp,-24
   154e0:	df000515 	stw	fp,20(sp)
   154e4:	df000504 	addi	fp,sp,20
   154e8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   154ec:	0005303a 	rdctl	r2,status
   154f0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   154f4:	e0fffc17 	ldw	r3,-16(fp)
   154f8:	00bfff84 	movi	r2,-2
   154fc:	1884703a 	and	r2,r3,r2
   15500:	1001703a 	wrctl	status,r2
  
  return context;
   15504:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   15508:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   1550c:	e0bfff17 	ldw	r2,-4(fp)
   15510:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   15514:	e0bffd17 	ldw	r2,-12(fp)
   15518:	10800017 	ldw	r2,0(r2)
   1551c:	e0fffd17 	ldw	r3,-12(fp)
   15520:	18c00117 	ldw	r3,4(r3)
   15524:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   15528:	e0bffd17 	ldw	r2,-12(fp)
   1552c:	10800117 	ldw	r2,4(r2)
   15530:	e0fffd17 	ldw	r3,-12(fp)
   15534:	18c00017 	ldw	r3,0(r3)
   15538:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   1553c:	e0bffd17 	ldw	r2,-12(fp)
   15540:	e0fffd17 	ldw	r3,-12(fp)
   15544:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   15548:	e0bffd17 	ldw	r2,-12(fp)
   1554c:	e0fffd17 	ldw	r3,-12(fp)
   15550:	10c00015 	stw	r3,0(r2)
   15554:	e0bffb17 	ldw	r2,-20(fp)
   15558:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1555c:	e0bffe17 	ldw	r2,-8(fp)
   15560:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   15564:	0001883a 	nop
   15568:	e037883a 	mov	sp,fp
   1556c:	df000017 	ldw	fp,0(sp)
   15570:	dec00104 	addi	sp,sp,4
   15574:	f800283a 	ret

00015578 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   15578:	defffb04 	addi	sp,sp,-20
   1557c:	dfc00415 	stw	ra,16(sp)
   15580:	df000315 	stw	fp,12(sp)
   15584:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   15588:	d0a00d17 	ldw	r2,-32716(gp)
   1558c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   15590:	d0a6c417 	ldw	r2,-25840(gp)
   15594:	10800044 	addi	r2,r2,1
   15598:	d0a6c415 	stw	r2,-25840(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1559c:	00002e06 	br	15658 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   155a0:	e0bffd17 	ldw	r2,-12(fp)
   155a4:	10800017 	ldw	r2,0(r2)
   155a8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   155ac:	e0bffd17 	ldw	r2,-12(fp)
   155b0:	10800403 	ldbu	r2,16(r2)
   155b4:	10803fcc 	andi	r2,r2,255
   155b8:	10000426 	beq	r2,zero,155cc <alt_tick+0x54>
   155bc:	d0a6c417 	ldw	r2,-25840(gp)
   155c0:	1000021e 	bne	r2,zero,155cc <alt_tick+0x54>
    {
      alarm->rollover = 0;
   155c4:	e0bffd17 	ldw	r2,-12(fp)
   155c8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   155cc:	e0bffd17 	ldw	r2,-12(fp)
   155d0:	10800217 	ldw	r2,8(r2)
   155d4:	d0e6c417 	ldw	r3,-25840(gp)
   155d8:	18801d36 	bltu	r3,r2,15650 <alt_tick+0xd8>
   155dc:	e0bffd17 	ldw	r2,-12(fp)
   155e0:	10800403 	ldbu	r2,16(r2)
   155e4:	10803fcc 	andi	r2,r2,255
   155e8:	1000191e 	bne	r2,zero,15650 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   155ec:	e0bffd17 	ldw	r2,-12(fp)
   155f0:	10800317 	ldw	r2,12(r2)
   155f4:	e0fffd17 	ldw	r3,-12(fp)
   155f8:	18c00517 	ldw	r3,20(r3)
   155fc:	1809883a 	mov	r4,r3
   15600:	103ee83a 	callr	r2
   15604:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   15608:	e0bfff17 	ldw	r2,-4(fp)
   1560c:	1000031e 	bne	r2,zero,1561c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   15610:	e13ffd17 	ldw	r4,-12(fp)
   15614:	00154dc0 	call	154dc <alt_alarm_stop>
   15618:	00000d06 	br	15650 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   1561c:	e0bffd17 	ldw	r2,-12(fp)
   15620:	10c00217 	ldw	r3,8(r2)
   15624:	e0bfff17 	ldw	r2,-4(fp)
   15628:	1887883a 	add	r3,r3,r2
   1562c:	e0bffd17 	ldw	r2,-12(fp)
   15630:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   15634:	e0bffd17 	ldw	r2,-12(fp)
   15638:	10c00217 	ldw	r3,8(r2)
   1563c:	d0a6c417 	ldw	r2,-25840(gp)
   15640:	1880032e 	bgeu	r3,r2,15650 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   15644:	e0bffd17 	ldw	r2,-12(fp)
   15648:	00c00044 	movi	r3,1
   1564c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   15650:	e0bffe17 	ldw	r2,-8(fp)
   15654:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   15658:	e0fffd17 	ldw	r3,-12(fp)
   1565c:	d0a00d04 	addi	r2,gp,-32716
   15660:	18bfcf1e 	bne	r3,r2,155a0 <__alt_data_end+0xffff55a0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   15664:	0001883a 	nop
}
   15668:	0001883a 	nop
   1566c:	e037883a 	mov	sp,fp
   15670:	dfc00117 	ldw	ra,4(sp)
   15674:	df000017 	ldw	fp,0(sp)
   15678:	dec00204 	addi	sp,sp,8
   1567c:	f800283a 	ret

00015680 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   15680:	deffff04 	addi	sp,sp,-4
   15684:	df000015 	stw	fp,0(sp)
   15688:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   1568c:	000170fa 	wrctl	ienable,zero
}
   15690:	0001883a 	nop
   15694:	e037883a 	mov	sp,fp
   15698:	df000017 	ldw	fp,0(sp)
   1569c:	dec00104 	addi	sp,sp,4
   156a0:	f800283a 	ret

000156a4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   156a4:	defffa04 	addi	sp,sp,-24
   156a8:	dfc00515 	stw	ra,20(sp)
   156ac:	df000415 	stw	fp,16(sp)
   156b0:	df000404 	addi	fp,sp,16
   156b4:	e13ffe15 	stw	r4,-8(fp)
   156b8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   156bc:	e0bfff17 	ldw	r2,-4(fp)
   156c0:	10800017 	ldw	r2,0(r2)
   156c4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   156c8:	e13ffe17 	ldw	r4,-8(fp)
   156cc:	00109800 	call	10980 <strlen>
   156d0:	10800044 	addi	r2,r2,1
   156d4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   156d8:	00000d06 	br	15710 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   156dc:	e0bffc17 	ldw	r2,-16(fp)
   156e0:	10800217 	ldw	r2,8(r2)
   156e4:	e0fffd17 	ldw	r3,-12(fp)
   156e8:	180d883a 	mov	r6,r3
   156ec:	e17ffe17 	ldw	r5,-8(fp)
   156f0:	1009883a 	mov	r4,r2
   156f4:	0015a9c0 	call	15a9c <memcmp>
   156f8:	1000021e 	bne	r2,zero,15704 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   156fc:	e0bffc17 	ldw	r2,-16(fp)
   15700:	00000706 	br	15720 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   15704:	e0bffc17 	ldw	r2,-16(fp)
   15708:	10800017 	ldw	r2,0(r2)
   1570c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   15710:	e0fffc17 	ldw	r3,-16(fp)
   15714:	e0bfff17 	ldw	r2,-4(fp)
   15718:	18bff01e 	bne	r3,r2,156dc <__alt_data_end+0xffff56dc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   1571c:	0005883a 	mov	r2,zero
}
   15720:	e037883a 	mov	sp,fp
   15724:	dfc00117 	ldw	ra,4(sp)
   15728:	df000017 	ldw	fp,0(sp)
   1572c:	dec00204 	addi	sp,sp,8
   15730:	f800283a 	ret

00015734 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   15734:	defffb04 	addi	sp,sp,-20
   15738:	dfc00415 	stw	ra,16(sp)
   1573c:	df000315 	stw	fp,12(sp)
   15740:	df000304 	addi	fp,sp,12
   15744:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   15748:	d0a00517 	ldw	r2,-32748(gp)
   1574c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   15750:	00003106 	br	15818 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   15754:	e0bffd17 	ldw	r2,-12(fp)
   15758:	10800217 	ldw	r2,8(r2)
   1575c:	1009883a 	mov	r4,r2
   15760:	00109800 	call	10980 <strlen>
   15764:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   15768:	e0bffd17 	ldw	r2,-12(fp)
   1576c:	10c00217 	ldw	r3,8(r2)
   15770:	e0bffe17 	ldw	r2,-8(fp)
   15774:	10bfffc4 	addi	r2,r2,-1
   15778:	1885883a 	add	r2,r3,r2
   1577c:	10800003 	ldbu	r2,0(r2)
   15780:	10803fcc 	andi	r2,r2,255
   15784:	1080201c 	xori	r2,r2,128
   15788:	10bfe004 	addi	r2,r2,-128
   1578c:	10800bd8 	cmpnei	r2,r2,47
   15790:	1000031e 	bne	r2,zero,157a0 <alt_find_file+0x6c>
    {
      len -= 1;
   15794:	e0bffe17 	ldw	r2,-8(fp)
   15798:	10bfffc4 	addi	r2,r2,-1
   1579c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   157a0:	e0bffe17 	ldw	r2,-8(fp)
   157a4:	e0ffff17 	ldw	r3,-4(fp)
   157a8:	1885883a 	add	r2,r3,r2
   157ac:	10800003 	ldbu	r2,0(r2)
   157b0:	10803fcc 	andi	r2,r2,255
   157b4:	1080201c 	xori	r2,r2,128
   157b8:	10bfe004 	addi	r2,r2,-128
   157bc:	10800be0 	cmpeqi	r2,r2,47
   157c0:	1000081e 	bne	r2,zero,157e4 <alt_find_file+0xb0>
   157c4:	e0bffe17 	ldw	r2,-8(fp)
   157c8:	e0ffff17 	ldw	r3,-4(fp)
   157cc:	1885883a 	add	r2,r3,r2
   157d0:	10800003 	ldbu	r2,0(r2)
   157d4:	10803fcc 	andi	r2,r2,255
   157d8:	1080201c 	xori	r2,r2,128
   157dc:	10bfe004 	addi	r2,r2,-128
   157e0:	10000a1e 	bne	r2,zero,1580c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   157e4:	e0bffd17 	ldw	r2,-12(fp)
   157e8:	10800217 	ldw	r2,8(r2)
   157ec:	e0fffe17 	ldw	r3,-8(fp)
   157f0:	180d883a 	mov	r6,r3
   157f4:	e17fff17 	ldw	r5,-4(fp)
   157f8:	1009883a 	mov	r4,r2
   157fc:	0015a9c0 	call	15a9c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   15800:	1000021e 	bne	r2,zero,1580c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   15804:	e0bffd17 	ldw	r2,-12(fp)
   15808:	00000706 	br	15828 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   1580c:	e0bffd17 	ldw	r2,-12(fp)
   15810:	10800017 	ldw	r2,0(r2)
   15814:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   15818:	e0fffd17 	ldw	r3,-12(fp)
   1581c:	d0a00504 	addi	r2,gp,-32748
   15820:	18bfcc1e 	bne	r3,r2,15754 <__alt_data_end+0xffff5754>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   15824:	0005883a 	mov	r2,zero
}
   15828:	e037883a 	mov	sp,fp
   1582c:	dfc00117 	ldw	ra,4(sp)
   15830:	df000017 	ldw	fp,0(sp)
   15834:	dec00204 	addi	sp,sp,8
   15838:	f800283a 	ret

0001583c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   1583c:	defffa04 	addi	sp,sp,-24
   15840:	dfc00515 	stw	ra,20(sp)
   15844:	df000415 	stw	fp,16(sp)
   15848:	dc000315 	stw	r16,12(sp)
   1584c:	df000404 	addi	fp,sp,16
   15850:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   15854:	00bffa04 	movi	r2,-24
   15858:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1585c:	e03ffc15 	stw	zero,-16(fp)
   15860:	00001d06 	br	158d8 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   15864:	04000074 	movhi	r16,1
   15868:	8419b204 	addi	r16,r16,26312
   1586c:	e0bffc17 	ldw	r2,-16(fp)
   15870:	01400304 	movi	r5,12
   15874:	1009883a 	mov	r4,r2
   15878:	00136380 	call	13638 <__mulsi3>
   1587c:	8085883a 	add	r2,r16,r2
   15880:	10800017 	ldw	r2,0(r2)
   15884:	1000111e 	bne	r2,zero,158cc <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   15888:	04000074 	movhi	r16,1
   1588c:	8419b204 	addi	r16,r16,26312
   15890:	e0bffc17 	ldw	r2,-16(fp)
   15894:	01400304 	movi	r5,12
   15898:	1009883a 	mov	r4,r2
   1589c:	00136380 	call	13638 <__mulsi3>
   158a0:	8085883a 	add	r2,r16,r2
   158a4:	e0fffe17 	ldw	r3,-8(fp)
   158a8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   158ac:	d0e00917 	ldw	r3,-32732(gp)
   158b0:	e0bffc17 	ldw	r2,-16(fp)
   158b4:	1880020e 	bge	r3,r2,158c0 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   158b8:	e0bffc17 	ldw	r2,-16(fp)
   158bc:	d0a00915 	stw	r2,-32732(gp)
      }
      rc = i;
   158c0:	e0bffc17 	ldw	r2,-16(fp)
   158c4:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   158c8:	00000606 	br	158e4 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   158cc:	e0bffc17 	ldw	r2,-16(fp)
   158d0:	10800044 	addi	r2,r2,1
   158d4:	e0bffc15 	stw	r2,-16(fp)
   158d8:	e0bffc17 	ldw	r2,-16(fp)
   158dc:	10800810 	cmplti	r2,r2,32
   158e0:	103fe01e 	bne	r2,zero,15864 <__alt_data_end+0xffff5864>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   158e4:	e0bffd17 	ldw	r2,-12(fp)
}
   158e8:	e6ffff04 	addi	sp,fp,-4
   158ec:	dfc00217 	ldw	ra,8(sp)
   158f0:	df000117 	ldw	fp,4(sp)
   158f4:	dc000017 	ldw	r16,0(sp)
   158f8:	dec00304 	addi	sp,sp,12
   158fc:	f800283a 	ret

00015900 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   15900:	defffe04 	addi	sp,sp,-8
   15904:	df000115 	stw	fp,4(sp)
   15908:	df000104 	addi	fp,sp,4
   1590c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   15910:	e0bfff17 	ldw	r2,-4(fp)
   15914:	10bffe84 	addi	r2,r2,-6
   15918:	10c00428 	cmpgeui	r3,r2,16
   1591c:	18001a1e 	bne	r3,zero,15988 <alt_exception_cause_generated_bad_addr+0x88>
   15920:	100690ba 	slli	r3,r2,2
   15924:	00800074 	movhi	r2,1
   15928:	10964e04 	addi	r2,r2,22840
   1592c:	1885883a 	add	r2,r3,r2
   15930:	10800017 	ldw	r2,0(r2)
   15934:	1000683a 	jmp	r2
   15938:	00015978 	rdprs	zero,zero,1381
   1593c:	00015978 	rdprs	zero,zero,1381
   15940:	00015988 	cmpgei	zero,zero,1382
   15944:	00015988 	cmpgei	zero,zero,1382
   15948:	00015988 	cmpgei	zero,zero,1382
   1594c:	00015978 	rdprs	zero,zero,1381
   15950:	00015980 	call	1598 <__alt_mem_onchip_ram-0xea68>
   15954:	00015988 	cmpgei	zero,zero,1382
   15958:	00015978 	rdprs	zero,zero,1381
   1595c:	00015978 	rdprs	zero,zero,1381
   15960:	00015988 	cmpgei	zero,zero,1382
   15964:	00015978 	rdprs	zero,zero,1381
   15968:	00015980 	call	1598 <__alt_mem_onchip_ram-0xea68>
   1596c:	00015988 	cmpgei	zero,zero,1382
   15970:	00015988 	cmpgei	zero,zero,1382
   15974:	00015978 	rdprs	zero,zero,1381
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   15978:	00800044 	movi	r2,1
   1597c:	00000306 	br	1598c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   15980:	0005883a 	mov	r2,zero
   15984:	00000106 	br	1598c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   15988:	0005883a 	mov	r2,zero
  }
}
   1598c:	e037883a 	mov	sp,fp
   15990:	df000017 	ldw	fp,0(sp)
   15994:	dec00104 	addi	sp,sp,4
   15998:	f800283a 	ret

0001599c <atexit>:
   1599c:	200b883a 	mov	r5,r4
   159a0:	000f883a 	mov	r7,zero
   159a4:	000d883a 	mov	r6,zero
   159a8:	0009883a 	mov	r4,zero
   159ac:	0015b181 	jmpi	15b18 <__register_exitproc>

000159b0 <exit>:
   159b0:	defffe04 	addi	sp,sp,-8
   159b4:	000b883a 	mov	r5,zero
   159b8:	dc000015 	stw	r16,0(sp)
   159bc:	dfc00115 	stw	ra,4(sp)
   159c0:	2021883a 	mov	r16,r4
   159c4:	0015c300 	call	15c30 <__call_exitprocs>
   159c8:	00800074 	movhi	r2,1
   159cc:	109e2b04 	addi	r2,r2,30892
   159d0:	11000017 	ldw	r4,0(r2)
   159d4:	20800f17 	ldw	r2,60(r4)
   159d8:	10000126 	beq	r2,zero,159e0 <exit+0x30>
   159dc:	103ee83a 	callr	r2
   159e0:	8009883a 	mov	r4,r16
   159e4:	0015db00 	call	15db0 <_exit>

000159e8 <_fputs_r>:
   159e8:	defff804 	addi	sp,sp,-32
   159ec:	dc400615 	stw	r17,24(sp)
   159f0:	2023883a 	mov	r17,r4
   159f4:	2809883a 	mov	r4,r5
   159f8:	dc000515 	stw	r16,20(sp)
   159fc:	dfc00715 	stw	ra,28(sp)
   15a00:	3021883a 	mov	r16,r6
   15a04:	d9400315 	stw	r5,12(sp)
   15a08:	00109800 	call	10980 <strlen>
   15a0c:	d8800215 	stw	r2,8(sp)
   15a10:	d8800415 	stw	r2,16(sp)
   15a14:	d8800304 	addi	r2,sp,12
   15a18:	d8800015 	stw	r2,0(sp)
   15a1c:	00800044 	movi	r2,1
   15a20:	d8800115 	stw	r2,4(sp)
   15a24:	88000226 	beq	r17,zero,15a30 <_fputs_r+0x48>
   15a28:	88800e17 	ldw	r2,56(r17)
   15a2c:	10001226 	beq	r2,zero,15a78 <_fputs_r+0x90>
   15a30:	8080030b 	ldhu	r2,12(r16)
   15a34:	10c8000c 	andi	r3,r2,8192
   15a38:	1800061e 	bne	r3,zero,15a54 <_fputs_r+0x6c>
   15a3c:	81001917 	ldw	r4,100(r16)
   15a40:	00f7ffc4 	movi	r3,-8193
   15a44:	10880014 	ori	r2,r2,8192
   15a48:	20c6703a 	and	r3,r4,r3
   15a4c:	8080030d 	sth	r2,12(r16)
   15a50:	80c01915 	stw	r3,100(r16)
   15a54:	d80d883a 	mov	r6,sp
   15a58:	800b883a 	mov	r5,r16
   15a5c:	8809883a 	mov	r4,r17
   15a60:	0010f240 	call	10f24 <__sfvwrite_r>
   15a64:	dfc00717 	ldw	ra,28(sp)
   15a68:	dc400617 	ldw	r17,24(sp)
   15a6c:	dc000517 	ldw	r16,20(sp)
   15a70:	dec00804 	addi	sp,sp,32
   15a74:	f800283a 	ret
   15a78:	8809883a 	mov	r4,r17
   15a7c:	0010ed40 	call	10ed4 <__sinit>
   15a80:	003feb06 	br	15a30 <__alt_data_end+0xffff5a30>

00015a84 <fputs>:
   15a84:	00800074 	movhi	r2,1
   15a88:	109e2c04 	addi	r2,r2,30896
   15a8c:	280d883a 	mov	r6,r5
   15a90:	200b883a 	mov	r5,r4
   15a94:	11000017 	ldw	r4,0(r2)
   15a98:	00159e81 	jmpi	159e8 <_fputs_r>

00015a9c <memcmp>:
   15a9c:	01c000c4 	movi	r7,3
   15aa0:	3980192e 	bgeu	r7,r6,15b08 <memcmp+0x6c>
   15aa4:	2144b03a 	or	r2,r4,r5
   15aa8:	11c4703a 	and	r2,r2,r7
   15aac:	10000f26 	beq	r2,zero,15aec <memcmp+0x50>
   15ab0:	20800003 	ldbu	r2,0(r4)
   15ab4:	28c00003 	ldbu	r3,0(r5)
   15ab8:	10c0151e 	bne	r2,r3,15b10 <memcmp+0x74>
   15abc:	31bfff84 	addi	r6,r6,-2
   15ac0:	01ffffc4 	movi	r7,-1
   15ac4:	00000406 	br	15ad8 <memcmp+0x3c>
   15ac8:	20800003 	ldbu	r2,0(r4)
   15acc:	28c00003 	ldbu	r3,0(r5)
   15ad0:	31bfffc4 	addi	r6,r6,-1
   15ad4:	10c00e1e 	bne	r2,r3,15b10 <memcmp+0x74>
   15ad8:	21000044 	addi	r4,r4,1
   15adc:	29400044 	addi	r5,r5,1
   15ae0:	31fff91e 	bne	r6,r7,15ac8 <__alt_data_end+0xffff5ac8>
   15ae4:	0005883a 	mov	r2,zero
   15ae8:	f800283a 	ret
   15aec:	20c00017 	ldw	r3,0(r4)
   15af0:	28800017 	ldw	r2,0(r5)
   15af4:	18bfee1e 	bne	r3,r2,15ab0 <__alt_data_end+0xffff5ab0>
   15af8:	31bfff04 	addi	r6,r6,-4
   15afc:	21000104 	addi	r4,r4,4
   15b00:	29400104 	addi	r5,r5,4
   15b04:	39bff936 	bltu	r7,r6,15aec <__alt_data_end+0xffff5aec>
   15b08:	303fe91e 	bne	r6,zero,15ab0 <__alt_data_end+0xffff5ab0>
   15b0c:	003ff506 	br	15ae4 <__alt_data_end+0xffff5ae4>
   15b10:	10c5c83a 	sub	r2,r2,r3
   15b14:	f800283a 	ret

00015b18 <__register_exitproc>:
   15b18:	defffa04 	addi	sp,sp,-24
   15b1c:	dc000315 	stw	r16,12(sp)
   15b20:	04000074 	movhi	r16,1
   15b24:	841e2b04 	addi	r16,r16,30892
   15b28:	80c00017 	ldw	r3,0(r16)
   15b2c:	dc400415 	stw	r17,16(sp)
   15b30:	dfc00515 	stw	ra,20(sp)
   15b34:	18805217 	ldw	r2,328(r3)
   15b38:	2023883a 	mov	r17,r4
   15b3c:	10003726 	beq	r2,zero,15c1c <__register_exitproc+0x104>
   15b40:	10c00117 	ldw	r3,4(r2)
   15b44:	010007c4 	movi	r4,31
   15b48:	20c00e16 	blt	r4,r3,15b84 <__register_exitproc+0x6c>
   15b4c:	1a000044 	addi	r8,r3,1
   15b50:	8800221e 	bne	r17,zero,15bdc <__register_exitproc+0xc4>
   15b54:	18c00084 	addi	r3,r3,2
   15b58:	18c7883a 	add	r3,r3,r3
   15b5c:	18c7883a 	add	r3,r3,r3
   15b60:	12000115 	stw	r8,4(r2)
   15b64:	10c7883a 	add	r3,r2,r3
   15b68:	19400015 	stw	r5,0(r3)
   15b6c:	0005883a 	mov	r2,zero
   15b70:	dfc00517 	ldw	ra,20(sp)
   15b74:	dc400417 	ldw	r17,16(sp)
   15b78:	dc000317 	ldw	r16,12(sp)
   15b7c:	dec00604 	addi	sp,sp,24
   15b80:	f800283a 	ret
   15b84:	00800034 	movhi	r2,0
   15b88:	10800004 	addi	r2,r2,0
   15b8c:	10002626 	beq	r2,zero,15c28 <__register_exitproc+0x110>
   15b90:	01006404 	movi	r4,400
   15b94:	d9400015 	stw	r5,0(sp)
   15b98:	d9800115 	stw	r6,4(sp)
   15b9c:	d9c00215 	stw	r7,8(sp)
   15ba0:	00000000 	call	0 <__alt_mem_onchip_ram-0x10000>
   15ba4:	d9400017 	ldw	r5,0(sp)
   15ba8:	d9800117 	ldw	r6,4(sp)
   15bac:	d9c00217 	ldw	r7,8(sp)
   15bb0:	10001d26 	beq	r2,zero,15c28 <__register_exitproc+0x110>
   15bb4:	81000017 	ldw	r4,0(r16)
   15bb8:	10000115 	stw	zero,4(r2)
   15bbc:	02000044 	movi	r8,1
   15bc0:	22405217 	ldw	r9,328(r4)
   15bc4:	0007883a 	mov	r3,zero
   15bc8:	12400015 	stw	r9,0(r2)
   15bcc:	20805215 	stw	r2,328(r4)
   15bd0:	10006215 	stw	zero,392(r2)
   15bd4:	10006315 	stw	zero,396(r2)
   15bd8:	883fde26 	beq	r17,zero,15b54 <__alt_data_end+0xffff5b54>
   15bdc:	18c9883a 	add	r4,r3,r3
   15be0:	2109883a 	add	r4,r4,r4
   15be4:	1109883a 	add	r4,r2,r4
   15be8:	21802215 	stw	r6,136(r4)
   15bec:	01800044 	movi	r6,1
   15bf0:	12406217 	ldw	r9,392(r2)
   15bf4:	30cc983a 	sll	r6,r6,r3
   15bf8:	4992b03a 	or	r9,r9,r6
   15bfc:	12406215 	stw	r9,392(r2)
   15c00:	21c04215 	stw	r7,264(r4)
   15c04:	01000084 	movi	r4,2
   15c08:	893fd21e 	bne	r17,r4,15b54 <__alt_data_end+0xffff5b54>
   15c0c:	11006317 	ldw	r4,396(r2)
   15c10:	218cb03a 	or	r6,r4,r6
   15c14:	11806315 	stw	r6,396(r2)
   15c18:	003fce06 	br	15b54 <__alt_data_end+0xffff5b54>
   15c1c:	18805304 	addi	r2,r3,332
   15c20:	18805215 	stw	r2,328(r3)
   15c24:	003fc606 	br	15b40 <__alt_data_end+0xffff5b40>
   15c28:	00bfffc4 	movi	r2,-1
   15c2c:	003fd006 	br	15b70 <__alt_data_end+0xffff5b70>

00015c30 <__call_exitprocs>:
   15c30:	defff504 	addi	sp,sp,-44
   15c34:	df000915 	stw	fp,36(sp)
   15c38:	dd400615 	stw	r21,24(sp)
   15c3c:	dc800315 	stw	r18,12(sp)
   15c40:	dfc00a15 	stw	ra,40(sp)
   15c44:	ddc00815 	stw	r23,32(sp)
   15c48:	dd800715 	stw	r22,28(sp)
   15c4c:	dd000515 	stw	r20,20(sp)
   15c50:	dcc00415 	stw	r19,16(sp)
   15c54:	dc400215 	stw	r17,8(sp)
   15c58:	dc000115 	stw	r16,4(sp)
   15c5c:	d9000015 	stw	r4,0(sp)
   15c60:	2839883a 	mov	fp,r5
   15c64:	04800044 	movi	r18,1
   15c68:	057fffc4 	movi	r21,-1
   15c6c:	00800074 	movhi	r2,1
   15c70:	109e2b04 	addi	r2,r2,30892
   15c74:	12000017 	ldw	r8,0(r2)
   15c78:	45005217 	ldw	r20,328(r8)
   15c7c:	44c05204 	addi	r19,r8,328
   15c80:	a0001c26 	beq	r20,zero,15cf4 <__call_exitprocs+0xc4>
   15c84:	a0800117 	ldw	r2,4(r20)
   15c88:	15ffffc4 	addi	r23,r2,-1
   15c8c:	b8000d16 	blt	r23,zero,15cc4 <__call_exitprocs+0x94>
   15c90:	14000044 	addi	r16,r2,1
   15c94:	8421883a 	add	r16,r16,r16
   15c98:	8421883a 	add	r16,r16,r16
   15c9c:	84402004 	addi	r17,r16,128
   15ca0:	a463883a 	add	r17,r20,r17
   15ca4:	a421883a 	add	r16,r20,r16
   15ca8:	e0001e26 	beq	fp,zero,15d24 <__call_exitprocs+0xf4>
   15cac:	80804017 	ldw	r2,256(r16)
   15cb0:	e0801c26 	beq	fp,r2,15d24 <__call_exitprocs+0xf4>
   15cb4:	bdffffc4 	addi	r23,r23,-1
   15cb8:	843fff04 	addi	r16,r16,-4
   15cbc:	8c7fff04 	addi	r17,r17,-4
   15cc0:	bd7ff91e 	bne	r23,r21,15ca8 <__alt_data_end+0xffff5ca8>
   15cc4:	00800034 	movhi	r2,0
   15cc8:	10800004 	addi	r2,r2,0
   15ccc:	10000926 	beq	r2,zero,15cf4 <__call_exitprocs+0xc4>
   15cd0:	a0800117 	ldw	r2,4(r20)
   15cd4:	1000301e 	bne	r2,zero,15d98 <__call_exitprocs+0x168>
   15cd8:	a0800017 	ldw	r2,0(r20)
   15cdc:	10003226 	beq	r2,zero,15da8 <__call_exitprocs+0x178>
   15ce0:	a009883a 	mov	r4,r20
   15ce4:	98800015 	stw	r2,0(r19)
   15ce8:	00000000 	call	0 <__alt_mem_onchip_ram-0x10000>
   15cec:	9d000017 	ldw	r20,0(r19)
   15cf0:	a03fe41e 	bne	r20,zero,15c84 <__alt_data_end+0xffff5c84>
   15cf4:	dfc00a17 	ldw	ra,40(sp)
   15cf8:	df000917 	ldw	fp,36(sp)
   15cfc:	ddc00817 	ldw	r23,32(sp)
   15d00:	dd800717 	ldw	r22,28(sp)
   15d04:	dd400617 	ldw	r21,24(sp)
   15d08:	dd000517 	ldw	r20,20(sp)
   15d0c:	dcc00417 	ldw	r19,16(sp)
   15d10:	dc800317 	ldw	r18,12(sp)
   15d14:	dc400217 	ldw	r17,8(sp)
   15d18:	dc000117 	ldw	r16,4(sp)
   15d1c:	dec00b04 	addi	sp,sp,44
   15d20:	f800283a 	ret
   15d24:	a0800117 	ldw	r2,4(r20)
   15d28:	80c00017 	ldw	r3,0(r16)
   15d2c:	10bfffc4 	addi	r2,r2,-1
   15d30:	15c01426 	beq	r2,r23,15d84 <__call_exitprocs+0x154>
   15d34:	80000015 	stw	zero,0(r16)
   15d38:	183fde26 	beq	r3,zero,15cb4 <__alt_data_end+0xffff5cb4>
   15d3c:	95c8983a 	sll	r4,r18,r23
   15d40:	a0806217 	ldw	r2,392(r20)
   15d44:	a5800117 	ldw	r22,4(r20)
   15d48:	2084703a 	and	r2,r4,r2
   15d4c:	10000b26 	beq	r2,zero,15d7c <__call_exitprocs+0x14c>
   15d50:	a0806317 	ldw	r2,396(r20)
   15d54:	2088703a 	and	r4,r4,r2
   15d58:	20000c1e 	bne	r4,zero,15d8c <__call_exitprocs+0x15c>
   15d5c:	89400017 	ldw	r5,0(r17)
   15d60:	d9000017 	ldw	r4,0(sp)
   15d64:	183ee83a 	callr	r3
   15d68:	a0800117 	ldw	r2,4(r20)
   15d6c:	15bfbf1e 	bne	r2,r22,15c6c <__alt_data_end+0xffff5c6c>
   15d70:	98800017 	ldw	r2,0(r19)
   15d74:	153fcf26 	beq	r2,r20,15cb4 <__alt_data_end+0xffff5cb4>
   15d78:	003fbc06 	br	15c6c <__alt_data_end+0xffff5c6c>
   15d7c:	183ee83a 	callr	r3
   15d80:	003ff906 	br	15d68 <__alt_data_end+0xffff5d68>
   15d84:	a5c00115 	stw	r23,4(r20)
   15d88:	003feb06 	br	15d38 <__alt_data_end+0xffff5d38>
   15d8c:	89000017 	ldw	r4,0(r17)
   15d90:	183ee83a 	callr	r3
   15d94:	003ff406 	br	15d68 <__alt_data_end+0xffff5d68>
   15d98:	a0800017 	ldw	r2,0(r20)
   15d9c:	a027883a 	mov	r19,r20
   15da0:	1029883a 	mov	r20,r2
   15da4:	003fb606 	br	15c80 <__alt_data_end+0xffff5c80>
   15da8:	0005883a 	mov	r2,zero
   15dac:	003ffb06 	br	15d9c <__alt_data_end+0xffff5d9c>

00015db0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   15db0:	defffd04 	addi	sp,sp,-12
   15db4:	df000215 	stw	fp,8(sp)
   15db8:	df000204 	addi	fp,sp,8
   15dbc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   15dc0:	0001883a 	nop
   15dc4:	e0bfff17 	ldw	r2,-4(fp)
   15dc8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   15dcc:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   15dd0:	10000226 	beq	r2,zero,15ddc <_exit+0x2c>
    ALT_SIM_FAIL();
   15dd4:	002af070 	cmpltui	zero,zero,43969
   15dd8:	00000106 	br	15de0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   15ddc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   15de0:	003fff06 	br	15de0 <__alt_data_end+0xffff5de0>
